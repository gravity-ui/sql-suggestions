/* eslint no-useless-escape: "off" */
/* eslint filenames/match-regex: "off" */
/* eslint no-irregular-whitespace: "off" */
import {parseClickHouseQueryWithoutCursor} from '../../index';

test('[INSERT] should pass without errors: 1', () => {
    const query = `INSERT INTO t VALUES  ('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRTUVWXYZ'),
('\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0'),
('IIIIIIIIII\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2', () => {
    const query = `insert into test values (map('Hello', '01/01/2020'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3', () => {
    const query = `INSERT INTO checks SELECT 'asan', if(number % 2, 'success', 'fail'), toDateTime('2024-06-07 00:00:01') + INTERVAL number HOUR, '02221_parallel_replicas_bug', 'FAIL' from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4', () => {
    const query = `INSERT INTO checks SELECT 'asan', if(number % 2, 'success', 'fail'), toDateTime('2024-06-06 00:00:02') + INTERVAL number HOUR, '02221_parallel_replicas_bug', 'FAIL' from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5', () => {
    const query = `INSERT INTO checks SELECT 'asan', if(number % 2, 'success', 'fail'), toDateTime('2024-06-05 00:00:03') + INTERVAL number HOUR, '02221_parallel_replicas_bug', 'FAIL' from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6', () => {
    const query = `INSERT INTO ANIMAL (ANIMAL) VALUES ('CAT'), ('FISH'), ('DOG'), ('HORSE'), ('BIRD');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 7', () => {
    const query = `INSERT INTO test_table VALUES (0, 'Value_0'), (1, 'Value_1'), (2, 'Value_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 8', () => {
    const query = `INSERT INTO test_table_for_in VALUES (0), (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 9', () => {
    const query = `INSERT INTO t1 (c0, c1) VALUES ([18446717433683171873], 13623876564923702671), ([-4], 6111684076076982207);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 10', () => {
    const query = `INSERT INTO rawtable VALUES ({'key1': 'value1', 'key2': 'value2'});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 11', () => {
    const query = `INSERT INTO uk_mortgage_rates VALUES ('2004-02-29', 5.02, 4.9, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 12', () => {
    const query = `INSERT INTO uk_mortgage_rates VALUES ('2004-03-31', 5.11, 4.91, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 13', () => {
    const query = `INSERT INTO t VALUES ('a'), ('a'), ('a'), ('a'),  ('b'), ('a'), ('a'), ('a'), ('a'), ('a'), ('a'), ('a'), ('a'), ('a'), ('a'), ('a'), ('c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 14', () => {
    const query = `INSERT INTO a SELECT toString(number) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 15', () => {
    const query = `INSERT INTO test_new_json_type format JSONEachRow {"id":1,"data":{"foo1":"bar"},"version":1}
{"id":2,"data":{"foo2":"bar"},"version":1}
{"id":3,"data":{"foo2":"bar"},"version":1}
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 16', () => {
    const query = `INSERT INTO t_async_insert_alter VALUES (42, 24);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 17', () => {
    const query = `INSERT INTO t_async_insert_alter VALUES (43, 34, 55);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 18', () => {
    const query = `INSERT INTO t_async_insert_alter VALUES ('100', '200', '300');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 19', () => {
    const query = `INSERT INTO t_local_1 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 20', () => {
    const query = `INSERT INTO t_local_2 VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 21', () => {
    const query = `INSERT INTO test_new_json_type SELECT id, '{"foo2":"baz"}' AS _data, version+1 AS _version FROM test_new_json_type where id=2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 22', () => {
    const query = `INSERT INTO table1 SELECT number FROM numbers(1, 300);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 23', () => {
    const query = `INSERT INTO test_left SELECT number % 10000, number % 10000, number % 10000 FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 24', () => {
    const query = `INSERT INTO test_right SELECT number % 10 , number % 10, number % 10 FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 25', () => {
    const query = `INSERT INTO tab VALUES('0,0', '0,1')('2,2','2,3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 26', () => {
    const query = `INSERT INTO t_async_insert_params VALUES ({p1:UInt64}); -- { serverError  BAD_QUERY_PARAMETER } INSERT INTO t_async_insert_params VALUES ({p1:String}); -- { serverError  TYPE_MISMATCH }
ALTER TABLE t_async_insert_params MODIFY COLUMN id String;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 27', () => {
    const query = `INSERT INTO t_async_insert_params VALUES ({p1:UInt64}); -- { serverError  BAD_QUERY_PARAMETER } INSERT INTO t_async_insert_params VALUES ({p1:String});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 28', () => {
    const query = `INSERT INTO table_name SELECT rand() from system.numbers limit 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 29', () => {
    const query = `insert into test select toJSONString(map('a', 'str_' || number)) from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 30', () => {
    const query = `insert into test_json_dynamic_aggregate_functions select toJSONString(map('a' || number % 13, multiIf(number % 5 == 0, NULL, number % 5 == 1, number::UInt32, number % 5 == 2, 'str_' || number, number % 5 == 3, range(number % 5), toBool(number % 2)))) from numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 31', () => {
    const query = `insert into test select materialize('{"a" : 42}')::JSON(max_dynamic_paths=8) from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 32', () => {
    const query = `insert into test select materialize('{"a1" : 42, "a2" : 42, "a3" : 42, "a4" : 42, "a5" : 42, "a6" : 42, "a7" : 42, "a8" : 42, "a" : [{"c" : 42}]}')::JSON(max_dynamic_paths=8) from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 33', () => {
    const query = `insert into test select materialize('{"a1" : 42, "a2" : 42, "a3" : 42, "a4" : 42, "a5" : 42, "a6" : 42, "a7" : 42, "a8" : 42, "a" : [{"d" : 42}]}')::JSON(max_dynamic_paths=8) from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 34', () => {
    const query = `insert into test select '{"b" : 42}' from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 35', () => {
    const query = `insert into test select '{"a" : 42, "b" : [1, 2, 3]}' from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 36', () => {
    const query = `insert into dist settings prefer_localhost_replica=0 values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 37', () => {
    const query = `insert into rocksdb values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 38', () => {
    const query = `insert into rep1 values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 39', () => {
    const query = `INSERT INTO test__fuzz_22 SELECT number, toString(number) FROM numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 40', () => {
    const query = `insert into test select materialize('{"a" : [{"b" : 42}]}')::JSON(max_dynamic_paths=8) from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 41', () => {
    const query = `insert into test select materialize('{"aa1" : 42, "aa2" : 42, "aa3" : 42, "aa4" : 42, "aa5" : 42, "aa6" : 42, "aa7" : 42, "aa8" : 42, "a" : [{"c" : 42}]}') from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 42', () => {
    const query = `insert into t1 Select number, number from numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 43', () => {
    const query = `insert into t2 Select number, number from numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 44', () => {
    const query = `INSERT INTO test SELECT number, toString(number) FROM numbers(10_000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 45', () => {
    const query = `INSERT INTO test__fuzz_22 SELECT number, toString(number) FROM numbers(10_000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 46', () => {
    const query = `INSERT INTO test_00808 VALUES('2000-01-01', 1, 'test string 1', 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 47', () => {
    const query = `INSERT INTO test_00808 VALUES('2000-01-01', 2, 'test string 2', 2, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 48', () => {
    const query = `insert into test select multiIf(number < 1000, '{}'::JSON, number < 3000, '{"a" : 42, "b" : "Hello"}'::JSON, '{"c" : [1, 2, 3], "d" : "2020-01-01"}'::JSON) from numbers(20000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 49', () => {
    const query = `insert into test select multiIf(number < 1000, '{"a" : 42, "b" : "Hello"}'::JSON, number < 3000, '{"c" : [1, 2, 3], "d" : "2020-01-01"}'::JSON, '{"e" : 43, "f" : ["s1", "s2", "s3"]}'::JSON) from numbers(20000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 50', () => {
    const query = `insert into test select multiIf(number < 1000, '{}'::JSON(max_dynamic_paths=2), number < 3000, '{"a" : 42, "b" : "Hello"}'::JSON(max_dynamic_paths=2), '{"c" : [1, 2, 3], "d" : "2020-01-01"}'::JSON(max_dynamic_paths=2)) from numbers(20000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 51', () => {
    const query = `insert into test select multiIf(number < 1000, '{"a" : 42, "b" : "Hello"}'::JSON(max_dynamic_paths=2), number < 3000, '{"c" : [1, 2, 3], "d" : "2020-01-01"}'::JSON(max_dynamic_paths=2), '{"e" : 43, "f" : ["s1", "s2", "s3"]}'::JSON(max_dynamic_paths=2)) from numbers(20000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 52', () => {
    const query = `insert into test select multiIf(number < 1000, '{"a" : 42}'::JSON(max_dynamic_paths=2), number < 3000, '{"b" : "Hello", "c" : [1, 2, 3], "d" : "2020-01-01"}'::JSON(max_dynamic_paths=2), '{"e" : 43}'::JSON(max_dynamic_paths=2)) from numbers(20000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 53', () => {
    const query = `insert into test select multiIf(number < 1000, '{}'::JSON(max_dynamic_paths=8), number < 3000, materialize('{"a" : [{"b" : 42, "c" : [1, 2, 3]}]}')::JSON(max_dynamic_paths=8), materialize('{"a" : [{"d" : "2020-01-01", "e" : "Hello"}]}')::JSON(max_dynamic_paths=8)) from numbers(20000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 54', () => {
    const query = `insert into test select multiIf(number < 1000,  materialize('{"a" : [{"b" : 42, "c" : [1, 2, 3]}]}')::JSON(max_dynamic_paths=8), number < 3000, materialize('{"a" : [{"d" : "2020-01-01", "e" : "Hello"}]}')::JSON(max_dynamic_paths=8), materialize('{"a" : [{"f" : "2020-01-01 00:00:00", "g" : "Hello2"}]}')::JSON(max_dynamic_paths=8)) from numbers(20000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 55', () => {
    const query = `insert into test select multiIf(number < 1000,  materialize('{"a" : [{"b" : 42}]}')::JSON(max_dynamic_paths=8), number < 3000, materialize('{"a" : [{"d" : "2020-01-01", "e" : "Hello"}]}')::JSON(max_dynamic_paths=8), materialize('{"a" : [{"f" : "2020-01-01 00:00:00"}]}')::JSON(max_dynamic_paths=8)) from numbers(20000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 56', () => {
    const query = `INSERT INTO table1 SELECT uniqState(UserID) FROM table2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 57', () => {
    const query = `INSERT INTO table1 SELECT x FROM format(JSONEachRow, 'x AggregateFunction(uniq, UInt64)' AS T, '{"x":""}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 58', () => {
    const query = `INSERT INTO table1 FORMAT JSONEachRow {"address":""};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 59', () => {
    const query = `insert into shard_0.dt64_03222 values(1, toDateTime64('1970-01-01 00:00:00.000',3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 60', () => {
    const query = `insert into shard_0.dt64_03222 values(2, toDateTime64('1970-01-01 00:00:02.456',3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 61', () => {
    const query = `insert into shard_1.dt64_03222 values(3, toDateTime64('1970-01-01 00:00:04.811',3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 62', () => {
    const query = `insert into shard_1.dt64_03222 values(4, toDateTime64('1970-01-01 00:10:05',3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 63', () => {
    const query = `insert into shard_1.dt64_03222 values(5, toDateTime64(0,3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 64', () => {
    const query = `INSERT INTO t_merge_profile_events_1 SELECT number, number, number FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 65', () => {
    const query = `INSERT INTO t_merge_profile_events_2 SELECT number, number, number FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 66', () => {
    const query = `INSERT INTO t_merge_profile_events_3 SELECT number, number, number FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 67', () => {
    const query = `insert into report_metrics_v2 SELECT * FROM system.numbers LIMIT 50000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 68', () => {
    const query = `INSERT INTO t_primary_index_memory SELECT repeat('a', 10000) FROM numbers(150000) SETTINGS
max_block_size = 32,
max_memory_usage = '100M',
max_insert_block_size = 1024,
min_insert_block_size_rows = 1024;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 69', () => {
    const query = `INSERT INTO test_03217_merge_replica_1 SELECT number AS x FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 70', () => {
    const query = `INSERT INTO FUNCTION s3(s3_conn, filename='::03215_archive.csv') SELECT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 71', () => {
    const query = `INSERT INTO FUNCTION s3(s3_conn, filename='test.zip::03215_archive.csv') SETTINGS allow_archive_path_syntax=0 SELECT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 72', () => {
    const query = `INSERT INTO test_parquet SELECT number, toString(number) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 73', () => {
    const query = `INSERT INTO t (ord, shape, wkt_string) VALUES (1, [[(1, 1), (2, 2), (3, 3), (1, 1)]], 'MULTILINESTRING ((1 1, 2 2, 3 3, 1 1))');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 74', () => {
    const query = `INSERT INTO t (ord, shape, wkt_string) VALUES (2, [[(1, 1), (2, 2), (3, 3), (1, 1)], [(1, 0), (2, 0), (3, 0)]], 'MULTILINESTRING ((1 1, 2 2, 3 3, 1 1), (1 0, 2 0, 3 0))');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 75', () => {
    const query = `INSERT INTO t (ord, shape, wkt_string) VALUES (3, [[(1, 0), (2, 1), (3, 0), (4, 1), (5, 0), (6, 1), (7, 0), (8, 1), (9, 0), (10, 1)]], 'MULTILINESTRING ((1 0, 2 1, 3 0, 4 1, 5 0, 6 1, 7 0, 8 1, 9 0, 10 1))');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 76', () => {
    const query = `INSERT INTO t VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 77', () => {
    const query = `INSERT INTO test__fuzz_21 VALUES (1), (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 78', () => {
    const query = `insert into test select '{"a" : 42}';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 79', () => {
    const query = `insert into test select '{"a" : [1, 2, 3]}';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 80', () => {
    const query = `INSERT INTO a VALUES (NULL), ('1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 81', () => {
    const query = `INSERT INTO b VALUES (NULL), ('1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 82', () => {
    const query = `INSERT INTO testnull(b,c) SELECT toString(rand64()) AS b, toString(rand64()) AS c FROM numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 83', () => {
    const query = `INSERT INTO product_groups  VALUES	(1, 'Smartphone'),(2, 'Laptop'),(3, 'Tablet');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 84', () => {
    const query = `INSERT INTO products (product_id,product_name, group_id,price) VALUES (1, 'Microsoft Lumia', 1, 200), (2, 'HTC One', 1, 400), (3, 'Nexus', 1, 500), (4, 'iPhone', 1, 900),(5, 'HP Elite', 2, 1200),(6, 'Lenovo Thinkpad', 2, 700),(7, 'Sony VAIO', 2, 700),(8, 'Dell Vostro', 2, 800),(9, 'iPad', 3, 700),(10, 'Kindle Fire', 3, 150),(11, 'Samsung Galaxy Tab', 3, 200);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 85', () => {
    const query = `INSERT INTO product_groups  VALUES	(4, 'Unknow');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 86', () => {
    const query = `INSERT INTO products (product_id,product_name, group_id,price) VALUES (12, 'Others', 4, 200);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 87', () => {
    const query = `INSERT INTO t VALUES (-128::Int8), (-127::Int8), (-1::Int8), (0::Int8), (1::Int8), (126::Int8), (127::Int8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 88', () => {
    const query = `INSERT INTO t VALUES (-32768::Int16), (-32767::Int16), (-1::Int16), (0::Int16), (1::Int16), (32766::Int16), (32767::Int16);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 89', () => {
    const query = `INSERT INTO t VALUES (-2147483648::Int32), (-2147483647::Int32), (-1::Int32), (0::Int32), (1::Int32), (2147483646::Int32), (2147483647::Int32);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 90', () => {
    const query = `INSERT INTO t VALUES (-9223372036854775808::Int64), (-9223372036854775807::Int64), (-1::Int64), (0::Int64), (1::Int64), (9223372036854775806::Int64), (9223372036854775807::Int64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 91', () => {
    const query = `INSERT INTO t VALUES (-170141183460469231731687303715884105728::Int128), (-170141183460469231731687303715884105727::Int128), (-1::Int128), (0::Int128), (1::Int128), (170141183460469231731687303715884105726::Int128), (170141183460469231731687303715884105727::Int128);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 92', () => {
    const query = `INSERT INTO t VALUES (-57896044618658097711785492504343953926634992332820282019728792003956564819968::Int256), (-57896044618658097711785492504343953926634992332820282019728792003956564819967::Int256), (-1::Int256), (0::Int256), (1::Int256), (57896044618658097711785492504343953926634992332820282019728792003956564819966::Int256), (57896044618658097711785492504343953926634992332820282019728792003956564819967::Int256);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 93', () => {
    const query = `INSERT INTO t VALUES (0::UInt8), (1::UInt8), (254::UInt8), (255::UInt8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 94', () => {
    const query = `INSERT INTO t VALUES (0::UInt16), (1::UInt16), (65534::UInt16), (65535::UInt16);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 95', () => {
    const query = `INSERT INTO t VALUES (0::UInt32), (1::UInt32), (4294967294::UInt32), (4294967295::UInt32);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 96', () => {
    const query = `INSERT INTO t VALUES (0::UInt64), (1::UInt64), (18446744073709551614::UInt64), (18446744073709551615::UInt64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 97', () => {
    const query = `INSERT INTO t VALUES (0::UInt128), (1::UInt128), (340282366920938463463374607431768211454::UInt128), (340282366920938463463374607431768211455::UInt128);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 98', () => {
    const query = `INSERT INTO t VALUES (0::UInt256), (1::UInt256), (115792089237316195423570985008687907853269984665640564039457584007913129639934::UInt256), (115792089237316195423570985008687907853269984665640564039457584007913129639935::UInt256);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 99', () => {
    const query = `INSERT INTO t VALUES (1.17549435e-38::Float32), (3.40282347e+38::Float32), (-3.40282347e+38::Float32), (-1.17549435e-38::Float32), (1.4e-45::Float32), (-1.4e-45::Float32);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 100', () => {
    const query = `INSERT INTO t VALUES (inf::Float32), (-inf::Float32), (nan::Float32);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 101', () => {
    const query = `INSERT INTO t VALUES (inf::FLOAT(12)), (-inf::FLOAT(12)), (nan::FLOAT(12));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 102', () => {
    const query = `INSERT INTO t VALUES (inf::FLOAT(15,22)), (-inf::FLOAT(15,22)), (nan::FLOAT(15,22));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 103', () => {
    const query = `INSERT INTO t VALUES (1.17549435e-38::Float64), (3.40282347e+38::Float64), (-3.40282347e+38::Float64), (-1.17549435e-38::Float64), (1.4e-45::Float64), (-1.4e-45::Float64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 104', () => {
    const query = `INSERT INTO t VALUES (2.2250738585072014e-308::Float64), (1.7976931348623157e+308::Float64), (-1.7976931348623157e+308::Float64), (-2.2250738585072014e-308::Float64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 105', () => {
    const query = `INSERT INTO t VALUES (inf::Float64), (-inf::Float64), (nan::Float64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 106', () => {
    const query = `INSERT INTO t VALUES (inf::DOUBLE(12)), (-inf::DOUBLE(12)), (nan::DOUBLE(12));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 107', () => {
    const query = `INSERT INTO t VALUES (inf::DOUBLE(15,22)), (-inf::DOUBLE(15,22)), (nan::DOUBLE(15,22));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 108', () => {
    const query = `INSERT INTO t VALUES ('string'::String), ('1'::FixedString(1)), ('1'::FixedString(2)), ('1'::FixedString(10)); --(''::String), INSERT INTO t VALUES ('1'::Bool), (0::Bool);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 109', () => {
    const query = `INSERT INTO t VALUES ('dededdb6-7835-4ce4-8d11-b5de6f2820e9'::UUID);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 110', () => {
    const query = `INSERT INTO t VALUES ('00000000-0000-0000-0000-000000000000'::UUID);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 111', () => {
    const query = `INSERT INTO t VALUES ('1'::LowCardinality(String)), ('1'::LowCardinality(String)), (0::LowCardinality(UInt16));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 112', () => {
    const query = `INSERT INTO t VALUES ([]::Array(Dynamic)), ([[]]::Array(Array(Dynamic))), ([[[]]]::Array(Array(Array(Dynamic))));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 113', () => {
    const query = `INSERT INTO t VALUES (()::Tuple(Dynamic)), ((())::Tuple(Tuple(Dynamic))), (((()))::Tuple(Tuple(Tuple(Dynamic))));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 114', () => {
    const query = `INSERT INTO t VALUES (map(11::Dynamic, 'v1'::Dynamic, '22'::Dynamic, 1::Dynamic));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 115', () => {
    const query = `INSERT INTO t VALUES ([1,2]::SimpleAggregateFunction(anyLast, Array(Int16)));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 116', () => {
    const query = `INSERT INTO t VALUES (toIPv4('192.168.0.1')), (toIPv6('::1'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 117', () => {
    const query = `INSERT INTO t VALUES ((1.23, 4.56)::Point), (([(1.23, 4.56)::Point, (2.34, 5.67)::Point])::Ring);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 118', () => {
    const query = `INSERT INTO t VALUES ([[[(0, 0), (10, 0), (10, 10), (0, 10)]], [[(20, 20), (50, 20), (50, 50), (20, 50)],[(30, 30), (50, 50), (50, 30)]]]::MultiPolygon);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 119', () => {
    const query = `INSERT INTO t VALUES (interval '1' day), (interval '2' month), (interval '3' year);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 120', () => {
    const query = `INSERT INTO t VALUES ([(1, 'aa'), (2, 'bb')]::Nested(x UInt32, y String));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 121', () => {
    const query = `INSERT INTO t VALUES ([(1, (2, ['aa', 'bb']), [(3, 'cc'), (4, 'dd')]), (5, (6, ['ee', 'ff']), [(7, 'gg'), (8, 'hh')])]::Nested(x UInt32, y Tuple(y1 UInt32, y2 Array(String)), z Nested(z1 UInt32, z2 String)));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 122', () => {
    const query = `INSERT INTO t0(c0, c1, c2) VALUES (826636805,0, ''), (0, 150808457, '');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 123', () => {
    const query = `INSERT INTO source SELECT ['fail', 'success'][number % 2] as Name, number AS Value FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 124', () => {
    const query = `INSERT INTO test_agg_variant SELECT
Name,
t AS Value
FROM
(
SELECT
Name,
arrayJoin([
uniqExactState(Value)::Variant(AggregateFunction(uniqExact, Int64), AggregateFunction(avg, Int64)), 
avgState(Value)::Variant(AggregateFunction(uniqExact, Int64), AggregateFunction(avg, Int64))
]) AS t
FROM source
GROUP BY Name 
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 125', () => {
    const query = `insert into test select multiIf(number < 1000, NULL::Dynamic(max_types=1), number < 3000, range(number % 5)::Dynamic(max_types=1), number::Dynamic(max_types=1)) from numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 126', () => {
    const query = `insert into test select multiIf(number < 1000, 'Str'::Dynamic(max_types=1), number < 3000, range(number % 5)::Dynamic(max_types=1), number::Dynamic(max_types=1)) from numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 127', () => {
    const query = `INSERT INTO user_country (user_id, country) VALUES (1, 'US');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 128', () => {
    const query = `INSERT INTO user_transactions (user_id, transaction_id) VALUES (1, 'tx1'), (1, 'tx2'), (1, 'tx3'), (2, 'tx1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 129', () => {
    const query = `insert into date_table_pv values(1, today());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 130', () => {
    const query = `insert into date_table_pv values(2, yesterday());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 131', () => {
    const query = `insert into date_table_pv values(3, toDate('1974-04-07'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 132', () => {
    const query = `insert into date32_table_pv values(1, today());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 133', () => {
    const query = `insert into date32_table_pv values(2, yesterday());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 134', () => {
    const query = `insert into date32_table_pv values(3, toDate32('2199-12-31'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 135', () => {
    const query = `insert into date32_table_pv values(4, toDate32('1950-12-25'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 136', () => {
    const query = `insert into date32_table_pv values(5, toDate32('1900-01-01'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 137', () => {
    const query = `insert into uuid_table_pv values(1, generateUUIDv4());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 138', () => {
    const query = `insert into uuid_table_pv values(2, generateUUIDv7());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 139', () => {
    const query = `insert into uuid_table_pv values(3, toUUID('11111111-2222-3333-4444-555555555555'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 140', () => {
    const query = `insert into uuid_table_pv select 4, serverUUID();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 141', () => {
    const query = `insert into ipv4_table_pv values (1, '116.106.34.242');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 142', () => {
    const query = `insert into ipv4_table_pv values (2, '116.106.34.243');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 143', () => {
    const query = `insert into ipv4_table_pv values (3, '116.106.34.244');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 144', () => {
    const query = `INSERT INTO order_by_all VALUES ('B', 3, 10), ('C', NULL, 40), ('D', 1, 20), ('A', 2, 30);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 145', () => {
    const query = `INSERT INTO t_03209 VALUES ('33', '44.4', '35');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 146', () => {
    const query = `INSERT INTO tab VALUES (1, 1, 1, 'a'), (2, 2, 2, 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 147', () => {
    const query = `INSERT INTO mem VALUES (1, 'A'), (2, 'B'), (3, 'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 148', () => {
    const query = `INSERT INTO mem2 VALUES (1, 'A'), (2, 'B'), (3, 'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 149', () => {
    const query = `INSERT INTO mem3 VALUES (1, 'A'), (2, 'B'), (3, 'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 150', () => {
    const query = `INSERT INTO mem4 VALUES (1, 1, 'A'), (2, 2, 'B'), (3, 3, 'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 151', () => {
    const query = `INSERT INTO grouparray Select groupArrayIntersectState([2, 4, 6, 8, 10]::Array(UInt8));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 152', () => {
    const query = `INSERT INTO grouparray Select groupArrayIntersectState([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]::Array(UInt8));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 153', () => {
    const query = `INSERT INTO grouparray Select groupArrayIntersectState([2, 6, 10]::Array(UInt8));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 154', () => {
    const query = `INSERT INTO grouparray Select groupArrayIntersectState([10]::Array(UInt8));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 155', () => {
    const query = `INSERT INTO grouparray Select groupArrayIntersectState([]::Array(UInt8));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 156', () => {
    const query = `INSERT INTO grouparray_string Select groupArrayIntersectState([tuple(['2', '4', '6', '8', '10'])]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 157', () => {
    const query = `INSERT INTO grouparray_string Select groupArrayIntersectState([tuple(['2', '4', '6', '8', '10']), tuple(['2', '4', '6', '8', '10'])]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 158', () => {
    const query = `INSERT INTO grouparray_string Select groupArrayIntersectState([tuple(['2', '4', '6', '8', '10']), tuple(['2', '4', '6', '8', '10', '14'])]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 159', () => {
    const query = `INSERT INTO grouparray_string Select groupArrayIntersectState([tuple(['2', '4', '6', '8', '10', '20']), tuple(['2', '4', '6', '8', '10', '14'])]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 160', () => {
    const query = `INSERT INTO grouparray_string Select groupArrayIntersectState([]::Array(Tuple(Array(String))));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 161', () => {
    const query = `INSERT INTO realtimedrep FORMAT Values (100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 162', () => {
    const query = `INSERT INTO realtimebuff__fuzz_19 FORMAT Values (101);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 163', () => {
    const query = `INSERT INTO realtimebuff__fuzz_20 FORMAT Values (101);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 164', () => {
    const query = `insert into test select number, '{}' from numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 165', () => {
    const query = `insert into test select number, toJSONString(map('a.b', arrayMap(x -> map('b.c.d_' || toString(x), number::UInt32, 'c.d.e', range((number + x) % 5 + 1)), range(number % 5 + 1)))) from numbers(10000, 10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 166', () => {
    const query = `insert into test select number, toJSONString(map('a.r', arrayMap(x -> map('b.c.d_' || toString(x), number::UInt32, 'c.d.e', range((number + x) % 5 + 1)), range(number % 5 + 1)))) from numbers(20000, 10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 167', () => {
    const query = `insert into test select number, toJSONString(map('a.a1', number, 'a.a2', number, 'a.a3', number, 'a.a4', number, 'a.a5', number, 'a.a6', number, 'a.a7', number, 'a.a8', number, 'a.r', arrayMap(x -> map('b.c.d_' || toString(x), number::UInt32, 'c.d.e', range((number + x) % 5 + 1)), range(number % 5 + 1)))) from numbers(30000, 10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 168', () => {
    const query = `insert into test select number, '{}' from numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 169', () => {
    const query = `insert into test select number, toJSONString(map('a.b.c', number)) from numbers(100000, 100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 170', () => {
    const query = `insert into test select number, toJSONString(map('a.b.d', number::UInt32, 'a.b.e', 'str_' || toString(number))) from numbers(200000, 100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 171', () => {
    const query = `insert into test select number, toJSONString(map('b.b.d', number::UInt32, 'b.b.e', 'str_' || toString(number))) from numbers(300000, 100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 172', () => {
    const query = `insert into test select number, toJSONString(map('a.b.c', number, 'a.b.d', number::UInt32, 'a.b.e', 'str_' || toString(number))) from numbers(400000, 100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 173', () => {
    const query = `insert into test select number, toJSONString(map('a.b.c', number, 'a.b.d', number::UInt32, 'a.b.e', 'str_' || toString(number), 'b.b._' || toString(number % 5), number::UInt32)) from numbers(500000, 100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 174', () => {
    const query = `insert into test select number, toJSONString(map('a.b.c', number, 'a.b.d', range(number % + 1)::Array(UInt32), 'a.b.e', 'str_' || toString(number), 'd.a', number::UInt32, 'd.c', toDate(number))) from numbers(600000, 100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 175', () => {
    const query = `insert into test select number, toJSONString(map('a.b.c', number, 'a.b.d', toDateTime(number), 'a.b.e', 'str_' || toString(number), 'd.a', range(number % 5 + 1)::Array(UInt32), 'd.b', number::UInt32)) from numbers(700000, 100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 176', () => {
    const query = `insert into test select number, '{}' from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 177', () => {
    const query = `insert into test select number, toJSONString(map('a.b.c', number)) from numbers(5, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 178', () => {
    const query = `insert into test select number, toJSONString(map('a.b.d', number::UInt32, 'a.b.e', 'str_' || toString(number))) from numbers(10, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 179', () => {
    const query = `insert into test select number, toJSONString(map('b.b.d', number::UInt32, 'b.b.e', 'str_' || toString(number))) from numbers(15, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 180', () => {
    const query = `insert into test select number, toJSONString(map('a.b.c', number, 'a.b.d', number::UInt32, 'a.b.e', 'str_' || toString(number))) from numbers(20, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 181', () => {
    const query = `insert into test select number, toJSONString(map('a.b.c', number, 'a.b.d', number::UInt32, 'a.b.e', 'str_' || toString(number), 'b.b._' || toString(number), number::UInt32)) from numbers(25, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 182', () => {
    const query = `insert into test select number, toJSONString(map('a.b.c', number, 'a.b.d', range(number % + 1)::Array(UInt32), 'a.b.e', 'str_' || toString(number), 'd.a', number::UInt32, 'd.c', toDate(number))) from numbers(30, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 183', () => {
    const query = `insert into test select number, toJSONString(map('a.b.c', number, 'a.b.d', toDateTime(number), 'a.b.e', 'str_' || toString(number), 'd.a', range(number % 5 + 1)::Array(UInt32), 'd.b', number::UInt32)) from numbers(35, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 184', () => {
    const query = `INSERT INTO tp SELECT number%3, 1 FROM numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 185', () => {
    const query = `insert into t values (1, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 186', () => {
    const query = `insert into t values (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 187', () => {
    const query = `insert into t values (1, 0)(1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 188', () => {
    const query = `insert into t values(439499072,true,0),(1393290072,true,0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 189', () => {
    const query = `insert into t values(-1317193174,false,0),(1929066636,false,0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 190', () => {
    const query = `insert into t values(-2,false,0),(1962246186,true,0),(2054878592,false,0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 191', () => {
    const query = `insert into t values(-1893563136,true,41.55);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 192', () => {
    const query = `insert into t values(-1338380855,true,-0.7),(-991301833,true,0),(-755809149,false,43.18),(-41,true,0),(3,false,0),(255,false,0),(255,false,0),(189195893,false,0),(195550885,false,9223372036854776000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 193', () => {
    const query = `INSERT INTO dict_03204 SELECT number, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 194', () => {
    const query = `INSERT INTO foo VALUES ('2020-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 195', () => {
    const query = `INSERT INTO foo VALUES ('2020-01-02');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 196', () => {
    const query = `INSERT INTO t_missed_subcolumns SELECT * FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 197', () => {
    const query = `INSERT INTO t_missed_subcolumns SELECT number, if(number % 2, NULL, number) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 198', () => {
    const query = `INSERT INTO t_missed_subcolumns VALUES (1, ['aaa', NULL]) (2, ['ccc']) (3, [NULL]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 199', () => {
    const query = `INSERT INTO t_missed_subcolumns VALUES (4, [NULL, 'bbb'], ['ddd', NULL]), (5, [NULL], [NULL]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 200', () => {
    const query = `INSERT INTO t_missed_subcolumns VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 201', () => {
    const query = `INSERT INTO t_missed_subcolumns VALUES (2, ('aaa', 'bbb'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 202', () => {
    const query = `INSERT INTO t_missed_subcolumns VALUES (3, ('ccc', 'ddd'), [4, 5, 6]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 203', () => {
    const query = `INSERT INTO t_03203 VALUES (1, 1), (2, 2), (3, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 204', () => {
    const query = `INSERT INTO t SELECT 0, number FROM numbers(10) SETTINGS max_block_size = 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 205', () => {
    const query = `INSERT INTO t_subcolumns_join SELECT number as number FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 206', () => {
    const query = `insert into table test select * from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 207', () => {
    const query = `INSERT INTO test VALUES (10, [0,1,2,3], 'xx'), (20, [3,4,5,6], 'xxx'), (90, [3,4,5,6,9], 'xxxx');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 208', () => {
    const query = `INSERT INTO seq VALUES (0), (6), (7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 209', () => {
    const query = `INSERT INTO t1 SELECT repeat('t', 15) s1,
'test' s2,
'test' s3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 210', () => {
    const query = `INSERT INTO t1 SELECT substring(s1, 1, 10),
s2,
s3
FROM generateRandom('s1 String, s2 String, s3 String')
LIMIT 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 211', () => {
    const query = `INSERT INTO t2 SELECT * FROM generateRandom()
LIMIT 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 212', () => {
    const query = `INSERT INTO 03199_fixedstring_array VALUES (['a', 'b']), (['c', 'd']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 213', () => {
    const query = `INSERT INTO labels_unordered (idx,score,label) VALUES (1,0.1,0), (2,0.35,1), (3,0.4,0), (4,0.8,1), (5,0.8,0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 214', () => {
    const query = `INSERT INTO labels_ordered (idx,score,label) VALUES (1,0.1,0), (2,0.35,1), (3,0.4,0), (4,0.8,0), (5,0.8,1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 215', () => {
    const query = `INSERT INTO FUNCTION file('data_03198_table_function_directory_path.csv', 'csv') SELECT '1.csv' SETTINGS engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 216', () => {
    const query = `INSERT INTO FUNCTION file('data_03198_table_function_directory_path/1.csv', 'csv') SELECT '1.csv' SETTINGS engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 217', () => {
    const query = `INSERT INTO FUNCTION file('data_03198_table_function_directory_path/2.csv', 'csv') SELECT '2.csv' SETTINGS engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 218', () => {
    const query = `INSERT INTO FUNCTION file('data_03198_table_function_directory_path/dir/3.csv', 'csv') SELECT '3.csv' SETTINGS engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 219', () => {
    const query = `INSERT INTO FUNCTION file('data_03198_table_function_directory_path/dir1/dir/4.csv', 'csv') SELECT '4.csv' SETTINGS engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 220', () => {
    const query = `INSERT INTO FUNCTION file('data_03198_table_function_directory_path/dir2/dir/5.csv', 'csv') SELECT '5.csv' SETTINGS engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 221', () => {
    const query = `INSERT INTO test_numbers__fuzz_29 VALUES ([1,2,3,4,5,6]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 222', () => {
    const query = `INSERT INTO test_numbers__fuzz_29 VALUES ([1,2,4,5]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 223', () => {
    const query = `INSERT INTO test_numbers__fuzz_29 VALUES ([1,4,3,0,5,5,5]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 224', () => {
    const query = `INSERT INTO test_dynamic VALUES (1, 'foo'), (2, 1111), (3, [1, 2, 3]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 225', () => {
    const query = `INSERT INTO test_serialization SELECT 1,
groupConcatState('First');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 226', () => {
    const query = `INSERT INTO test_serialization SELECT 2,
groupConcatState('Second');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 227', () => {
    const query = `INSERT INTO t_bloom_filter SELECT
number % 100 as key, -- 100 unique keys
rand() % 100 as value -- 100 unique values
FROM numbers(50_000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 228', () => {
    const query = `INSERT INTO t_bloom_filter SELECT
number % 100 as key, -- 100 unique keys
rand() % 100 as value -- 100 unique values
FROM numbers(50_000, 50_000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 229', () => {
    const query = `insert into tab select toDateTime('2000-01-01', 'UTC') + number, number, 1 from numbers(1e7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 230', () => {
    const query = `INSERT INTO test_projection_deduplicate VALUES (1, 'one');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 231', () => {
    const query = `INSERT INTO xxxx_yyy SELECT number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 232', () => {
    const query = `insert into test select arrayJoin(range(10000));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 233', () => {
    const query = `INSERT INTO 03173_single_function SELECT toDate('2000-01-01') + 10 * number FROM numbers(50)
UNION ALL
SELECT toDate('2100-01-01') + 10 * number FROM numbers(50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 234', () => {
    const query = `INSERT INTO 03173_nested_function SELECT number FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 235', () => {
    const query = `INSERT INTO 03173_nested_function_lc SELECT number FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 236', () => {
    const query = `INSERT INTO 03173_nested_function_null SELECT number FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 237', () => {
    const query = `INSERT INTO 03173_nested_function_lc_null SELECT number FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 238', () => {
    const query = `INSERT INTO 03173_nonsafe_cast SELECT number FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 239', () => {
    const query = `INSERT INTO 03173_multiple_partition_cols SELECT number, number FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 240', () => {
    const query = `INSERT INTO 03173_base_data_source SELECT number FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 241', () => {
    const query = `INSERT INTO 03173_date_parsing SELECT toString(toDate('2023-04-01') + number)
FROM numbers(20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 242', () => {
    const query = `INSERT INTO 03173_nested_date_parsing SELECT toString(toDate('2000-01-01') + 10 * number) FROM numbers(50)
UNION ALL
SELECT toString(toDate('2100-01-01') + 10 * number) FROM numbers(50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 243', () => {
    const query = `INSERT INTO 03173_empty_transform SELECT number FROM numbers(6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 244', () => {
    const query = `insert into test_qualify SELECT * FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 245', () => {
    const query = `INSERT INTO test SELECT number, 'str_' || toString(number) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 246', () => {
    const query = `INSERT INTO view_source SELECT * FROM numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 247', () => {
    const query = `INSERT INTO test_hilbert_encode SELECT number DIV 1024, number % 1024 FROM numbers(1048576);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 248', () => {
    const query = `INSERT INTO test_hilbert_encode SELECT number DIV 32, number % 32 FROM numbers(1024);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 249', () => {
    const query = `INSERT INTO x values (100, 1), (200, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 250', () => {
    const query = `INSERT INTO y values (100, 1), (300, 3), (200, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 251', () => {
    const query = `INSERT INTO t_func_to_subcolumns_map_2 VALUES (1, map('aaa', 1, 'bbb', 2)) (2, map('ccc', 3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 252', () => {
    const query = `INSERT INTO t_func_to_subcolumns_join VALUES (1, [1, 2, 3], 'abc', map('foo', 1, 'bar', 2)) (2, [], NULL, map());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 253', () => {
    const query = `INSERT INTO t_func_to_subcolumns_use_nulls SELECT range(number % 10), number FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 254', () => {
    const query = `INSERT INTO simple_key_simple_attributes_source_table VALUES(0, 'value_0', 'value_second_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 255', () => {
    const query = `INSERT INTO simple_key_simple_attributes_source_table VALUES(1, 'value_1', 'value_second_1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 256', () => {
    const query = `INSERT INTO simple_key_simple_attributes_source_table VALUES(2, 'value_2', 'value_second_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 257', () => {
    const query = `INSERT INTO test_table (key) SELECT number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 258', () => {
    const query = `INSERT INTO column_modify_test VALUES (1,'one',0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 259', () => {
    const query = `INSERT INTO column_modify_test VALUES (2,'two',0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 260', () => {
    const query = `INSERT INTO column_modify_test VALUES (3,Null,0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 261', () => {
    const query = `INSERT INTO complex_key_simple_attributes_source_short_circuit_table VALUES(0, 'id_key_0', 'value_0', 'value_second_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 262', () => {
    const query = `INSERT INTO t_read_in_order_2 SELECT number, number FROM numbers(10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 263', () => {
    const query = `INSERT INTO t_read_in_order_1 SELECT number, number FROM numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 264', () => {
    const query = `INSERT INTO 03147_db.t SELECT * FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 265', () => {
    const query = `INSERT INTO null_table VALUES ('test'); --{serverError NOT_IMPLEMENTED} DROP TABLE IF EXISTS mv_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 266', () => {
    const query = `INSERT INTO t_ind_merge_2 SELECT number, number, rand(), rand(), rand(), rand() FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 267', () => {
    const query = `INSERT INTO t_ind_merge_1 SELECT number, number, rand(), rand() FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 268', () => {
    const query = `INSERT INTO tab VALUES ('Igor', 3), ('Egor', 1), ('Egor', 2), ('Igor', 2), ('Igor', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 269', () => {
    const query = `INSERT INTO tab VALUES ('Bob', 4, 100, '1'), ('Nikita', 2, 54, '1'), ('Nikita', 1, 228, '1'), ('Alex', 4, 83, '1'), ('Alex', 4, 134, '1'), ('Alex', 1, 65, '0'), ('Alex', 4, 134, '1'), ('Bob', 2, 53, '0'), ('Alex', 4, 83, '0'), ('Alex', 1, 63, '1'), ('Bob', 2, 53, '1'), ('Alex', 4, 192, '1'), ('Alex', 2, 128, '1'), ('Nikita', 2, 148, '0'), ('Bob', 4, 177, '0'), ('Nikita', 1, 173, '0'), ('Alex', 1, 239, '0'), ('Alex', 1, 63, '0'), ('Alex', 2, 224, '1'), ('Bob', 4, 177, '0'), ('Alex', 2, 128, '1'), ('Alex', 4, 134, '0'), ('Alex', 4, 83, '1'), ('Bob', 4, 100, '0'), ('Nikita', 2, 54, '1'), ('Alex', 1, 239, '1'), ('Bob', 2, 187, '1'), ('Alex', 1, 65, '1'), ('Bob', 2, 53, '1'), ('Alex', 2, 224, '0'), ('Alex', 4, 192, '0'), ('Nikita', 1, 173, '1'), ('Nikita', 2, 148, '1'), ('Bob', 2, 187, '1'), ('Nikita', 2, 208, '1'), ('Nikita', 2, 208, '0'), ('Nikita', 1, 228, '0'), ('Nikita', 2, 148, '0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 270', () => {
    const query = `INSERT INTO tab VALUES ('AB', 0, 42, Null), ('AB', 0, 42, Null), ('A', 1, 42, Null), ('AB', 1, 9.81, 0), ('B', 0, 42, Null), ('B', -1, 3.14, Null), ('B', 1, 2.7, 1), ('B', 0, 42, 1), ('A', 1, 42, 1), ('B', 1, 42, Null), ('B', 0, 2.7, 1), ('A', 0, 2.7, 1), ('B', 2, 3.14, Null), ('A', 0, 3.14, Null), ('A', 1, 2.7, 1), ('A', 1, 42, Null);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 271', () => {
    const query = `INSERT INTO tab VALUES ('A', '2020-01-01', [0.0, 1.1], 10, 'some string', {'key':'value'}, (123)), ('A', '2020-01-01', [0.0, 1.1], NULL, 'example', {}, (26)), ('A', '2020-01-01', [2.2, 1.1], 1, 'some other string', {'key2':'value2'}, (5)), ('A', '2020-01-02', [0.0, 1.1], 10, 'some string', {'key':'value'}, (123)), ('A', '2020-01-02', [0.0, 2.2], 10, 'example', {}, (26)), ('A', '2020-01-02', [2.2, 1.1], 1, 'some other string', {'key2':'value2'}, (5)), ('B', '2020-01-04', [0.0, 1.1], 10, 'some string', {'key':'value'}, (123)), ('B', '2020-01-04', [0.0, 2.2], Null, 'example', {}, (26)), ('B', '2020-01-04', [2.2, 1.1], 1, 'some string', {'key2':'value2'}, (5)), ('B', '2020-01-05', [0.0, 1.1], 10, 'some string', {'key':'value'}, (123)), ('B', '2020-01-05', [0.0, 2.2], Null, 'example', {}, (26)), ('B', '2020-01-05', [2.2, 1.1], 1, 'some other string', {'key':'value'}, (5)), ('C', '2020-01-04', [0.0, 1.1], 10, 'some string', {'key':'value'}, (5)), ('C', '2020-01-04', [0.0, 2.2], Null, 'example', {}, (26)), ('C', '2020-01-04', [2.2, 1.1], 1, 'some other string', {'key2':'value2'}, (5));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 272', () => {
    const query = `insert into src values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 273', () => {
    const query = `INSERT INTO 03165_token_bf VALUES(1, 'Service is not ready');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 274', () => {
    const query = `INSERT INTO 03165_token_ft VALUES(1, 'Service is not ready');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 275', () => {
    const query = `INSERT INTO ids VALUES ('a1451105-722e-4fe7-bfaa-65ad2ae249c2', 'whatever');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 276', () => {
    const query = `INSERT INTO data VALUES ('a1451105-722e-4fe7-bfaa-65ad2ae249c2', '2000-01-01', 'CREATED');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 277', () => {
    const query = `INSERT INTO data2 VALUES ('a1451105-722e-4fe7-bfaa-65ad2ae249c2', '2000-01-02', 'CREATED');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 278', () => {
    const query = `INSERT INTO tab SELECT number    ,  0, number, number, number, number, number, number, number, number, number, number, FROM system.numbers LIMIT 20;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 279', () => {
    const query = `INSERT INTO tab SELECT number+20 ,  0, number+10, number+10, number+10, number+10, number-10, number-10, number-10, number-10, (toFloat32(number)-10)/10, (toFloat64(number)-10)/10, FROM system.numbers LIMIT 20;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 280', () => {
    const query = `INSERT INTO tab SELECT number+40 , -1, number, number, number, number, number, number, number, number, number, number, FROM system.numbers LIMIT 20;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 281', () => {
    const query = `INSERT INTO tab SELECT number+60 , -1, number+10, number+10, number+10, number+10, number-10, number-10, number-10, number-10, (toFloat32(number)-10)/10, (toFloat64(number)-10)/10, FROM system.numbers LIMIT 20;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 282', () => {
    const query = `INSERT INTO tab SELECT number+80 , -2, number, number, number, number, number, number, number, number, number, number, FROM system.numbers LIMIT 20;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 283', () => {
    const query = `INSERT INTO tab SELECT number+100, -2, number+10, number+10, number+10, number+10, number-10, number-10, number-10, number-10, (toFloat32(number)-10)/10, (toFloat64(number)-10)/10, FROM system.numbers LIMIT 20;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 284', () => {
    const query = `INSERT INTO tab SELECT number+200, -number, 0, 0, 0, 0, 0, 0, 0, 0, 12345.6789, 12345.6789, FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 285', () => {
    const query = `INSERT INTO tab SELECT number+210, -number, 0, 0, 0, 0, 0, 0, 0, 0, 12345.6789, 12345.6789, FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 286', () => {
    const query = `INSERT INTO tab VALUES (300, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2.0, 2.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 287', () => {
    const query = `INSERT INTO tab VALUES (301, 4, 20, 20, 20, 20, 20, 20, 20, 20, 20.0, 20.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 288', () => {
    const query = `INSERT INTO tab VALUES (302, 4, 200, 200, 200, 200, 200, 200, 200, 200, 200.0, 200.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 289', () => {
    const query = `INSERT INTO tab VALUES (303, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5.0, 5.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 290', () => {
    const query = `INSERT INTO tab VALUES (304, 4, 50, 50, 50, 50, 50, 50, 50, 50, 50.0, 50.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 291', () => {
    const query = `INSERT INTO tab VALUES (305, 4, 500, 500, 500, 500, 500, 500, 500, 500, 500.0, 500.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 292', () => {
    const query = `INSERT INTO tab VALUES (1, 6, toDecimal32('42.42', 4), toDecimal64('42.42', 4), toDecimal128('42.42', 4), toDecimal256('42.42', 4));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 293', () => {
    const query = `INSERT INTO tab SELECT 2 , 6, cos(d32), cos(d64), cos(d128), cos(d256) FROM tab WHERE id = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 294', () => {
    const query = `INSERT INTO tab SELECT 3 , 6, sqrt(d32), sqrt(d64), sqrt(d128), sqrt(d256) FROM tab WHERE id = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 295', () => {
    const query = `INSERT INTO tab SELECT 4 , 6, lgamma(d32), lgamma(d64), lgamma(d128), lgamma(d256) FROM tab WHERE id = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 296', () => {
    const query = `INSERT INTO tab SELECT 5 , 6, tgamma(d32)/1e50, tgamma(d64)/1e50, tgamma(d128)/1e50, tgamma(d256)/1e50 FROM tab WHERE id = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 297', () => {
    const query = `INSERT INTO tab SELECT 6 , 8, sin(d32), sin(d64), sin(d128), sin(d256) FROM tab WHERE id = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 298', () => {
    const query = `INSERT INTO tab SELECT 7 , 8, cos(d32), cos(d64), cos(d128), cos(d256) FROM tab WHERE id = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 299', () => {
    const query = `INSERT INTO tab SELECT 8 , 8, log(d32), log(d64), log(d128), log(d256) FROM tab WHERE id = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 300', () => {
    const query = `INSERT INTO tab SELECT 9 , 8, log2(d32), log2(d64), log2(d128), log2(d256) FROM tab WHERE id = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 301', () => {
    const query = `INSERT INTO tab SELECT 10, 8, log10(d32), log10(d64), log10(d128), log10(d256) FROM tab WHERE id = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 302', () => {
    const query = `INSERT INTO t_compact_bytes_s3 SELECT number, number, number, number, number FROM numbers(512 * 32 * 40);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 303', () => {
    const query = `INSERT INTO range_filter_custom_range_test SELECT number + 5 from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 304', () => {
    const query = `INSERT INTO range_filter_custom_range_test_2 SELECT number from numbers(13);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 305', () => {
    const query = `INSERT INTO range_filter_custom_range_test_3 SELECT number from numbers(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 306', () => {
    const query = `insert into function file('i8.orc') select materialize(-128)::Int8 as x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 307', () => {
    const query = `insert into function file('u8.orc') select materialize(128)::UInt8 as x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 308', () => {
    const query = `insert into function file('i16.orc') select materialize(-32768)::Int16 as x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 309', () => {
    const query = `insert into function file('u16.orc') select materialize(32768)::UInt16 as x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 310', () => {
    const query = `insert into function file('i32.orc') select materialize(-2147483648)::Int32 as x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 311', () => {
    const query = `insert into function file('u32.orc') select materialize(2147483648)::UInt32 as x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 312', () => {
    const query = `insert into function file('i64.orc') select materialize(-9223372036854775808)::Int64 as x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 313', () => {
    const query = `insert into function file('u64.orc') select materialize(9223372036854775808)::UInt64 as x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 314', () => {
    const query = `INSERT INTO 03164_users VALUES (1, 'John', 33);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 315', () => {
    const query = `INSERT INTO 03164_users VALUES (2, 'Ksenia', 48);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 316', () => {
    const query = `INSERT INTO 03164_users VALUES (NULL, 'Mark', 50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 317', () => {
    const query = `INSERT INTO 03164_multi_key VALUES (0, 0), (1, NULL), (NULL, 2), (NULL, NULL), (4, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 318', () => {
    const query = `INSERT INTO t_skip_index_insert SELECT number, number / 50 FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 319', () => {
    const query = `INSERT INTO t_skip_index_insert SELECT number, number / 50 FROM numbers(100, 100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 320', () => {
    const query = `insert into checks select * from generateRandom() limit 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 321', () => {
    const query = `INSERT INTO src_table(sipTimestamp) VALUES (toUnixTimestamp(toDateTime('2024-05-20 09:00:00', 'UTC')));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 322', () => {
    const query = `insert into t(c1) values(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 323', () => {
    const query = `INSERT INTO test_parquet SELECT rand(),rand(),rand(),rand(),rand(),rand(),rand() FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 324', () => {
    const query = `INSERT INTO dynamic_test_1 VALUES ('str_1'), (42::UInt64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 325', () => {
    const query = `INSERT INTO dynamic_test_2 VALUES ('str_2'), (43::UInt64), ('2020-01-01'::Date), ([1, 2, 3]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 326', () => {
    const query = `INSERT INTO t VALUES ([(1, 'aa'), (2, 'bb')]::Nested(x UInt32, y Dynamic)) ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 327', () => {
    const query = `INSERT INTO t VALUES ([(1, (2, ['aa', 'bb'])), (5, (6, ['ee', 'ff']))]::Nested(x UInt32, y Dynamic));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 328', () => {
    const query = `INSERT INTO users_compact VALUES (1231, 'John', 33);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 329', () => {
    const query = `INSERT INTO users_compact VALUES (6666, 'Ksenia', 48), (8888, 'Alice', 50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 330', () => {
    const query = `INSERT INTO users_wide VALUES (1231, 'John', 33);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 331', () => {
    const query = `INSERT INTO users_wide VALUES (6666, 'Ksenia', 48), (8888, 'Alice', 50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 332', () => {
    const query = `INSERT INTO 03161_table VALUES (0, 0), (1, 1), (2, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 333', () => {
    const query = `INSERT INTO 03161_reproducer VALUES (0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 1), (0, 0, 0, 0, 0, 0, 0, 0, 1, 0), (0, 0, 0, 0, 0, 0, 0, 0, 1, 1), (0, 0, 0, 0, 0, 0, 0, 1, 0, 0), (0, 0, 0, 0, 0, 0, 0, 1, 0, 1), (0, 0, 0, 0, 0, 0, 0, 1, 1, 0), (0, 0, 0, 0, 0, 0, 0, 1, 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 334', () => {
    const query = `INSERT INTO t SELECT sumState(number) AS d FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 335', () => {
    const query = `INSERT INTO t VALUES (-99999999.9::Decimal32(1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 336', () => {
    const query = `INSERT INTO t VALUES (-999999999.99::Decimal64(2));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 337', () => {
    const query = `INSERT INTO t VALUES (-999999999.999::Decimal128(3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 338', () => {
    const query = `INSERT INTO t VALUES (-999999999.9999::Decimal256(4));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 339', () => {
    const query = `INSERT INTO t VALUES ('2022-01-01'::Date), ('2022-01-01'::Date32), ('2022-01-01 01:01:01'::DateTime), ('2022-01-01 01:01:01.011'::DateTime64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 340', () => {
    const query = `INSERT INTO t2 SELECT * FROM t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 341', () => {
    const query = `INSERT INTO test_variable VALUES (1), ('s'), (0), ('0'), ('true'), ('false'), ('2001-01-01 01:01:01.111'), (NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 342', () => {
    const query = `INSERT INTO test_dynamic SELECT * FROM test_variable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 343', () => {
    const query = `INSERT INTO test_deep_nested_json VALUES (1, '{"level1": {"level2": {"level3": {"level4": {"level5": {"level6": {"level7": {"level8": {"level9": {"level10": "deep_value"}}}}}}}}}}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 344', () => {
    const query = `INSERT INTO test_deep_nested_json VALUES (2, '{"level1": {"level2": {"level3": {"level4": {"level5": {"level6": {"level7": {"level8": {"level9": {"level10": "deep_array_value"}}}}}}}}}}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 345', () => {
    const query = `INSERT INTO t_map_lc SELECT * FROM generateRandom('id UInt64, t Tuple(m Map(LowCardinality(String), LowCardinality(String)))') LIMIT 100000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 346', () => {
    const query = `INSERT INTO test SELECT number % 2 ? number * 123456789 : NULL FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 347', () => {
    const query = `INSERT INTO test_groupConcat VALUES (0, 95, 'abc', [1, 2, 3]), (1, NULL, 'a', [993, 986, 979, 972]), (2, 123, 'makson95', []);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 348', () => {
    const query = `INSERT INTO test_groupConcat SELECT number, number FROM numbers(100000) SETTINGS min_insert_block_size_rows = 2000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 349', () => {
    const query = `INSERT INTO arrays_test VALUES ('Hello', [1,2]), ('World', [3,4,5]), ('Goodbye', []);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 350', () => {
    const query = `INSERT INTO Example SELECT number AS id FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 351', () => {
    const query = `INSERT INTO Null SELECT number AS id FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 352', () => {
    const query = `INSERT INTO test_table VALUES ('a', '');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 353', () => {
    const query = `INSERT INTO test_table VALUES ('b', 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 354', () => {
    const query = `INSERT INTO test_table VALUES ('c', 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 355', () => {
    const query = `INSERT INTO test (a, b, c) VALUES (1, 2, 3, );`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 356', () => {
    const query = `INSERT INTO test (a, b, c) VALUES (4, 5, 6,);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 357', () => {
    const query = `INSERT INTO test (a, b, c) VALUES (7, 8, 9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 358', () => {
    const query = `INSERT INTO test_null_empty VALUES ([]), ([1]), ([]), (['1']), ([]), (()),((1)), (()), (('1')), (()), ({}), ({1:2}), ({}), ({'1':'2'}), ({});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 359', () => {
    const query = `INSERT INTO test (a, b, c, ) VALUES (1, 2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 360', () => {
    const query = `INSERT INTO test (a, b, c) VALUES (4, 5, 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 361', () => {
    const query = `INSERT INTO users VALUES (1231, 'John', 33);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 362', () => {
    const query = `INSERT INTO users VALUES (6666, 'Ksenia', 48);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 363', () => {
    const query = `INSERT INTO users VALUES (8888, 'Alice', 50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 364', () => {
    const query = `INSERT INTO users2 VALUES (1231, 'John', 33);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 365', () => {
    const query = `INSERT INTO users2 VALUES (6666, 'Ksenia', 48);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 366', () => {
    const query = `INSERT INTO users2 VALUES (8888, 'Alice', 50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 367', () => {
    const query = `INSERT INTO test_max_types VALUES ('string1'), (42), (3.14), ([1, 2]), (toDate('2021-01-01')), ('string2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 368', () => {
    const query = `INSERT INTO test_nested_dynamic VALUES (NULL, 42), (42, 'string'), ('string', [1, 2]), ([1, 2], NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 369', () => {
    const query = `INSERT INTO test_rapid_schema VALUES (42), ('string1'), (toDate('2021-01-01')), ([1, 2, 3]), (3.14), ('string2'), (toDateTime('2021-01-01 12:00:00')), (['array', 'of', 'strings']), (NULL), (toFloat64(42.42));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 370', () => {
    const query = `INSERT INTO test VALUES ('foo', 'bar1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 371', () => {
    const query = `insert into tab values (1,10,'2023-01-14 00:00:00',1),(2,20,'2023-01-14 00:00:00',1),(3,20,'2023-01-14 00:00:00',2),(4,40,'2023-01-14 00:00:00',3),(5,50,'2023-01-14 00:00:00',3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 372', () => {
    const query = `INSERT INTO t1 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 373', () => {
    const query = `INSERT INTO t1 VALUES (10),(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 374', () => {
    const query = `INSERT INTO t1 VALUES (1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 375', () => {
    const query = `INSERT INTO t1 VALUES (10000),(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 376', () => {
    const query = `INSERT INTO to_table ( n1, n2 ) VALUES (1, '2024-01-01'), (2, toDateTime64('2024-01-01', 3, 'Asia/Istanbul')), (3, toFloat32(1)), (4, toFloat64(2));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 377', () => {
    const query = `INSERT INTO test_grouping_sets_predicate SELECT toDate('2023-01-05') AS day_, 'hello, world' FROM numbers (10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 378', () => {
    const query = `INSERT INTO null_table ( n1, n2 ) VALUES (1, '2024-01-01'), (2, toDateTime64('2024-01-01', 3, 'Asia/Istanbul')), (3, toFloat32(1)), (4, toFloat64(2));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 379', () => {
    const query = `INSERT INTO events0 VALUES (NULL, -1), (toDateTime('9999-12-31 23:59:59'), 9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 380', () => {
    const query = `INSERT INTO probe0 VALUES (NULL), (toDateTime('9999-12-31 23:59:59'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 381', () => {
    const query = `INSERT INTO test_table VALUES (0, 'Value_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 382', () => {
    const query = `INSERT INTO t_mut_virtuals VALUES (1, 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 383', () => {
    const query = `INSERT INTO t_mut_virtuals VALUES (2, 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 384', () => {
    const query = `INSERT INTO events VALUES (1, 0), (3, 1), (6, 2), (8, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 385', () => {
    const query = `INSERT INTO t SELECT * FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 386', () => {
    const query = `insert into function file('03147_parquet_memory_tracking.parquet') select number from numbers(10000000) settings output_format_parquet_compression_method='none', output_format_parquet_row_group_size=1000000000000, engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 387', () => {
    const query = `insert into function file('03147_parquet_memory_tracking.parquet') select number from numbers(1) settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 388', () => {
    const query = `INSERT INTO test SELECT toDateTime('2024-01-01') + number FROM numbers(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 389', () => {
    const query = `insert into table_pv values(1, '2024-03-01 00:00:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 390', () => {
    const query = `insert into table_pv values (2, '2024-04-01 01:00:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 391', () => {
    const query = `INSERT INTO events0 SELECT toDateTime('2023-03-21 13:00:00', 'UTC') + INTERVAL number HOUR, number FROM numbers(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 392', () => {
    const query = `INSERT INTO events0 VALUES (NULL, -10),('0000-01-01 00:00:00', -1), ('9999-12-31 23:59:59', 9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 393', () => {
    const query = `INSERT INTO probe0 SELECT toDateTime('2023-03-21 12:00:00', 'UTC') + INTERVAl number HOUR FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 394', () => {
    const query = `INSERT INTO probe0 VALUES (NULL),('9999-12-31 23:59:59');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 395', () => {
    const query = `INSERT INTO events0 VALUES (1.0, 0), (3.0, 1), (6.0, 2), (8.0, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 396', () => {
    const query = `INSERT INTO events VALUES (1, 1.0, 0), (1, 3.0, 1), (1, 6.0, 2), (1, 8.0, 3), (2, 0.0, 10), (2, 7.0, 20), (2, 11.0, 30);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 397', () => {
    const query = `insert into tab select number from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 398', () => {
    const query = `INSERT INTO test_03143 VALUES ('2100-01-01', 123, 'Hello, world!', 'xxx yyy');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 399', () => {
    const query = `INSERT INTO null_table VALUES ('test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 400', () => {
    const query = `INSERT INTO t1 VALUES (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 401', () => {
    const query = `INSERT INTO t2 VALUES (1, 'test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 402', () => {
    const query = `INSERT INTO tmp_a VALUES (1,2,3,4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 403', () => {
    const query = `INSERT INTO tmp_a VALUES (5,6,7,8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 404', () => {
    const query = `INSERT INTO tmp_b VALUES (1,2,0.3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 405', () => {
    const query = `INSERT INTO tmp_b VALUES (5,6,0.4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 406', () => {
    const query = `insert into data_r1 select number, randomPrintableASCII(100) from numbers(100_000) settings max_block_size=1000, min_insert_block_size_rows=1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 407', () => {
    const query = `INSERT INTO t4(c0) VALUES (-405831124);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 408', () => {
    const query = `INSERT INTO t1(c1, c0) VALUES (278926179, 891140511);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 409', () => {
    const query = `INSERT INTO t4(c0) VALUES (1586457527);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 410', () => {
    const query = `INSERT INTO t3(c0) VALUES ('?/|D!6	'), ('1586457527');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 411', () => {
    const query = `INSERT INTO t2(c0) VALUES (1475250982);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 412', () => {
    const query = `INSERT INTO test1_00395 VALUES (1, 1, 'a', 'a', [1], [1], ['a'], ['a'], '2000-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 413', () => {
    const query = `INSERT INTO test1_00395 VALUES (1, NULL, 'a', 'a', [1], [1], ['a'], ['a'], '2000-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 414', () => {
    const query = `INSERT INTO test1_00395 VALUES (1, 1, 'a', NULL, [1], [1], ['a'], ['a'], '2000-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 415', () => {
    const query = `INSERT INTO test1_00395 VALUES (1, 1, 'a', 'a', [1], [NULL], ['a'], ['a'], '2000-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 416', () => {
    const query = `INSERT INTO test1_00395 VALUES (1, 1, 'a', 'a', [1], [1], ['a'], [NULL], '2000-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 417', () => {
    const query = `insert into hilbert_numbers_03131 select n1.number, n2.number
from numbers(pow(2, 32)-8,8) n1
cross join numbers(pow(2, 32)-8, 8) n2
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 418', () => {
    const query = `insert into hilbert_numbers_1_03131 select untuple(hilbertDecode(2, hilbertEncode(n1, n2)))
from hilbert_numbers_03131;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 419', () => {
    const query = `INSERT INTO test_table_1 VALUES (1, 'Value_1'), (2, 'Value_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 420', () => {
    const query = `INSERT INTO test_table_2 VALUES (2, 'Value_2'), (3, 'Value_3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 421', () => {
    const query = `INSERT INTO t1 VALUES (1), (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 422', () => {
    const query = `INSERT INTO test_table VALUES (0, 'aaa', [0]), (1, 'bbb', [1]), (2, 'ccc', [2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 423', () => {
    const query = `INSERT INTO t VALUES (1, toDateTime('2023-05-04 21:17:23', 'UTC')), (1, toDateTime('2023-05-04 22:17:23', 'UTC')), (2, toDateTime('2023-05-04 22:17:23', 'UTC')), (2, toDateTime('2023-05-04 23:17:23', 'UTC'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 424', () => {
    const query = `INSERT INTO elements (id,\`nested.key\`,\`nested.value\`) VALUES (5555, ['moto', 'hello'],['chocolatine', 'croissant']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 425', () => {
    const query = `INSERT INTO small (dt, user_email) SELECT number, if(number % 3 = 2, NULL, number) FROM numbers(1e2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 426', () => {
    const query = `INSERT INTO t Values (1, 'first', '2024-04-19 01:01:01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 427', () => {
    const query = `INSERT INTO test SELECT randomString(1000) FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 428', () => {
    const query = `INSERT INTO test2 SELECT randomString(1000) FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 429', () => {
    const query = `INSERT INTO t_index_lazy_load SELECT number, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 430', () => {
    const query = `INSERT INTO combinator_argMin_table_r1 SELECT
number % 10 as id,
number as value,
'2024-01-01 00:00:00' + INTERVAL number SECOND
FROM
numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 431', () => {
    const query = `INSERT INTO combinator_argMin_table_r1 SELECT
number % 10 as id,
number * 10 as value,
'2024-01-01 00:00:00' + INTERVAL number SECOND
FROM
numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 432', () => {
    const query = `INSERT INTO argmax_comb SELECT
CAST(number % 10, 'UInt64') AS id,
avgArgMaxState(CAST(number, 'Float64'), id)
FROM numbers(100)
GROUP BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 433', () => {
    const query = `INSERT INTO events VALUES ('1234'), ('1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 434', () => {
    const query = `insert into t0 values (1, 10), (2, 12);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 435', () => {
    const query = `insert into test_window_collate values('1', 'd8 f57');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 436', () => {
    const query = `insert into test_window_collate values('1', 'h%?e.	');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 437', () => {
    const query = `INSERT INTO a1 (day, id) VALUES ('2019-01-01', 9), ('2019-01-01', 10), ('2019-01-02', 10), ('2019-01-01', 11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 438', () => {
    const query = `INSERT INTO b1 (day, id) VALUES ('2019-01-01', 9), ('2019-01-01', 10), ('2019-01-02', 11), ('2019-01-01', 11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 439', () => {
    const query = `INSERT INTO test VALUES (10,10),(20,20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 440', () => {
    const query = `insert into a1 values('CROCO');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 441', () => {
    const query = `insert into x select number, number from VALUES('number UInt64', 1000, 10000, 100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 442', () => {
    const query = `insert into t values(1),(2),(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 443', () => {
    const query = `insert into t values('a'),('b'),('c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 444', () => {
    const query = `INSERT INTO my_first_table (user_id, message, timestamp, metric) VALUES (101, 'Hello, ClickHouse!',                                 now(),       -1.0    ),     (102, 'Insert a lot of rows per batch',                     yesterday(), 1.41421 ),    (102, 'Sort your data based on your commonly-used queries', today(),     2.718   ),    (101, 'Granules are the smallest chunks of data read',      now() + 5,   3.14159 );`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 445', () => {
    const query = `INSERT INTO event VALUES ('2020-05-01 00:00:01', 'install', '1'), ('2020-05-01 00:00:02', 'install', '2'), ('2020-05-01 00:00:03', 'install', '3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 446', () => {
    const query = `INSERT INTO user VALUES ('1', 'type_1'), ('2', 'type_2'), ('3', 'type_3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 447', () => {
    const query = `INSERT INTO loans VALUES (1, 'AAA');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 448', () => {
    const query = `INSERT INTO loans VALUES (1, 'BBB');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 449', () => {
    const query = `insert into t1 values ('succeed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 450', () => {
    const query = `insert into t2 values ('succeed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 451', () => {
    const query = `INSERT INTO aliased VALUES (10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 452', () => {
    const query = `INSERT INTO aliased3 VALUES (10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 453', () => {
    const query = `INSERT INTO users VALUES ('John', 33);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 454', () => {
    const query = `INSERT INTO users VALUES ('Ksenia', 48);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 455', () => {
    const query = `INSERT INTO users VALUES ('Alice', 50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 456', () => {
    const query = `INSERT INTO \`clickhouse_alias_issue_1\` VALUES (1, 100), (2, 200), (3, 300);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 457', () => {
    const query = `INSERT INTO \`clickhouse_alias_issue_2\` VALUES (1, 10), (2, 20), (3, 30);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 458', () => {
    const query = `insert into test values (1, 1), (1, 'str_1'), (1, 2), (1, 'str_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 459', () => {
    const query = `INSERT INTO test_03096 SELECT number, number % 42, number % 123 FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 460', () => {
    const query = `insert into mt1 values(1, 1), (2, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 461', () => {
    const query = `insert into b   values(3, 3), (4, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 462', () => {
    const query = `INSERT INTO t1__fuzz_0 SELECT number, toString(number) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 463', () => {
    const query = `INSERT INTO left_join__fuzz_2 SELECT number, toString(number) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 464', () => {
    const query = `INSERT INTO 03094_grouparrysorted_src SELECT * FROM generateRandom() LIMIT 500000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 465', () => {
    const query = `INSERT INTO users_03094 VALUES ('John', 33);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 466', () => {
    const query = `INSERT INTO users_03094 VALUES ('Ksenia', 48);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 467', () => {
    const query = `INSERT INTO users_03094 VALUES ('Alice', 50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 468', () => {
    const query = `insert into t2 select number from numbers_mt(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 469', () => {
    const query = `INSERT INTO test_gcd SELECT floor(randUniform(1, 3)) FROM numbers(150000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 470', () => {
    const query = `INSERT INTO test_gcd2 SELECT floor(randUniform(1, 3)) FROM numbers(150000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 471', () => {
    const query = `INSERT INTO test_03093 VALUES ('x1', 123, {'k1': ''});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 472', () => {
    const query = `INSERT INTO test_03093 VALUES ('x1', 123, {'k1': '', 'k11': ''});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 473', () => {
    const query = `INSERT INTO test_03093 VALUES ('x1', 12,  {'k1': ''});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 474', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.\`1-1\` VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 475', () => {
    const query = `INSERT INTO test1 SELECT 'pk1', 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 476', () => {
    const query = `INSERT INTO test2 SELECT 'pk1', 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 477', () => {
    const query = `insert into test values ('2020-01-01', 'text1'), ('2019-01-01', 'text2'), ('1900-01-01', 'text3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 478', () => {
    const query = `INSERT INTO first_table VALUES ('1', '2'), ('3', '4');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 479', () => {
    const query = `INSERT INTO second_table VALUES ('1', '2'), ('3', '4');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 480', () => {
    const query = `INSERT INTO testdata VALUES ('testdata');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 481', () => {
    const query = `INSERT INTO t2 SELECT number, number FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 482', () => {
    const query = `INSERT INTO t1 SELECT number, number FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 483', () => {
    const query = `insert into test values(1,'1970-02-01 00:00:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 484', () => {
    const query = `insert into test values(2,'1970-02-01 00:00:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 485', () => {
    const query = `insert into test values(3,'1970-03-01 00:00:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 486', () => {
    const query = `INSERT INTO test SELECT 'token-transfer-0x758f1bbabb160683e1c80ed52dcd24a32b599d40edf1cec91b5f1199c0e392a2-56', hex2bytes('0xd387a6e4e84a6c86bd90c158c6028a58cc8ac459'), 3000000000000000000000, '2024-01-02 16:54:59', 'abc';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 487', () => {
    const query = `INSERT INTO token_data SELECT bytes2hex('abc'), 'zksync', false;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 488', () => {
    const query = `insert into test values('abc',0,0,0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 489', () => {
    const query = `insert into test_join values('abc',0,1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 490', () => {
    const query = `insert into fact values (1,1,1),(2,2,2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 491', () => {
    const query = `insert into animals values (0, 'unknown');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 492', () => {
    const query = `insert into colors values (0, 'unknown');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 493', () => {
    const query = `INSERT INTO test VALUES (1,2), (1,3), (2,4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 494', () => {
    const query = `INSERT INTO nested_test VALUES ('Hello', [1,2], [10,20]), ('World', [3,4,5], [30,40,50]), ('Goodbye', [], []);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 495', () => {
    const query = `INSERT INTO join_test VALUES (1,1),(2,4),(3,20),(4,40);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 496', () => {
    const query = `INSERT INTO repl_tbl (key) SELECT number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 497', () => {
    const query = `insert into fill_ex (eventDate,storeId) values ('2021-07-16','s') ('2021-07-17','ee');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 498', () => {
    const query = `INSERT INTO y SELECT * FROM numbers(1, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 499', () => {
    const query = `insert into test select number, number from numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 500', () => {
    const query = `insert into test select number, number, number from numbers(3, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 501', () => {
    const query = `insert into test select number, number, 'str_' || toString(number) from numbers(6, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 502', () => {
    const query = `insert into test select number, number, NULL from numbers(9, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 503', () => {
    const query = `insert into test select number, number, multiIf(number % 3 == 0, number, number % 3 == 1, 'str_' || toString(number), NULL) from numbers(12, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 504', () => {
    const query = `insert into test select number, number, [number % 2 ? number : 'str_' || toString(number)]::Array(Dynamic) from numbers(15, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 505', () => {
    const query = `insert into test select number, number, multiIf(number % 4 == 0, number, number % 4 == 1, 'str_' || toString(number), number % 4 == 2, toDate(number), NULL) from numbers(15, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 506', () => {
    const query = `insert into test select number, number, multiIf(number % 4 == 0, number, number % 4 == 1, 'str_' || toString(number), number % 4 == 2, toDate(number), NULL) from numbers(19, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 507', () => {
    const query = `insert into test select number, multiIf(number % 3 == 0, number, number % 3 == 1, 'str_' || toString(number), NULL), NULL from numbers(23, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 508', () => {
    const query = `INSERT INTO graph VALUES (1, 2, 'arc 1 -> 2'), (1, 3, 'arc 1 -> 3'), (2, 3, 'arc 2 -> 3'), (1, 4, 'arc 1 -> 4'), (4, 5, 'arc 4 -> 5'), (5, 1, 'arc 5 -> 1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 509', () => {
    const query = `insert into test select number, number from numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 510', () => {
    const query = `insert into test select number, tuple(if(number % 3 == 0, number, 'str_' || toString(number)))::Tuple(a Dynamic(max_types=2)) from numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 511', () => {
    const query = `insert into test select number, tuple(if(number % 3 == 0, toDate(number), range(number % 10)))::Tuple(a Dynamic(max_types=2)) from numbers(50000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 512', () => {
    const query = `insert into test select number, multiIf(number % 5 == 0, tuple(if(number % 3 == 0, toDateTime(number), toIPv4(number)))::Tuple(a Dynamic(max_types=2)), number % 5 == 1 or number % 5 == 2, number, 'str_' || number) from numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 513', () => {
    const query = `insert into test select number, tuple(if(number % 3 == 0, toDateTime(number), NULL))::Tuple(a Dynamic(max_types=2)) from numbers(50000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 514', () => {
    const query = `insert into test select number, tuple(if(number % 2 == 0, tuple(number), NULL))::Tuple(a Dynamic(max_types=2)) from numbers(200000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 515', () => {
    const query = `insert into test select number, tuple(toDateTime(number))::Tuple(a Dynamic(max_types=2)) from numbers(40000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 516', () => {
    const query = `INSERT INTO move_partition_to_oneself SELECT number FROM numbers(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 517', () => {
    const query = `insert into function s3('http://localhost:11111/test/data_*_{_partition_id}.csv') partition by number % 3 select * from numbers(10); -- {serverError DATABASE_ACCESS_DENIED} `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 518', () => {
    const query = `INSERT INTO tree VALUES (1, NULL), (2, 1), (3,1), (4,2), (5,2), (6,2), (7,3), (8,3), (9,4), (10,4), (11,7), (12,7), (13,7), (14, 9), (15,11), (16,11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 519', () => {
    const query = `insert into test select number, number from numbers(200000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 520', () => {
    const query = `insert into test select number, 'str_' || toString(number) from numbers(200000, 200000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 521', () => {
    const query = `insert into test select number, range(number % 10 + 1) from numbers(400000, 200000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 522', () => {
    const query = `insert into test select number, 'str_' || toString(number) from numbers(80000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 523', () => {
    const query = `insert into test select number, range(number % 10 + 1) from numbers(70000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 524', () => {
    const query = `insert into test select number, toDate(number) from numbers(60000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 525', () => {
    const query = `insert into test select number, toDateTime(number) from numbers(50000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 526', () => {
    const query = `insert into test select number, NULL from numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 527', () => {
    const query = `insert into test select number, map(number, number) from numbers(200000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 528', () => {
    const query = `insert into test select number, tuple(number, number) from numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 529', () => {
    const query = `insert into test select number, 'str_' || number from numbers(30000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 530', () => {
    const query = `INSERT INTO department VALUES (0, NULL, 'ROOT');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 531', () => {
    const query = `INSERT INTO department VALUES (1, 0, 'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 532', () => {
    const query = `INSERT INTO department VALUES (2, 1, 'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 533', () => {
    const query = `INSERT INTO department VALUES (3, 2, 'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 534', () => {
    const query = `INSERT INTO department VALUES (4, 2, 'D');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 535', () => {
    const query = `INSERT INTO department VALUES (5, 0, 'E');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 536', () => {
    const query = `INSERT INTO department VALUES (6, 4, 'F');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 537', () => {
    const query = `INSERT INTO department VALUES (7, 5, 'G');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 538', () => {
    const query = `INSERT INTO t VALUES ([1,2,3]), ([4,5,6]), ([7,8,9]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 539', () => {
    const query = `INSERT INTO test_table_1 SELECT number, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 540', () => {
    const query = `INSERT INTO test_table_2 SELECT number, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 541', () => {
    const query = `insert into test select number, number from numbers(100000) settings min_insert_block_size_rows=50000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 542', () => {
    const query = `insert into test select number, 'str_' || toString(number) from numbers(100000, 100000) settings min_insert_block_size_rows=50000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 543', () => {
    const query = `insert into test select number, arrayMap(x -> multiIf(number % 9 == 0, NULL, number % 9 == 3, 'str_' || toString(number), number), range(number % 10 + 1)) from numbers(200000, 100000) settings min_insert_block_size_rows=50000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 544', () => {
    const query = `insert into test select number, NULL from numbers(300000, 100000) settings min_insert_block_size_rows=50000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 545', () => {
    const query = `insert into test select number, multiIf(number % 4 == 3, 'str_' || toString(number), number % 4 == 2, NULL, number % 4 == 1, number, arrayMap(x -> multiIf(number % 9 == 0, NULL, number % 9 == 3, 'str_' || toString(number), number), range(number % 10 + 1))) from numbers(400000, 400000) settings min_insert_block_size_rows=50000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 546', () => {
    const query = `insert into test select number, [range((number % 10 + 1)::UInt64)]::Array(Array(Dynamic)) from numbers(100000, 100000) settings min_insert_block_size_rows=50000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 547', () => {
    const query = `insert into test select number, if (number % 5 == 1, [range((number % 10 + 1)::UInt64)]::Array(Array(Dynamic)), number) from numbers(100000, 100000) settings min_insert_block_size_rows=50000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 548', () => {
    const query = `insert into test select number, if (number % 5 == 1, ('str_' || number)::LowCardinality(String)::Dynamic, number::Dynamic) from numbers(100000, 100000) settings min_insert_block_size_rows=50000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 549', () => {
    const query = `INSERT INTO test VALUES (1, 'Alice'), (2, 'Bob');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 550', () => {
    const query = `insert into test values (42, 42), (42, 43), (43, 42), ('abc', 'abc'), ('abc', 'abd'), ('abd', 'abc'), ([1,2,3], [1,2,3]), ([1,2,3], [1,2,4]), ([1,2,4], [1,2,3]),
('2020-01-01', '2020-01-01'), ('2020-01-01', '2020-01-02'), ('2020-01-02', '2020-01-01'),
(NULL, NULL), (42, 'abc'), ('abc', 42), (42, [1,2,3]), ([1,2,3], 42), (42, NULL), (NULL, 42),
('abc', [1,2,3]), ([1,2,3], 'abc'), ('abc', NULL), (NULL, 'abc'), ([1,2,3], NULL), (NULL, [1,2,3]),
(42, '2020-01-01'), ('2020-01-01', 42), ('2020-01-01', 'abc'), ('abc', '2020-01-01'),
('2020-01-01', [1,2,3]), ([1,2,3], '2020-01-01'), ('2020-01-01', NULL), (NULL, '2020-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 551', () => {
    const query = `INSERT INTO test (uuid, time, value) VALUES ('a1000000-0000-0000-0000-0000000000a1','2021-01-01 00:00:00.000',0), ('a1000000-0000-0000-0000-0000000000a1','2021-01-01 00:00:09.000',1), ('a1000000-0000-0000-0000-0000000000a1','2021-01-01 00:00:10.000',2), ('a1000000-0000-0000-0000-0000000000a1','2021-01-01 00:00:19.000',3), ('a1000000-0000-0000-0000-0000000000a1','2021-01-01 00:00:20.000',2), ('a1000000-0000-0000-0000-0000000000a1','2021-01-01 00:00:29.000',1), ('a1000000-0000-0000-0000-0000000000a1','2021-01-01 00:00:30.000',0),  ('a1000000-0000-0000-0000-0000000000a1','2021-01-01 00:00:39.000',-1), ('a1000000-0000-0000-0000-0000000000a1','2021-01-01 00:00:40.000',-2), ('a1000000-0000-0000-0000-0000000000a1','2021-01-01 00:00:49.000',-3), ('a1000000-0000-0000-0000-0000000000a1','2021-01-01 00:00:50.000',-2), ('a1000000-0000-0000-0000-0000000000a1','2021-01-01 00:00:59.000',-1), ('a1000000-0000-0000-0000-0000000000a1','2021-01-01 00:01:00.000',0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 552', () => {
    const query = `INSERT INTO alias_bug VALUES ('SOURCE1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 553', () => {
    const query = `INSERT INTO tree VALUES (0, NULL, 'ROOT'), (1, 0, 'Child_1'), (2, 0, 'Child_2'), (3, 1, 'Child_1_1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 554', () => {
    const query = `INSERT INTO department__fuzz_1 VALUES (0, NULL, 'ROOT');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 555', () => {
    const query = `INSERT INTO department__fuzz_1 VALUES (1, 0, 'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 556', () => {
    const query = `INSERT INTO department__fuzz_1 VALUES (2, 1, 'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 557', () => {
    const query = `INSERT INTO department__fuzz_1 VALUES (3, 2, 'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 558', () => {
    const query = `INSERT INTO department__fuzz_1 VALUES (4, 2, 'D');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 559', () => {
    const query = `INSERT INTO department__fuzz_1 VALUES (5, 0, 'E');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 560', () => {
    const query = `INSERT INTO department__fuzz_1 VALUES (6, 4, 'F');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 561', () => {
    const query = `INSERT INTO department__fuzz_1 VALUES (7, 5, 'G');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 562', () => {
    const query = `INSERT INTO department__fuzz_3 VALUES (0, NULL, 'ROOT');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 563', () => {
    const query = `INSERT INTO department__fuzz_3 VALUES (1, 0, 'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 564', () => {
    const query = `INSERT INTO department__fuzz_3 VALUES (2, 1, 'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 565', () => {
    const query = `INSERT INTO department__fuzz_3 VALUES (3, 2, 'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 566', () => {
    const query = `INSERT INTO department__fuzz_3 VALUES (4, 2, 'D');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 567', () => {
    const query = `INSERT INTO department__fuzz_3 VALUES (5, 0, 'E');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 568', () => {
    const query = `INSERT INTO department__fuzz_3 VALUES (6, 4, 'F');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 569', () => {
    const query = `INSERT INTO department__fuzz_3 VALUES (7, 5, 'G');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 570', () => {
    const query = `insert into test values (NULL), (42), ('42.42'), (true), ('e10');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 571', () => {
    const query = `INSERT INTO tab VALUES (map(1.0, 'a'), map('b', 'b'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 572', () => {
    const query = `INSERT INTO tab VALUES (map(2.0, 'aa'), map('bb', 'bb'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 573', () => {
    const query = `INSERT INTO tab VALUES (map(1.0, 'a'), map('b', 'b')), (map(2.0, 'aa'), map('bb', 'bb'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 574', () => {
    const query = `insert into a select number, intDiv(number, 4096) from numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 575', () => {
    const query = `insert into test_tmp select * from generateRandom() limit 24;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 576', () => {
    const query = `insert into test_tmp select * from generateRandom() limit 25;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 577', () => {
    const query = `insert into test_tmp select * from generateRandom() limit 26;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 578', () => {
    const query = `insert into test_tmp select * from generateRandom() limit 30;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 579', () => {
    const query = `INSERT INTO test(address, deployer, block_number, block_hash, block_timestamp, insertion_time) SELECT * FROM test_tmp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 580', () => {
    const query = `insert into t select 42, number from numbers_mt(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 581', () => {
    const query = `insert into t select number, number from numbers_mt(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 582', () => {
    const query = `INSERT INTO t_lightweight_deletes VALUES (1) (2) (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 583', () => {
    const query = `INSERT INTO t4_2 (col1, col2, col3) SELECT number, number, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 584', () => {
    const query = `INSERT INTO account_test VALUES (11338881281426660955,717769962224129342),(12484100559155738267,7950971667203174918),(7603729260199571867,3255798127676911942),(7023543111808724827,911615979861855126),(10293135086416484571,3264379259750736572),(15561193439904316763,8419819469587131454),(17632407413882870235,7252071832370181502),(17009726455991851227,7525297506591593939),(12392078953873778779,8473049173389293961),(15283366022689446555,11692491360262171467),(9087459014730986523,2783662960221838603),(293823584550906267,4847630088179732782),(15693186194430465755,8163804880526285623),(7353080168325584795,17315892478487497859),(5980311238303466523,6943353798059390089),(14242621660019578011,8684624667957352769),(8241843507567433563,15731952080102886438);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 585', () => {
    const query = `INSERT INTO account_test VALUES (11338881281426660955, 14765404159170880511);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 586', () => {
    const query = `insert into test values ('42'), ('42.42'), ('[1, 2, 3]'), ('2020-01-01'), ('2020-01-01 10:00:00'), ('NULL'), ('true');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 587', () => {
    const query = `INSERT INTO dt SETTINGS distributed_foreground_insert=1 VALUES (1, 'foo1'); -- shard0 INSERT INTO dt SETTINGS distributed_foreground_insert=1 VALUES (1, 'foo2'); -- shard1
SET optimize_skip_unused_shards=1, optimize_skip_unused_shards_rewrite_in=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 588', () => {
    const query = `INSERT INTO vecs_Float32 SELECT v FROM (
SELECT
number AS n,
[
rand(n*10), rand(n*10+1), rand(n*10+2), rand(n*10+3), rand(n*10+4), rand(n*10+5), rand(n*10+6), rand(n*10+7), rand(n*10+8), rand(n*10+9),
rand(n*10+10), rand(n*10+11), rand(n*10+12), rand(n*10+13), rand(n*10+14), rand(n*10+15), rand(n*10+16), rand(n*10+17), rand(n*10+18), rand(n*10+19),
rand(n*10+20), rand(n*10+21), rand(n*10+22), rand(n*10+23), rand(n*10+24), rand(n*10+25), rand(n*10+26), rand(n*10+27), rand(n*10+28), rand(n*10+29),
rand(n*10+30), rand(n*10+31), rand(n*10+32), rand(n*10+33), rand(n*10+34), rand(n*10+35), rand(n*10+36), rand(n*10+37), rand(n*10+38), rand(n*10+39),
rand(n*10+40), rand(n*10+41), rand(n*10+42), rand(n*10+43), rand(n*10+44), rand(n*10+45), rand(n*10+46), rand(n*10+47), rand(n*10+48), rand(n*10+49),
rand(n*10+50), rand(n*10+51), rand(n*10+52), rand(n*10+53), rand(n*10+54), rand(n*10+55), rand(n*10+56), rand(n*10+57), rand(n*10+58), rand(n*10+59),
rand(n*10+60), rand(n*10+61), rand(n*10+62), rand(n*10+63), rand(n*10+64), rand(n*10+65), rand(n*10+66), rand(n*10+67), rand(n*10+68), rand(n*10+69),
rand(n*10+70), rand(n*10+71), rand(n*10+72), rand(n*10+73), rand(n*10+74), rand(n*10+75), rand(n*10+76), rand(n*10+77), rand(n*10+78), rand(n*10+79),
rand(n*10+80), rand(n*10+81), rand(n*10+82), rand(n*10+83), rand(n*10+84), rand(n*10+85), rand(n*10+86), rand(n*10+87), rand(n*10+88), rand(n*10+89),
rand(n*10+90), rand(n*10+91), rand(n*10+92), rand(n*10+93), rand(n*10+94), rand(n*10+95), rand(n*10+96), rand(n*10+97), rand(n*10+98), rand(n*10+99),
rand(n*10+100), rand(n*10+101), rand(n*10+102), rand(n*10+103), rand(n*10+104), rand(n*10+105), rand(n*10+106), rand(n*10+107), rand(n*10+108), rand(n*10+109),
rand(n*10+110), rand(n*10+111), rand(n*10+112), rand(n*10+113), rand(n*10+114), rand(n*10+115), rand(n*10+116), rand(n*10+117), rand(n*10+118), rand(n*10+119),
rand(n*10+120), rand(n*10+121), rand(n*10+122), rand(n*10+123), rand(n*10+124), rand(n*10+125), rand(n*10+126), rand(n*10+127), rand(n*10+128), rand(n*10+129),
rand(n*10+130), rand(n*10+131), rand(n*10+132), rand(n*10+133), rand(n*10+134), rand(n*10+135), rand(n*10+136), rand(n*10+137), rand(n*10+138), rand(n*10+139),
rand(n*10+140), rand(n*10+141), rand(n*10+142), rand(n*10+143), rand(n*10+144), rand(n*10+145), rand(n*10+146), rand(n*10+147), rand(n*10+148), rand(n*10+149)
] AS v
FROM system.numbers
LIMIT 10
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 589', () => {
    const query = `INSERT INTO raw_data SELECT number, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 590', () => {
    const query = `insert into test values (1, 'a'), (2, 'bb'), (3, 'ccc'), (4, 'dddd');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 591', () => {
    const query = `INSERT INTO memory SELECT * FROM numbers(0, 100); -- 1024 bytes INSERT INTO memory SELECT * FROM numbers(0, 3000); -- 16384 bytes
SELECT total_bytes FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 17408 in total
ALTER TABLE memory MODIFY SETTING min_bytes_to_keep = 4096, max_bytes_to_keep = 16384;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 592', () => {
    const query = `INSERT INTO memory SELECT * FROM numbers(0, 100); -- 100 rows INSERT INTO memory SELECT * FROM numbers(100, 1000); -- 1000 rows
SELECT total_rows FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 1100 in total
ALTER TABLE memory MODIFY SETTING min_rows_to_keep = 100, max_rows_to_keep = 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 593', () => {
    const query = `INSERT INTO memory SELECT * FROM numbers(0, 50); -- 50 rows SELECT total_rows FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 50 in total
INSERT INTO memory SELECT * FROM numbers(50, 950); -- 950 rows
SELECT total_rows FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 1000 in total
INSERT INTO memory SELECT * FROM numbers(2000, 70); -- 70 rows
SELECT total_rows FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 1070 in total
ALTER TABLE memory MODIFY SETTING min_rows_to_keep = 100, max_rows_to_keep = 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 594', () => {
    const query = `INSERT INTO memory SELECT * FROM numbers(0, 50); -- 50 rows SELECT total_rows FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 50 in total
INSERT INTO memory SELECT * FROM numbers(50, 950); -- 950 rows
SELECT total_rows FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 1000 in total
INSERT INTO memory SELECT * FROM numbers(2000, 70); -- 70 rows
SELECT total_rows FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 1020 in total after deleting
INSERT INTO memory SELECT * FROM numbers(3000, 1100); -- 1100 rows
SELECT total_rows FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 1100 in total after deleting
SELECT 'TESTING INVALID SETTINGS';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 595', () => {
    const query = `INSERT INTO test_table SELECT number FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 596', () => {
    const query = `INSERT INTO 03031_test SELECT number,
toString(number),
toString(number),
toString(number)
FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 597', () => {
    const query = `insert into dist_in select number/100, number from system.numbers limit 3e6 settings max_block_size=3e6, max_memory_usage='100Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 598', () => {
    const query = `INSERT INTO src_table (a, b) VALUES (1, 1), (2, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 599', () => {
    const query = `INSERT INTO set_index_not__fuzz_0 SELECT * from generateRandom() limit 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 600', () => {
    const query = `INSERT INTO test_data (ShipmentDate) Values ('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'), ('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-02-07'), ('2022-02-11'), ('2022-02-15'), ('2022-02-16'), ('2022-02-18'), ('2022-02-22'), ('2022-02-24'), ('2022-03-02'), ('2022-03-04'), ('2022-03-07'), ('2022-03-09'), ('2022-03-10'), ('2022-03-11'), ('2022-03-14'), ('2022-03-15'), ('2022-03-17'), ('2022-03-18'), ('2022-03-23'), ('2022-04-28'), ('2022-05-24'), ('2022-03-31'), ('2022-04-19'), ('2022-04-25'), ('2022-04-26'), ('2022-05-02'), ('2022-05-04'), ('2022-05-05'), ('2022-05-11'), ('2022-05-12'), ('2022-05-13'), ('2022-05-16'), ('2022-05-18'), ('2022-05-20'), ('2022-05-23'), ('2022-05-27'), ('2022-05-31'), ('2022-05-10'), ('2022-02-17'), ('2022-03-24'), ('2022-05-09'), ('2022-05-30'), ('2022-02-21'), ('2022-01-11'), ('2022-01-28'), ('2022-04-27'), ('2022-05-25'), ('2022-04-18'), ('2022-01-21'), ('2022-03-22'), ('2022-04-01'), ('2022-04-06'), ('2022-04-11'), ('2022-05-19'), ('2022-02-01'), ('2022-02-23'), ('2022-02-09'), ('2022-03-03'), ('2022-04-04'), ('2022-04-05'), ('2022-04-12'), ('2022-04-29'), ('2022-01-06'), ('2022-03-01'), ('2022-03-26'), ('2022-01-10'), ('2022-01-03'), ('2022-05-01'), ('2022-03-21'), ('2022-03-27'), ('2022-01-31'), ('2022-04-13'), ('2022-03-29'), ('2022-02-20'), ('2022-02-06'), ('2022-03-13'), ('2022-02-27'), ('2022-03-20'), ('2022-04-24'), ('2022-05-15'), ('2022-05-22'), ('2022-01-09'), ('2022-04-03'), ('2022-03-12'), ('2022-01-23'), ('2022-05-08'), ('2022-05-29'), ('2022-02-19'), ('2022-05-07'), ('2022-05-26'), ('2022-01-30'), ('2022-03-05'), ('2022-05-21'), ('2022-02-26'), ('2022-01-16'), ('2022-05-17'), ('2022-01-29'), ('2022-02-12'), ('2022-01-02'), ('2022-02-05'),('2022-04-22'), ('2022-02-14'), ('2022-02-28'), ('2022-02-04'), ('2022-02-08'), ('2022-03-16'), ('2022-03-25'), ('2022-02-25'), ('2022-03-08'), ('2022-05-03'), ('2022-05-06'), ('2022-02-10'), ('2022-02-13'), ('2022-03-06'), ('2022-04-07'), ('2022-04-08'), ('2022-04-20'), ('2022-04-21'), ('2022-03-28'), ('2022-03-30'), ('2022-01-04'), ('2022-01-05'), ('2022-01-07'), ('2022-01-12'), ('2022-01-13'), ('2022-01-14'), ('2022-01-17'), ('2022-01-18'), ('2022-01-19'), ('2022-01-20'), ('2022-01-24'), ('2022-01-25'), ('2022-01-26'), ('2022-01-27'), ('2022-02-02'), ('2022-02-03'), ('2022-01-08');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 601', () => {
    const query = `INSERT INTO 03015_aggregator_empty_data_multiple_blocks SELECT * FROM generateRandom() LIMIT 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 602', () => {
    const query = `INSERT INTO 03014_async_with_dedup_part_log VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 603', () => {
    const query = `INSERT INTO test VALUES (1), (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 604', () => {
    const query = `INSERT INTO 03013_position_const_start_pos SELECT * FROM generateRandom() LIMIT 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 605', () => {
    const query = `insert into test_memory select 42;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 606', () => {
    const query = `insert into test_merge_tree select 42;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 607', () => {
    const query = `insert into test_join select 42;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 608', () => {
    const query = `INSERT INTO memory SELECT * FROM numbers(3000, 1100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 609', () => {
    const query = `INSERT INTO memory SELECT * FROM numbers(0, 1600);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 610', () => {
    const query = `INSERT INTO memory SELECT * FROM numbers(1000, 100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 611', () => {
    const query = `INSERT INTO memory SELECT * FROM numbers(9000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 612', () => {
    const query = `INSERT INTO memory SELECT * FROM numbers(9000, 10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 613', () => {
    const query = `INSERT INTO range_dictionary_nullable_source_table VALUES (0, toDate('2019-05-05'), toDate('2019-05-20'), 0), (1, toDate('2019-05-05'), toDate('2019-05-20'), NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 614', () => {
    const query = `INSERT INTO t_nullable_keys_1 VALUES (1), (1), (NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 615', () => {
    const query = `INSERT INTO t_nullable_keys_2 VALUES (NULL), (1), (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 616', () => {
    const query = `INSERT INTO t_nullable_keys_3 VALUES (NULL), (NULL), (NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 617', () => {
    const query = `INSERT INTO t_nullable_keys_4 VALUES (1), (1), (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 618', () => {
    const query = `INSERT INTO t_nullable_keys_5 VALUES (1), (NULL), (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 619', () => {
    const query = `INSERT INTO t_nullable_keys_6 VALUES (NULL), (1), (NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 620', () => {
    const query = `INSERT INTO t_uniq_exact SELECT 0, randomPrintableASCII(5), rand() FROM numbers(300000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 621', () => {
    const query = `INSERT INTO t_uniq_exact SELECT 1, randomPrintableASCII(5), rand() FROM numbers(300000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 622', () => {
    const query = `INSERT INTO t_uniq_exact SELECT 2, randomPrintableASCII(5), rand() FROM numbers(300000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 623', () => {
    const query = `INSERT INTO t_uniq_exact SELECT 3, randomPrintableASCII(5), rand() FROM numbers(300000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 624', () => {
    const query = `INSERT INTO t_uniq_exact SELECT 4, randomPrintableASCII(5), rand() FROM numbers(300000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 625', () => {
    const query = `INSERT INTO t_uniq_exact SELECT 5, randomPrintableASCII(5), rand() FROM numbers(300000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 626', () => {
    const query = `INSERT INTO t_uniq_exact SELECT 6, randomPrintableASCII(5), rand() FROM numbers(300000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 627', () => {
    const query = `INSERT INTO t_uniq_exact SELECT 7, randomPrintableASCII(5), rand() FROM numbers(300000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 628', () => {
    const query = `INSERT INTO t_uniq_exact SELECT 8, randomPrintableASCII(5), rand() FROM numbers(300000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 629', () => {
    const query = `INSERT INTO t_uniq_exact SELECT 9, randomPrintableASCII(5), rand() FROM numbers(300000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 630', () => {
    const query = `INSERT INTO t_optimize_equal_ranges SELECT 0, toString(number), number FROM numbers(30000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 631', () => {
    const query = `INSERT INTO t_optimize_equal_ranges SELECT 1, toString(number), number FROM numbers(30000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 632', () => {
    const query = `INSERT INTO t_optimize_equal_ranges SELECT 2, toString(number), number FROM numbers(30000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 633', () => {
    const query = `INSERT INTO test SELECT number DIV 2, number
FROM numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 634', () => {
    const query = `INSERT INTO test select number from numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 635', () => {
    const query = `INSERT INTO src VALUES (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 636', () => {
    const query = `INSERT INTO src SELECT number % 10 as a, number as b FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 637', () => {
    const query = `INSERT INTO dst_null SELECT a, b FROM src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 638', () => {
    const query = `INSERT INTO partitioned_table VALUES (1, 'A'), (2, 'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 639', () => {
    const query = `INSERT INTO partitioned_table VALUES (1, 'A'), (2, 'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 640', () => {
    const query = `INSERT INTO partitioned_table VALUES (1, 'D'), (2, 'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 641', () => {
    const query = `INSERT INTO partitioned_table SETTINGS insert_deduplication_token='token_1' VALUES (1, 'A'), (2, 'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 642', () => {
    const query = `INSERT INTO partitioned_table SETTINGS insert_deduplication_token='token_2' VALUES (1, 'A'), (2, 'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 643', () => {
    const query = `INSERT INTO partitioned_table SETTINGS insert_deduplication_token='token_3' VALUES (1, 'D'), (2, 'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 644', () => {
    const query = `INSERT INTO partitioned_table SETTINGS insert_deduplication_token='token_0' VALUES (1, 'A'), (2, 'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 645', () => {
    const query = `INSERT INTO partitioned_table SETTINGS insert_deduplication_token='token_0' VALUES (1, 'A'), (2, 'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 646', () => {
    const query = `INSERT INTO partitioned_table SETTINGS insert_deduplication_token='token_0' VALUES (1, 'D'), (2, 'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 647', () => {
    const query = `INSERT INTO dst VALUES (1, 'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 648', () => {
    const query = `INSERT INTO dst VALUES (2, 'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 649', () => {
    const query = `INSERT INTO dst SELECT 0 AS key,
'A' AS value
FROM numbers(2)
SETTINGS insert_deduplication_token='some_user_token';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 650', () => {
    const query = `INSERT INTO dst SELECT 1 AS key,
'b' AS value
FROM numbers(2)
SETTINGS insert_deduplication_token='some_user_token';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 651', () => {
    const query = `INSERT INTO dst SELECT 0 AS key,
'A' AS value
FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 652', () => {
    const query = `INSERT INTO dst SELECT number + 1 AS key,
IF(key = 0, 'A', 'B') AS value
FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 653', () => {
    const query = `INSERT INTO url_na_log SETTINGS max_insert_block_size = 200000
SELECT
209,
CAST('2022-08-09', 'Date') + toIntervalDay(intDiv(number, 10000))
FROM numbers(130000)
SETTINGS max_insert_block_size = 200000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 654', () => {
    const query = `INSERT INTO 03006_test VALUES ('2024-03-05', 1), ('2024-03-05', 2), ('2024-03-05', 1);  -- { serverError SUPPORT_IS_DISABLED  } INSERT INTO 03006_test SETTINGS compatibility='24.1' VALUES ('2024-03-05', 1), ('2024-03-05', 2), ('2024-03-05', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 655', () => {
    const query = `INSERT INTO 03006_test SETTINGS async_insert=0 VALUES ('2024-03-05', 1), ('2024-03-05', 2), ('2024-03-05', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 656', () => {
    const query = `INSERT INTO 03006_test SETTINGS deduplicate_blocks_in_dependent_materialized_views=0 VALUES ('2024-03-05', 1), ('2024-03-05', 2), ('2024-03-05', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 657', () => {
    const query = `INSERT INTO 03006_test SETTINGS throw_if_deduplication_in_dependent_materialized_views_enabled_with_async_insert=0 VALUES ('2024-03-05', 1), ('2024-03-05', 2), ('2024-03-05', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 658', () => {
    const query = `INSERT INTO 03006_buffer_overflow_l SELECT * FROM generateRandom() limit 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 659', () => {
    const query = `INSERT INTO 03006_buffer_overflow_r SELECT * FROM generateRandom() limit 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 660', () => {
    const query = `INSERT INTO test SELECT x.number FROM (
SELECT number
FROM system.numbers
LIMIT 10
) AS x
INNER JOIN input('a UInt64') AS y ON x.number = y.a
Format CSV 2
select * from test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 661', () => {
    const query = `insert into function file(concat(currentDatabase(), '.03004_data.bsonEachRow'), auto, 'null Nullable(UInt32)') select number % 2 ? NULL : number from numbers(5) settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 662', () => {
    const query = `INSERT INTO t_length_1 VALUES (1, [1, 2, 3]), (2, [4, 5]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 663', () => {
    const query = `INSERT INTO t_length_2 VALUES (1, 3), (1, 2), (2, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 664', () => {
    const query = `INSERT INTO users VALUES (6666, Null, 48);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 665', () => {
    const query = `INSERT INTO t_sample_factor(a, b) VALUES (1, 2), (3, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 666', () => {
    const query = `insert into test select * from numbers(50000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 667', () => {
    const query = `INSERT INTO t__fuzz_0 SELECT * FROM generateRandom() LIMIT 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 668', () => {
    const query = `INSERT INTO landing (status, id, timestamp) SELECT * FROM generateRandom() LIMIT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 669', () => {
    const query = `INSERT INTO ds SELECT * FROM landing SETTINGS insert_deduplicate=1, insert_deduplication_token='token1',
max_insert_threads=5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 670', () => {
    const query = `INSERT INTO ds SELECT * FROM landing SETTINGS insert_deduplicate=1, insert_deduplication_token='token2',
max_insert_threads=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 671', () => {
    const query = `INSERT INTO ds SELECT * FROM landing_dist SETTINGS insert_deduplicate=1, insert_deduplication_token='token3',
max_insert_threads=5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 672', () => {
    const query = `INSERT INTO ds SELECT * FROM landing_dist SETTINGS insert_deduplicate=1, insert_deduplication_token='token4',
max_insert_threads=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 673', () => {
    const query = `INSERT INTO t_data_version VALUES (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 674', () => {
    const query = `INSERT INTO t_data_version VALUES (2, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 675', () => {
    const query = `INSERT INTO t_data_version VALUES (3, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 676', () => {
    const query = `INSERT INTO lwd_merge SELECT number FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 677', () => {
    const query = `INSERT INTO lwd_merge SELECT number FROM numbers(10000, 10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 678', () => {
    const query = `INSERT INTO t_block_offset SELECT number * 2 FROM numbers(8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 679', () => {
    const query = `INSERT INTO t_block_offset SELECT number * 2 FROM numbers(8, 8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 680', () => {
    const query = `INSERT INTO t_block_offset SELECT number * 2 + 1 FROM numbers(16);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 681', () => {
    const query = `insert into x select number, number * 2, number * 3 from numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 682', () => {
    const query = `INSERT INTO 03000_traverse_shadow_system_data_path_table VALUES (0, 'data');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 683', () => {
    const query = `INSERT INTO skip_table SELECT number, intDiv(number, 4096) FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 684', () => {
    const query = `INSERT INTO t_table_select (id) SELECT number FROM numbers(30);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 685', () => {
    const query = `INSERT INTO visits_order SELECT 2, 'user2', number from numbers(1, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 686', () => {
    const query = `INSERT INTO visits_order SELECT 2, 'another_user2', number*2 from numbers(1, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 687', () => {
    const query = `INSERT INTO visits_order SELECT 2, 'yet_another_user2', number*3 from numbers(1, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 688', () => {
    const query = `INSERT INTO test SELECT sipHash64(number, 1), sipHash64(number, 2), sipHash64(number, 3) FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 689', () => {
    const query = `insert into attach_partition_t7 values (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 690', () => {
    const query = `INSERT INTO hits values('2024-01-01', [1, 2, 3]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 691', () => {
    const query = `INSERT INTO too_many_parts SELECT * FROM numbers_mt(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 692', () => {
    const query = `INSERT INTO too_many_parts SELECT * FROM numbers_mt(10); --  { serverError TOO_MANY_PARTS } DROP TABLE too_many_parts;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 693', () => {
    const query = `INSERT INTO test_0 VALUES (toDateTime64('2023-01-01 00:00:00', 0));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 694', () => {
    const query = `INSERT INTO test_0 VALUES (toDateTime64('2023-01-01 00:00:00.123456789', 0));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 695', () => {
    const query = `INSERT INTO test_0 VALUES (toDateTime64('2023-01-01 01:01:01', 1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 696', () => {
    const query = `INSERT INTO test_0 VALUES (toDateTime64('2023-01-01 01:01:01.123456789', 1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 697', () => {
    const query = `INSERT INTO test_0 VALUES (toDateTime64('2023-01-02 02:02:02', 2));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 698', () => {
    const query = `INSERT INTO test_0 VALUES (toDateTime64('2023-01-02 02:02:02.123456789', 2));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 699', () => {
    const query = `INSERT INTO test_0 VALUES (toDateTime64('2023-01-03 03:03:03', 3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 700', () => {
    const query = `INSERT INTO test_0 VALUES (toDateTime64('2023-01-03 03:03:03.123456789', 3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 701', () => {
    const query = `INSERT INTO test_0 VALUES (toDateTime64('2023-01-04 04:04:04', 4));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 702', () => {
    const query = `INSERT INTO test_0 VALUES (toDateTime64('2023-01-04 04:04:04.123456789', 4));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 703', () => {
    const query = `INSERT INTO test_0 VALUES (toDateTime64('2023-01-05 05:05:05', 5));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 704', () => {
    const query = `INSERT INTO test_0 VALUES (toDateTime64('2023-01-05 05:05:05.123456789', 5));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 705', () => {
    const query = `INSERT INTO test_0 VALUES (toDateTime64('2023-01-06 06:06:06', 6));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 706', () => {
    const query = `INSERT INTO test_0 VALUES (toDateTime64('2023-01-06 06:06:06.123456789', 6));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 707', () => {
    const query = `INSERT INTO test_0 VALUES (toDateTime64('2023-01-07 07:07:07', 7));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 708', () => {
    const query = `INSERT INTO test_0 VALUES (toDateTime64('2023-01-07 07:07:07.123456789', 7));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 709', () => {
    const query = `INSERT INTO test_0 VALUES (toDateTime64('2023-01-08 08:08:08', 8));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 710', () => {
    const query = `INSERT INTO test_0 VALUES (toDateTime64('2023-01-08 08:08:08.123456789', 8));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 711', () => {
    const query = `INSERT INTO test_0 VALUES (toDateTime64('2023-01-09 09:09:09', 9));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 712', () => {
    const query = `INSERT INTO test_0 VALUES (toDateTime64('2023-01-09 09:09:09.123456789', 9));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 713', () => {
    const query = `INSERT INTO test_2 VALUES (toDateTime64('2023-01-01 00:00:00', 0));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 714', () => {
    const query = `INSERT INTO test_2 VALUES (toDateTime64('2023-01-01 00:00:00.123456789', 0));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 715', () => {
    const query = `INSERT INTO test_2 VALUES (toDateTime64('2023-01-01 01:01:01', 1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 716', () => {
    const query = `INSERT INTO test_2 VALUES (toDateTime64('2023-01-01 01:01:01.123456789', 1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 717', () => {
    const query = `INSERT INTO test_2 VALUES (toDateTime64('2023-01-02 02:02:02', 2));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 718', () => {
    const query = `INSERT INTO test_2 VALUES (toDateTime64('2023-01-02 02:02:02.123456789', 2));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 719', () => {
    const query = `INSERT INTO test_2 VALUES (toDateTime64('2023-01-03 03:03:03', 3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 720', () => {
    const query = `INSERT INTO test_2 VALUES (toDateTime64('2023-01-03 03:03:03.123456789', 3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 721', () => {
    const query = `INSERT INTO test_2 VALUES (toDateTime64('2023-01-04 04:04:04', 4));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 722', () => {
    const query = `INSERT INTO test_2 VALUES (toDateTime64('2023-01-04 04:04:04.123456789', 4));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 723', () => {
    const query = `INSERT INTO test_2 VALUES (toDateTime64('2023-01-05 05:05:05', 5));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 724', () => {
    const query = `INSERT INTO test_2 VALUES (toDateTime64('2023-01-05 05:05:05.123456789', 5));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 725', () => {
    const query = `INSERT INTO test_2 VALUES (toDateTime64('2023-01-06 06:06:06', 6));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 726', () => {
    const query = `INSERT INTO test_2 VALUES (toDateTime64('2023-01-06 06:06:06.123456789', 6));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 727', () => {
    const query = `INSERT INTO test_2 VALUES (toDateTime64('2023-01-07 07:07:07', 7));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 728', () => {
    const query = `INSERT INTO test_2 VALUES (toDateTime64('2023-01-07 07:07:07.123456789', 7));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 729', () => {
    const query = `INSERT INTO test_2 VALUES (toDateTime64('2023-01-08 08:08:08', 8));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 730', () => {
    const query = `INSERT INTO test_2 VALUES (toDateTime64('2023-01-08 08:08:08.123456789', 8));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 731', () => {
    const query = `INSERT INTO test_2 VALUES (toDateTime64('2023-01-09 09:09:09', 9));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 732', () => {
    const query = `INSERT INTO test_2 VALUES (toDateTime64('2023-01-09 09:09:09.123456789', 9));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 733', () => {
    const query = `INSERT INTO test_3 VALUES (toDateTime64('2023-01-01 00:00:00', 0));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 734', () => {
    const query = `INSERT INTO test_3 VALUES (toDateTime64('2023-01-01 00:00:00.123456789', 0));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 735', () => {
    const query = `INSERT INTO test_3 VALUES (toDateTime64('2023-01-01 01:01:01', 1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 736', () => {
    const query = `INSERT INTO test_3 VALUES (toDateTime64('2023-01-01 01:01:01.123456789', 1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 737', () => {
    const query = `INSERT INTO test_3 VALUES (toDateTime64('2023-01-02 02:02:02', 2));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 738', () => {
    const query = `INSERT INTO test_3 VALUES (toDateTime64('2023-01-02 02:02:02.123456789', 2));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 739', () => {
    const query = `INSERT INTO test_3 VALUES (toDateTime64('2023-01-03 03:03:03', 3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 740', () => {
    const query = `INSERT INTO test_3 VALUES (toDateTime64('2023-01-03 03:03:03.123456789', 3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 741', () => {
    const query = `INSERT INTO test_3 VALUES (toDateTime64('2023-01-04 04:04:04', 4));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 742', () => {
    const query = `INSERT INTO test_3 VALUES (toDateTime64('2023-01-04 04:04:04.123456789', 4));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 743', () => {
    const query = `INSERT INTO test_3 VALUES (toDateTime64('2023-01-05 05:05:05', 5));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 744', () => {
    const query = `INSERT INTO test_3 VALUES (toDateTime64('2023-01-05 05:05:05.123456789', 5));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 745', () => {
    const query = `INSERT INTO test_3 VALUES (toDateTime64('2023-01-06 06:06:06', 6));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 746', () => {
    const query = `INSERT INTO test_3 VALUES (toDateTime64('2023-01-06 06:06:06.123456789', 6));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 747', () => {
    const query = `INSERT INTO test_3 VALUES (toDateTime64('2023-01-07 07:07:07', 7));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 748', () => {
    const query = `INSERT INTO test_3 VALUES (toDateTime64('2023-01-07 07:07:07.123456789', 7));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 749', () => {
    const query = `INSERT INTO test_3 VALUES (toDateTime64('2023-01-08 08:08:08', 8));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 750', () => {
    const query = `INSERT INTO test_3 VALUES (toDateTime64('2023-01-08 08:08:08.123456789', 8));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 751', () => {
    const query = `INSERT INTO test_3 VALUES (toDateTime64('2023-01-09 09:09:09', 9));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 752', () => {
    const query = `INSERT INTO test_3 VALUES (toDateTime64('2023-01-09 09:09:09.123456789', 9));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 753', () => {
    const query = `INSERT INTO test_6 VALUES (toDateTime64('2023-01-01 00:00:00', 0));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 754', () => {
    const query = `INSERT INTO test_6 VALUES (toDateTime64('2023-01-01 00:00:00.123456789', 0));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 755', () => {
    const query = `INSERT INTO test_6 VALUES (toDateTime64('2023-01-01 01:01:01', 1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 756', () => {
    const query = `INSERT INTO test_6 VALUES (toDateTime64('2023-01-01 01:01:01.123456789', 1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 757', () => {
    const query = `INSERT INTO test_6 VALUES (toDateTime64('2023-01-02 02:02:02', 2));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 758', () => {
    const query = `INSERT INTO test_6 VALUES (toDateTime64('2023-01-02 02:02:02.123456789', 2));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 759', () => {
    const query = `INSERT INTO test_6 VALUES (toDateTime64('2023-01-03 03:03:03', 3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 760', () => {
    const query = `INSERT INTO test_6 VALUES (toDateTime64('2023-01-03 03:03:03.123456789', 3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 761', () => {
    const query = `INSERT INTO test_6 VALUES (toDateTime64('2023-01-04 04:04:04', 4));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 762', () => {
    const query = `INSERT INTO test_6 VALUES (toDateTime64('2023-01-04 04:04:04.123456789', 4));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 763', () => {
    const query = `INSERT INTO test_6 VALUES (toDateTime64('2023-01-05 05:05:05', 5));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 764', () => {
    const query = `INSERT INTO test_6 VALUES (toDateTime64('2023-01-05 05:05:05.123456789', 5));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 765', () => {
    const query = `INSERT INTO test_6 VALUES (toDateTime64('2023-01-06 06:06:06', 6));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 766', () => {
    const query = `INSERT INTO test_6 VALUES (toDateTime64('2023-01-06 06:06:06.123456789', 6));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 767', () => {
    const query = `INSERT INTO test_6 VALUES (toDateTime64('2023-01-07 07:07:07', 7));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 768', () => {
    const query = `INSERT INTO test_6 VALUES (toDateTime64('2023-01-07 07:07:07.123456789', 7));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 769', () => {
    const query = `INSERT INTO test_6 VALUES (toDateTime64('2023-01-08 08:08:08', 8));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 770', () => {
    const query = `INSERT INTO test_6 VALUES (toDateTime64('2023-01-08 08:08:08.123456789', 8));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 771', () => {
    const query = `INSERT INTO test_6 VALUES (toDateTime64('2023-01-09 09:09:09', 9));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 772', () => {
    const query = `INSERT INTO test_6 VALUES (toDateTime64('2023-01-09 09:09:09.123456789', 9));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 773', () => {
    const query = `INSERT INTO test_9 VALUES (toDateTime64('2023-01-01 00:00:00', 0));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 774', () => {
    const query = `INSERT INTO test_9 VALUES (toDateTime64('2023-01-01 00:00:00.123456789', 0));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 775', () => {
    const query = `INSERT INTO test_9 VALUES (toDateTime64('2023-01-01 01:01:01', 1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 776', () => {
    const query = `INSERT INTO test_9 VALUES (toDateTime64('2023-01-01 01:01:01.123456789', 1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 777', () => {
    const query = `INSERT INTO test_9 VALUES (toDateTime64('2023-01-02 02:02:02', 2));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 778', () => {
    const query = `INSERT INTO test_9 VALUES (toDateTime64('2023-01-02 02:02:02.123456789', 2));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 779', () => {
    const query = `INSERT INTO test_9 VALUES (toDateTime64('2023-01-03 03:03:03', 3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 780', () => {
    const query = `INSERT INTO test_9 VALUES (toDateTime64('2023-01-03 03:03:03.123456789', 3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 781', () => {
    const query = `INSERT INTO test_9 VALUES (toDateTime64('2023-01-04 04:04:04', 4));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 782', () => {
    const query = `INSERT INTO test_9 VALUES (toDateTime64('2023-01-04 04:04:04.123456789', 4));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 783', () => {
    const query = `INSERT INTO test_9 VALUES (toDateTime64('2023-01-05 05:05:05', 5));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 784', () => {
    const query = `INSERT INTO test_9 VALUES (toDateTime64('2023-01-05 05:05:05.123456789', 5));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 785', () => {
    const query = `INSERT INTO test_9 VALUES (toDateTime64('2023-01-06 06:06:06', 6));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 786', () => {
    const query = `INSERT INTO test_9 VALUES (toDateTime64('2023-01-06 06:06:06.123456789', 6));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 787', () => {
    const query = `INSERT INTO test_9 VALUES (toDateTime64('2023-01-07 07:07:07', 7));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 788', () => {
    const query = `INSERT INTO test_9 VALUES (toDateTime64('2023-01-07 07:07:07.123456789', 7));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 789', () => {
    const query = `INSERT INTO test_9 VALUES (toDateTime64('2023-01-08 08:08:08', 8));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 790', () => {
    const query = `INSERT INTO test_9 VALUES (toDateTime64('2023-01-08 08:08:08.123456789', 8));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 791', () => {
    const query = `INSERT INTO test_9 VALUES (toDateTime64('2023-01-09 09:09:09', 9));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 792', () => {
    const query = `INSERT INTO test_9 VALUES (toDateTime64('2023-01-09 09:09:09.123456789', 9));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 793', () => {
    const query = `insert into b values (0, 'a'), (1, 'b'),   (1, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 794', () => {
    const query = `INSERT INTO t__fuzz_0 Select number, number, number FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 795', () => {
    const query = `insert into data values (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 796', () => {
    const query = `INSERT INTO \`table\` FORMAT Values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 797', () => {
    const query = `INSERT INTO TABLE \`table\` FORMAT Values (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 798', () => {
    const query = `INSERT INTO TABLE table FORMAT Values (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 799', () => {
    const query = `INSERT INTO table FORMAT Values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 800', () => {
    const query = `insert into test values (42), ('Hello'), (NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 801', () => {
    const query = `INSERT INTO test_table VALUES ('1', 1704472004759, 1), ('3', 1704153600000, 2), ('3', 1704153600000, 3), ('5', 1700161822134, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 802', () => {
    const query = `INSERT INTO test_table VALUES ('1', 1704468357009, 1), ('3', 1704153600000, 2), ('3', 1704153600000, 3), ('5', 1701458520878, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 803', () => {
    const query = `INSERT INTO test_table VALUES ('1', 1704470704762, 1), ('3', 1704153600000, 2), ('3', 1704153600000, 3), ('5', 1702609856302, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 804', () => {
    const query = `INSERT INTO users VALUES (1, 'pufit'), (1, 'pufit2'), (1, 'pufit3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 805', () => {
    const query = `insert into test values (42, 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 806', () => {
    const query = `insert into test values (42, 43);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 807', () => {
    const query = `insert into test values (43, 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 808', () => {
    const query = `insert into test values ('abc', 'abc');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 809', () => {
    const query = `insert into test values ('abc', 'abd');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 810', () => {
    const query = `insert into test values ('abd', 'abc');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 811', () => {
    const query = `insert into test values ([1,2,3], [1,2,3]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 812', () => {
    const query = `insert into test values ([1,2,3], [1,2,4]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 813', () => {
    const query = `insert into test values ([1,2,4], [1,2,3]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 814', () => {
    const query = `insert into test values (NULL, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 815', () => {
    const query = `insert into test values (42, 'abc');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 816', () => {
    const query = `insert into test values ('abc', 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 817', () => {
    const query = `insert into test values (42, [1,2,3]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 818', () => {
    const query = `insert into test values ([1,2,3], 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 819', () => {
    const query = `insert into test values (42, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 820', () => {
    const query = `insert into test values (NULL, 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 821', () => {
    const query = `insert into test values ('abc', [1,2,3]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 822', () => {
    const query = `insert into test values ([1,2,3], 'abc');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 823', () => {
    const query = `insert into test values ('abc', NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 824', () => {
    const query = `insert into test values (NULL, 'abc');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 825', () => {
    const query = `insert into test values ([1,2,3], NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 826', () => {
    const query = `insert into test values (NULL, [1,2,3]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 827', () => {
    const query = `INSERT INTO tabc (a, s) SELECT number, 'abc' || toString(number) FROM numbers(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 828', () => {
    const query = `INSERT INTO ta SELECT number FROM numbers(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 829', () => {
    const query = `INSERT INTO tb SELECT number FROM numbers(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 830', () => {
    const query = `INSERT INTO users VALUES (1231, 'John', 'Ksenia');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 831', () => {
    const query = `INSERT INTO users VALUES (6666, 'Ksenia', '');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 832', () => {
    const query = `INSERT INTO t VALUES (1,1,'a'),(2,2,'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 833', () => {
    const query = `INSERT INTO test_empty VALUES ([]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 834', () => {
    const query = `INSERT INTO test_empty VALUES ([1]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 835', () => {
    const query = `INSERT INTO test_null VALUES ([NULL, NULL]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 836', () => {
    const query = `INSERT INTO test_null VALUES ([NULL]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 837', () => {
    const query = `INSERT INTO test_null VALUES ([1,2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 838', () => {
    const query = `INSERT INTO test_nested_arrays VALUES ([[1,2,3,4,5,6], [1,2,4,5]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 839', () => {
    const query = `INSERT INTO test_nested_arrays VALUES ([[1,2,4,5]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 840', () => {
    const query = `INSERT INTO test_nested_arrays VALUES ([[1,4,3,0,5,5,5]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 841', () => {
    const query = `INSERT INTO test_numbers VALUES ([1,2,3,4,5,6]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 842', () => {
    const query = `INSERT INTO test_numbers VALUES ([1,2,4,5]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 843', () => {
    const query = `INSERT INTO test_numbers VALUES ([1,4,3,0,5,5,5]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 844', () => {
    const query = `INSERT INTO test_numbers VALUES ([9]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 845', () => {
    const query = `INSERT INTO test_big_numbers_sep SELECT array(number) FROM numbers_mt(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 846', () => {
    const query = `INSERT INTO test_big_numbers SELECT range(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 847', () => {
    const query = `INSERT INTO test_big_numbers SELECT range(99999);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 848', () => {
    const query = `INSERT INTO test_big_numbers VALUES ([9]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 849', () => {
    const query = `INSERT INTO test_string VALUES (['a', 'b', 'c', 'd', 'e', 'f']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 850', () => {
    const query = `INSERT INTO test_string VALUES (['a', 'aa', 'b', 'bb', 'c', 'cc', 'd', 'dd', 'f', 'ff']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 851', () => {
    const query = `INSERT INTO test_string VALUES (['ae', 'ab', 'a', 'bb', 'c']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 852', () => {
    const query = `INSERT INTO test_big_string SELECT groupArray(toString(number)) FROM numbers_mt(50000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 853', () => {
    const query = `INSERT INTO test_big_string SELECT groupArray(toString(number)) FROM numbers_mt(49999);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 854', () => {
    const query = `INSERT INTO test_big_string VALUES (['1']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 855', () => {
    const query = `INSERT INTO test_big_string VALUES (['a']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 856', () => {
    const query = `INSERT INTO test_datetime VALUES ([toDateTime('2023-01-01 00:00:00'), toDateTime('2023-01-01 01:02:03'), toDateTime('2023-01-01 02:03:04')]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 857', () => {
    const query = `INSERT INTO test_datetime VALUES ([toDateTime('2023-01-01 00:00:00'), toDateTime('2023-01-01 01:02:04'), toDateTime('2023-01-01 02:03:05')]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 858', () => {
    const query = `INSERT INTO test_date32 VALUES ([toDate32('2023-01-01 00:00:00'), toDate32('2023-01-01 00:00:01')]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 859', () => {
    const query = `INSERT INTO test_date VALUES ([toDate('2023-01-01 00:00:00'), toDate('2023-01-01 00:00:01')]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 860', () => {
    const query = `INSERT INTO t_index_agg_func SELECT number % 10, initializeAggregation('avgState', toUInt64(number % 20)) FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 861', () => {
    const query = `INSERT INTO t_index_agg_func SELECT number % 10, initializeAggregation('avgState', toUInt64(number % 20)) FROM numbers(1000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 862', () => {
    const query = `INSERT INTO shared_test_table VALUES (123), (651), (446), (315), (234), (764);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 863', () => {
    const query = `insert into test values ('xxx', 'x', {'content-type':'text/plain','user-agent':'bulk-tests'});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 864', () => {
    const query = `insert into test values ('xxx', 'y', {'content-type':'application/json','user-agent':'bulk-tests'});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 865', () => {
    const query = `insert into test select 'xxx', number, map('content-type', 'x' ) FROM numbers(1e2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 866', () => {
    const query = `INSERT INTO t_distr VALUES (1), (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 867', () => {
    const query = `INSERT INTO t_distr VALUES (4), (5), (6), (7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 868', () => {
    const query = `INSERT INTO test_unexpected_cluster SELECT * FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 869', () => {
    const query = `INSERT INTO t_vertical_merge_memory SELECT number, arrayMap(x -> repeat('a', 50), range(1000)) FROM numbers(3000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 870', () => {
    const query = `INSERT INTO t_vertical_merge_memory SELECT number, arrayMap(x -> repeat('a', 50), range(1000)) FROM numbers(3001);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 871', () => {
    const query = `INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 872', () => {
    const query = `insert into function file('02977_1.csv') select '20240305', 1, ['s', 'd'], map('a', 2), tuple('222', 33, map('abc', 5)) SETTINGS engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 873', () => {
    const query = `INSERT INTO t2 VALUES (1, {'a': (1, 2), 'b': (2, 3)}),;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 874', () => {
    const query = `INSERT INTO t3 VALUES (1, ('A', {'a':(1, 2),'b':(2, 3)}));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 875', () => {
    const query = `INSERT INTO table_with_some_columns SELECT rand(), number + 10 from numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 876', () => {
    const query = `INSERT INTO table_with_some_columns SELECT rand(), number+222222222 from numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 877', () => {
    const query = `INSERT INTO table_with_some_columns SELECT rand() from numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 878', () => {
    const query = `INSERT INTO landing SELECT 1 as timestamp, 1 AS value FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 879', () => {
    const query = `INSERT INTO tlb (k) SELECT 0 FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 880', () => {
    const query = `INSERT INTO tlb (k) SELECT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 881', () => {
    const query = `INSERT INTO t_func_to_subcolumns_variant VALUES (1, 'foo') (2, 111);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 882', () => {
    const query = `INSERT INTO t_func_to_subcolumns_map VALUES (1, map('aaa', 1, 'bbb', 2)) (2, map('ccc', 3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 883', () => {
    const query = `INSERT INTO t_column_names VALUES ([1, 2, 3], 'foo');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 884', () => {
    const query = `INSERT INTO t_subcolumns_if SELECT number::Nullable(Int64) as number FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 885', () => {
    const query = `INSERT INTO tp SELECT number%3, 2 FROM numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 886', () => {
    const query = `INSERT INTO tp SELECT number % 3, 1, 1 FROM numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 887', () => {
    const query = `INSERT INTO tp SELECT number % 3, 1, -1 FROM numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 888', () => {
    const query = `INSERT INTO tp SELECT number % 3, 2, 1 FROM numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 889', () => {
    const query = `INSERT INTO tp SELECT number % 3, 1, -1, 0 FROM numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 890', () => {
    const query = `INSERT INTO tp SELECT number % 3, 2, 1, 1 FROM numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 891', () => {
    const query = `INSERT INTO tp SELECT number % 3, 1, 1, 0 FROM numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 892', () => {
    const query = `INSERT INTO tp SELECT number % 3, 1 FROM numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 893', () => {
    const query = `INSERT INTO tp SELECT number % 3, 2 FROM numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 894', () => {
    const query = `INSERT INTO t1 SELECT (sipHash64(number, 'x') % 10000000) + 1 AS key, concat('val', toString(number)) AS s FROM numbers_mt(10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 895', () => {
    const query = `INSERT INTO t2 SELECT (sipHash64(number, 'y') % 1000000) + 1 AS key, concat('val', toString(number)) AS s FROM numbers_mt(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 896', () => {
    const query = `INSERT INTO im VALUES (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 897', () => {
    const query = `INSERT INTO ts VALUES (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 898', () => {
    const query = `INSERT INTO async_insert_mt_test SETTINGS
async_insert=1,
wait_for_async_insert=1,
async_insert_busy_timeout_min_ms=10,
async_insert_busy_timeout_max_ms=500,
async_insert_busy_timeout_increase_rate=1.0,
async_insert_busy_timeout_decrease_rate=1.0
VALUES (3, []), (1, [1, 3]), (2, [7, 8]), (4, [5, 9]), (5, [2, 6]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 899', () => {
    const query = `INSERT INTO async_insert_mt_test SETTINGS
async_insert=1,
wait_for_async_insert=1,
async_insert_busy_timeout_ms=500,
async_insert_busy_timeout_min_ms=500
VALUES (3, []), (1, [1, 3]), (2, [7, 8]), (4, [5, 9]), (5, [2, 6]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 900', () => {
    const query = `INSERT INTO async_insert_mt_test SETTINGS
async_insert=1,
wait_for_async_insert=1,
async_insert_busy_timeout_ms=100,
async_insert_busy_timeout_min_ms=500
VALUES (3, []), (1, [1, 3]), (2, [7, 8]), (4, [5, 9]), (5, [2, 6]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 901', () => {
    const query = `INSERT INTO async_insert_mt_test SETTINGS
async_insert=1,
wait_for_async_insert=1,
async_insert_busy_timeout_increase_rate=-1.0
VALUES (3, []), (1, [1, 3]), (2, [7, 8]), (4, [5, 9]), (5, [2, 6]); -- { serverError INVALID_SETTING_VALUE }
INSERT INTO async_insert_mt_test
SETTINGS
async_insert=1,
wait_for_async_insert=1,
async_insert_busy_timeout_decrease_rate=-1.0
VALUES (3, []), (1, [1, 3]), (2, [7, 8]), (4, [5, 9]), (5, [2, 6]); -- { serverError INVALID_SETTING_VALUE }
DROP TABLE IF EXISTS async_insert_mt_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 902', () => {
    const query = `INSERT INTO tab SELECT if(number % 2, ['value'], []) FROM system.numbers
LIMIT 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 903', () => {
    const query = `INSERT INTO f32_table values ('49.9');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 904', () => {
    const query = `insert into a values (1, 2), (0, 5), (3, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 905', () => {
    const query = `insert into empsalary values ('sales',3,4800,'2007-08-01'), ('sales',1,5000,'2006-10-01'), ('sales',4,4800,'2007-08-08');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 906', () => {
    const query = `INSERT INTO t1 SELECT number % 2, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 907', () => {
    const query = `INSERT INTO t2 SELECT number % 2 FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 908', () => {
    const query = `INSERT INTO t SELECT number, toString(number) FROM numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 909', () => {
    const query = `INSERT INTO r SELECT number, toString(number) FROM numbers(2, 8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 910', () => {
    const query = `INSERT INTO r VALUES (NULL, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 911', () => {
    const query = `insert into test_parallel_index select number from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 912', () => {
    const query = `INSERT INTO tab2 SELECT number FROM system.numbers limit 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 913', () => {
    const query = `INSERT INTO test_tuple_filter__fuzz_2 SELECT number, toString(number), toDate('2024-01-01') + number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 914', () => {
    const query = `INSERT INTO hit SELECT * FROM generateRandom() LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 915', () => {
    const query = `insert into data values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 916', () => {
    const query = `insert into data values (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 917', () => {
    const query = `INSERT INTO dict_with_ttl VALUES (0, 'foo');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 918', () => {
    const query = `INSERT INTO spark_bar_test VALUES (1,'2020-01-01'), (3,'2020-01-02'), (4,'2020-01-02'), (-3,'2020-01-02'), (5,'2020-01-03'), (2,'2020-01-04'), (3,'2020-01-05'), (7,'2020-01-06'), (6,'2020-01-07'), (8,'2020-01-08'), (2,'2020-01-11');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 919', () => {
    const query = `INSERT INTO 02952_disjunction_optimization VALUES (1, 'test'), (2, 'test2'), (3, 'another'), (3, ''), (4, '');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 920', () => {
    const query = `INSERT INTO test SELECT number, tuple(number, arrayMap(x -> tuple(number + 1, number + 2), range(number % 10))) FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 921', () => {
    const query = `insert into a select -number from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 922', () => {
    const query = `insert into b select number * 10 from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 923', () => {
    const query = `insert into b select number * 100 from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 924', () => {
    const query = `INSERT INTO part_log_bytes_uncompressed SELECT 1, 1 FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 925', () => {
    const query = `INSERT INTO part_log_bytes_uncompressed SELECT 2, 1 FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 926', () => {
    const query = `INSERT INTO part_log_bytes_uncompressed SELECT 3, 1 FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 927', () => {
    const query = `INSERT INTO dictionary_source_table VALUES (0, 'zero', 'zero', 0), (1, 'one', NULL, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 928', () => {
    const query = `INSERT INTO range_dictionary_source_table VALUES (0, '2023-01-01', Null, Null), (1, '2022-11-09', '2022-12-08', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 929', () => {
    const query = `INSERT INTO ip_dictionary_source_table VALUES (0, '202.79.32.0/20', 17501, 'NP'), (1, '2620:0:870::/48', 3856, 'US'), (2, '2a02:6b8:1::/48', 13238, 'RU');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 930', () => {
    const query = `INSERT INTO polygon_dictionary_source_table VALUES([[[(3, 1), (0, 1), (0, -1), (3, -1)]]], 'East'), ([[[(-3, 1), (-3, -1), (0, -1), (0, 1)]]], 'West');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 931', () => {
    const query = `INSERT INTO points VALUES (0.5, 0), (-0.5, 0), (10,10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 932', () => {
    const query = `INSERT INTO regexp_dictionary_source_table VALUES (1, 0, 'Linux/(\\d+[\\.\\d]*).+tlinux', ['name', 'version'], ['TencentOS', '\\1']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 933', () => {
    const query = `INSERT INTO regexp_dictionary_source_table VALUES (2, 0, '(\\d+)/tclwebkit(\\d+[\\.\\d]*)', ['name', 'version', 'comment'], ['Android', '\$1', 'test \$1 and \$2']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 934', () => {
    const query = `INSERT INTO regexp_dictionary_source_table VALUES (3, 2, '33/tclwebkit', ['version'], ['13']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 935', () => {
    const query = `INSERT INTO regexp_dictionary_source_table VALUES (4, 2, '3[12]/tclwebkit', ['version'], ['12']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 936', () => {
    const query = `INSERT INTO regexp_dictionary_source_table VALUES (5, 2, '3[12]/tclwebkit', ['version'], ['11']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 937', () => {
    const query = `INSERT INTO regexp_dictionary_source_table VALUES (6, 2, '3[12]/tclwebkit', ['version'], ['10']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 938', () => {
    const query = `INSERT INTO ttl_group_by_bug(key, ts, value) SELECT number%5 as key, now() - interval 10 minute + number, 0 FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 939', () => {
    const query = `INSERT INTO merge_tree_in_subqueries VALUES(1, 'test1', 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 940', () => {
    const query = `INSERT INTO merge_tree_in_subqueries VALUES(2, 'test2', 8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 941', () => {
    const query = `INSERT INTO merge_tree_in_subqueries VALUES(3, 'test3', 8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 942', () => {
    const query = `INSERT INTO merge_tree_in_subqueries VALUES(4, 'test4', 1985);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 943', () => {
    const query = `INSERT INTO merge_tree_in_subqueries VALUES(5, 'test5', 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 944', () => {
    const query = `INSERT INTO t_merge_tree_index SELECT number % 5, number, 0, ['foo', 'bar'], ['aaa', 'bbb', 'ccc'], [11, 22, 33], (number, number), number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 945', () => {
    const query = `INSERT INTO t_merge_tree_index SELECT number % 5, number, number, 10, ['foo', 'bar'], ['aaa', 'bbb', 'ccc'], [11, 22, 33], (number, number), number FROM numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 946', () => {
    const query = `INSERT INTO t_merge_tree_index SELECT number % 5, number, number, 10, ['foo', 'bar'], ['aaa', 'bbb', 'ccc'], [11, 22, 33], (number, number), number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 947', () => {
    const query = `INSERT INTO t_merge_tree_index SELECT number % 5, number, 'v' || toString(number * number) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 948', () => {
    const query = `INSERT INTO t_merge_tree_index SELECT number % 5, number, 'v' || toString(number * number) FROM numbers(10, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 949', () => {
    const query = `INSERT INTO t_merge_tree_index SELECT number % 4, number, 'v' || toString(number * number) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 950', () => {
    const query = `INSERT INTO t_merge_tree_index SELECT number % 4, number, 'v' || toString(number * number) FROM numbers(10, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 951', () => {
    const query = `INSERT INTO 02947_table_1 VALUES (1),(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 952', () => {
    const query = `INSERT INTO 02947_table_2 VALUES (3),(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 953', () => {
    const query = `insert into t1 select number % 4, toString(number) from numbers(1000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 954', () => {
    const query = `insert into t2 select number % 4, toString(number) from numbers(2000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 955', () => {
    const query = `insert into t3 select number % 4, toString(number) from numbers(3000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 956', () => {
    const query = `INSERT INTO test_table SELECT 0, '0';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 957', () => {
    const query = `INSERT INTO test_table SELECT number + 1, number + 1 FROM numbers(15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 958', () => {
    const query = `INSERT INTO test_table SELECT 5, '5';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 959', () => {
    const query = `INSERT INTO test_table SELECT number + 8, number + 8 FROM numbers(8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 960', () => {
    const query = `INSERT INTO test_table SELECT number, number FROM numbers(32);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 961', () => {
    const query = `INSERT INTO tab (id, dflt) VALUES (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 962', () => {
    const query = `INSERT INTO tab (id) VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 963', () => {
    const query = `INSERT INTO tab (id, dflt) VALUES (2, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 964', () => {
    const query = `INSERT INTO tab (id) VALUES (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 965', () => {
    const query = `INSERT INTO tab (id) VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 966', () => {
    const query = `INSERT INTO literal_alias_misclassification values(1, 'a', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 967', () => {
    const query = `INSERT INTO literal_alias_misclassification values(2, 'b', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 968', () => {
    const query = `INSERT INTO tokenbf_v1_hasany_test VALUES (1, ['this is a test', 'example.com']), (2, ['another test', 'another example']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 969', () => {
    const query = `INSERT INTO ngrambf_v1_hasany_test VALUES (1, ['this is a test', 'example.com']), (2, ['another test', 'another example']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 970', () => {
    const query = `INSERT INTO tokenbf_tab VALUES (1, 'Well, Hello ClickHouse !'), (2, 'Well, Hello World !'), (3, 'Good Weather !'), (4, 'Say Hello !'), (5, 'Its An OLAP Database'), (6, 'True World Champion');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 971', () => {
    const query = `INSERT INTO ngrambf_tab VALUES (1, 'Hello ClickHouse'), (2, 'Hello World'), (3, 'Good Weather'), (4, 'Say Hello'), (5, 'OLAP Database'), (6, 'World Champion');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 972', () => {
    const query = `INSERT INTO order_by_all VALUES ('B', 3), ('C', NULL), ('D', 1), ('A', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 973', () => {
    const query = `insert into test_group_by_with_rollup_order values(1,1,'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 974', () => {
    const query = `insert into test_group_by_with_rollup_order values(2,2,'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 975', () => {
    const query = `insert into test_group_by_with_rollup_order values(3,3,'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 976', () => {
    const query = `insert into test_group_by_with_rollup_order values(4,4,'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 977', () => {
    const query = `INSERT INTO test_table VALUES (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 978', () => {
    const query = `INSERT INTO test_table VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 979', () => {
    const query = `INSERT INTO regex_test_table VALUES ('\\d[a-z]');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 980', () => {
    const query = `INSERT INTO t_proj_external SELECT 1, number%2, number%4, number FROM numbers(50000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 981', () => {
    const query = `INSERT INTO t_proj_external SELECT 1, number%2, number%4, number FROM numbers(100000) LIMIT 50000, 100000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 982', () => {
    const query = `INSERT INTO data_sparse_column VALUES (1, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 983', () => {
    const query = `INSERT INTO test_parallel_replicas_settings SELECT * FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 984', () => {
    const query = `INSERT INTO format_nested VALUES (['foo', 'bar'], ['qaz', 'qux']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 985', () => {
    const query = `INSERT INTO tab SELECT * FROM generateRandom() LIMIT 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 986', () => {
    const query = `insert into test select number from numbers(6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 987', () => {
    const query = `insert into test select number from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 988', () => {
    const query = `INSERT INTO t1 SELECT number, number FROM numbers(0, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 989', () => {
    const query = `INSERT INTO t1 SELECT number, number FROM numbers(3, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 990', () => {
    const query = `INSERT INTO t1 SELECT number, number FROM numbers(5, 7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 991', () => {
    const query = `INSERT INTO t1 SELECT number, number FROM numbers(12, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 992', () => {
    const query = `INSERT INTO t1 SELECT number, number FROM numbers(14, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 993', () => {
    const query = `INSERT INTO t1 SELECT number, number FROM numbers(15, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 994', () => {
    const query = `INSERT INTO t1 SELECT number, number FROM numbers(17, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 995', () => {
    const query = `INSERT INTO t1 SELECT number, number FROM numbers(18, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 996', () => {
    const query = `INSERT INTO t1 SELECT number, number FROM numbers(20, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 997', () => {
    const query = `INSERT INTO t1 SELECT number, number FROM numbers(22, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 998', () => {
    const query = `INSERT INTO t1 SELECT number, number FROM numbers(24, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 999', () => {
    const query = `INSERT INTO t1 SELECT number, number FROM numbers(26, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1000', () => {
    const query = `INSERT INTO t1 SELECT number, number FROM numbers(28, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1001', () => {
    const query = `INSERT INTO t2 SELECT number, number FROM numbers(0, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1002', () => {
    const query = `INSERT INTO t2 SELECT number, number FROM numbers(2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1003', () => {
    const query = `INSERT INTO t2 SELECT number, number FROM numbers(5, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1004', () => {
    const query = `INSERT INTO t2 SELECT number, number FROM numbers(10, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1005', () => {
    const query = `INSERT INTO t2 SELECT number, number FROM numbers(15, 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1006', () => {
    const query = `INSERT INTO test1 SELECT * FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1007', () => {
    const query = `INSERT INTO test2 SELECT * FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1008', () => {
    const query = `INSERT INTO raw VALUES ('3', '3'), ('42', '42');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1009', () => {
    const query = `insert into t_temp select rand(), now() from system.numbers limit 1_000_000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1010', () => {
    const query = `INSERT INTO tab VALUES ('abc') ('aC\$oC6uC<') ('MC<nchen');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1011', () => {
    const query = `INSERT INTO tab VALUES ('Also no punycode') ('London-') ('Mnchen-3ya') ('No punycode') ('Rtting-3ya') ('XYZ no punycode');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1012', () => {
    const query = `INSERT INTO join_inner_table__fuzz_146 SELECT CAST('833c9e22-c245-4eb5-8745-117a9a1f26b1', 'UUID') AS id, CAST(rowNumberInAllBlocks(), 'String') AS key, * FROM generateRandom('number Int64, value1 String, value2 String, time Int64', 1, 10, 2) LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1013', () => {
    const query = `INSERT INTO t_02709__fuzz_23 values (1, 1, '2023-12-01 00:00:00.000');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1014', () => {
    const query = `insert into from_table select 42;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1015', () => {
    const query = `INSERT INTO t_lwd_mutations SELECT number, 0 FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1016', () => {
    const query = `INSERT INTO t_materialize_delete SELECT number, number FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1017', () => {
    const query = `INSERT INTO test_table VALUES (1, 1.125, 1.11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1018', () => {
    const query = `INSERT INTO test_table VALUES (2, 2.250, 2.22);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1019', () => {
    const query = `INSERT INTO test_table VALUES (3, 3.375, 3.33);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1020', () => {
    const query = `INSERT INTO test_table VALUES (4, 4.500, 4.44);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1021', () => {
    const query = `INSERT INTO test_table VALUES (5, 5.625, 5.55);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1022', () => {
    const query = `INSERT INTO test_max_num_to_warn_02931.test_max_num_to_warn_1 VALUES (1, 'Hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1023', () => {
    const query = `INSERT INTO test_max_num_to_warn_02931.test_max_num_to_warn_2 VALUES (1, 'Hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1024', () => {
    const query = `INSERT INTO test_max_num_to_warn_02931.test_max_num_to_warn_3 VALUES (1, 'Hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1025', () => {
    const query = `INSERT INTO test_max_num_to_warn_02931.test_max_num_to_warn_4 VALUES (1, 'Hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1026', () => {
    const query = `INSERT INTO test_max_num_to_warn_02931.test_max_num_to_warn_5 VALUES (1, 'Hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1027', () => {
    const query = `INSERT INTO test_max_num_to_warn_02931.test_max_num_to_warn_6 VALUES (1, 'Hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1028', () => {
    const query = `INSERT INTO test_max_num_to_warn_02931.test_max_num_to_warn_7 VALUES (1, 'Hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1029', () => {
    const query = `INSERT INTO test_max_num_to_warn_02931.test_max_num_to_warn_8 VALUES (1, 'Hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1030', () => {
    const query = `INSERT INTO test_max_num_to_warn_02931.test_max_num_to_warn_9 VALUES (1, 'Hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1031', () => {
    const query = `INSERT INTO test_max_num_to_warn_02931.test_max_num_to_warn_10 VALUES (1, 'Hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1032', () => {
    const query = `INSERT INTO test_max_num_to_warn_02931.test_max_num_to_warn_11 VALUES (1, 'Hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1033', () => {
    const query = `INSERT INTO t1 SELECT * FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1034', () => {
    const query = `INSERT INTO t SELECT toDate('2019-10-01') + number % 3, toString(number), toString(number) from numbers(9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1035', () => {
    const query = `INSERT INTO t VALUES (1231, 'John', 11, 1, 1), (6666, 'Ksenia', 1, 2, 2), (8888, 'Alice', 1, 3, 3), (6667, 'Ksenia', null, 4, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1036', () => {
    const query = `INSERT INTO crash_02919 VALUES (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1037', () => {
    const query = `insert into t_hardware_error values (1), (2), (3), (4), (5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1038', () => {
    const query = `insert into t_hardware_error values (6), (7), (8), (9), (10); -- {serverError UNKNOWN_STATUS_OF_INSERT} system disable failpoint replicated_commit_zk_fail_after_op;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1039', () => {
    const query = `insert into t_hardware_error values (11), (12), (13), (14), (15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1040', () => {
    const query = `INSERT INTO \`02919_ddsketch_quantile\` SELECT quantilesDDState(0.001, 0.9)(number + 1000) FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1041', () => {
    const query = `INSERT INTO alter_test VALUES (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1042', () => {
    const query = `INSERT INTO 02918_parallel_replicas SELECT toString(number), number % 4 FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1043', () => {
    const query = `INSERT INTO mt1 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1044', () => {
    const query = `INSERT INTO mt2 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1045', () => {
    const query = `INSERT INTO mt2 VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1046', () => {
    const query = `INSERT INTO 02918_table_str SELECT * FROM fuzzJSON(02918_json_fuzzer) limit 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1047', () => {
    const query = `INSERT INTO 02918_table_str SELECT * FROM fuzzJSON(02918_json_fuzzer, random_seed=123, reuse_output=true) limit 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1048', () => {
    const query = `INSERT INTO 02918_table_str SELECT * FROM fuzzJSON( 02918_json_fuzzer,
json_str='{"name": "John Doe", "age": 30, "address": {"city": "Citiville", "zip": "12345"}, "hobbies": ["reading", "traveling", "coding"]}',
random_seed=6666) LIMIT 200;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1049', () => {
    const query = `INSERT INTO 02918_table_str SELECT * FROM fuzzJSON( 02918_json_fuzzer,
json_str='{"name": "John Doe", "age": 30, "address": {"city": "Citiville", "zip": "12345"}, "hobbies": ["reading", "traveling", "coding"]}',
random_seed=6666,
min_key_length=1,
max_key_length=5) LIMIT 200;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1050', () => {
    const query = `INSERT INTO 02918_table_str SELECT * FROM fuzzJSON( 02918_json_fuzzer,
json_str='{"name": "John Doe", "age": 30, "address": {"city": "Citiville", "zip": "12345"}, "hobbies": ["reading", "traveling", "coding"]}',
max_nesting_level=128,
reuse_output=true,
random_seed=6666,
min_key_length=5,
max_key_length=5) LIMIT 200;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1051', () => {
    const query = `INSERT INTO 02918_table_str SELECT * FROM fuzzJSON( 02918_json_fuzzer,
json_str='{"name": "John Doe", "age": 30, "address": {"city": "Citiville", "zip": "12345"}, "hobbies": ["reading", "traveling", "coding"]}',
random_seed=6666,
reuse_output=1,
probability=0.5,
max_output_length=65536,
max_nesting_level=18446744073709551615,
max_array_size=18446744073709551615,
max_object_size=18446744073709551615,
max_key_length=65536,
max_string_value_length=65536) LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1052', () => {
    const query = `INSERT INTO 02918_table_obj1 SELECT * FROM fuzzJSON( 02918_json_fuzzer,
json_str='{"name": "John Doe", "age": 27, "address": {"city": "Citiville", "zip": "12345"}, "hobbies": ["reading", "traveling", "coding"]}',
random_seed=12345) LIMIT 200;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1053', () => {
    const query = `INSERT INTO 02918_table_obj2 SELECT * FROM fuzzJSON( 02918_json_fuzzer,
json_str=
'{
"name": {
"first": "Joan",
"last": "of Arc"
},
"birth": {"date": "January 6, 1412", "place": "Domremy, France"},
"death": {"date": "May 30, 1431", "place": "Rouen, France"},
"occupation": "Military Leader",
"achievements": ["Lifted Siege of Orleans", "Assisted in Charles VII\\'s Coronation"],
"legacy": {
"honors": ["Canonized Saint", "National Heroine of France"],
"memorials": [
{"name": "Joan of Arc Memorial", "location": "Domremy"},
{"name": "Place Jeanne d\\'Arc", "location": "Rouen"}
]
}
}',
random_seed=12345,
max_output_length=1024) LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1054', () => {
    const query = `INSERT INTO 02918_table_obj2 SELECT * FROM fuzzJSON( 02918_json_fuzzer,
json_str=
'{
"name": {
"first": "Joan",
"last": "of Arc"
},
"birth": {"date": "January 6, 1412", "place": "Domremy, France"},
"death": {"date": "May 30, 1431", "place": "Rouen, France"},
"occupation": "Military Leader",
"achievements": ["Lifted Siege of Orleans", "Assisted in Charles VII\\'s Coronation"],
"legacy": {
"honors": ["Canonized Saint", "National Heroine of France"],
"memorials": [
{"name": "Joan of Arc Memorial", "location": "Domremy"},
{"name": "Place Jeanne d\\'Arc", "location": "Rouen"}
]
}
}',
random_seed=12345,
max_output_length=1024, malform_output=true) LIMIT 50; -- {serverError INCORRECT_DATA }
SELECT count() FROM 02918_table_obj2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1055', () => {
    const query = `INSERT INTO alter_test VALUES (1, '2014-01-01', 2, 3, [1,2,3], ['a','b','c'], 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1056', () => {
    const query = `insert into tableIn values(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1057', () => {
    const query = `insert into tableIn values(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1058', () => {
    const query = `INSERT INTO table_02916 VALUES (1234, 'abcd');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1059', () => {
    const query = `insert into shard_0.from_1 select number + 20 from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1060', () => {
    const query = `insert into shard_0.from_1 select number + 30 from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1061', () => {
    const query = `insert into shard_0.from_1 select number + 40 from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1062', () => {
    const query = `insert into shard_0.from_1 select number + 50 from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1063', () => {
    const query = `insert into shard_0.from_0 select number from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1064', () => {
    const query = `insert into shard_0.from_0 select number + 10 from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1065', () => {
    const query = `insert into tab select number from numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1066', () => {
    const query = `insert into t__fuzz_307 select * from generateRandom() limit 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1067', () => {
    const query = `INSERT INTO t__fuzz_282 VALUES (1, 2, 3) (1, 2, 4) (2, 3, 4), (2, 3, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1068', () => {
    const query = `insert into t_delete_projection select number, toString(number) from numbers(8192 * 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1069', () => {
    const query = `INSERT INTO landing (time, pk1, pk2, pk4, pk3) VALUES ('2023-01-01 00:00:00','org-1','prod','login','user'),('2023-01-01 00:00:00','org-1','prod','login','user'),('2023-01-01 00:00:00','org-1','prod','login','user'),('2023-02-01 00:00:00','org-1','stage','login','user'),('2023-02-01 00:00:00','org-1','prod','login','account'),('2023-02-01 00:00:00','org-1','prod','checkout','user'),('2023-03-01 00:00:00','org-1','prod','login','account'),('2023-03-01 00:00:00','org-1','prod','login','account');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1070', () => {
    const query = `insert into test1 select * from numbers(11, 20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1071', () => {
    const query = `insert into test2 select * from numbers(11, 20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1072', () => {
    const query = `INSERT INTO t1 VALUES (1,42), (2,2), (3,3), (NULL,NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1073', () => {
    const query = `INSERT INTO t2 VALUES (NULL,NULL), (2,2), (3,33), (4,42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1074', () => {
    const query = `INSERT INTO t1n VALUES (1,42), (2,2), (3,3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1075', () => {
    const query = `INSERT INTO t2n VALUES (2,2), (3,33), (4,42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1076', () => {
    const query = `insert into t1 values (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1077', () => {
    const query = `insert into tab select number, number, number, number from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1078', () => {
    const query = `insert into tab2 select toDate('2020-02-02') + number, number, number from numbers(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1079', () => {
    const query = `insert into tab3 select number, number, number, number from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1080', () => {
    const query = `insert into tab4 select number, number, number, number from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1081', () => {
    const query = `insert into tab5 select number, number, number, number from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1082', () => {
    const query = `INSERT INTO dict SELECT number, toString(number) FROM numbers(1e3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1083', () => {
    const query = `INSERT INTO prefetched_table SELECT rand(), randomString(5) from numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1084', () => {
    const query = `INSERT INTO test02910 (i, jString) SELECT 1, '{"a":"123"}';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1085', () => {
    const query = `INSERT INTO test02910_second SELECT number, number, '2023-10-28 11:11:11.11111', [] FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1086', () => {
    const query = `INSERT INTO test02910_second SELECT number, number, '2023-10-28 11:11:11.11111', ['a'] FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1087', () => {
    const query = `INSERT INTO test02910_second SELECT number, number, '2023-10-28 11:11:11.11111', ['b'] FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1088', () => {
    const query = `INSERT INTO test02910_second SELECT number, number, '2023-10-28 11:11:11.11111', ['c', 'd'] FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1089', () => {
    const query = `INSERT INTO t SELECT number FROM numbers_mt(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1090', () => {
    const query = `INSERT INTO t1 VALUES (1),(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1091', () => {
    const query = `INSERT INTO t2 VALUES (1),(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1092', () => {
    const query = `insert into function file('02906.orc', 'ORC') select
number::Int64 as int64_column,
number::String as string_column,
number::Float64 as float64_column,
cast(if(number % 10 = 0, tuple(null, null, null), tuple(number::String, number::Float64, number::Int64)) as Tuple(a Nullable(String), b Nullable(Float64), c Nullable(Int64))) as tuple_column,
cast(if(number % 10 = 0, array(tuple(null, null, null)), array(tuple(number::String, number::Float64, number::Int64))) as Array(Tuple(a Nullable(String), b Nullable(Float64), c Nullable(Int64)))) as array_tuple_column,
cast(if(number % 10 = 0, map(number::String, tuple(null, null, null)), map(number::String, tuple(number::String, number::Float64, number::Int64))) as Map(String, Tuple(a Nullable(String), b Nullable(Float64), c Nullable(Int64)))) as map_tuple_column
from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1093', () => {
    const query = `INSERT INTO test SELECT number, 'test' FROM numbers(1, 100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1094', () => {
    const query = `insert into tab(machine_id, name, timestamp) select 1, 'a_name', '2022-11-24 12:00:00';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1095', () => {
    const query = `INSERT INTO test_apply_deleted_mask SELECT number, number::String FROM numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1096', () => {
    const query = `INSERT INTO test_apply_deleted_mask SELECT number, number::String FROM numbers(5, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1097', () => {
    const query = `insert into t values ('2022-03-06', 22442 ), ('2022-03-05', 22382 ), ('2022-03-04', 22395 ), ('2022-03-03', 22306 ), ('2022-03-02', 22095 ), ('2022-03-01', 22065 ), ('2022-02-28', 21949 ), ('2022-02-27', 21884 ), ('2022-02-26', 21875 ), ('2022-02-25', 21858 ), ('2022-02-24', 21775 ), ('2022-02-23', 21639 ), ('2022-02-22', 21557 ), ('2022-02-21', 21381 ), ('2022-02-20', 21794 ), ('2022-02-19', 21808 ), ('2022-02-18', 21695 ), ('2022-02-17', 20874 ), ('2022-02-16', 20911 ), ('2022-02-15', 20898 ), ('2022-02-14', 20768 ), ('2022-02-13', 20588 ), ('2022-02-12', 20516 ), ('2022-02-11', 20501 ), ('2022-02-10', 20429 ), ('2022-02-09', 20208 ), ('2022-02-08', 20186 ), ('2022-02-07', 20192 ), ('2022-02-06', 20192 ), ('2022-02-05', 20175 ), ('2022-02-04', 20191 ), ('2022-02-03', 20214 ), ('2022-02-02', 20215 ), ('2022-02-01', 20220 ), ('2022-01-31', 20146 ), ('2022-01-30', 20137 ), ('2022-01-29', 20162 ), ('2022-01-28', 20164 ), ('2022-01-27', 20128 ), ('2022-01-26', 20139 ), ('2022-01-25', 20000 ), ('2022-01-24', 19778 ), ('2022-01-23', 19789 ), ('2022-01-22', 19628 ), ('2022-01-21', 19631 ), ('2022-01-20', 19386 ), ('2022-01-19', 19439 ), ('2022-01-18', 19477 ), ('2022-01-17', 19386 ), ('2022-01-16', 20013 ), ('2022-01-15', 19359 ), ('2022-01-14', 19356 ), ('2022-01-13', 19300 ), ('2022-01-12', 19237 ), ('2022-01-11', 19159 ), ('2022-01-10', 18970 ), ('2022-01-09', 18804 ), ('2022-01-08', 18816 ), ('2022-01-07', 18808 ), ('2022-01-06', 18693 ), ('2022-01-05', 18639 ), ('2022-01-04', 18579 ), ('2022-01-03', 18450 ), ('2022-01-02', 18458 ), ('2022-01-01', 18445 ), ('2021-12-31', 18443 ), ('2021-12-30', 18388 ), ('2021-12-29', 18348 ), ('2021-12-28', 18042 ), ('2021-12-26', 18049 ), ('2021-12-22', 17962 );`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1098', () => {
    const query = `INSERT INTO test1 VALUES ('id0', now(), 3, false);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1099', () => {
    const query = `INSERT INTO test SELECT number DIV 1024, number % 1024 FROM numbers(1048576);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1100', () => {
    const query = `INSERT INTO test SELECT number DIV 32, number % 32 FROM numbers(1024);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1101', () => {
    const query = `insert into t1 select number, toString(number) from numbers(1000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1102', () => {
    const query = `insert into t2 select number, toString(number) from numbers(2000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1103', () => {
    const query = `insert into t3 select number, toString(number) from numbers(3000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1104', () => {
    const query = `INSERT INTO 02898_parallel_replicas_final SELECT toString(number), number % 3 FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1105', () => {
    const query = `INSERT INTO test VALUES(toDate('2023-10-09'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1106', () => {
    const query = `INSERT INTO test2 VALUES(1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1107', () => {
    const query = `INSERT INTO test3 VALUES(1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1108', () => {
    const query = `INSERT INTO test4 VALUES(toDate('2023-10-09'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1109', () => {
    const query = `INSERT INTO test5 VALUES(1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1110', () => {
    const query = `INSERT INTO test6 VALUES(1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1111', () => {
    const query = `INSERT INTO TABLE or_bug VALUES (0), (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1112', () => {
    const query = `insert into forms values ('5840ead423829c1eab29fa97','this is a test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1113', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1000, '0', 0, 0, 'Single zero');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1114', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1001, '00', 00, 0, 'Double zero');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1115', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1002, '000000000000000', 000000000000000, 0, 'Mutliple redundant zeroes');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1116', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1003, '01', 01, 1, 'Octal like, interpret as decimal');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1117', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1004, '08', 08, 8, 'Octal like, interpret as decimal');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1118', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1005, '0100', 0100, 100, 'Octal like, interpret as decimal');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1119', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1006, '0000000000100', 0000000000100, 100, 'Octal like, interpret as decimal, multiple leading zeroes');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1120', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1010, '-0', -0, 0, 'Single zero negative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1121', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1011, '-00', -00, 0, 'Double zero negative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1122', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1012, '-000000000000000', -000000000000000, 0, 'Mutliple redundant zeroes negative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1123', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1013, '-01', -01, -1, 'Octal like, interpret as decimal negative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1124', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1014, '-08', -08, -8, 'Octal like, interpret as decimal negative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1125', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1015, '-0100', -0100, -100, 'Octal like, interpret as decimal negative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1126', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1016, '-0000000000100', -0000000000100, -100, 'Octal like, interpret as decimal, multiple leading zeroes negative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1127', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1020, '+0', +0, 0, 'Single zero positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1128', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1021, '+00', +00, 0, 'Double zero negpositiveative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1129', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1022, '+000000000000000', +000000000000000, 0, 'Mutliple redundant zeroes positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1130', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1023, '+01', +01, 1, 'Octal like, interpret as decimal positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1131', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1024, '+08', +08, 8, 'Octal like, interpret as decimal positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1132', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1025, '+0100', +0100, 100, 'Octal like, interpret as decimal positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1133', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1026, '+0000000000100', +0000000000100, 100, 'Octal like, interpret as decimal, multiple leading zeroes positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1134', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1030, '0000.008', 0000.008, 0, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1135', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1031, '-0000.008', -0000.008, 0, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1136', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1032, '+0000.008', +0000.008, 0, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1137', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1033, '0000.008e3', 0000.008e3, 8, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1138', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1034, '-0000.008e3', -0000.008e3, -8, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1139', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1035, '+0000.008e3', 0000.008e3, 8, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1140', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1036, '08000.008e-3', 08000.008e-3, 8, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1141', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1037, '-08000.008e-3', -08000.008e-3, -8, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1142', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1038, '+08000.008e-3', 08000.008e-3, 8, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1143', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1060, '0x0abcd', 0x0abcd, 43981, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1144', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1061, '-0x0abcd', -0x0abcd, -43981, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1145', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1062, '+0x0abcd', +0x0abcd, 43981, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1146', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1063, '0x0abcdP1', 0x0abcdP1, 87962, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1147', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1064, '0x0abcdP+1', 0x0abcdP+1, 87962, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1148', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1065, '0x0abcdP-1', 0x0abcdP-1, 21990, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1149', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1066, '0x0abcdP01', 0x0abcdP01, 87962, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1150', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1067, '0x0abcdP+01', 0x0abcdP+01, 87962, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1151', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (1068, '0x0abcdP-01', 0x0abcdP-01, 21990, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1152', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2000, '0', 0, 0, 'Single zero');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1153', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2001, '00', 00, 0, 'Double zero');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1154', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2002, '000000000000000', 000000000000000, 0, 'Mutliple redundant zeroes');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1155', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2003, '01', 01, 1, 'Octal like, interpret as decimal');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1156', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2004, '08', 08, 8, 'Octal like, interpret as decimal');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1157', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2005, '0100', 0100, 100, 'Octal like, interpret as decimal');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1158', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2006, '0000000000100', 0000000000100, 100, 'Octal like, interpret as decimal, multiple leading zeroes');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1159', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2013, '-01', -01, -1, 'Octal like, interpret as decimal negative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1160', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2014, '-08', -08, -8, 'Octal like, interpret as decimal negative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1161', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2015, '-0100', -0100, -100, 'Octal like, interpret as decimal negative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1162', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2016, '-0000000000100', -0000000000100, -100, 'Octal like, interpret as decimal, multiple leading zeroes negative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1163', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2020, '+0', +0, 0, 'Single zero positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1164', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2021, '+00', +00, 0, 'Double zero negpositiveative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1165', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2022, '+000000000000000', +000000000000000, 0, 'Mutliple redundant zeroes positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1166', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2023, '+01', +01, 1, 'Octal like, interpret as decimal positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1167', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2024, '+08', +08, 8, 'Octal like, interpret as decimal positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1168', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2025, '+0100', +0100, 100, 'Octal like, interpret as decimal positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1169', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2026, '+0000000000100', +0000000000100, 100, 'Octal like, interpret as decimal, multiple leading zeroes positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1170', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2030, '0000.008', 0000.008, 0.008, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1171', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2031, '-0000.008', -0000.008, -0.008, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1172', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2032, '+0000.008', +0000.008, 0.008, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1173', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2033, '0000.008e3', 0000.008e3, 8, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1174', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2034, '-0000.008e3', -0000.008e3, -8, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1175', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2035, '+0000.008e3', 0000.008e3, 8, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1176', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2036, '08.5e-3', 08.5e-3, 0.0085, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1177', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2037, '-08.5e-3', -08.5e-3, -0.0085, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1178', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2038, '+08.5e-3', 08.5e-3, 0.0085, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1179', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2063, '0x0abcdP1', 0x0abcdP1, 87962, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1180', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2064, '0x0abcdP+1', 0x0abcdP+1, 87962, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1181', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2065, '0x0abcdP-1', 0x0abcdP-1, 21990.5, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1182', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2066, '0x0abcdP01', 0x0abcdP01, 87962, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1183', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2067, '0x0abcdP+01', 0x0abcdP+01, 87962, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1184', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2068, '0x0abcdP-01', 0x0abcdP-01, 21990.5, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1185', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2069, '0x01P-01', 0x01P-01, 0.5, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1186', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (2050, '0b10000', 0b10000, 16, 'Binary should not be parsed'); -- { clientError SYNTAX_ERROR } INSERT INTO t_leading_zeroes_f VALUES (2051, '-0b10000', -0b10000, -16, 'Binary should not be parsed'); -- { clientError SYNTAX_ERROR }
INSERT INTO t_leading_zeroes_f VALUES (2052, '+0b10000', +0b10000, 16, 'Binary should not be parsed'); -- { clientError SYNTAX_ERROR }
INSERT INTO t_leading_zeroes VALUES (1050, '0b10000', 0b10000, 16, 'Binary should not be parsed'); -- { clientError SYNTAX_ERROR }
INSERT INTO t_leading_zeroes VALUES (1051, '-0b10000', -0b10000, -16, 'Binary should not be parsed'); -- { clientError SYNTAX_ERROR }
INSERT INTO t_leading_zeroes VALUES (1052, '+0b10000', +0b10000, 16, 'Binary should not be parsed'); -- { clientError SYNTAX_ERROR }
SET input_format_values_interpret_expressions = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1187', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11000, '0', 0, 0, 'Single zero');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1188', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11001, '00', 00, 0, 'Double zero');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1189', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11002, '000000000000000', 000000000000000, 0, 'Mutliple redundant zeroes');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1190', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11003, '01', 01, 1, 'Octal like, interpret as decimal');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1191', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11004, '08', 08, 8, 'Octal like, interpret as decimal');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1192', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11005, '0100', 0100, 100, 'Octal like, interpret as decimal');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1193', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11006, '0000000000100', 0000000000100, 100, 'Octal like, interpret as decimal, multiple leading zeroes');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1194', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11010, '-0', -0, 0, 'Single zero negative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1195', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11011, '-00', -00, 0, 'Double zero negative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1196', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11012, '-000000000000000', -000000000000000, 0, 'Mutliple redundant zeroes negative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1197', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11013, '-01', -01, -1, 'Octal like, interpret as decimal negative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1198', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11014, '-08', -08, -8, 'Octal like, interpret as decimal negative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1199', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11015, '-0100', -0100, -100, 'Octal like, interpret as decimal negative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1200', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11016, '-0000000000100', -0000000000100, -100, 'Octal like, interpret as decimal, multiple leading zeroes negative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1201', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11020, '+0', +0, 0, 'Single zero positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1202', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11021, '+00', +00, 0, 'Double zero negpositiveative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1203', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11022, '+000000000000000', +000000000000000, 0, 'Mutliple redundant zeroes positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1204', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11023, '+01', +01, 1, 'Octal like, interpret as decimal positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1205', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11024, '+08', +08, 8, 'Octal like, interpret as decimal positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1206', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11025, '+0100', +0100, 100, 'Octal like, interpret as decimal positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1207', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11026, '+0000000000100', +0000000000100, 100, 'Octal like, interpret as decimal, multiple leading zeroes positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1208', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11030, '0000.008', 0000.008, 0, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1209', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11031, '-0000.008', -0000.008, 0, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1210', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11032, '+0000.008', +0000.008, 0, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1211', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11033, '0000.008e3', 0000.008e3, 8, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1212', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11034, '-0000.008e3', -0000.008e3, -8, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1213', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11035, '+0000.008e3', 0000.008e3, 8, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1214', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11036, '08000.008e-3', 08000.008e-3, 8, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1215', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11037, '-08000.008e-3', -08000.008e-3, -8, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1216', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11038, '+08000.008e-3', 08000.008e-3, 8, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1217', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11050, '0b10000', 0b10000, 16, 'Binary should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1218', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11051, '-0b10000', -0b10000, -16, 'Binary should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1219', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11052, '+0b10000', +0b10000, 16, 'Binary should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1220', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11060, '0x0abcd', 0x0abcd, 43981, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1221', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11061, '-0x0abcd', -0x0abcd, -43981, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1222', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11062, '+0x0abcd', +0x0abcd, 43981, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1223', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11063, '0x0abcdP1', 0x0abcdP1, 87962, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1224', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11064, '0x0abcdP+1', 0x0abcdP+1, 87962, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1225', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11065, '0x0abcdP-1', 0x0abcdP-1, 21990, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1226', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11066, '0x0abcdP01', 0x0abcdP01, 87962, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1227', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11067, '0x0abcdP+01', 0x0abcdP+01, 87962, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1228', () => {
    const query = `INSERT INTO t_leading_zeroes VALUES (11068, '0x0abcdP-01', 0x0abcdP-01, 21990, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1229', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12000, '0', 0, 0, 'Single zero');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1230', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12001, '00', 00, 0, 'Double zero');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1231', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12002, '000000000000000', 000000000000000, 0, 'Mutliple redundant zeroes');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1232', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12003, '01', 01, 1, 'Octal like, interpret as decimal');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1233', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12004, '08', 08, 8, 'Octal like, interpret as decimal');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1234', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12005, '0100', 0100, 100, 'Octal like, interpret as decimal');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1235', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12006, '0000000000100', 0000000000100, 100, 'Octal like, interpret as decimal, multiple leading zeroes');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1236', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12013, '-01', -01, -1, 'Octal like, interpret as decimal negative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1237', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12014, '-08', -08, -8, 'Octal like, interpret as decimal negative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1238', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12015, '-0100', -0100, -100, 'Octal like, interpret as decimal negative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1239', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12016, '-0000000000100', -0000000000100, -100, 'Octal like, interpret as decimal, multiple leading zeroes negative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1240', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12020, '+0', +0, 0, 'Single zero positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1241', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12021, '+00', +00, 0, 'Double zero negpositiveative');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1242', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12022, '+000000000000000', +000000000000000, 0, 'Mutliple redundant zeroes positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1243', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12023, '+01', +01, 1, 'Octal like, interpret as decimal positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1244', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12024, '+08', +08, 8, 'Octal like, interpret as decimal positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1245', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12025, '+0100', +0100, 100, 'Octal like, interpret as decimal positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1246', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12026, '+0000000000100', +0000000000100, 100, 'Octal like, interpret as decimal, multiple leading zeroes positive');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1247', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12030, '0000.008', 0000.008, 0.008, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1248', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12031, '-0000.008', -0000.008, -0.008, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1249', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12032, '+0000.008', +0000.008, 0.008, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1250', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12033, '0000.008e3', 0000.008e3, 8, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1251', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12034, '-0000.008e3', -0000.008e3, -8, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1252', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12035, '+0000.008e3', 0000.008e3, 8, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1253', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12036, '08.5e-3', 08.5e-3, 0.0085, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1254', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12037, '-08.5e-3', -08.5e-3, -0.0085, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1255', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12038, '+08.5e-3', 08.5e-3, 0.0085, 'Floating point should work...');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1256', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12050, '0b10000', 0b10000, 16, 'Binary should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1257', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12051, '-0b10000', -0b10000, -16, 'Binary should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1258', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12052, '+0b10000', +0b10000, 16, 'Binary should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1259', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12063, '0x0abcdP1', 0x0abcdP1, 87962, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1260', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12064, '0x0abcdP+1', 0x0abcdP+1, 87962, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1261', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12065, '0x0abcdP-1', 0x0abcdP-1, 21990.5, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1262', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12066, '0x0abcdP01', 0x0abcdP01, 87962, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1263', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12067, '0x0abcdP+01', 0x0abcdP+01, 87962, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1264', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12068, '0x0abcdP-01', 0x0abcdP-01, 21990.5, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1265', () => {
    const query = `INSERT INTO t_leading_zeroes_f VALUES (12069, '0x01P-01', 0x01P-01, 0.5, 'Hex should be parsed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1266', () => {
    const query = `INSERT INTO foo VALUES (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1267', () => {
    const query = `INSERT INTO bar VALUES (1, 1, 'a') (2, 2, 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1268', () => {
    const query = `INSERT INTO bar VALUES (1, 2, 'b') (2, 3, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1269', () => {
    const query = `INSERT INTO t VALUES (1, 2, 3) (1, 2, 4) (2, 3, 4), (2, 3, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1270', () => {
    const query = `INSERT INTO dict SELECT number, toString(number) FROM numbers(121);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1271', () => {
    const query = `insert into function file('02892.orc') with 5000 - number as n
select
number,
intDiv(n, 11)::Int8 as i8,
n::Int16 i16,
n::Int32 as i32,
n::Int64 as i64,
toDate32(n*500000) as date32,
toDateTime64(n*1e6, 3) as dt64_ms,
toDateTime64(n*1e6, 6) as dt64_us,
toDateTime64(n*1e6, 9) as dt64_ns,
toDateTime64(n*1e6, 0) as dt64_s,
toDateTime64(n*1e6, 2) as dt64_cs,
(n/1000)::Float32 as f32,
(n/1000)::Float64 as f64,
n::String as s,
n::String::FixedString(9) as fs,
n::Decimal32(3)/1234 as d32,
n::Decimal64(10)/12345678 as d64,
n::Decimal128(20)/123456789012345 as d128
from numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1272', () => {
    const query = `insert into function file('02892.orc') select number,
if(number%234 == 0, NULL, number) as sometimes_null,
toNullable(number) as never_null,
if(number%345 == 0, number::String, NULL) as mostly_null,
toLowCardinality(if(number%234 == 0, NULL, number)) as sometimes_null_lc,
toLowCardinality(toNullable(number)) as never_null_lc,
toLowCardinality(if(number%345 == 0, number::String, NULL)) as mostly_null_lc
from numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1273', () => {
    const query = `insert into function file('02892.orc') select number,
if(number%234 == 0, NULL, number + 100) as positive_or_null,
if(number%234 == 0, NULL, -number - 100) as negative_or_null,
if(number%234 == 0, NULL, 'I am a string') as string_or_null
from numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1274', () => {
    const query = `insert into nested_smt values ('2023-10-05', 1, [1,2,3], [10,20,30]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1275', () => {
    const query = `insert into nested_smt values ('2023-10-05', 2, [1,2,3], [1,1,1]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1276', () => {
    const query = `insert into test select 0 from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1277', () => {
    const query = `insert into x values ((), ());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1278', () => {
    const query = `insert into x values ((), [(), ()]), ((), []);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1279', () => {
    const query = `INSERT INTO kv SELECT number,
number + 100,
toString(number)
FROM numbers(2048);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1280', () => {
    const query = `INSERT INTO e SELECT toDateTime('2022-12-12 11:00:00') + number, 86 FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1281', () => {
    const query = `insert into x values (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1282', () => {
    const query = `insert into tbl values (tuple(1, 2, 3)); -- without tuple it's interpreted differently inside values block. select * from tbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1283', () => {
    const query = `insert into test select * from generateRandom(42) limit 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1284', () => {
    const query = `INSERT INTO t_parts_columns_filenames SELECT number, 0, 0, range(number % 5), range(number % 5) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1285', () => {
    const query = `INSERT INTO attach_partition_t1 SELECT number, toString(number) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1286', () => {
    const query = `INSERT INTO attach_partition_t3 SELECT number, toString(number) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1287', () => {
    const query = `INSERT INTO attach_partition_t5 SELECT number, toString(number) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1288', () => {
    const query = `INSERT INTO t_mutations_subcolumns VALUES (1, 'aaa', '{"k1": {"k2": "foo"}, "k3": 5}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1289', () => {
    const query = `INSERT INTO t_mutations_subcolumns VALUES (2, 'bbb', '{"k1": {"k2": "fee"}, "k3": 4}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1290', () => {
    const query = `INSERT INTO t_mutations_subcolumns VALUES (3, 'ccc', '{"k1": {"k2": "foo", "k4": "baz"}, "k3": 4}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1291', () => {
    const query = `INSERT INTO t_mutations_subcolumns VALUES (4, 'ddd', '{"k1": {"k2": "foo"}, "k3": 4}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1292', () => {
    const query = `INSERT INTO t_mutations_subcolumns VALUES (5, 'eee', '{"k1": {"k2": "foo"}, "k3": 4}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1293', () => {
    const query = `INSERT INTO t_mutations_subcolumns VALUES (6, 'fff', '{"k1": {"k2": "foo"}, "k3": 4}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1294', () => {
    const query = `INSERT INTO t_mutations_subcolumns VALUES (1, '{"k1": 1}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1295', () => {
    const query = `INSERT INTO t_mutations_subcolumns VALUES (2, '{"k2": 1}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1296', () => {
    const query = `INSERT INTO t_mutations_subcolumns VALUES (3, '{"k3": 1}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1297', () => {
    const query = `INSERT INTO quorum1 VALUES (1), (2), (3), (4), (5); -- {serverError UNKNOWN_STATUS_OF_INSERT} INSERT INTO quorum1 VALUES (6), (7), (8), (9), (10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1298', () => {
    const query = `INSERT INTO t_missed_subcolumns VALUES (1, 'aaa', '{"k1": {"k2": "foo"}, "k3": 5}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1299', () => {
    const query = `INSERT INTO t_missed_subcolumns VALUES (2, 'bbb', '{"k1": {"k2": "fee"}, "k3": 4}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1300', () => {
    const query = `INSERT INTO t_missed_subcolumns VALUES (3, 'ccc', '{"k1": {"k2": "foo", "k4": "baz"}, "k3": 4}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1301', () => {
    const query = `INSERT INTO t_missed_subcolumns VALUES (4, 'ddd', '{"k1": {"k2": "foo"}, "k3": 4}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1302', () => {
    const query = `INSERT INTO dist_tbl (key) SETTINGS distributed_foreground_insert=1 VALUES (99);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1303', () => {
    const query = `insert into function file('02884_1.csv') select 1 as x settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1304', () => {
    const query = `insert into function file('02884_2.csv') select 2 as x settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1305', () => {
    const query = `INSERT INTO posts SELECT repeat('a', (number % 10) + 1),
toString(number),
number % 10,
number,
now() - toIntervalMinute(number),
now()
FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1306', () => {
    const query = `INSERT INTO post_metrics SELECT repeat('a', (number % 10) + 1),
toString(number),
now() - toIntervalMinute(number),
number * 100,
number * 10,
now()
FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1307', () => {
    const query = `INSERT INTO t_async_insert_skip_settings VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1308', () => {
    const query = `INSERT INTO t_async_insert_skip_settings VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1309', () => {
    const query = `INSERT INTO t_reverse_order_virt_col SELECT number, '1984-01-01' FROM numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1310', () => {
    const query = `INSERT INTO my_table (values) VALUES ([12, 3, 1]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1311', () => {
    const query = `INSERT INTO checksums_r1 VALUES (1, 'hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1312', () => {
    const query = `INSERT INTO checksums_r3 VALUES (1, 'hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1313', () => {
    const query = `INSERT INTO test_table SELECT number, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1314', () => {
    const query = `INSERT INTO all_valid VALUES (1, 'SELECT 1') (2, 'SeLeCt 22') (3, 'InSerT into TAB values (\\'\\')');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1315', () => {
    const query = `INSERT INTO some_invalid VALUES (1, 'SELECT 1') (2, 'SeLeCt 2') (3, 'bad 3') (4, 'select 4') (5, 'bad 5') (6, '') (7, 'SELECT 7');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1316', () => {
    const query = `insert into data values (1)(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1317', () => {
    const query = `INSERT INTO table1 SELECT number FROM numbers_mt(1, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1318', () => {
    const query = `INSERT INTO table2 SELECT number FROM numbers_mt(11, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1319', () => {
    const query = `INSERT INTO tt SELECT * FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1320', () => {
    const query = `INSERT INTO max_length_alias_14053__fuzz_45 VALUES ('2020-10-06',7367,['2020-10-06','2020-10-06','2020-10-06','2020-10-06','2020-10-06']),('2020-10-06',7367,['2020-10-06','2020-10-06','2020-10-06']),('2020-10-06',7367,['2020-10-06','2020-10-06']),('2020-10-07',7367,['2020-10-07','2020-10-07','2020-10-07','2020-10-07','2020-10-07']),('2020-10-08',7367,['2020-10-08','2020-10-08','2020-10-08','2020-10-08']),('2020-10-11',7367,['2020-10-11','2020-10-11','2020-10-11','2020-10-11','2020-10-11','2020-10-11','2020-10-11','2020-10-11']),('2020-10-11',7367,['2020-10-11']),('2020-08-26',7367,['2020-08-26','2020-08-26']),('2020-08-28',7367,['2020-08-28','2020-08-28','2020-08-28']),('2020-08-29',7367,['2020-08-29']),('2020-09-22',7367,['2020-09-22','2020-09-22','2020-09-22','2020-09-22','2020-09-22','2020-09-22','2020-09-22']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1321', () => {
    const query = `INSERT INTO t VALUES (5879429,'2023-07-01 03:50:35','2023-07-01 03:50:35',-278) (5881397,'2023-07-01 06:22:26','2023-07-01 06:22:27',2807) (5925060,'2023-07-04 00:24:03','2023-07-04 00:24:02',-12) (5936591,'2023-07-04 07:37:19','2023-07-04 07:37:18',-12) (5940709,'2023-07-04 09:13:35','2023-07-04 09:13:35',2820) (5942342,'2023-07-04 09:58:00','2023-07-04 09:57:59',-12) (5952231,'2023-07-04 22:33:24','2023-07-04 22:33:24',1692) (5959449,'2023-07-05 04:32:55','2023-07-05 04:32:54',-12) (5963240,'2023-07-05 06:37:08','2023-07-05 06:37:09',1709) (5965742,'2023-07-05 07:27:01','2023-07-05 07:27:02',1709) (5969948,'2023-07-05 08:44:36','2023-07-05 08:44:37',2278) (5971673,'2023-07-05 09:14:09','2023-07-05 09:14:09',5695) (6012987,'2023-07-06 20:52:28','2023-07-06 20:52:27',-536);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1322', () => {
    const query = `insert into t_json_merge select number, format('{{ "k{0}": {0} }}', toString(number * 2)), format('{{ "k{0}": {0} }}', toString(number * 2 + 1)) from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1323', () => {
    const query = `insert into t_json_merge select number, format('{{ "k{0}": {0} }}', toString(number * 2)), format('{{ "k{0}": {0}, "k{1}": 222 }}', toString(number * 2 + 1), toString(number * 2)) from numbers(5, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1324', () => {
    const query = `insert into data values (1,10,100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1325', () => {
    const query = `insert into data values (1,20,10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1326', () => {
    const query = `INSERT INTO table_lz4 SELECT * FROM generateRandom() LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1327', () => {
    const query = `INSERT INTO table_gcd SELECT * FROM table_lz4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1328', () => {
    const query = `INSERT INTO table_gcd_codec_uint8 SELECT number FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1329', () => {
    const query = `INSERT INTO table_gcd_codec_uint16 SELECT number FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1330', () => {
    const query = `INSERT INTO table_gcd_codec_uint32 SELECT number FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1331', () => {
    const query = `INSERT INTO table_gcd_codec_uint64 SELECT number FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1332', () => {
    const query = `INSERT INTO table_gcd_codec_uint128 SELECT number FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1333', () => {
    const query = `INSERT INTO table_gcd_codec_uint256 SELECT number FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1334', () => {
    const query = `INSERT INTO table_gcd_codec_int8 SELECT number FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1335', () => {
    const query = `INSERT INTO table_gcd_codec_int16 SELECT number FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1336', () => {
    const query = `INSERT INTO table_gcd_codec_int32 SELECT number FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1337', () => {
    const query = `INSERT INTO table_gcd_codec_int64 SELECT number FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1338', () => {
    const query = `INSERT INTO table_gcd_codec_int128 SELECT number FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1339', () => {
    const query = `INSERT INTO table_gcd_codec_int256 SELECT number FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1340', () => {
    const query = `INSERT INTO table_gcd_codec_decimal32 SELECT number FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1341', () => {
    const query = `INSERT INTO table_gcd_codec_decimal64 SELECT number FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1342', () => {
    const query = `INSERT INTO table_gcd_codec_decimal128 SELECT number FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1343', () => {
    const query = `INSERT INTO table_gcd_codec_decimal256 SELECT number FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1344', () => {
    const query = `INSERT INTO table_gcd_codec_date SELECT number FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1345', () => {
    const query = `INSERT INTO table_gcd_codec_date32 SELECT number FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1346', () => {
    const query = `INSERT INTO table_gcd_codec_datetime SELECT number FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1347', () => {
    const query = `INSERT INTO table_gcd_codec_datetime64 SELECT number FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1348', () => {
    const query = `INSERT INTO table_gcd_codec_only_zeros VALUES (0), (0), (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1349', () => {
    const query = `INSERT INTO table_gcd_codec_one_hundred_zeros SELECT 0 FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1350', () => {
    const query = `INSERT INTO table_gcd_codec_one_hundred_ones SELECT 1 FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1351', () => {
    const query = `INSERT INTO TABLE tab SELECT number, randomPrintableASCII(1000), randomPrintableASCII(10), rand(number), rand(number+1), rand(number+2) FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1352', () => {
    const query = `INSERT INTO TABLE tab SELECT number, tuple(number, number), concat('{"key": ', toString(number), ' ,"value": ', toString(rand(number+1)), '}') FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1353', () => {
    const query = `INSERT INTO test_move_partition_throttling SELECT number FROM numbers(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1354', () => {
    const query = `insert into t1 select number, number from numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1355', () => {
    const query = `insert into t1 select number, number from numbers(1000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1356', () => {
    const query = `insert into t1 select number, number from numbers(2000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1357', () => {
    const query = `insert into t2 select number, number from numbers(3000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1358', () => {
    const query = `insert into t2 select number, number from numbers(4000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1359', () => {
    const query = `insert into t2 select number, number from numbers(5000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1360', () => {
    const query = `insert into t3 select number, number from numbers(6000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1361', () => {
    const query = `insert into t3 select number, number from numbers(7000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1362', () => {
    const query = `insert into t3 select number, number from numbers(8000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1363', () => {
    const query = `INSERT INTO t_collisions VALUES (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1364', () => {
    const query = `INSERT INTO test_rewrite_uniq_to_count values ('1', '1', '1'), ('1', '1', '1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1365', () => {
    const query = `INSERT INTO test_rewrite_uniq_to_count values ('2', '2', '2'), ('2', '2', '2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1366', () => {
    const query = `INSERT INTO test_rewrite_uniq_to_count values ('3', '3', '3'), ('3', '3', '3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1367', () => {
    const query = `INSERT INTO t SELECT toDate('2023-09-10', 'UTC') AS d,
[number % 99999, NULL][number % 2] AS f1,
['x', NULL][number % 2] AS f2,
[number, NULL][number % 2] AS c
FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1368', () => {
    const query = `INSERT INTO t SELECT toDate('2023-09-10', 'UTC') AS d,
NULL AS f1,
['x', 'y', 'z'][number % 3] AS f2,
number AS c
FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1369', () => {
    const query = `INSERT INTO t SELECT number, NULL FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1370', () => {
    const query = `INSERT INTO tnul VALUES (NULL), ('qwe');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1371', () => {
    const query = `INSERT INTO tlc VALUES (NULL), ('qwe');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1372', () => {
    const query = `INSERT INTO test_skip_idx SELECT number FROM system.numbers LIMIT 5 OFFSET 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1373', () => {
    const query = `INSERT INTO test values ('1.1.1.1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1374', () => {
    const query = `INSERT INTO test values (toIPv4('8.8.8.8'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1375', () => {
    const query = `INSERT INTO tab select number, -number FROM system.numbers LIMIT 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1376', () => {
    const query = `INSERT INTO tab SELECT number % 1000, -- u64
number % 1000,
number % 1000,
number % 1000,
number % 1000,
number % 1000, -- f64
number % 1000,
number % 1000,
number % 1000,
number % 1000,
number % 1000, -- dt
number % 1000,
number % 1000,
number % 1000,
number % 1000,
number % 2,    -- b
number % 2,
number % 2,
number % 2,
number % 2,
toString(number % 1000),
toString(number % 1000),
toString(number % 1000)
FROM system.numbers LIMIT 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1377', () => {
    const query = `INSERT INTO tab select number, number, number, toDateTime(number), generateUUIDv4() FROM system.numbers LIMIT 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1378', () => {
    const query = `INSERT INTO bug_67742 SELECT number FROM system.numbers LIMIT 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1379', () => {
    const query = `INSERT INTO random_mt VALUES (1, 'Hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1380', () => {
    const query = `INSERT INTO Dates VALUES ('2023-08-25 15:30:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1381', () => {
    const query = `insert into tab select number, number from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1382', () => {
    const query = `insert into tab select number, number from numbers(20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1383', () => {
    const query = `INSERT INTO 02863_delayed_source VALUES (1), (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1384', () => {
    const query = `INSERT INTO t_uuid VALUES ('61f0c404-5cb3-11e7-907b-a6006ad3dba0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1385', () => {
    const query = `INSERT INTO t_sparse_distinct SELECT number % 10, toString(number % 100 = 0) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1386', () => {
    const query = `INSERT INTO t_sparse_distinct(id) SELECT number % 10 FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1387', () => {
    const query = `INSERT INTO t_uuid VALUES ('61f0c404-5cb3-11e7-907b-a6006ad3dba0'), ('992f6910-42b2-43cd-98bc-c812fbf9b683'), ('417ddc5d-e556-4d27-95dd-a34d84e46a50');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1388', () => {
    const query = `INSERT INTO test (*) VALUES ('d1', 1, 0), ('d1', 2, 1), ('d1', 3, 0), ('d1', 4, 1), ('d1', 5, 0), ('d2', 1, 0), ('d3', 1, 0), ('d4', 1, 0),  ('d5', 1, 0), ('d6', 1, 0), ('d6', 3, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1389', () => {
    const query = `INSERT INTO test (*) VALUES ('d1', 1, 0), ('d1', 2, 1), ('d1', 3, 0), ('d1', 4, 1), ('d1', 5, 0), ('d2', 1, 0), ('d3', 1, 0), ('d4', 1, 0),  ('d5', 1, 0), ('d6', 1, 0), ('d6', 2, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1390', () => {
    const query = `INSERT INTO test (*) VALUES ('d1', 1, 0), ('d1', 2, 1), ('d1', 3, 0), ('d1', 4, 1), ('d1', 5, 0), ('d2', 1, 0), ('d3', 1, 0), ('d4', 1, 0),  ('d5', 1, 0), ('d6', 1, 0), ('d6', 3, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1391', () => {
    const query = `INSERT INTO 02861_interpolate VALUES ('2023-05-15', '1', 1), ('2023-05-22', '1', 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1392', () => {
    const query = `INSERT INTO set_index__fuzz_41 (a) VALUES (today());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1393', () => {
    const query = `insert into dist values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1394', () => {
    const query = `INSERT INTO 02845_prewhere SELECT number, number, number from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1395', () => {
    const query = `INSERT INTO t1 VALUES (0, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1396', () => {
    const query = `INSERT INTO t2 VALUES (0, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1397', () => {
    const query = `INSERT INTO t1 VALUES (0, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1398', () => {
    const query = `insert into test select * from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1399', () => {
    const query = `insert into t02845 values ([1,2,3,4,5,6], 2, 1),([1,2,3,4,5,6], 3, 2),([1,2,3,4], 3, 3),([4,8,15,16,23,42], 5, 4),([2, 7, 18, 28, 18, 28, 45, 90, 45], 7, 5),([3, 14, 159, 26, 5], 11, 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1400', () => {
    const query = `INSERT INTO t SELECT number, rand()%1000 FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1401', () => {
    const query = `insert into data (key) values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1402', () => {
    const query = `insert into data (key) values (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1403', () => {
    const query = `INSERT INTO source_table_memory SELECT * FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1404', () => {
    const query = `INSERT INTO source_table_log SELECT * FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1405', () => {
    const query = `INSERT INTO source_table_tiny_log SELECT * FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1406', () => {
    const query = `INSERT INTO source_table_stripe_log SELECT * FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1407', () => {
    const query = `INSERT INTO source_table_merge_tree SELECT * FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1408', () => {
    const query = `INSERT INTO source_table_dictionary VALUES (1, 'First');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1409', () => {
    const query = `INSERT INTO t_mutations_nondeterministic VALUES (10, 20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1410', () => {
    const query = `INSERT INTO t_mutations_nondeterministic VALUES (10, [20]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1411', () => {
    const query = `INSERT INTO t_mutations_nondeterministic VALUES (10, initializeAggregation('uniqExactState', 1::UInt64));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1412', () => {
    const query = `INSERT INTO t_mutations_nondeterministic VALUES (10, '2020-10-10');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1413', () => {
    const query = `INSERT INTO t_mutations_nondeterministic VALUES (10, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1414', () => {
    const query = `INSERT INTO t_mutations_nondeterministic VALUES (10, '2000-10-10'), (20, '2100-10-10');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1415', () => {
    const query = `INSERT INTO t_02848_mt1 SELECT number, toString(number) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1416', () => {
    const query = `INSERT INTO t_02848_mt2 SELECT number, toString(number), number, 'aaaabbbbccccddddtestxxxyyy' FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1417', () => {
    const query = `INSERT INTO largestTriangleThreeBucketsTestFloat64Float64 VALUES (1.0, 10.0),(2.0, 20.0),(3.0, 15.0),(8.0, 60.0),(9.0, 55.0),(10.0, 70.0),(4.0, 30.0),(5.0, 40.0),(6.0, 35.0),(7.0, 50.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1418', () => {
    const query = `INSERT INTO largestTriangleThreeBucketsTestDecimal64Decimal64(x, y) VALUES (0.63, 0.25), (0.02, 0.16), (0.29, 0.16), (0.2, 0.24), (0.41, 0.63), (0.06, 0.73), (0.36, 0.99), (0.57, 0.18), (0.98, 0.09), (0.73, 0.95), (0.45, 0.86), (0.37, 0.86), (0.6, 0.64), (0.11, 0.31), (0.7, 0.25), (0.85, 0.15), (0.68, 0.39), (0.9, 0.3), (0.25, 0.34), (0.09, 0.0), (0.91, 0.62), (0.47, 0.06), (0.08, 0.88), (0.48, 0.57), (0.55, 0.75), (0.19, 0.27), (0.87, 0.15), (0.15, 0.09), (0.77, 0.28), (0.5, 0.2), (0.39, 0.86), (0.52, 0.11), (0.38, 0.75), (0.71, 0.44), (0.21, 0.46), (0.88, 0.15), (0.83, 0.67), (0.23, 0.23);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1419', () => {
    const query = `INSERT INTO largestTriangleThreeBucketsTestDateTime64Float64 (x, y) VALUES ('2023-09-06 00:00:00', 14.217481939467213), ('2023-09-11 00:00:00', 30.096113766096455), ('2023-01-31 00:00:00', 91.42364224984735), ('2023-12-14 00:00:00', 42.08543753438961), ('2023-10-31 00:00:00', 29.93227107709394), ('2023-12-31 00:00:00', 98.52375935588333), ('2023-07-07 00:00:00', 79.9367415060134), ('2023-08-02 00:00:00', 55.417182033825696), ('2023-03-15 00:00:00', 98.77709508458238), ('2023-09-05 00:00:00', 2.832505232031368), ('2023-06-05 00:00:00', 8.107958052612418), ('2023-02-08 00:00:00', 62.95788480328096), ('2023-02-17 00:00:00', 76.80522155552535), ('2023-11-13 00:00:00', 24.927527306242993), ('2023-02-03 00:00:00', 7.966981342350332), ('2023-05-31 00:00:00', 44.61922229800436), ('2023-09-21 00:00:00', 65.86974701469791), ('2023-01-14 00:00:00', 35.96528042030847), ('2023-02-19 00:00:00', 16.065599678978305), ('2023-05-24 00:00:00', 17.23630978966909), ('2023-11-15 00:00:00', 15.544172190379879), ('2023-12-03 00:00:00', 13.738382187690856), ('2023-10-09 00:00:00', 16.7137129521176), ('2023-11-19 00:00:00', 12.12866001303361), ('2023-06-10 00:00:00', 95.15764263905534), ('2023-07-06 00:00:00', 18.87765798627088), ('2023-03-13 00:00:00', 44.82941460384813), ('2023-01-29 00:00:00', 36.0214717111606), ('2023-12-19 00:00:00', 90.30173319497655), ('2023-07-15 00:00:00', 12.67101467231364), ('2023-07-06 00:00:00', 88.13662733228512), ('2023-05-10 00:00:00', 34.18711141027026), ('2023-11-12 00:00:00', 75.58716684321973), ('2023-10-28 00:00:00', 35.79179186729331), ('2023-11-14 00:00:00', 0.9318182359137728), ('2023-09-29 00:00:00', 80.05338096818797), ('2023-09-13 00:00:00', 16.130217942056866), ('2023-07-28 00:00:00', 11.186638594914744), ('2023-02-12 00:00:00', 69.43690757793445), ('2023-12-18 00:00:00', 12.832032764204616), ('2023-05-21 00:00:00', 74.25002458036471), ('2023-04-03 00:00:00', 51.5662427420719), ('2023-11-27 00:00:00', 96.44359131281784), ('2023-03-29 00:00:00', 33.018594418113324), ('2023-02-07 00:00:00', 84.58945099939815), ('2023-11-16 00:00:00', 40.61531555527268), ('2023-04-21 00:00:00', 60.0545791577218), ('2023-01-31 00:00:00', 87.23185155362057), ('2023-05-19 00:00:00', 77.4095289464808), ('2023-08-26 00:00:00', 18.700816570182067);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1420', () => {
    const query = `INSERT INTO largestTriangleTreeBucketsBucketSizeTest (x, y) SELECT (number + 1) AS x, (x % 1000) AS y FROM numbers(9999);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1421', () => {
    const query = `insert into function file('02841.parquet') with 5000 - number as n select
number,
intDiv(n, 11)::UInt8 as u8,
n::UInt16 u16,
n::UInt32 as u32,
n::UInt64 as u64,
intDiv(n, 11)::Int8 as i8,
n::Int16 i16,
n::Int32 as i32,
n::Int64 as i64,
toDate32(n*500000) as date32,
toDateTime64(n*1e6, 3) as dt64_ms,
toDateTime64(n*1e6, 6) as dt64_us,
toDateTime64(n*1e6, 9) as dt64_ns,
toDateTime64(n*1e6, 0) as dt64_s,
toDateTime64(n*1e6, 2) as dt64_cs,
(n/1000)::Float32 as f32,
(n/1000)::Float64 as f64,
n::String as s,
n::String::FixedString(9) as fs,
n::Decimal32(3)/1234 as d32,
n::Decimal64(10)/12345678 as d64,
n::Decimal128(20)/123456789012345 as d128,
n::Decimal256(40)/123456789012345/678901234567890 as d256
from numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1422', () => {
    const query = `insert into function file('02841.parquet') select arrayStringConcat(range(number*1000000)) as s from numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1423', () => {
    const query = `insert into function file('02841.parquet') select number,
if(number%234 == 0, NULL, number) as sometimes_null,
toNullable(number) as never_null,
if(number%345 == 0, number::String, NULL) as mostly_null,
toLowCardinality(if(number%234 == 0, NULL, number)) as sometimes_null_lc,
toLowCardinality(toNullable(number)) as never_null_lc,
toLowCardinality(if(number%345 == 0, number::String, NULL)) as mostly_null_lc
from numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1424', () => {
    const query = `insert into function file('02841.parquet') select number,
if(number%234 == 0, NULL, number + 100) as positive_or_null,
if(number%234 == 0, NULL, -number - 100) as negative_or_null,
if(number%234 == 0, NULL, 'I am a string') as string_or_null
from numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1425', () => {
    const query = `insert into function file('02841.parquet') select 42 as x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1426', () => {
    const query = `insert into function file('t.parquet', Parquet, 'x String') values ('1'), ('100'), ('2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1427', () => {
    const query = `insert into tab2 select toString(number), number, toString(number), toString(number), 0 from numbers(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1428', () => {
    const query = `INSERT INTO t1(id) VALUES (42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1429', () => {
    const query = `INSERT INTO t2(conversation) VALUES (42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1430', () => {
    const query = `INSERT INTO t2(conversation) VALUES (42); -- { serverError UNKNOWN_TABLE } drop table t2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1431', () => {
    const query = `INSERT INTO t2(conversation) VALUES (42); -- { serverError UNKNOWN_TABLE } CREATE TABLE t1 (
\`id\` UInt64
)
ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1432', () => {
    const query = `INSERT INTO t1 SELECT if (number % 13 = 0, toString(number), '') FROM numbers(2000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1433', () => {
    const query = `INSERT INTO t2 SELECT if (number % 14 = 0, toString(number), '') FROM numbers(2000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1434', () => {
    const query = `INSERT INTO test VALUES ([3,4,5,6]), ([1,2,3,4]), ([2,3,4,5]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1435', () => {
    const query = `INSERT INTO test (id, data) VALUES (1, (100, 200)), (2, (15, 25)), (3, (2, 1)), (4, (30, 60));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1436', () => {
    const query = `INSERT INTO test (id, data) VALUES (1, 12.5), (2, 0.2), (3, 6.6), (4, 2.2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1437', () => {
    const query = `INSERT INTO test (id, data) VALUES (1, 'AAA'), (2, 'bbc'), (3, 'abc'), (4, 'aaa'), (5, 'Aaa');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1438', () => {
    const query = `INSERT INTO test SELECT number, 'test' FROM numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1439', () => {
    const query = `INSERT INTO test SELECT 1, groupArraySortedState(2)(number) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1440', () => {
    const query = `insert into t1__fuzz_17 select * from generateRandom() limit 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1441', () => {
    const query = `insert into t2__fuzz_0 select * from generateRandom() limit 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1442', () => {
    const query = `insert into test select *, today() from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1443', () => {
    const query = `insert into test2 select *, today() from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1444', () => {
    const query = `INSERT INTO cool_table SELECT number, range(number), range(number) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1445', () => {
    const query = `INSERT INTO cool_table SELECT number, range(number), arrayMap(x -> range(x % 4), range(number)) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1446', () => {
    const query = `INSERT INTO cool_table SELECT number, range(number), arrayMap(x -> (arrayMap(y -> 'k' || toString(y), range(x % 4)), range(x % 4))::Map(LowCardinality(String), UInt64), range(number)) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1447', () => {
    const query = `INSERT INTO test_table_1 VALUES (0, 'Value', 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1448', () => {
    const query = `INSERT INTO test_table_2 VALUES (0, 'Value', 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1449', () => {
    const query = `INSERT INTO numbers500k SELECT number FROM system.numbers LIMIT 500000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1450', () => {
    const query = `INSERT INTO t_sparse_sort_limit SELECT '2020-10-10', number % 10, number FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1451', () => {
    const query = `INSERT INTO t_sparse_sort_limit SELECT '2020-10-11', number % 10, number FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1452', () => {
    const query = `INSERT INTO nulls_first_sort_test VALUES (5,null,2), (5,null,1), (5,null,7), (5,null,3), (5,7,4), (5,7,6), (5,7,2), (5,7,1), (5,7,3), (5,7,9), (5,1,4), (5,1,6), (5,1,2), (5,1,1), (5,1,3), (5,1,9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1453', () => {
    const query = `INSERT INTO t_02833 VALUES ((1, 2));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1454', () => {
    const query = `INSERT INTO series(i, x, y) VALUES (1, 5.6,-4.4),(2, -9.6,3),(3, -1.3,-4),(4, 5.3,9.7),(5, 4.4,0.037),(6, -8.6,-7.8),(7, 5.1,9.3),(8, 7.9,-3.6),(9, -8.2,0.62),(10, -3,7.3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1455', () => {
    const query = `insert into t_tuple_sparse values (0, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1456', () => {
    const query = `insert into t_multi_prewhere select number, number, number from numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1457', () => {
    const query = `insert into test_array_joins (id,arr_1, arr_2, arr_3, arr_4) SELECT number,array(randomPrintableASCII(3)),array(randomPrintableASCII(3)),array(randomPrintableASCII(3)),array(randomPrintableASCII(3))
from numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1458', () => {
    const query = `insert into t_delete_skip_index select number, toString(number) from numbers(8192 * 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1459', () => {
    const query = `INSERT INTO t1 (c1,c2,c3) VALUES(now() + INTERVAL '1 day 1 hour 1 minute 1 second', now(), now());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1460', () => {
    const query = `INSERT INTO t1 VALUES (1, toDateTime('2023-07-20 21:53:01') + INTERVAL '1 day 1 hour 1 minute 1 second'), (2, toDateTime('2023-07-20 21:53:01') + INTERVAL '1 day');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1461', () => {
    const query = `INSERT INTO t1 VALUES (3, toDateTime('2023-07-20 21:53:01') + INTERVAL 1 DAY), (4, toDateTime('2023-07-20 21:53:01') + (toIntervalMinute(1), toIntervalSecond(1)));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1462', () => {
    const query = `INSERT INTO discounts VALUES (1, '2015-01-01', Null, 0.1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1463', () => {
    const query = `INSERT INTO discounts VALUES (1, '2015-01-15', Null, 0.2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1464', () => {
    const query = `INSERT INTO discounts VALUES (2, '2015-01-01', '2015-01-15', 0.3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1465', () => {
    const query = `INSERT INTO discounts VALUES (2, '2015-01-04', '2015-01-10', 0.4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1466', () => {
    const query = `INSERT INTO discounts VALUES (3, '1970-01-01', '2015-01-15', 0.5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1467', () => {
    const query = `INSERT INTO discounts VALUES (3, '1970-01-01', '2015-01-10', 0.6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1468', () => {
    const query = `INSERT INTO ids SELECT * FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1469', () => {
    const query = `INSERT INTO rdb VALUES (1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1470', () => {
    const query = `INSERT INTO t2 VALUES (4), (5), (6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1471', () => {
    const query = `insert into t0 values (19000, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1472', () => {
    const query = `insert into 02815_first_line_vector values (1, 'foo\\nbar\\nbaz'), (2, 'quux\\n'), (3, 'single line'), (4, 'windows\\r\\nline breaks');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1473', () => {
    const query = `INSERT INTO null_table_buffer VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1474', () => {
    const query = `INSERT INTO t SELECT number, 0, 1 FROM numbers(1e3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1475', () => {
    const query = `INSERT INTO t SELECT number, 1, 1 FROM numbers(1e2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1476', () => {
    const query = `INSERT INTO tb1 VALUES (1, [10, 20, 30, 10, 20, 30, 10, 20, 30, 10, 20, 30, 10, 20, 30, 10, 20, 30, 10, 20, 30]), (2, [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), (3, [6, 3, 4]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1477', () => {
    const query = `INSERT INTO tb1 VALUES (1, [-3, 2.40, 15, 3.90, 5, 6, 4.50, 5.20, 3, 4, 5, 16, 7, 5, 5, 4]), (2, [-3, 2.40, 15, 3.90, 5, 6, 4.50, 5.20, 12, 45, 12, 3.40, 3, 4, 5, 6]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1478', () => {
    const query = `INSERT INTO tb2 VALUES (3,[10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1479', () => {
    const query = `INSERT INTO tb2 VALUES (14, [139, 87, 110, 68, 54, 50, 51, 53, 133, 86, 141, 97, 156, 94, 149, 95, 140, 77, 61, 50, 54, 47, 133, 72, 152, 94, 148, 105, 162, 101, 160, 87, 63, 53, 55, 54, 151, 103, 189, 108, 183, 113, 175, 113, 178, 90, 71, 62, 62, 65, 165, 109, 181, 115, 182, 121, 178, 114, 170]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1480', () => {
    const query = `insert into t values (1, [1,2,3]), (2, [4,5]), (3, [6]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1481', () => {
    const query = `insert into t select number, 'hello, world!' from numbers (5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1482', () => {
    const query = `INSERT INTO a VALUES ([2,3],[4,5]),([1,2,3], [4,5]),([6,7],[8,9,10]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1483', () => {
    const query = `INSERT INTO users VALUES (111, 'JFK', 33);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1484', () => {
    const query = `INSERT INTO users VALUES (6666, 'KLM', 48);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1485', () => {
    const query = `INSERT INTO users VALUES (88888, 'AMS', 50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1486', () => {
    const query = `insert into test select * from generateRandom() limit 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1487', () => {
    const query = `insert into tab values(1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1488', () => {
    const query = `insert into tab values(1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1489', () => {
    const query = `insert into tab values(2, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1490', () => {
    const query = `insert into null_in__fuzz_6 select * from generateRandom() limit 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1491', () => {
    const query = `INSERT INTO test_set VALUES (1), (NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1492', () => {
    const query = `INSERT INTO t10 (c0) FORMAT Values (-1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1493', () => {
    const query = `insert into test (data) select 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1494', () => {
    const query = `insert into function clusterAllReplicas(test_cluster_two_shards, currentDatabase(), data, rand()) values (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1495', () => {
    const query = `INSERT INTO test_xy(x, y) VALUES (1, 'a1'), (2, 'a2'), (3, 'a3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1496', () => {
    const query = `INSERT INTO updates(x, y) VALUES  (2, 'b2'), (3, 'b3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1497', () => {
    const query = `INSERT INTO t SELECT * FROM numbers_mt(1e3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1498', () => {
    const query = `INSERT INTO fx_1m SELECT
'EURUSD',
toDateTime64('2022-12-12 12:00:00', 3, 'UTC') + number,
number + randCanonical(),
number + randCanonical(),
number + randCanonical(),
number + randCanonical(),
number + randCanonical()
FROM numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1499', () => {
    const query = `INSERT INTO t_projections_lwd SELECT number, number FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1500', () => {
    const query = `INSERT INTO test_block_mismatch VALUES (1, toDateTime('2023-01-01 12:12:12'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1501', () => {
    const query = `INSERT INTO test_block_mismatch VALUES (1, toDateTime('2023-02-02 12:12:12'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1502', () => {
    const query = `INSERT INTO test_block_mismatch VALUES (2, toDateTime('2023-01-01 12:12:12'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1503', () => {
    const query = `INSERT INTO test_block_mismatch_sk1  VALUES (1, toDateTime('2023-01-01 12:12:12'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1504', () => {
    const query = `INSERT INTO test_block_mismatch_sk1 VALUES (1, toDateTime('2023-01-01 12:12:12'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1505', () => {
    const query = `INSERT INTO test_block_mismatch_sk1 VALUES (1, toDateTime('2023-02-02 12:12:12'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1506', () => {
    const query = `INSERT INTO test_block_mismatch_sk1 VALUES (2, toDateTime('2023-01-01 12:12:12'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1507', () => {
    const query = `INSERT INTO test_block_mismatch_sk2  VALUES (1, toDateTime('2023-01-01 12:12:12'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1508', () => {
    const query = `INSERT INTO test_block_mismatch_sk2 VALUES (1, toDateTime('2023-01-01 12:12:12'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1509', () => {
    const query = `INSERT INTO test_block_mismatch_sk2 VALUES (1, toDateTime('2023-02-02 12:12:12'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1510', () => {
    const query = `INSERT INTO test_block_mismatch_sk2 VALUES (2, toDateTime('2023-01-01 12:12:12'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1511', () => {
    const query = `INSERT INTO employees VALUES (23, 'Henry', 'it', 104), (24, 'Irene', 'it', 104), (25, 'Frank', 'it', 120), (31, 'Cindy', 'sales', 96), (33, 'Alice', 'sales', 100), (32, 'Dave', 'sales', 96), (22, 'Grace', 'it', 90), (21, 'Emma', 'it', 84);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1512', () => {
    const query = `insert into test values(1.0 , 2.0, 3.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1513', () => {
    const query = `INSERT INTO test1 (\`pt\`, \`brand_name\`, \`total_indirect_order_cnt\`, \`total_indirect_gmv\`) VALUES ('20230625', 'LINING', 2232, 1008710), ('20230625', 'adidas', 125, 58820), ('20230625', 'Nike', 1291, 1033020), ('20230626', 'Nike', 1145, 938926), ('20230626', 'LINING', 1904, 853336), ('20230626', 'adidas', 133, 62546), ('20220626', 'LINING', 3747, 1855203), ('20220626', 'Nike', 2295, 1742665), ('20220626', 'adidas', 302, 122388);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1514', () => {
    const query = `INSERT INTO test2 (\`pt\`, \`brand_name\`, \`exposure_uv\`, \`click_uv\`) VALUES ('20230625', 'Nike', 2012913, 612831),  ('20230625', 'adidas', 480277, 96176), ('20230625', 'LINING', 2474234, 627814), ('20230626', 'Nike', 1934666, 610770), ('20230626', 'adidas', 469904, 91117), ('20230626', 'LINING', 2285142, 599765), ('20220626', 'Nike', 2979656, 937166), ('20220626', 'adidas', 704751, 124250), ('20220626', 'LINING', 3163884, 1010221);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1515', () => {
    const query = `INSERT INTO session_events SELECT 141,
'693de636-6d9b-47b7-b52a-33bd303b6255',
1686053240314,
number,
number,
toString(number % 10),
''
FROM numbers_mt(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1516', () => {
    const query = `INSERT INTO event_types SELECT toString(number % 10),
number % 2
FROM numbers(20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1517', () => {
    const query = `INSERT INTO summing_merge_tree_datetime64 SELECT 1 pk, '2023-05-01 23:55:55.100' timestamp, 1 value;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1518', () => {
    const query = `INSERT INTO summing_merge_tree_datetime64 SELECT 1 pk, '2023-05-01 23:55:55.100' timestamp, 2 value;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1519', () => {
    const query = `INSERT INTO summing_merge_tree_datetime64 SELECT 1 pk, '2023-05-01 23:55:55.100' timestamp, 3 value;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1520', () => {
    const query = `INSERT INTO summing_merge_tree_datetime64 SELECT 1 pk, '2023-05-01 23:55:55.100' timestamp, 4 value;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1521', () => {
    const query = `INSERT INTO summing_merge_tree_datetime64 SELECT 1 pk, '2023-05-01 23:55:55.100' timestamp, 5 value;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1522', () => {
    const query = `INSERT INTO test_table VALUES (-10.75, 95.57);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1523', () => {
    const query = `insert into test_table__fuzz_3 select * from generateRandom() limit 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1524', () => {
    const query = `insert into local (a) select number from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1525', () => {
    const query = `insert into events values (reinterpretAsUUID(0), reinterpretAsUUID(1), reinterpretAsUUID(0), toDateTime('2022-02-02', 'UTC'), toString(0), reinterpretAsUUID(0), toString(0)), (reinterpretAsUUID(0), reinterpretAsUUID(1), reinterpretAsUUID(0), toDateTime('2022-02-02', 'UTC'), toString(0), reinterpretAsUUID(0), toString(0)), (reinterpretAsUUID(1), reinterpretAsUUID(0), reinterpretAsUUID(0), toDateTime('2022-02-02', 'UTC'), toString(0), reinterpretAsUUID(0), toString(0)), (reinterpretAsUUID(1), reinterpretAsUUID(0), reinterpretAsUUID(0), toDateTime('2022-02-02', 'UTC'), toString(0), reinterpretAsUUID(0), toString(0)), (reinterpretAsUUID(3), reinterpretAsUUID(2), reinterpretAsUUID(0), toDateTime('2022-02-02', 'UTC'), toString(0), reinterpretAsUUID(0), toString(0)), (reinterpretAsUUID(3), reinterpretAsUUID(2), reinterpretAsUUID(0), toDateTime('2022-02-02', 'UTC'), toString(0), reinterpretAsUUID(0), toString(0));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1526', () => {
    const query = `INSERT INTO t_02784 SELECT number, number FROM numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1527', () => {
    const query = `INSERT INTO source values ('2021-12-31 23:00:00', 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1528', () => {
    const query = `INSERT INTO source values ('2022-12-31', '2022-12-31 23:59:59', '2022-12-31', '2022-12-31 23:59:59.123', 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1529', () => {
    const query = `INSERT INTO source values ('2023-01-01', '2023-01-01 00:00:00', '2023-01-01', '2023-01-01 00:00:00.000', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1530', () => {
    const query = `INSERT INTO source values ('2023-12-01', '2023-12-01 00:00:00', '2023-12-01', '2023-12-01 00:00:00.000', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1531', () => {
    const query = `INSERT INTO source values ('2023-12-31', '2023-12-31 23:59:59', '2023-12-31', '2023-12-31 23:59:59.123', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1532', () => {
    const query = `INSERT INTO source values ('2024-01-01', '2024-01-01 00:00:00', '2024-01-01', '2024-01-01 00:00:00.000', 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1533', () => {
    const query = `INSERT INTO data SELECT number,     if(number/8192 % 2 == 0, now(), now() - INTERVAL 200 DAY) FROM numbers(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1534', () => {
    const query = `INSERT INTO data SELECT number+1e6, if(number/8192 % 2 == 0, now(), now() - INTERVAL 200 DAY) FROM numbers(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1535', () => {
    const query = `INSERT INTO test_02771.t SELECT number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1536', () => {
    const query = `INSERT INTO join_inner_table__fuzz_146_replicated SELECT CAST('833c9e22-c245-4eb5-8745-117a9a1f26b1', 'UUID') AS id, CAST(rowNumberInAllBlocks(), 'String') AS key, *
FROM generateRandom('number Int64, value1 String, value2 String, time Int64', 1, 10, 2) LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1537', () => {
    const query = `INSERT INTO test_log (crypto_name, trade_date) VALUES ('abc', '2021-01-01'), ('def', '2022-02-02');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1538', () => {
    const query = `INSERT INTO data_02771 VALUES (1, 2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1539', () => {
    const query = `INSERT INTO test_parallel_replicas_unavailable_shards SELECT * FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1540', () => {
    const query = `INSERT INTO test_table VALUES (76, 57);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1541', () => {
    const query = `INSERT INTO test_table VALUES (12000, 36, 77.94);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1542', () => {
    const query = `INSERT INTO t0 VALUES (15, 25000, 58);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1543', () => {
    const query = `INSERT INTO t5 VALUES (3, 13000, 73.90, 83);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1544', () => {
    const query = `INSERT INTO parallel_replicas_final SELECT toString(number) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1545', () => {
    const query = `INSERT INTO parallel_replicas_plain SELECT toString(number) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1546', () => {
    const query = `insert into x values ('2022-10-01 10:10:10');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1547', () => {
    const query = `INSERT INTO test FORMAT Values (1, today());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1548', () => {
    const query = `INSERT INTO test_table_1 VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1549', () => {
    const query = `INSERT INTO test_table_2 VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1550', () => {
    const query = `INSERT INTO defaults values (3, 12, 4, 56, 3, 12, -4, 56) (2, 10, 21, 20, 2, 10, -21, 20) (1, 4, 9, 5, 1, 4, -9, 5) (0, 5, 7, 7, 0, 5, -7, 7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1551', () => {
    const query = `INSERT INTO 02751_query_log_test_partitions SELECT number, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1552', () => {
    const query = `INSERT INTO join_inner_table__fuzz_1 SELECT CAST('833c9e22-c245-4eb5-8745-117a9a1f26b1', 'UUID') AS id,
CAST(rowNumberInAllBlocks(), 'String') AS key,
*
FROM generateRandom('number Int64, value1 String, value2 String, time Int64', 1, 10, 2)
LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1553', () => {
    const query = `INSERT INTO test_tz_setting VALUES ('2000-01-01 01:00:00'); -- this is parsed using timezone from \`d\` column INSERT INTO test_tz_setting VALUES (toDateTime('2000-01-02 02:00:00')); -- this is parsed using \`session_timezone\`
SELECT d FROM test_tz_setting WHERE d == '2000-01-01 01:00:00'; -- 1 row expected
SELECT d FROM test_tz_setting WHERE d == toDateTime('2000-01-01 02:00:00'); -- 0 rows expected
DROP TABLE test_tz_setting SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1554', () => {
    const query = `INSERT INTO array_jaccard_index values ([1,2,3]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1555', () => {
    const query = `INSERT INTO array_jaccard_index values ([1,2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1556', () => {
    const query = `INSERT INTO array_jaccard_index values ([1]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1557', () => {
    const query = `insert into function file(basic_types_02735.parquet) select * from basic_types_02735;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1558', () => {
    const query = `insert into function file(nullables_02735.parquet) select * from nullables_02735;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1559', () => {
    const query = `insert into function file(arrays_02735.parquet) select * from arrays_02735;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1560', () => {
    const query = `insert into arrays_out_02735 select * from file(arrays_02735.parquet);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1561', () => {
    const query = `insert into function file(madness_02735.parquet) select * from madness_02735;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1562', () => {
    const query = `insert into function file(a.csv) select * from madness_02735 order by tuple(*);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1563', () => {
    const query = `insert into function file(b.csv) select aa, aaa, an, aan, l, ln, arrayMap(x->reinterpret(x, 'UInt128'), al) as al_, aaln, mln, t, n.hello, n.world from file(madness_02735.parquet) order by tuple(aa, aaa, an, aan, l, ln, al_, aaln, mln, t, n.hello, n.world);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1564', () => {
    const query = `insert into function file(squash_02735.parquet) select '012345' union all select '543210' settings max_block_size = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1565', () => {
    const query = `insert into function file(row_group_bytes_02735.parquet) select '012345' union all select '543210' settings max_block_size = 1, output_format_parquet_row_group_size_bytes = 5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1566', () => {
    const query = `insert into function file(tiny_row_groups_02735.parquet) select * from numbers(3) settings output_format_parquet_row_group_size = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1567', () => {
    const query = `insert into function file(big_column_chunk_02735.parquet) select number from numbers(1000000) settings output_format_parquet_row_group_size = 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1568', () => {
    const query = `insert into function file(statistics_02735.parquet) select 100 + number%200 as a, toUInt32(number * 3000) as u, toInt32(number * 3000) as i, if(number % 10 == 9, toString(number), null) as s from numbers(1000000) settings output_format_parquet_row_group_size = 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1569', () => {
    const query = `insert into function file(long_string_02735.parquet) select toString(range(number * 2000)) from numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1570', () => {
    const query = `insert into function file(compressed_02735.parquet) select concat('aaaaaaaaaaaaaaaa', toString(number)) as s from numbers(1000) settings output_format_parquet_row_group_size = 10000, output_format_parquet_compression_method='zstd';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1571', () => {
    const query = `insert into function file(compressed_02735.parquet) select concat('aaaaaaaaaaaaaaaa', toString(number)) as s from numbers(1000) settings output_format_parquet_row_group_size = 10000, output_format_parquet_compression_method='none';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1572', () => {
    const query = `insert into function file(compressed_02735.parquet) select if(number%3==1, NULL, 42) as x from numbers(70) settings output_format_parquet_compression_method='zstd';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1573', () => {
    const query = `insert into function file(single_thread_02735.parquet) select * from other_encoders_02735 settings max_threads = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1574', () => {
    const query = `insert into function file(arrow_02735.parquet) select * from other_encoders_02735 settings output_format_parquet_use_custom_encoder = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1575', () => {
    const query = `insert into function file(strings1_02735.parquet) select 'never', toFixedString('gonna', 5) settings output_format_parquet_string_as_string = 1, output_format_parquet_fixed_string_as_fixed_byte_array = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1576', () => {
    const query = `insert into function file(strings2_02735.parquet) select 'give', toFixedString('you', 3) settings output_format_parquet_string_as_string = 0, output_format_parquet_fixed_string_as_fixed_byte_array = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1577', () => {
    const query = `insert into function file(strings3_02735.parquet) select toFixedString('up', 2) settings output_format_parquet_string_as_string = 1, output_format_parquet_fixed_string_as_fixed_byte_array = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1578', () => {
    const query = `insert into function file(datetime64_02735.parquet) select toDateTime64(number / 1e3, 3) as ms,
toDateTime64(number / 1e6, 6) as us,
toDateTime64(number / 1e9, 9) as ns,
toDateTime64(number / 1e2, 2) as cs,
toDateTime64(number, 0) as s,
toDateTime64(number / 1e7, 7) as dus
from numbers(2000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1579', () => {
    const query = `INSERT INTO t1 VALUES (1, -1), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1580', () => {
    const query = `INSERT INTO t2 VALUES (1, 1), (1, NULL), (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1581', () => {
    const query = `INSERT INTO t_sparse_short_circuit select number, if (number % 21 = 0, number % 10 + 1, 0) FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1582', () => {
    const query = `INSERT INTO t_sparse_mutation select number, if (number % 21 = 0, number, 0) FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1583', () => {
    const query = `INSERT INTO t_sparse_reload SELECT number, 0 FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1584', () => {
    const query = `INSERT INTO test_string(c1, c2) VALUES ('1',  ''), ('2', '');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1585', () => {
    const query = `INSERT INTO test(c1, c2, c3) VALUES ('', '', '1'), ('', '', '2'),('v1', 'v2', '3'),('v1', 'v2', '4'),('v1', 'v2', '5');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1586', () => {
    const query = `INSERT INTO src VALUES (0, '0', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1587', () => {
    const query = `INSERT INTO src VALUES (1, '0', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1588', () => {
    const query = `INSERT INTO src VALUES (1, '1', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1589', () => {
    const query = `INSERT INTO src VALUES (2, '0', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1590', () => {
    const query = `INSERT INTO src VALUES (3, '0', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1591', () => {
    const query = `INSERT INTO src VALUES (3, '1', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1592', () => {
    const query = `INSERT INTO dst VALUES (0, '1', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1593', () => {
    const query = `INSERT INTO dst VALUES (1, '1', 2), (1, '2', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1594', () => {
    const query = `INSERT INTO dst VALUES (2, '1', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1595', () => {
    const query = `INSERT INTO dst VALUES (3, '1', 2), (3, '2', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1596', () => {
    const query = `INSERT INTO rdst VALUES (0, '1', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1597', () => {
    const query = `INSERT INTO rdst VALUES (1, '1', 2), (1, '2', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1598', () => {
    const query = `INSERT INTO rdst VALUES (2, '1', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1599', () => {
    const query = `INSERT INTO rdst VALUES (3, '1', 2), (3, '2', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1600', () => {
    const query = `INSERT INTO join_inner_table SELECT
'833c9e22-c245-4eb5-8745-117a9a1f26b1'::UUID as id,
rowNumberInAllBlocks()::String as key,
* FROM generateRandom('number Int64, value1 String, value2 String, time Int64', 1, 10, 2)
LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1601', () => {
    const query = `INSERT INTO join_outer_table SELECT
'833c9e22-c245-4eb5-8745-117a9a1f26b1'::UUID as id,
(rowNumberInAllBlocks() % 10)::String as key,
* FROM generateRandom('otherValue1 String, otherValue2 String, time Int64', 1, 10, 2)
LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1602', () => {
    const query = `INSERT INTO test SELECT toDate('2023-04-20'), 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1603', () => {
    const query = `INSERT INTO test SELECT toDate('2023-04-19'), 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1604', () => {
    const query = `INSERT INTO test SELECT toDate('2023-04-17'), 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1605', () => {
    const query = `insert into ts VALUES (1, 10, 1), (1, 12, 2), (3, 5, 1), (3, 7, 3), (5, 1, 1), (5, 3, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1606', () => {
    const query = `insert into ts VALUES (1, 10, 1), (1, 12, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1607', () => {
    const query = `insert into ts VALUES (3, 5, 1), (3, 7, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1608', () => {
    const query = `insert into ts VALUES (5, 1, 1), (5, 3, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1609', () => {
    const query = `insert into ts VALUES (1, 10, 1), (1, 12, 1), (3, 5, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1610', () => {
    const query = `insert into ts VALUES (3, 7, 1), (5, 1, 1), (5, 3, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1611', () => {
    const query = `INSERT INTO t_async_inserts_flush VALUES (1) (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1612', () => {
    const query = `INSERT INTO t_async_inserts_flush FORMAT JSONEachRow {"a": 10} {"a": 20};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1613', () => {
    const query = `INSERT INTO t_async_inserts_flush FORMAT JSONEachRow {"a": "str"};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1614', () => {
    const query = `INSERT INTO t_async_inserts_flush FORMAT JSONEachRow {"a": 100} {"a": 200};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1615', () => {
    const query = `INSERT INTO t_async_inserts_flush VALUES (3) (4) (5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1616', () => {
    const query = `INSERT INTO group_by_null_key VALUES (null, null), (null, null);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1617', () => {
    const query = `INSERT INTO 02725_memory_for_merges SELECT number, randomPrintableASCII(1000000) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1618', () => {
    const query = `INSERT INTO 02725_cnf VALUES (0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 1), (0, 0, 0, 0, 0, 0, 0, 0, 1, 0), (0, 0, 0, 0, 0, 0, 0, 0, 1, 1), (0, 0, 0, 0, 0, 0, 0, 1, 0, 0), (0, 0, 0, 0, 0, 0, 0, 1, 0, 1), (0, 0, 0, 0, 0, 0, 0, 1, 1, 0), (0, 0, 0, 0, 0, 0, 0, 1, 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1619', () => {
    const query = `INSERT INTO join_test (key, value) SELECT 1, number FROM numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1620', () => {
    const query = `INSERT INTO join_test (key, value) SELECT 1, number FROM numbers(10_000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1621', () => {
    const query = `INSERT INTO join_test_right (key, value) SELECT 1, number FROM numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1622', () => {
    const query = `INSERT INTO join_test_right (key, value) SELECT 1, number FROM numbers(7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1623', () => {
    const query = `INSERT INTO t0 SELECT number,
-number,
number
FROM numbers_mt(1e5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1624', () => {
    const query = `INSERT INTO t1 with toDateTime64('2023-01-01 00:00:00.000000001', 9, 'US/Eastern') as c SELECT EXTRACT(MINUTE FROM c+toIntervalSecond(number * 60)) from numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1625', () => {
    const query = `INSERT INTO user VALUES (1,'U1')(2,'U2')(3,'U3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1626', () => {
    const query = `INSERT INTO product VALUES (1,'P1','C1')(2,'P2','C1')(3,'P3','C2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1627', () => {
    const query = `INSERT INTO order VALUES (1,1,1)(2,1,2)(3,2,3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1628', () => {
    const query = `INSERT INTO test_table VALUES (0, 0), (0, 1), (1, 0), (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1629', () => {
    const query = `INSERT INTO test_table_nullable VALUES (0, 0), (0, 1), (1, 0), (1, 1), (0, NULL), (1, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1630', () => {
    const query = `INSERT INTO t1 SELECT * FROM generateRandom('k UInt32, v UInt32') LIMIT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1631', () => {
    const query = `INSERT INTO t2 SELECT * FROM generateRandom('k UInt32, v UInt32') LIMIT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1632', () => {
    const query = `insert into function file(data_02723.csv) select number from numbers(5) settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1633', () => {
    const query = `insert into test select * from urlCluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/a.tsv', 'TSV');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1634', () => {
    const query = `INSERT INTO table_with_dot_column SELECT '2020-01-01', 'Hello', 'World';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1635', () => {
    const query = `INSERT INTO table_with_dot_column SELECT toDate(now() + 48*3600), 'Hello', 'World';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1636', () => {
    const query = `insert into test values(null, 1),('', 2),('s', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1637', () => {
    const query = `insert into t_hardware_error values (1), (2), (3), (4), (5); `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1638', () => {
    const query = `insert into t_hardware_error values (6), (7), (8), (9), (10); `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1639', () => {
    const query = `INSERT INTO tab VALUES ('abcdef', ['c']), ('ghijkl', ['h', 'k']), ('mnopqr', ['n']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1640', () => {
    const query = `INSERT INTO tab VALUES ('xxx..yyy..'), ('..........'), ('..xx..yyy.'), ('..........'), ('xxx.......');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1641', () => {
    const query = `INSERT INTO data_02716_1 SELECT * FROM system.numbers LIMIT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1642', () => {
    const query = `INSERT INTO test SELECT number, argMaxState(number::String, '2023-04-12 16:23:01'::DateTime)
FROM numbers(9)
GROUP BY number;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1643', () => {
    const query = `INSERT INTO test SELECT number, argMaxState(number::String, '2023-04-12 16:23:01'::DateTime)
FROM numbers(990)
GROUP BY number;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1644', () => {
    const query = `INSERT INTO test SELECT 1, 'test';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1645', () => {
    const query = `INSERT INTO tab VALUES (['a', 'b']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1646', () => {
    const query = `INSERT INTO tab VALUES ('') ('12345') ('341Jons54326ton') ('A2222222') ('Fairdale') ('Faredale') ('Jon1s2o3n') ('Jonson') ('Jonston') ('M\\acDonald22321') ('MacDonald') ('S3344mith0000') ('Smith');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1647', () => {
    const query = `INSERT INTO summing_table(id, ip4Map.value, ip4Map.total, ip6Map.value, ip6Map.total, uuidMap.value, uuidMap.total) values (1, ['1.2.3.4'], [1], ['::1'], [2], ['00130949-0cd4-4c3d-84c4-cc421eff480f'], [3]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1648', () => {
    const query = `INSERT INTO summing_table(id, ip4Map.value, ip4Map.total, ip6Map.value, ip6Map.total, uuidMap.value, uuidMap.total) values(1, ['1.2.3.4'], [4], ['::1'], [5], ['00130949-0cd4-4c3d-84c4-cc421eff480f'], [6]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1649', () => {
    const query = `INSERT INTO summing_table(id, ip4Map.value, ip4Map.total, ip6Map.value, ip6Map.total, uuidMap.value, uuidMap.total) values(2, ['1.2.3.4'], [7], ['::1'], [8], ['00130949-0cd4-4c3d-84c4-cc421eff480f'], [9]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1650', () => {
    const query = `INSERT INTO summing_table(id, ip4Map.value, ip4Map.total, ip6Map.value, ip6Map.total, uuidMap.value, uuidMap.total) values(1, ['1.2.3.4'], [10], ['::1'], [11], ['00130949-0cd4-4c3d-84c4-cc421eff480f'], [12]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1651', () => {
    const query = `INSERT INTO summing_table(id, ip4Map.value, ip4Map.total, ip6Map.value, ip6Map.total, uuidMap.value, uuidMap.total) values(1, ['2.3.4.5'], [13], ['::2'], [14], ['00000000-0cd4-4c3d-84c4-cc421eff480f'], [15]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1652', () => {
    const query = `INSERT INTO summing_table(id, ip4Map.value, ip4Map.total, ip6Map.value, ip6Map.total, uuidMap.value, uuidMap.total) values(2, ['2.3.4.5'], [16], ['::1'], [17], ['00130949-0cd4-4c3d-84c4-cc421eff480f'], [18]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1653', () => {
    const query = `INSERT INTO summing_table(id, ip4Map.value, ip4Map.total, ip6Map.value, ip6Map.total, uuidMap.value, uuidMap.total) values(2, ['1.2.3.4'], [19], ['::2'], [20], ['00130949-0cd4-4c3d-84c4-cc421eff480f'], [21]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1654', () => {
    const query = `INSERT INTO summing_table(id, ip4Map.value, ip4Map.total, ip6Map.value, ip6Map.total, uuidMap.value, uuidMap.total) values(1, ['1.2.3.4'], [22], ['::1'], [23], ['00000000-0cd4-4c3d-84c4-cc421eff480f'], [24]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1655', () => {
    const query = `INSERT INTO t_memory_compressed VALUES (1, 'foo', range(5), map('k1', 'v1'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1656', () => {
    const query = `INSERT INTO t_memory_compressed VALUES (2, 'bar', range(5), map('k2', 'v2'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1657', () => {
    const query = `INSERT INTO tab VALUES (0, [0.0, 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 3.0, 0.0, 1.0, 2.0]) (1, [5.0, 1.0, 2.0, 3.0, 5.0, 1.0, 2.0, 3.0, 5.0, 1.0, 2.0, 3.0, 5.0, 1.0, 2.0, 3.0, 5.0, 1.0, 2.0]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1658', () => {
    const query = `INSERT INTO t_skip_index_in VALUES ('a', 'b', 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1659', () => {
    const query = `INSERT INTO 02707_keepermap_delete_update VALUES (1, 'Some string', 0), (2, 'Some other string', 0), (3, 'random', 0), (4, 'random2', 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1660', () => {
    const query = `INSERT INTO 02707_keepermap_delete_update VALUES (1, 'String', 10), (2, 'String', 20), (3, 'String', 30), (4, 'String', 40);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1661', () => {
    const query = `INSERT INTO kstest VALUES (0.010268, 0), (0.000167, 0), (0.000167, 0), (0.159258, 1), (0.136278, 1), (0.122389, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1662', () => {
    const query = `INSERT INTO kstest VALUES (14.72789, 0), (9.61661, 0), (13.57615, 0), (3.98392, 0), (11.98889, 0), (10.99422, 0), (5.44792, 0), (20.29346, 0), (7.05926, 0), (9.22732, 0), (12.06847, 0), (13.52612, 0), (8.24597, 0), (9.35245, 0), (10.12297, 0), (15.80624, 0), (13.68613, 0), (10.72729, 0), (5.62078, 0), (6.12229, 0), (6.03801, 0), (8.95585, 0), (24.04613, 0), (9.04757, 0), (2.68263, 0), (15.43935, 0), (2.89423, 0), (4.01423, 0), (4.30568, 0), (11.99948, 0), (8.40574, 0), (10.86642, 0), (9.4266, 0), (-8.12752, 0), (7.91634, 0), (7.3967, 0), (2.26431, 0), (14.20118, 0), (6.68233, 0), (15.46221, 0), (7.88467, 0), (11.20011, 0), (8.92027, 0), (10.27926, 0), (5.14395, 0), (5.62178, 0), (12.84383, 0), (9.98009, 0), (-0.69789, 0), (11.41386, 0), (7.76863, 0), (7.21743, 0), (1.81176, 0), (9.43762, 0), (19.22117, 0), (2.97128, 0), (14.32851, 0), (7.54959, 0), (3.81545, 0), (10.1281, 0), (2.48596, 0), (10.0461, 0), (3.59714, 0), (9.73522, 0), (18.8077, 0), (3.15148, 0), (12.26062, 0), (5.66707, 0), (6.58623, 0), (17.30902, 0), (9.91391, 0), (5.36946, 0), (15.73637, 0), (16.96281, 0), (11.54063, 0), (18.37358, 0), (11.38255, 0), (10.53256, 0), (8.08833, 0), (16.27556, 0), (2.42969, 0), (9.56127, 0), (7.32998, 0), (9.19511, 0), (9.66903, 0), (4.15029, 0), (8.83511, 0), (14.60617, 0), (14.06143, 0), (5.39556, 0), (10.11871, 0), (10.56619, 0), (14.4462, 0), (10.42106, 0), (7.75551, 0), (11.00418, 0), (4.47226, 0), (16.35461, 0), (18.55174, 0), (11.82044, 0), (7.39454, 0), (11.27767, 0), (6.83827, 0), (7.76858, 0), (15.97614, 0), (14.53781, 0), (12.99546, 0), (16.91151, 0), (9.65012, 0), (14.25487, 0), (14.03618, 0), (2.57382, 0), (2.50779, 0), (14.24787, 0), (13.34666, 0), (7.31102, 0), (10.22981, 0), (17.4435, 0), (21.2074, 0), (6.64191, 0), (18.7086, 0), (14.78686, 0), (9.85287, 0), (4.48263, 0), (14.17469, 0), (14.4342, 0), (19.2481, 0), (3.47165, 0), (8.28712, 0), (8.81657, 0), (0.92319, 0), (20.41106, 0), (6.76127, 0), (22.00242, 0), (8.66129, 0), (10.9929, 0), (17.95494, 0), (17.20996, 0), (12.18888, 0), (12.14257, 0), (15.81243, 0), (4.43362, 0), (1.17567, 0), (15.60881, 0), (9.34833, 0), (6.33513, 0), (-0.83095, 0), (12.43268, 0), (6.63207, 0), (11.96877, 0), (14.81029, 0), (21.84876, 0), (3.75896, 0), (6.91307, 0), (13.73015, 0), (8.63753, 0), (15.71679, 0), (1.74565, 0), (9.16895, 0), (5.70685, 0), (5.00117, 0), (13.06888, 0), (7.51204, 0), (15.34885, 0), (5.20264, 0), (8.59043, 0), (6.45619, 0), (14.61979, 0), (11.7075, 0), (14.04901, 0), (4.20525, 0), (15.1733, 0), (3.12934, 0), (8.08049, 0), (15.41273, 0), (16.90751, 0), (5.86893, 0), (7.1086, 0), (4.418, 0), (12.0614, 0), (7.07887, 0), (3.61585, 0), (11.73001, 0), (10.80449, 0), (8.40311, 0), (9.91276, 0), (16.4164, 0), (5.25034, 0), (15.20283, 0), (10.42909, 0), (9.53888, 0), (14.68939, 0), (6.60007, 0), (18.31058, 0), (7.01885, 0), (18.71631, 0), (10.50002, 0), (10.7517, 0), (4.23224, 0), (2.28924, 0), (8.56059, 0), (8.25095, 0), (9.15673, 0), (13.28409, 0), (8.4513, 0), (2.83911, 0), (2.79676, 0), (9.11055, 0), (7.18529, 0), (-4.1258, 0), (5.28306, 0), (6.82757, 0), (10.89035, 0), (5.24822, 0), (11.935, 0), (6.45675, 0), (10.18088, 0), (4.9932, 0), (18.09939, 0), (8.11738, 0), (5.37883, 0), (10.50339, 0), (16.64093, 0), (14.77263, 0), (13.71385, 0), (6.98746, 0), (10.74635, 0), (5.49432, 0), (13.46078, 0), (10.67565, 0), (9.0291, 0), (11.51417, 0), (13.07118, 0), (9.5049, 0), (8.50611, 0), (6.47606, 0), (13.06526, 0), (19.08658, 0), (9.49741, 0), (10.60865, 0), (2.28996, 0), (8.12846, 0), (5.62241, 0), (4.07712, 0), (17.98526, 0), (9.466, 0), (11.38904, 0), (5.91826, 0), (1.52059, 0), (18.79161, 0), (18.20669, 0), (-1.67829, 0), (18.01586, 0), (16.31577, 0), (7.88281, 0), (8.46179, 0), (10.31113, 0), (14.88377, 0), (1.31835, 0), (2.53176, 0), (9.48625, 0), (3.97936, 0), (11.52319, 0), (13.24178, 0), (7.58739, 0), (10.00959, 0), (9.73361, 0), (8.35716, 0), (1.65491, 0), (11.11521, 0), (6.08355, 0), (10.04582, 0), (11.58237, 0), (16.40249, 0), (1.9691, 0), (13.22776, 0), (2.67059, 0), (9.83651, 0), (2.12539, 0), (9.27114, 0), (9.0699, 0), (2.78179, 0), (12.49311, 0), (12.97662, 0), (15.06359, 0), (16.91565, 0), (5.92011, 0), (5.81304, 0), (8.46425, 0), (9.48705, 0), (4.68191, 0), (5.70028, 0), (-0.78798, 0), (10.03442, 0), (15.45433, 0), (9.43845, 0), (3.05825, 0), (6.92126, 0), (14.05905, 0), (19.71579, 0), (15.0131, 0), (4.50386, 0), (1.31061, 0), (10.81197, 0), (14.32942, 0), (9.26469, 0), (7.27679, 0), (22.69295, 0), (12.03763, 0), (7.34876, 0), (16.60689, 0), (7.48786, 0), (15.78602, 0), (17.21048, 0), (13.93482, 0), (9.69911, 0), (12.24315, 0), (10.58131, 0), (19.57006, 0), (9.8856, 0), (11.70302, 0), (7.89864, 0), (12.24831, 0), (16.93707, 0), (9.65467, 0), (4.221, 0), (15.45229, 0), (12.83088, 0), (7.58313, 0), (12.895, 0), (10.02471, 0), (13.36059, 0), (5.07864, 0), (9.72017, 0), (11.05809, 0), (15.28528, 0), (13.99834, 0), (19.26989, 0), (9.41846, 0), (11.65425, 0), (8.49638, 0), (6.38592, 0), (-4.69837, 0), (12.22061, 0), (9.41331, 0), (13.2075, 0), (12.97005, 0), (11.44352, 0), (9.79805, 0), (6.93116, 0), (10.07691, 0), (22.05892, 0), (7.80353, 0), (-2.17276, 0), (0.61509, 0), (8.35842, 0), (17.77108, 0), (14.70841, 0), (1.27992, 0), (15.62699, 0), (9.32914, 0), (15.41866, 0), (10.82009, 0), (3.29902, 0), (9.21998, 0), (7.93845, 0), (10.33344, 0), (12.06399, 0), (5.5308, 0), (8.38727, 0), (18.11104, 0), (8.86565, 0), (19.41825, 0), (9.52376, 0), (3.94552, 0), (9.37587, 0), (15.44954, 0), (15.90527, 0), (13.18927, 0), (7.01646, 0), (9.06005, 0), (9.06431, 0), (5.76006, 0), (9.18705, 0), (-3.48446, 0), (15.89817, 0), (12.94719, 0), (23.69426, 0), (17.47755, 0), (15.61528, 0), (0.54832, 0), (14.32916, 0), (9.55305, 0), (13.79891, 0), (0.82544, 0), (13.34875, 0), (9.07614, 0), (5.19621, 0), (2.1451, 0), (9.87726, 0), (8.45439, 0), (-1.41842, 0), (7.93598, 0), (11.23151, 0), (17.84458, 0), (7.02237, 0), (10.7842, 0), (4.42832, 0), (4.45044, 0), (1.50938, 0), (21.21651, 0), (6.2097, 0), (6.84354, 0), (18.53804, 0), (12.01072, 0), (4.8345, 0), (20.41587, 0), (14.48353, 0), (8.71116, 0), (12.42818, 0), (14.89244, 0), (8.03033, 0), (5.25917, 0), (2.30092, 0), (10.22504, 0), (15.37573, 0), (7.13666, 0), (4.45018, 0), (10.18405, 0), (3.91025, 0), (14.52304, 0), (13.14771, 0), (11.99219, 0), (9.21345, 0), (8.85106, 0), (12.91887, 0), (15.62308, 0), (11.88034, 0), (15.12097, 0), (11.58168, 0), (16.83051, 0), (5.25405, 0), (2.19976, 0), (4.56716, 0), (16.46053, 0), (5.61995, 0), (8.67704, 0), (5.62789, 0), (9.84815, 0), (13.05834, 0), (11.74205, 0), (3.88393, 0), (16.15321, 0), (4.83925, 0), (13.00334, 0), (4.4028, 0), (4.35794, 0), (4.47478, 0), (2.38713, 0), (4.25235, 0), (10.87509, 0), (9.82411, 0), (13.61518, 0), (10.25507, 0), (4.0335, 0), (10.69881, 0), (5.70321, 0), (6.96244, 0), (9.35874, 0), (6.28076, 0), (8.29015, 0), (6.88653, 0), (7.70687, 0), (8.2001, 0), (6.73415, 0), (3.82052, 0), (3.94469, 0), (15.82384, 0), (2.54004, 0), (10.74876, 0), (12.60517, 0), (17.7024, 0), (4.6722, 0), (13.67341, 0), (6.4565, 0), (12.95699, 0), (4.56912, 0), (5.58464, 0), (4.0638, 0), (13.05559, 0), (5.38269, 0), (0.16354, 0), (7.23962, 0), (7.38577, 0), (8.50951, 0), (13.72574, 0), (17.80421, 0), (3.01135, 0), (8.02608, 0), (14.23847, 0), (-8.65656, 1), (22.98234, 1), (23.80821, 1), (13.33939, 1), (-4.05537, 1), (23.5155, 1), (-6.45272, 1), (17.7903, 1), (11.463, 1), (5.28021, 1), (8.39157, 1), (6.02464, 1), (14.43732, 1), (15.76584, 1), (1.54391, 1), (1.24897, 1), (27.1507, 1), (7.71091, 1), (15.71846, 1), (32.97808, 1), (-1.79334, 1), (-9.23439, 1), (11.27838, 1), (0.72703, 1), (18.51557, 1), (9.16619, 1), (17.29624, 1), (-1.30208, 1), (-3.48018, 1), (10.12082, 1), (-8.01318, 1), (-14.22264, 1), (16.58174, 1), (-0.55975, 1), (5.61449, 1), (1.44626, 1), (7.89158, 1), (1.13369, 1), (-0.82609, 1), (12.23365, 1), (12.45443, 1), (14.46915, 1), (13.72627, 1), (18.41459, 1), (29.66702, 1), (1.51619, 1), (10.40078, 1), (3.33266, 1), (6.12036, 1), (11.86553, 1), (6.59422, 1), (22.0948, 1), (1.79623, 1), (14.29513, 1), (19.69162, 1), (-7.98033, 1), (5.48433, 1), (-2.28474, 1), (9.91876, 1), (10.64097, 1), (0.22523, 1), (17.01773, 1), (22.37388, 1), (14.04215, 1), (23.1244, 1), (18.96958, 1), (8.42663, 1), (3.7165, 1), (14.29366, 1), (23.50886, 1), (26.33722, 1), (26.72396, 1), (13.26287, 1), (12.97607, 1), (17.41838, 1), (8.63875, 1), (17.08943, 1), (23.15356, 1), (-4.4965, 1), (7.58895, 1), (26.04074, 1), (6.84245, 1), (20.56287, 1), (3.84735, 1), (-2.76304, 1), (13.1615, 1), (8.21954, 1), (-3.49943, 1), (22.12419, 1), (7.08323, 1), (16.12937, 1), (-0.32672, 1), (16.5942, 1), (7.68977, 1), (11.39484, 1), (-5.11987, 1), (20.87404, 1), (8.01007, 1), (3.26497, 1), (5.61253, 1), (20.69182, 1), (0.0296, 1), (21.904, 1), (22.46572, 1), (3.63685, 1), (-5.10846, 1), (14.86389, 1), (5.47188, 1), (18.44095, 1), (16.71368, 1), (6.36704, 1), (8.82663, 1), (14.6727, 1), (7.98383, 1), (2.65568, 1), (21.45827, 1), (11.77948, 1), (4.71979, 1), (3.17951, 1), (13.90226, 1), (15.50578, 1), (10.8026, 1), (16.91369, 1), (9.90552, 1), (13.87322, 1), (4.12366, 1), (-3.78985, 1), (1.7599, 1), (3.43715, 1), (-3.45246, 1), (23.64571, 1), (-4.96877, 1), (3.93514, 1), (1.49914, 1), (12.71519, 1), (5.11521, 1), (4.79872, 1), (20.89391, 1), (5.363, 1), (8.02765, 1), (14.30804, 1), (11.49002, 1), (14.25281, 1), (7.6573, 1), (15.49686, 1), (3.29327, 1), (2.27236, 1), (12.58104, 1), (19.19128, 1), (15.25901, 1), (6.5221, 1), (10.10965, 1), (12.75249, 1), (16.50977, 1), (-8.6697, 1), (8.28553, 1), (1.44315, 1), (4.65869, 1), (0.98149, 1), (0.16623, 1), (17.66332, 1), (4.35346, 1), (6.52742, 1), (-1.06631, 1), (-5.28454, 1), (14.25583, 1), (8.74058, 1), (1.89553, 1), (-0.92959, 1), (10.30289, 1), (-6.3744, 1), (-8.1706, 1), (10.95369, 1), (4.94384, 1), (28.40568, 1), (3.7004, 1), (2.52363, 1), (4.07997, 1), (7.8849, 1), (17.95409, 1), (16.67021, 1), (11.34377, 1), (-0.07446, 1), (22.00223, 1), (3.31778, 1), (18.50719, 1), (-3.58655, 1), (6.5394, 1), (12.40459, 1), (16.59866, 1), (7.54176, 1), (-1.51044, 1), (12.69758, 1), (2.9842, 1), (2.49187, 1), (2.04113, 1), (-2.46544, 1), (15.18368, 1), (-0.04058, 1), (-0.4127, 1), (10.5526, 1), (12.03982, 1), (12.10923, 1), (11.54954, 1), (-1.18613, 1), (11.30984, 1), (23.54105, 1), (10.67321, 1), (24.09196, 1), (7.5008, 1), (12.52233, 1), (4.30673, 1), (9.35793, 1), (4.44472, 1), (-7.00679, 1), (8.56241, 1), (23.73891, 1), (15.62708, 1), (16.09205, 1), (12.52074, 1), (14.58927, 1), (-4.80187, 1), (8.47964, 1), (7.75477, 1), (12.6893, 1), (7.14147, 1), (12.12654, 1), (12.32334, 1), (7.98909, 1), (3.26652, 1), (20.53684, 1), (32.3369, 1), (19.74911, 1), (-4.62897, 1), (8.26483, 1), (20.88451, 1), (-2.12982, 1), (25.61459, 1), (5.32091, 1), (-4.1196, 1), (7.57937, 1), (21.15847, 1), (6.46355, 1), (7.74846, 1), (19.62636, 1), (28.34629, 1), (26.73919, 1), (20.40427, 1), (3.03378, 1), (10.2537, 1), (7.47745, 1), (10.79184, 1), (3.91962, 1), (19.97973, 1), (18.87711, 1), (12.56157, 1), (11.46033, 1), (3.78661, 1), (-9.45748, 1), (12.06033, 1), (-0.74615, 1), (13.2815, 1), (24.78052, 1), (5.83337, 1), (17.4111, 1), (19.70331, 1), (11.78446, 1), (-1.366, 1), (1.37458, 1), (16.31483, 1), (32.63464, 1), (-3.79736, 1), (19.17984, 1), (-0.27705, 1), (-3.69456, 1), (28.38058, 1), (-1.36876, 1), (-25.63301, 1), (3.58644, 1), (-6.85667, 1), (13.42225, 1), (12.04671, 1), (28.99468, 1), (7.87662, 1), (2.61119, 1), (-3.56022, 1), (1.50022, 1), (14.55836, 1), (9.35831, 1), (16.9366, 1), (29.23126, 1), (15.31386, 1), (13.46112, 1), (7.39667, 1), (11.15599, 1), (9.80499, 1), (22.64923, 1), (8.67693, 1), (18.67335, 1), (-3.19127, 1), (22.94716, 1), (17.86834, 1), (16.98267, 1), (15.91653, 1), (11.79718, 1), (18.50208, 1), (8.90755, 1), (10.44843, 1), (4.67433, 1), (6.82287, 1), (10.82228, 1), (-4.18631, 1), (20.3872, 1), (11.84735, 1), (21.25376, 1), (10.55032, 1), (12.19023, 1), (0.63369, 1), (7.92381, 1), (17.90933, 1), (15.30781, 1), (10.01877, 1), (0.88744, 1), (22.20967, 1), (-4.23117, 1), (21.50819, 1), (11.27421, 1), (-16.23179, 1), (33.43085, 1), (5.15093, 1), (1.34505, 1), (6.027, 1), (-10.43035, 1), (27.45998, 1), (19.24886, 1), (-4.44761, 1), (5.453, 1), (12.73758, 1), (11.2897, 1), (31.032, 1), (7.39168, 1), (11.95245, 1), (26.279, 1), (-1.0255, 1), (10.36675, 1), (11.58439, 1), (27.8405, 1), (13.1707, 1), (31.39133, 1), (27.08301, 1), (-2.14368, 1), (4.08476, 1), (21.5573, 1), (16.69822, 1), (7.69955, 1), (8.32793, 1), (6.49235, 1), (-7.3284, 1), (10.58264, 1), (-6.17006, 1), (34.55782, 1), (10.93221, 1), (44.24299, 1), (14.6224, 1), (-7.42798, 1), (15.52351, 1), (11.33982, 1), (10.46716, 1), (13.0986, 1), (-4.25988, 1), (9.55316, 1), (0.75489, 1), (25.99212, 1), (-0.81401, 1), (3.49551, 1), (22.99402, 1), (10.99628, 1), (23.70223, 1), (2.71482, 1), (22.82309, 1), (31.25686, 1), (4.86318, 1), (-1.06476, 1), (15.10298, 1), (-0.61015, 1), (17.81246, 1), (-1.55788, 1), (18.09709, 1), (9.11271, 1), (9.94682, 1), (-7.33194, 1), (-4.67293, 1), (21.81717, 1), (7.16318, 1), (13.25649, 1), (13.88776, 1), (4.95793, 1), (17.65303, 1), (14.47382, 1), (13.19373, 1), (31.86093, 1), (5.73161, 1), (10.96492, 1), (6.97951, 1), (1.75136, 1), (10.96144, 1), (15.08137, 1), (9.95311, 1), (7.07729, 1), (3.08148, 1), (22.37954, 1), (8.51951, 1), (2.88746, 1), (26.73509, 1), (-2.88939, 1), (-2.82367, 1), (-0.35783, 1), (14.22076, 1), (11.50295, 1), (7.10171, 1), (8.28488, 1), (0.54178, 1), (13.8022, 1), (15.62157, 1), (10.79173, 1), (28.18946, 1), (30.43524, 1), (2.54914, 1), (9.89421, 1), (13.08631, 1), (4.68761, 1), (5.61516, 1), (22.88072, 1), (7.4735, 1), (11.27382, 1), (2.39559, 1), (-3.31889, 1), (9.61957, 1), (23.01381, 1), (-1.23467, 1), (9.07691, 1), (15.78056, 1), (12.28421, 1), (9.44888, 1), (13.16928, 1), (4.33357, 1), (2.21737, 1), (33.17833, 1), (13.25407, 1), (-2.47961, 1), (6.41401, 1), (18.8439, 1), (-4.63375, 1), (-8.2909, 1), (12.18221, 1), (-2.95356, 1), (19.61659, 1), (12.45056, 1), (-4.17198, 1), (21.9641, 1), (11.96416, 1), (12.74573, 1), (10.47873, 1), (12.73295, 1), (11.31373, 1), (9.9827, 1), (5.87138, 1), (4.24372, 1), (-23.72256, 1), (28.41337, 1), (4.88103, 1), (3.61902, 1), (8.93586, 1), (16.40759, 1), (27.84494, 1), (5.6001, 1), (14.51379, 1), (13.5576, 1), (12.92213, 1), (3.90686, 1), (17.07104, 1), (15.84268, 1), (17.38777, 1), (16.54766, 1), (5.94487, 1), (17.02804, 1), (7.66386, 1), (10.43088, 1), (6.16059, 1), (20.46178, 1), (20.02888, 1), (20.95949, 1), (6.50808, 1), (7.22366, 1), (8.06659, 1), (16.08241, 1), (13.83514, 1), (-0.33454, 1), (12.98848, 1), (12.99024, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1663', () => {
    const query = `INSERT INTO kstest VALUES (4.82025, 0), (6.13896, 0), (15.20277, 0), (14.15351, 0), (7.21338, 0), (8.55506, 0), (13.80816, 0), (11.28411, 0), (7.4612, 0), (7.43759, 0), (12.9832, 0), (-5.74783, 0), (12.47114, 0), (15.14223, 0), (3.40603, 0), (9.27323, 0), (7.88547, 0), (8.56456, 0), (4.59731, 0), (7.91213, 0), (7.33894, 0), (21.74811, 0), (11.92111, 0), (0.18828, 0), (10.47314, 0), (20.37396, 0), (11.04991, 0), (13.30083, 0), (14.28065, 0), (2.86942, 0), (24.96072, 0), (14.20164, 0), (18.28769, 0), (10.50949, 0), (9.22273, 0), (11.77608, 0), (8.56872, 0), (13.74535, 0), (11.65209, 0), (12.51894, 0), (17.76256, 0), (13.52122, 0), (8.70796, 0), (6.04749, 0), (16.33064, 0), (8.35636, 0), (14.03496, 0), (11.05834, 0), (14.49261, 0), (2.59383, 0), (8.01022, 0), (4.05458, 0), (13.26384, 0), (14.62058, 0), (10.52489, 0), (8.46357, 0), (6.4147, 0), (9.70071, 0), (12.47581, 0), (4.38333, 0), (17.54172, 0), (10.12109, 0), (7.73186, 0), (14.0279, 0), (11.6621, 0), (17.47045, 0), (15.50223, 0), (15.46034, 0), (13.39964, 0), (14.98025, 0), (15.87912, 0), (17.67374, 0), (9.64073, 0), (12.84904, 0), (7.70278, 0), (13.03156, 0), (9.04512, 0), (15.97014, 0), (8.96389, 0), (11.48009, 0), (9.71153, 0), (13.00084, 0), (12.39803, 0), (13.08188, 0), (5.82244, 0), (10.81871, 0), (8.2539, 0), (7.52114, 0), (9.11488, 0), (8.37482, 0), (14.48652, 0), (11.42152, 0), (16.03111, 0), (13.14057, 0), (-2.26351, 0), (15.50394, 0), (14.88603, 0), (13.37257, 0), (11.84026, 0), (7.66558, 0), (6.24584, 0), (3.6312, 0), (2.7018, 0), (5.63656, 0), (5.82643, 0), (10.06745, 0), (-0.5831, 0), (14.84202, 0), (9.5524, 0), (19.71713, 0), (14.23109, 0), (8.69105, 0), (5.33742, 0), (7.30372, 0), (7.93342, 0), (15.20884, 0), (7.53839, 0), (13.45311, 0), (11.04473, 0), (10.76673, 0), (15.44145, 0), (14.06596, 0), (9.14873, 0), (12.88372, 0), (8.74994, 0), (10.53263, 0), (16.16694, 0), (8.37197, 0), (3.43739, 0), (4.72799, 0), (9.08802, 0), (11.2531, 0), (5.16115, 0), (10.20895, 0), (18.70884, 0), (15.88924, 0), (3.38758, 0), (6.46449, 0), (10.21088, 0), (14.08458, 0), (15.74508, 0), (19.31896, 0), (13.19641, 0), (11.95409, 0), (10.70718, 0), (1.05245, 0), (10.04772, 0), (17.01369, 0), (10.2286, 0), (19.58323, 0), (7.02892, 0), (4.16866, 0), (8.94326, 0), (4.99854, 0), (8.88352, 0), (18.65422, 0), (17.32328, 0), (9.33492, 0), (14.94788, 0), (8.05863, 0), (14.6737, 0), (10.93801, 0), (0.54036, 0), (-0.34242, 0), (5.89076, 0), (3.15189, 0), (1.94421, 0), (6.38698, 0), (10.50654, 0), (8.95362, 0), (6.23711, 0), (11.75359, 0), (12.42155, 0), (-1.55472, 0), (4.6688, 0), (10.48087, 0), (11.74615, 0), (9.26822, 0), (7.55517, 0), (12.76005, 0), (16.47102, 0), (11.31297, 0), (14.37437, 0), (2.38799, 0), (6.44577, 0), (5.07471, 0), (11.55123, 0), (7.76795, 0), (10.60116, 0), (14.40885, 0), (11.58158, 0), (8.81648, 0), (12.92299, 0), (11.26939, 0), (17.95014, 0), (2.95002, 0), (17.41959, 0), (11.12455, 0), (8.78541, 0), (14.36413, 0), (12.98554, 0), (12.58505, 0), (15.49789, 0), (11.70999, 0), (0.65596, 0), (11.08202, 0), (14.75752, 0), (6.84385, 0), (9.27245, 0), (13.78243, 0), (17.4863, 0), (4.01777, 0), (11.82861, 0), (13.86551, 0), (6.16591, 0), (8.71589, 0), (16.77195, 0), (17.23243, 0), (-2.12941, 0), (5.66629, 0), (12.45153, 0), (1.63971, 0), (13.84031, 0), (4.6144, 0), (5.26169, 0), (9.27769, 0), (9.14288, 0), (9.71953, 0), (9.38446, 0), (1.64788, 0), (11.72922, 0), (13.68926, 0), (9.42952, 0), (12.05574, 0), (9.09148, 0), (5.32273, 0), (20.25258, 0), (10.14599, 0), (10.82156, 0), (5.75736, 0), (7.13567, 0), (9.29746, 0), (5.1618, 0), (10.076, 0), (21.65669, 0), (13.35486, 0), (6.79957, 0), (8.76243, 0), (14.59294, 0), (16.90609, 0), (10.50337, 0), (-0.07923, 0), (13.51648, 0), (12.0676, 0), (0.86482, 0), (9.03563, 0), (5.38751, 0), (17.16866, 0), (2.78702, 0), (11.15548, 0), (12.30843, 0), (8.04897, 0), (9.95814, 0), (11.29308, 0), (14.13032, 0), (21.05877, 0), (3.57386, 0), (7.96631, 0), (3.30484, 0), (18.61856, 0), (16.35184, 0), (7.65236, 0), (18.02895, 0), (9.79458, 0), (16.7274, 0), (8.84453, 0), (13.05709, 0), (10.91447, 0), (8.40171, 0), (16.95211, 0), (11.82194, 0), (19.87978, 0), (12.88455, 0), (-0.00947, 0), (12.28109, 0), (6.96462, 0), (13.75282, 0), (14.39141, 0), (11.07193, 0), (12.88039, 0), (11.38253, 0), (21.02707, 0), (7.51955, 0), (6.31984, 0), (15.6543, 0), (14.80315, 0), (8.38024, 0), (21.7516, 0), (14.31336, 0), (15.04703, 0), (5.73787, 0), (13.16911, 0), (12.40695, 0), (9.88968, 0), (8.46703, 0), (8.70637, 0), (8.03551, 0), (5.9757, 0), (12.22951, 0), (3.14736, 0), (10.51266, 0), (18.593, 0), (10.82213, 0), (7.14216, 0), (6.81154, 0), (-0.6486, 0), (20.56136, 0), (11.35367, 0), (11.38205, 0), (17.14, 0), (14.91215, 0), (15.50207, 0), (5.93162, 0), (3.74869, 0), (14.11532, 0), (7.38954, 0), (5.45764, 0), (18.33733, 0), (9.91923, 0), (2.38991, 0), (14.16756, 0), (2.39791, 0), (6.92586, 0), (5.32474, 0), (2.28812, 0), (5.71718, 0), (5.84197, 0), (2.76206, 0), (19.05928, 0), (11.51788, 0), (6.56648, 0), (3.35735, 0), (7.55948, 0), (19.99908, 0), (13.00634, 0), (18.36886, 0), (11.14675, 0), (16.72931, 0), (12.50106, 0), (6.00605, 0), (23.06653, 0), (5.39694, 0), (9.53167, 0), (12.76944, 0), (7.20604, 0), (13.25391, 0), (13.7341, 0), (10.85292, 0), (-7.75835, 0), (10.29728, 0), (13.70099, 0), (10.17959, 0), (9.98399, 0), (12.69389, 0), (-0.28848, 0), (-2.18319, 0), (13.36378, 0), (10.09232, 0), (5.49489, 0), (5.46156, 0), (0.94225, 0), (12.79205, 0), (10.09593, 0), (6.06218, 0), (0.89463, 0), (11.88986, 0), (10.79733, 0), (1.51371, 0), (2.20967, 0), (15.45732, 0), (16.5262, 0), (5.99724, 0), (8.3613, 0), (15.68183, 0), (15.32117, 0), (14.15674, 0), (6.64553, 0), (4.20777, 0), (-0.10521, 0), (-0.88169, 0), (1.85913, 0), (9.73673, 0), (0.30926, 0), (6.17559, 0), (11.76602, 0), (5.68385, 0), (14.57088, 0), (12.81509, 0), (9.85682, 0), (12.06376, 0), (6.08874, 0), (11.63921, 0), (14.86722, 0), (10.41035, 0), (2.93794, 0), (12.21841, 0), (0.23804, 0), (3.14845, 0), (7.29748, 0), (3.06134, 0), (13.77684, 0), (16.21992, 0), (5.33511, 0), (9.68959, 0), (9.44169, 0), (18.08012, 0), (4.04224, 0), (8.77918, 0), (10.18324, 0), (9.38914, 0), (11.76995, 0), (14.19963, 0), (6.88817, 0), (16.56123, 0), (15.39885, 0), (5.21241, 0), (4.44408, 0), (17.87587, 0), (12.53337, 0), (13.60916, 0), (6.60104, 0), (7.35453, 0), (18.61572, 0), (6.10437, 0), (13.08682, 0), (12.15404, 0), (4.90789, 0), (2.13353, 0), (12.49593, 0), (11.93056, 0), (13.29408, 0), (5.70038, 0), (8.40271, 0), (5.19456, 0), (-5.51028, 0), (14.0329, 0), (10.38365, 0), (6.56812, 0), (4.21129, 0), (9.7157, 0), (9.88553, 0), (13.45346, 0), (4.97752, 0), (12.77595, 0), (8.56465, 0), (4.27703, 0), (18.12502, 0), (12.45735, 0), (12.42912, 0), (12.08125, 0), (10.85779, 0), (4.36013, 0), (11.85062, 0), (8.47776, 0), (9.60822, 0), (11.3069, 0), (14.25525, 0), (1.55168, 0), (14.57782, 0), (7.84786, 0), (9.87774, 0), (14.75575, 0), (3.68774, 0), (9.37667, 0), (20.28676, 0), (12.10027, 0), (8.01819, 0), (18.78158, 0), (20.85402, 0), (18.98069, 0), (16.1429, 0), (9.24047, 0), (14.12487, 0), (10.18841, 0), (-3.04478, 0), (5.7552, 0), (9.30376, 0), (11.42837, 0), (6.02364, 0), (8.86984, 0), (10.91177, 0), (10.04418, 0), (18.10774, 0), (7.49384, 0), (9.11556, 0), (9.7051, 0), (5.23268, 0), (9.04647, 0), (8.81547, 0), (2.65098, 0), (-2.69857, 1), (15.80943, 1), (7.31555, 1), (3.96517, 1), (4.77809, 1), (9.6472, 1), (-26.41717, 1), (-10.85635, 1), (-1.4376, 1), (-0.96308, 1), (2.84315, 1), (5.79467, 1), (-3.06091, 1), (-14.62902, 1), (22.08022, 1), (-2.11982, 1), (-4.84824, 1), (-10.50447, 1), (2.4891, 1), (9.90324, 1), (-22.66866, 1), (-0.97103, 1), (-16.57608, 1), (-3.78749, 1), (25.84511, 1), (5.30797, 1), (-18.19466, 1), (11.72708, 1), (0.2891, 1), (-9.83474, 1), (6.69942, 1), (18.09604, 1), (18.52651, 1), (1.38201, 1), (7.64615, 1), (17.66598, 1), (-2.44141, 1), (-9.01598, 1), (27.69142, 1), (4.06946, 1), (-15.0077, 1), (-10.49648, 1), (-4.88322, 1), (-25.09805, 1), (-4.64024, 1), (20.94434, 1), (24.12126, 1), (-14.10962, 1), (10.6512, 1), (14.50687, 1), (-19.88081, 1), (-11.55271, 1), (13.16921, 1), (16.63864, 1), (-24.08114, 1), (-9.09949, 1), (-10.54702, 1), (0.20813, 1), (8.19066, 1), (-2.70523, 1), (-0.23954, 1), (7.19398, 1), (-7.1618, 1), (-7.44322, 1), (-17.92031, 1), (-1.58146, 1), (9.18338, 1), (3.25838, 1), (-14.30234, 1), (1.84695, 1), (31.13794, 1), (-0.85067, 1), (19.02787, 1), (-3.09594, 1), (13.45584, 1), (-5.48104, 1), (-22.74928, 1), (-8.03697, 1), (17.31143, 1), (-16.65231, 1), (-18.58713, 1), (-16.52641, 1), (14.95261, 1), (12.56762, 1), (15.00188, 1), (1.85858, 1), (2.1926, 1), (-2.4095, 1), (21.56873, 1), (3.35509, 1), (-4.98672, 1), (35.08603, 1), (-10.01602, 1), (-3.85153, 1), (-6.81974, 1), (19.56525, 1), (-9.35488, 1), (0.24268, 1), (-3.51488, 1), (-0.37066, 1), (24.20888, 1), (-11.73537, 1), (0.01282, 1), (0.03963, 1), (-9.65589, 1), (-0.37429, 1), (5.61255, 1), (0.49984, 1), (-10.15066, 1), (-14.54314, 1), (16.56889, 1), (-7.73873, 1), (-3.76422, 1), (1.40722, 1), (2.28818, 1), (-13.12643, 1), (5.17082, 1), (4.79089, 1), (-17.42643, 1), (8.72548, 1), (-3.70285, 1), (16.77893, 1), (13.382, 1), (19.98418, 1), (0.00483, 1), (-4.75951, 1), (2.35391, 1), (21.65809, 1), (-9.2714, 1), (-18.38253, 1), (7.23097, 1), (14.97927, 1), (-4.02197, 1), (-29.8189, 1), (-12.8554, 1), (-7.60124, 1), (-14.90158, 1), (-3.31486, 1), (31.38144, 1), (-8.61288, 1), (15.31895, 1), (-10.19488, 1), (13.796, 1), (-0.32912, 1), (-0.0684, 1), (-30.06834, 1), (24.93912, 1), (-3.26506, 1), (-8.29751, 1), (-5.39189, 1), (-25.08603, 1), (-1.45318, 1), (16.72724, 1), (-3.38467, 1), (-26.00478, 1), (7.28369, 1), (16.96226, 1), (16.5858, 1), (10.46583, 1), (3.84345, 1), (-2.99382, 1), (1.42078, 1), (-11.0123, 1), (2.09909, 1), (1.21064, 1), (15.36079, 1), (-21.61349, 1), (22.7726, 1), (10.50512, 1), (-6.95825, 1), (9.20036, 1), (15.66902, 1), (3.28098, 1), (-9.05692, 1), (0.32882, 1), (-1.64934, 1), (-4.81406, 1), (-5.06006, 1), (19.97493, 1), (2.88646, 1), (-0.34552, 1), (7.55186, 1), (-22.96115, 1), (31.29166, 1), (6.18798, 1), (-2.52715, 1), (-11.58799, 1), (14.13596, 1), (13.45069, 1), (12.15179, 1), (3.44491, 1), (-8.78006, 1), (18.32087, 1), (11.91757, 1), (-2.00179, 1), (10.88411, 1), (9.09327, 1), (6.62484, 1), (8.87178, 1), (11.52254, 1), (-14.15988, 1), (-17.19515, 1), (14.03089, 1), (-2.4095, 1), (-16.83575, 1), (2.71469, 1), (4.84351, 1), (-1.17651, 1), (-3.37529, 1), (-19.92137, 1), (4.48952, 1), (-12.4906, 1), (-5.65277, 1), (8.50819, 1), (-19.61261, 1), (12.54156, 1), (11.06784, 1), (-12.59285, 1), (3.43683, 1), (-3.00325, 1), (12.49082, 1), (7.20955, 1), (17.6547, 1), (15.8619, 1), (24.3048, 1), (-8.05434, 1), (-6.06901, 1), (-15.69515, 1), (-11.13917, 1), (-3.90757, 1), (-2.57038, 1), (5.14065, 1), (17.8497, 1), (-8.64665, 1), (-18.68331, 1), (5.8567, 1), (-20.93884, 1), (4.40583, 1), (14.35985, 1), (4.18134, 1), (4.3635, 1), (9.35428, 1), (2.8908, 1), (16.01017, 1), (-1.48499, 1), (-9.97949, 1), (1.03055, 1), (-2.79697, 1), (6.85977, 1), (4.73213, 1), (2.7815, 1), (-2.46866, 1), (18.39425, 1), (-0.80378, 1), (-0.22982, 1), (-16.11608, 1), (3.0862, 1), (3.20779, 1), (10.50146, 1), (-0.21305, 1), (11.21012, 1), (-0.99825, 1), (18.39633, 1), (-3.39003, 1), (-0.64411, 1), (-1.39932, 1), (15.45319, 1), (-0.66044, 1), (-15.2223, 1), (-34.39907, 1), (-3.57836, 1), (16.82828, 1), (1.66624, 1), (15.43475, 1), (8.17776, 1), (5.50486, 1), (10.43082, 1), (-6.63332, 1), (2.28008, 1), (16.37203, 1), (5.16313, 1), (-8.85281, 1), (13.26692, 1), (-7.46842, 1), (8.43091, 1), (-13.18172, 1), (-0.72401, 1), (22.3881, 1), (10.65448, 1), (2.81289, 1), (10.92405, 1), (-8.95358, 1), (19.80653, 1), (-12.86527, 1), (5.38826, 1), (-6.83501, 1), (-15.7647, 1), (-27.67412, 1), (8.6499, 1), (-4.89542, 1), (16.76167, 1), (12.84284, 1), (-17.27324, 1), (-4.18726, 1), (-14.62366, 1), (-5.49863, 1), (-16.22846, 1), (10.60329, 1), (6.46781, 1), (1.70458, 1), (10.77448, 1), (0.8463, 1), (13.0482, 1), (-4.36264, 1), (3.22647, 1), (2.38828, 1), (6.7946, 1), (-0.25254, 1), (1.2497, 1), (1.6544, 1), (4.1019, 1), (11.27839, 1), (-5.04127, 1), (18.11674, 1), (0.51231, 1), (-0.51029, 1), (13.52556, 1), (16.10171, 1), (5.68197, 1), (-2.85904, 1), (-8.89167, 1), (6.24489, 1), (10.85319, 1), (-0.39816, 1), (3.87079, 1), (-3.1867, 1), (1.55322, 1), (16.86779, 1), (-14.60321, 1), (-1.81952, 1), (-3.11624, 1), (1.24193, 1), (10.18179, 1), (4.69796, 1), (0.69032, 1), (11.7723, 1), (7.62896, 1), (9.89741, 1), (9.11484, 1), (-3.84676, 1), (-0.4777, 1), (0.95958, 1), (-7.95056, 1), (-10.97474, 1), (-6.54861, 1), (34.74933, 1), (27.39463, 1), (4.18299, 1), (6.02476, 1), (-1.99397, 1), (1.26478, 1), (23.37106, 1), (10.49682, 1), (-11.04354, 1), (-12.22284, 1), (-9.87635, 1), (28.90511, 1), (6.77613, 1), (0.55352, 1), (0.37031, 1), (7.1418, 1), (3.24897, 1), (-1.60918, 1), (3.1675, 1), (-17.97072, 1), (-5.61743, 1), (14.1422, 1), (14.87695, 1), (-4.65961, 1), (-0.99174, 1), (-2.96623, 1), (-9.02263, 1), (-17.2088, 1), (2.78608, 1), (6.74239, 1), (4.8524, 1), (7.46731, 1), (1.04894, 1), (-12.8023, 1), (-17.18188, 1), (-5.08801, 1), (22.13942, 1), (-0.36384, 1), (17.80564, 1), (7.67504, 1), (1.59779, 1), (4.10942, 1), (0.61074, 1), (-14.40767, 1), (10.59906, 1), (16.57017, 1), (-15.17526, 1), (-6.98549, 1), (-0.64548, 1), (3.23756, 1), (14.65504, 1), (4.583, 1), (12.72378, 1), (5.26547, 1), (0.81781, 1), (9.38273, 1), (10.37636, 1), (10.70325, 1), (-0.83043, 1), (-7.53149, 1), (-9.09147, 1), (-19.51381, 1), (-28.44508, 1), (6.44392, 1), (11.10201, 1), (-2.86184, 1), (8.30673, 1), (8.8797, 1), (10.68053, 1), (15.62919, 1), (8.00579, 1), (6.4651, 1), (-4.50029, 1), (18.04514, 1), (11.12996, 1), (-5.14007, 1), (9.43857, 1), (3.13476, 1), (4.9772, 1), (-17.45782, 1), (0.05552, 1), (-1.90283, 1), (2.67908, 1), (-2.62243, 1), (-3.22767, 1), (-8.70222, 1), (-23.11605, 1), (21.6757, 1), (12.70076, 1), (4.4322, 1), (11.69344, 1), (9.18052, 1), (-2.2549, 1), (-2.15615, 1), (20.29765, 1), (-0.29536, 1), (15.50109, 1), (8.79187, 1), (5.11533, 1), (-20.44436, 1), (-3.00909, 1), (-4.48291, 1), (21.84462, 1), (1.94225, 1), (-2.81908, 1), (17.19418, 1), (-9.33528, 1), (-0.17346, 1), (0.03958, 1), (-35.17786, 1), (8.36887, 1), (-9.02292, 1), (-10.98804, 1), (0.29335, 1), (4.29634, 1), (3.87718, 1), (-9.08532, 1), (7.13922, 1), (-7.62463, 1), (-10.5666, 1), (4.68165, 1), (-3.30172, 1), (13.04852, 1), (13.45616, 1), (2.41043, 1), (-0.36501, 1), (-15.67383, 1), (17.92217, 1), (8.42106, 1), (3.22063, 1), (-7.31753, 1), (21.99596, 1), (-36.8273, 1), (-20.46391, 1), (5.74179, 1), (-15.83178, 1), (14.90454, 1), (-8.84645, 1), (3.72036, 1), (4.6877, 1), (16.35418, 1), (3.15441, 1), (2.39907, 1), (-17.58664, 1), (-13.18269, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1664', () => {
    const query = `INSERT INTO 02706_keeper_map_insert_strict VALUES (1, 1.1), (2, 2.2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1665', () => {
    const query = `INSERT INTO 02706_keeper_map_insert_strict VALUES (1, 2.1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1666', () => {
    const query = `INSERT INTO 02706_keeper_map_insert_strict VALUES (1, 2.1); -- { serverError KEEPER_EXCEPTION } SELECT * FROM 02706_keeper_map_insert_strict WHERE key = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1667', () => {
    const query = `insert into t1 values(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1668', () => {
    const query = `INSERT INTO foo SELECT number, number FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1669', () => {
    const query = `INSERT INTO foo2 SELECT number, number FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1670', () => {
    const query = `INSERT INTO 02702_logical_optimizer VALUES (1, 'test'), (2, 'test2'), (3, 'another');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1671', () => {
    const query = `INSERT INTO 02702_logical_optimizer_with_null_column VALUES (1, 'test'), (2, 'test2'), (3, 'another');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1672', () => {
    const query = `INSERT INTO 25400_dropped_tables VALUES (1),(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1673', () => {
    const query = `INSERT INTO 25400_dropped_tables VALUES (3),(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1674', () => {
    const query = `INSERT INTO test_table VALUES (3,'some_val');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1675', () => {
    const query = `INSERT INTO test_table_join VALUES (1, 'q');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1676', () => {
    const query = `INSERT INTO test_table_join SELECT * from test_table_join; -- { serverError DEADLOCK_AVOIDED } INSERT INTO test_table_join SELECT * FROM (SELECT 1 as id) AS t1 ANY LEFT JOIN test_table_join USING (id); -- { serverError DEADLOCK_AVOIDED }
INSERT INTO test_table_join SELECT id, toString(id) FROM (SELECT 1 as id) AS t1 ANY LEFT JOIN (SELECT id FROM test_table_join) AS t2 USING (id); -- { serverError DEADLOCK_AVOIDED }
DROP TABLE IF EXISTS test_table_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1677', () => {
    const query = `INSERT INTO sales VALUES ('2021-01-01',1,1,10),('2021-01-02',2,2,20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1678', () => {
    const query = `INSERT INTO 02691_drop_column_replicated VALUES (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1679', () => {
    const query = `insert into t_str values ('2020-02-02');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1680', () => {
    const query = `INSERT INTO decimal_insert_cast_issue VALUES ({param:Nullable(Decimal(41, 0))});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1681', () => {
    const query = `insert into 02681_undrop_mergetree values (1),(2),(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1682', () => {
    const query = `insert into 02681_undrop_detach values (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1683', () => {
    const query = `insert into 02681_undrop_uuid_on_cluster values (1),(2),(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1684', () => {
    const query = `insert into 02681_undrop_no_uuid_on_cluster values (1),(2),(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1685', () => {
    const query = `insert into 02681_undrop_replicatedmergetree values (1),(2),(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1686', () => {
    const query = `insert into 02681_undrop_log values (1),(2),(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1687', () => {
    const query = `insert into 02681_undrop_multiple values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1688', () => {
    const query = `insert into 02681_undrop_multiple values (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1689', () => {
    const query = `insert into 02681_undrop_multiple values (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1690', () => {
    const query = `INSERT INTO t1 SELECT number, number * 10, number * 100, number * 1000 FROM numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1691', () => {
    const query = `insert into t select * from numbers_mt(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1692', () => {
    const query = `INSERT INTO test_null_as_default__fuzz_46 SELECT 1, NULL UNION ALL SELECT 2, NULL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1693', () => {
    const query = `insert into test_tuple values (1, 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1694', () => {
    const query = `INSERT INTO 02680_datetime64_monotonic_check VALUES (toDateTime64('2023-03-13 00:00:00', 3, 'Asia/Jerusalem'), 123);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1695', () => {
    const query = `INSERT INTO 02680_datetime_monotonic_check_lc VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1696', () => {
    const query = `INSERT INTO test_table VALUES (0, 'Value');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1697', () => {
    const query = `insert into t1(ID, name) values (1, 'abc'), (2, 'bbb');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1698', () => {
    const query = `INSERT INTO test_grace_hash SELECT number, number % 100 = 0 FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1699', () => {
    const query = `INSERT INTO t_get_subcolumn VALUES (1, [42], ['foo']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1700', () => {
    const query = `insert into t select number % 2, number from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1701', () => {
    const query = `INSERT INTO test SELECT number FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1702', () => {
    const query = `INSERT INTO test SELECT number FROM numbers(10,100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1703', () => {
    const query = `INSERT INTO t_sparse_columns_clear SELECT [number], 0 FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1704', () => {
    const query = `INSERT INTO test_table_join VALUES (0, 'JoinValue');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1705', () => {
    const query = `insert into m3 values (0,0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1706', () => {
    const query = `insert into m3 values (-1,1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1707', () => {
    const query = `insert into replacing_m3 values (0,0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1708', () => {
    const query = `insert into replacing_m3 values (-1,1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1709', () => {
    const query = `insert into replacing_m3 values (-2,2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1710', () => {
    const query = `insert into table function  null() select 1, 'str';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1711', () => {
    const query = `INSERT INTO t_modify_to_nullable SELECT 1, number, 'foo' FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1712', () => {
    const query = `INSERT INTO t_modify_to_nullable SELECT 2, number, if (number % 23 = 0, 'bar', '') FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1713', () => {
    const query = `INSERT INTO 02668_logical_optimizer VALUES (1, 'test'), (2, 'test2'), (3, 'another');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1714', () => {
    const query = `INSERT INTO t VALUES (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1715', () => {
    const query = `INSERT INTO t VALUES (1),(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1716', () => {
    const query = `INSERT INTO t VALUES (2),(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1717', () => {
    const query = `INSERT INTO t VALUES (4), (5), (6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1718', () => {
    const query = `INSERT INTO test(id,a) VALUES (1,1),(2,2),(3,3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1719', () => {
    const query = `INSERT INTO test(id,a) VALUES (4,4),(5,5),(6,6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1720', () => {
    const query = `INSERT INTO test(id,a) VALUES (7,7),(8,8),(9,9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1721', () => {
    const query = `INSERT INTO t_sparse_mutations_5 SELECT number, (0, 0) FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1722', () => {
    const query = `INSERT INTO t_sparse_mutations_4 SELECT number, 0 FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1723', () => {
    const query = `INSERT INTO t_sparse_mutations_3 SELECT 1, number, toString(tuple(1, 0, '1', '0', '')) FROM numbers (10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1724', () => {
    const query = `INSERT INTO t_sparse_mutations_2 SELECT 1, number, toString(number) FROM numbers (10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1725', () => {
    const query = `INSERT INTO t_sparse_mutations_1 SELECT 1, number, if (number % 21 = 0, 'foo', '') FROM numbers (10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1726', () => {
    const query = `INSERT INTO t_sparse_mutations_1 SELECT 2, number, if (number % 21 = 0, 'foo', '') FROM numbers (10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1727', () => {
    const query = `insert into test (a,b) values (1,null), (2,3), (4, 5), (6,null);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1728', () => {
    const query = `INSERT INTO test SELECT '1', '11', '111' FROM numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1729', () => {
    const query = `INSERT INTO test SELECT '2', '22', '22' FROM numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1730', () => {
    const query = `INSERT INTO mytable VALUES (3, -100, 200, 10), (0, 0, 10, 4), (3, 0, 10, 3), (4.333, 1, 11, 3), (4.34, 1, 11, 3), (-7.6, -10, 0, 4), (-6, -5, -1, 2), (1, 3, 0, 1), (3, 2, 5, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1731', () => {
    const query = `INSERT INTO 02581_trips SELECT number, '', number FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1732', () => {
    const query = `INSERT INTO 02581_trips SELECT number+10000000, '', number FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1733', () => {
    const query = `INSERT INTO 02581_trips SELECT number+20000000, '', number FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1734', () => {
    const query = `INSERT INTO 02581_trips SELECT number+30000000, '', number FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1735', () => {
    const query = `INSERT INTO 02581_set SELECT number*10+7 FROM numbers(10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1736', () => {
    const query = `INSERT INTO 02581_set SELECT number*10+8 FROM numbers(10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1737', () => {
    const query = `INSERT INTO 02581_trips SELECT number, number, '' FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1738', () => {
    const query = `INSERT INTO 02581_trips SELECT number+10000, number+10000, '' FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1739', () => {
    const query = `INSERT INTO 02581_trips SELECT number+20000, number+20000, '' FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1740', () => {
    const query = `INSERT INTO 02581_trips SELECT number+30000, number+30000, '' FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1741', () => {
    const query = `INSERT INTO 02577_keepermap_delete_update VALUES (1, 'Some string', 0), (2, 'Some other string', 0), (3, 'random', 0), (4, 'random2', 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1742', () => {
    const query = `INSERT INTO 02577_keepermap_delete_update VALUES (1, 'String', 10), (2, 'String', 20), (3, 'String', 30), (4, 'String', 40);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1743', () => {
    const query = `INSERT INTO t1 (a) VALUES ('OK');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1744', () => {
    const query = `INSERT INTO t2 (a) VALUES ('OK');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1745', () => {
    const query = `INSERT INTO table1__fuzz_19 SELECT number - 205, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1746', () => {
    const query = `INSERT INTO table1__fuzz_19 SELECT number - 205, number FROM numbers(400, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1747', () => {
    const query = `INSERT INTO datetime SELECT * FROM generateRandom() LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1748', () => {
    const query = `insert into proxy_02572 values (1); -- { serverError UNKNOWN_TABLE } create materialized view push_to_proxy_mv_02572 to proxy_02572 as select * from data_02572;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1749', () => {
    const query = `insert into data_02572 settings materialized_views_ignore_errors=1 values (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1750', () => {
    const query = `insert into data_02572 values (1); -- { serverError UNKNOWN_TABLE } select * from data_02572 order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1751', () => {
    const query = `insert into data_02572 values (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1752', () => {
    const query = `INSERT INTO ttttttt VALUES ('2023-02-20 00:00:00', 1, 2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1753', () => {
    const query = `INSERT INTO table1 VALUES ('notEmpty', '417ddc5d-e556-4d27-95dd-a34d84e46a50');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1754', () => {
    const query = `INSERT INTO table1 VALUES ('', '417ddc5d-e556-4d27-95dd-a34d84e46a50');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1755', () => {
    const query = `INSERT INTO table1 VALUES ('', '00000000-0000-0000-0000-000000000000');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1756', () => {
    const query = `INSERT INTO t1 VALUES (1554690688);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1757', () => {
    const query = `INSERT INTO t2 VALUES (928386547), (1541944097), (2086579505), (1990427322), (-542998757), (390253678), (554855248), (203290629), (1504693323);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1758', () => {
    const query = `INSERT INTO t_update_empty_nested SELECT 1, range(number % 10) FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1759', () => {
    const query = `INSERT INTO mytable (timestamp, insert_timestamp, key, value) VALUES (1900000010000, 1675159000000, 5, 555), (1900000010000, 1675159770000, 5, -1), (1900000020000, 1675159770000, 5, -0.0002), (1900000030000, 1675159770000, 5, 0), (1900000020000, 1675159700000, 5, 555), (1900000040000, 1675159770000, 5, 0.05), (1900000050000, 1675159770000, 5, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1760', () => {
    const query = `INSERT INTO t1 VALUES (1, 2), (3, 4), (5, 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1761', () => {
    const query = `INSERT INTO t2 VALUES (3, 4), (5, 6), (7, 8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1762', () => {
    const query = `INSERT INTO t3 VALUES (5, 6), (7, 8), (9, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1763', () => {
    const query = `INSERT INTO 02563_db.test_merge_table_1 VALUES (0, 'Value_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1764', () => {
    const query = `INSERT INTO 02563_db.test_merge_table_2 VALUES (1, 'Value_1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1765', () => {
    const query = `INSERT INTO 02563_db.t_1 (timestamp, a, b) select
addMinutes(toDateTime64('2024-07-13 22:00:00', 9, 'UTC'), number),
randomString(5),
randomString(5)
from numbers(30);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1766', () => {
    const query = `INSERT INTO 02563_db.t_1 (timestamp, a, b) select
addMinutes(toDateTime64('2024-07-13 23:00:00', 9, 'UTC'), number),
randomString(5),
randomString(5)
from numbers(30);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1767', () => {
    const query = `INSERT INTO 02563_db.t_1 (timestamp, a, b) select
addMinutes(toDateTime64('2024-07-14 00:00:00', 9, 'UTC'), number),
randomString(5),
randomString(5)
from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1768', () => {
    const query = `insert into test_table select * from ( 	select 'test_value_1'
	from numbers_mt(250000)
	union all
	select 'test_value_2'
	from numbers_mt(2000000)
)
order by rand();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1769', () => {
    const query = `insert into tvm select number + 0, number + 1, number + 2, number + 3, number + 4, number + 5, number + 6, number + 7, number + 8, number + 9, number + 10, number + 11, number + 12, number + 13, number + 14, number + 15, number + 16, number + 17, number + 18, number + 19, number + 20, number + 21, number + 22, number + 23, number + 24, number + 25, number + 26, number + 27, number + 28, number + 29, number + 30, number + 31, number + 32, number + 33, number + 34, number + 35, number + 36, number + 37, number + 38, number + 39, number + 40, number + 41, number + 42, number + 43, number + 44, number + 45, number + 46, number + 47, number + 48, number + 49, number + 50, number + 51, number + 52, number + 53, number + 54, number + 55, number + 56, number + 57, number + 58, number + 59, number + 60, number + 61, number + 62, number + 63, number + 64, number + 65, number + 66, number + 67, number + 68, number + 69, number + 70, number + 71, number + 72, number + 73, number + 74, number + 75, number + 76, number + 77, number + 78, number + 79, number + 80, number + 81, number + 82, number + 83, number + 84, number + 85, number + 86, number + 87, number + 88, number + 89, number + 90, number + 91, number + 92, number + 93, number + 94, number + 95, number + 96, number + 97, number + 98, number + 99, number + 100, number + 101, number + 102, number + 103, number + 104, number + 105, number + 106, number + 107, number + 108, number + 109, number + 110, number + 111, number + 112, number + 113, number + 114, number + 115, number + 116, number + 117, number + 118, number + 119, number + 120, number + 121, number + 122, number + 123, number + 124, number + 125, number + 126, number + 127, number + 128, number + 129, number + 130, number + 131, number + 132, number + 133, number + 134, number + 135, number + 136, number + 137, number + 138, number + 139, number + 140, number + 141, number + 142, number + 143, number + 144, number + 145, number + 146, number + 147, number + 148, number + 149, number + 150, number + 151, number + 152, number + 153, number + 154, number + 155, number + 156, number + 157, number + 158, number + 159, number + 160, number + 161, number + 162, number + 163, number + 164, number + 165, number + 166, number + 167, number + 168, number + 169, number + 170, number + 171, number + 172, number + 173, number + 174, number + 175, number + 176, number + 177, number + 178, number + 179, number + 180, number + 181, number + 182, number + 183, number + 184, number + 185, number + 186, number + 187, number + 188, number + 189, number + 190, number + 191, number + 192, number + 193, number + 194, number + 195, number + 196, number + 197, number + 198, number + 199, number + 200, number + 201, number + 202, number + 203, number + 204, number + 205, number + 206, number + 207, number + 208, number + 209, number + 210, number + 211, number + 212, number + 213, number + 214, number + 215, number + 216, number + 217, number + 218, number + 219, number + 220, number + 221, number + 222, number + 223, number + 224, number + 225, number + 226, number + 227, number + 228, number + 229, number + 230, number + 231, number + 232, number + 233, number + 234, number + 235, number + 236, number + 237, number + 238, number + 239, number + 240, number + 241, number + 242, number + 243, number + 244, number + 245, number + 246, number + 247, number + 248, number + 249, number + 250, number + 251, number + 252, number + 253, number + 254, number + 255, number + 256, number + 257, number + 258, number + 259, number + 260, number + 261, number + 262, number + 263, number + 264, number + 265, number + 266, number + 267, number + 268, number + 269, number + 270, number + 271, number + 272, number + 273, number + 274, number + 275, number + 276, number + 277, number + 278, number + 279, number + 280, number + 281, number + 282, number + 283, number + 284, number + 285, number + 286, number + 287, number + 288, number + 289, number + 290, number + 291, number + 292, number + 293, number + 294, number + 295, number + 296, number + 297, number + 298, number + 299 from numbers(20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1770', () => {
    const query = `INSERT INTO t VALUES('Hallo Welt');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1771', () => {
    const query = `INSERT INTO nums VALUES (4),(2),(1),(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1772', () => {
    const query = `insert into test select number % 2 ? NULL : 42 as x from numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1773', () => {
    const query = `insert into test select (number % 2 ? NULL : 'World')::LowCardinality(Nullable(String)) from numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1774', () => {
    const query = `INSERT INTO test_table VALUES (1, 'Value_1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1775', () => {
    const query = `INSERT INTO test_table_data VALUES (2, 'Value_2'), (3, 'Value_3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1776', () => {
    const query = `INSERT INTO test_table SELECT id, value FROM test_table_data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1777', () => {
    const query = `INSERT INTO data_compact VALUES ([0]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1778', () => {
    const query = `INSERT INTO data_wide VALUES ([0]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1779', () => {
    const query = `INSERT INTO t_02559 SELECT number, number, number FROM numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1780', () => {
    const query = `INSERT INTO t_02559 SELECT number, if (number < 100 OR number > 1000,
[toString(number)],
emptyArrayString())
FROM numbers(2000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1781', () => {
    const query = `INSERT INTO test_02559 VALUES (1, 'Hello, world!');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1782', () => {
    const query = `INSERT INTO test_02559 VALUES (2, 'Goodbye.', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1783', () => {
    const query = `INSERT INTO test_02559 VALUES (3, 'So long, and thanks for all the fish.', 42, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1784', () => {
    const query = `INSERT INTO test_02559__fuzz_20 SELECT number, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1785', () => {
    const query = `INSERT INTO test_02559 SELECT number, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1786', () => {
    const query = `INSERT INTO ip_bloom VALUES (1, '1.1.1.1', '::1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1787', () => {
    const query = `INSERT INTO check_system_tables VALUES (1, 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1788', () => {
    const query = `INSERT INTO check_system_tables VALUES (1, 2, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1789', () => {
    const query = `INSERT INTO test_2554_log SELECT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1790', () => {
    const query = `INSERT INTO test_2554_tinylog SELECT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1791', () => {
    const query = `INSERT INTO test_2554_stripelog SELECT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1792', () => {
    const query = `INSERT INTO test_grouping_sets_predicate SELECT toDate('2023-01-05') AS day_,
'hello, world'
FROM numbers (10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1793', () => {
    const query = `INSERT INTO t_json_analyzer VALUES ('{"id": 2, "obj": {"k2": {"k3": "str", "k4": [{"k6": 55}]}, "some": 42}, "s": "bar"}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1794', () => {
    const query = `INSERT INTO t_json_attach_partition FORMAT JSONEachRow {"b": 1, "c" : {"k1": 1}};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1795', () => {
    const query = `INSERT INTO t_json_attach_partition FORMAT JSONEachRow {"b": 1, "c" : {"k1": [1, 2]}};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1796', () => {
    const query = `INSERT INTO t_sparse_intersect SELECT if (number % 10 = 0, number, 0), number FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1797', () => {
    const query = `INSERT INTO t_sparse_intersect SELECT number, number FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1798', () => {
    const query = `INSERT INTO tab VALUES ((2, 2), 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1799', () => {
    const query = `INSERT INTO sipHashKeyed_keys VALUES ((2, 2), 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1800', () => {
    const query = `INSERT INTO sipHashKeyed_keys VALUES ((4, 4), 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1801', () => {
    const query = `INSERT INTO sipHashKeyed_keys VALUES (2, 2, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1802', () => {
    const query = `INSERT INTO sipHashKeyed_keys VALUES (4, 4, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1803', () => {
    const query = `INSERT INTO sipHashKeyed_keys VALUES (2, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1804', () => {
    const query = `INSERT INTO sipHashKeyed_keys VALUES (4, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1805', () => {
    const query = `insert into store_sales values (-3.273, -1.452, 4.267, 20.0, 40.0),(0.121, -0.615, 4.290, 20.0, 40.0), (-1.099, 2.755, -3.060, 20.0, 40.0),(1.090, 2.945, -2.346, 20.0, 40.0), (0.305, 2.179, -1.205, 20.0, 40.0),(-0.925, 0.702, 1.134, 20.0, 40.0), (3.178, -1.316, 7.221, 20.0, 40.0),(-2.756, -0.473, 2.569, 20.0, 40.0), (3.665, 2.303, 0.226, 20.0, 40.0),(1.662, 1.951, -0.070, 20.0, 40.0), (2.869, 0.593, 3.249, 20.0, 40.0),(0.818, -0.593, 4.594, 20.0, 40.0), (-1.917, 0.916, 0.209, 20.0, 40.0),(2.706, 1.523, 1.307, 20.0, 40.0), (0.219, 2.162, -1.214, 20.0, 40.0),(-4.510, 1.376, -2.007, 20.0, 40.0), (4.284, -0.515, 6.173, 20.0, 40.0),(-1.101, 2.810, -3.170, 20.0, 40.0), (-1.810, -1.117, 4.329, 20.0, 40.0),(0.055, 1.115, 0.797, 20.0, 40.0), (-2.178, 2.904, -3.898, 20.0, 40.0),(-3.494, -1.814, 4.882, 20.0, 40.0), (3.027, 0.476, 3.562, 20.0, 40.0),(-1.434, 1.151, -0.018, 20.0, 40.0), (1.180, 0.992, 1.606, 20.0, 40.0),(0.015, 0.971, 1.067, 20.0, 40.0), (-0.511, -0.875, 4.495, 20.0, 40.0),(0.961, 2.348, -1.216, 20.0, 40.0), (-2.279, 0.038, 1.785, 20.0, 40.0),(-1.568, -0.248, 2.712, 20.0, 40.0), (-0.496, 0.366, 2.020, 20.0, 40.0),(1.177, -1.401, 6.390, 20.0, 40.0), (2.882, -1.442, 7.325, 20.0, 40.0),(-1.066, 1.817, -1.167, 20.0, 40.0), (-2.144, 2.791, -3.655, 20.0, 40.0),(-4.370, 2.228, -3.642, 20.0, 40.0), (3.996, 2.775, -0.553, 20.0, 40.0),(0.289, 2.055, -0.965, 20.0, 40.0), (-0.588, -1.601, 5.908, 20.0, 40.0),(-1.801, 0.417, 1.265, 20.0, 40.0), (4.375, -1.499, 8.186, 20.0, 40.0),(-2.618, 0.038, 1.615, 20.0, 40.0), (3.616, -0.833, 6.475, 20.0, 40.0),(-4.045, -1.558, 4.094, 20.0, 40.0), (-3.962, 0.636, -0.253, 20.0, 40.0),(3.505, 2.625, -0.497, 20.0, 40.0), (3.029, -0.523, 5.560, 20.0, 40.0),(-3.520, -0.474, 2.188, 20.0, 40.0), (2.430, -1.469, 7.154, 20.0, 40.0),(1.547, -1.654, 7.082, 20.0, 40.0), (-1.370, 0.575, 1.165, 20.0, 40.0),(-1.869, -1.555, 5.176, 20.0, 40.0), (3.536, 2.841, -0.913, 20.0, 40.0),(-3.810, 1.220, -1.344, 20.0, 40.0), (-1.971, 1.462, -0.910, 20.0, 40.0),(-0.243, 0.167, 2.545, 20.0, 40.0), (-1.403, 2.645, -2.991, 20.0, 40.0),(0.532, -0.114, 3.494, 20.0, 40.0), (-1.678, 0.975, 0.212, 20.0, 40.0),(-0.656, 2.140, -1.609, 20.0, 40.0), (1.743, 2.631, -1.390, 20.0, 40.0),(2.586, 2.943, -1.593, 20.0, 40.0), (-0.512, 2.969, -3.195, 20.0, 40.0),(2.283, -0.100, 4.342, 20.0, 40.0), (-4.293, 0.872, -0.890, 20.0, 40.0),(3.411, 1.300, 2.106, 20.0, 40.0), (-0.281, 2.951, -3.042, 20.0, 40.0),(-4.442, 0.384, 0.012, 20.0, 40.0), (1.194, 1.746, 0.104, 20.0, 40.0),(-1.152, 1.862, -1.300, 20.0, 40.0), (1.362, -1.341, 6.363, 20.0, 40.0),(-4.488, 2.618, -4.481, 20.0, 40.0), (3.419, -0.564, 5.837, 20.0, 40.0),(-3.392, 0.396, 0.512, 20.0, 40.0), (-1.629, -0.909, 4.003, 20.0, 40.0),(4.447, -1.088, 7.399, 20.0, 40.0), (-1.232, 1.699, -1.014, 20.0, 40.0),(-1.286, -0.609, 3.575, 20.0, 40.0), (2.437, 2.796, -1.374, 20.0, 40.0),(-4.864, 1.989, -3.410, 20.0, 40.0), (-1.716, -1.399, 4.940, 20.0, 40.0),(-3.084, 1.858, -2.259, 20.0, 40.0), (2.828, -0.319, 5.053, 20.0, 40.0),(-1.226, 2.586, -2.786, 20.0, 40.0), (2.456, 0.092, 4.044, 20.0, 40.0),(-0.989, 2.375, -2.245, 20.0, 40.0), (3.268, 0.935, 2.765, 20.0, 40.0),(-4.128, -1.995, 4.927, 20.0, 40.0), (-1.083, 2.197, -1.935, 20.0, 40.0),(-3.471, -1.198, 3.660, 20.0, 40.0), (4.617, -1.136, 7.579, 20.0, 40.0),(2.054, -1.675, 7.378, 20.0, 40.0), (4.106, 2.326, 0.402, 20.0, 40.0),(1.558, 0.310, 3.158, 20.0, 40.0), (0.792, 0.900, 1.596, 20.0, 40.0),(-3.229, 0.300, 0.785, 20.0, 40.0), (3.787, -0.793, 6.479, 20.0, 40.0),(1.786, 2.288, -0.684, 20.0, 40.0), (2.643, 0.223, 3.875, 20.0, 40.0),(-3.592, 2.122, -3.040, 20.0, 40.0), (4.519, -1.760, 8.779, 20.0, 40.0),(3.221, 2.255, 0.101, 20.0, 40.0), (4.151, 1.788, 1.500, 20.0, 40.0),(-1.033, -1.195, 4.874, 20.0, 40.0), (-1.636, -1.037, 4.257, 20.0, 40.0),(-3.548, 1.911, -2.596, 20.0, 40.0), (4.829, -0.293, 6.001, 20.0, 40.0),(-4.684, -1.664, 3.986, 20.0, 40.0), (4.531, -0.503, 6.271, 20.0, 40.0),(-3.503, -1.606, 4.460, 20.0, 40.0), (-2.036, -1.522, 5.027, 20.0, 40.0),(-0.473, -0.617, 3.997, 20.0, 40.0), (-1.554, -1.630, 5.483, 20.0, 40.0),(-3.567, -1.043, 3.302, 20.0, 40.0), (-2.038, 0.579, 0.823, 20.0, 40.0),(-3.040, 0.857, -0.233, 20.0, 40.0), (4.610, 0.562, 4.181, 20.0, 40.0),(-3.323, -1.938, 5.215, 20.0, 40.0), (4.314, 1.720, 1.717, 20.0, 40.0),(-1.220, 0.615, 1.161, 20.0, 40.0), (-2.556, 1.120, -0.519, 20.0, 40.0),(-3.717, -0.108, 1.358, 20.0, 40.0), (4.689, -1.826, 8.996, 20.0, 40.0),(3.452, 0.506, 3.713, 20.0, 40.0), (2.472, 0.612, 3.012, 20.0, 40.0),(3.452, 0.450, 3.826, 20.0, 40.0), (1.207, 2.585, -1.567, 20.0, 40.0),(-4.826, 1.090, -1.593, 20.0, 40.0), (3.116, -1.118, 6.794, 20.0, 40.0),(0.448, 2.732, -2.240, 20.0, 40.0), (-1.096, -0.525, 3.503, 20.0, 40.0),(-4.680, -0.238, 1.137, 20.0, 40.0), (2.552, -1.403, 7.082, 20.0, 40.0),(0.719, 2.997, -2.635, 20.0, 40.0), (0.347, -1.966, 7.105, 20.0, 40.0),(2.958, -0.404, 5.288, 20.0, 40.0), (0.722, -1.950, 7.261, 20.0, 40.0),(-2.851, -0.986, 3.546, 20.0, 40.0), (-4.316, -0.439, 1.721, 20.0, 40.0),(-1.685, -0.201, 2.560, 20.0, 40.0), (1.856, 0.190, 3.549, 20.0, 40.0),(-2.052, 0.206, 1.562, 20.0, 40.0), (-2.504, -0.646, 3.041, 20.0, 40.0),(3.235, 0.882, 2.854, 20.0, 40.0), (-1.366, -1.573, 5.463, 20.0, 40.0),(-3.447, 2.419, -3.562, 20.0, 40.0), (4.155, 2.092, 0.893, 20.0, 40.0),(-0.935, 0.209, 2.116, 20.0, 40.0), (3.117, -1.821, 8.201, 20.0, 40.0),(3.759, 0.577, 3.725, 20.0, 40.0), (-0.938, 2.992, -3.453, 20.0, 40.0),(-0.525, 2.341, -1.945, 20.0, 40.0), (4.540, 2.625, 0.019, 20.0, 40.0),(-2.097, 1.190, -0.429, 20.0, 40.0), (-2.672, 1.983, -2.302, 20.0, 40.0),(-3.038, -1.490, 4.460, 20.0, 40.0), (-0.943, 2.149, -1.770, 20.0, 40.0),(0.739, 1.598, 0.174, 20.0, 40.0), (1.828, 1.853, 0.208, 20.0, 40.0),(4.856, 0.137, 5.153, 20.0, 40.0), (-1.617, 0.468, 1.255, 20.0, 40.0),(-1.972, 2.053, -2.092, 20.0, 40.0), (-4.633, 1.389, -2.094, 20.0, 40.0),(-3.628, -1.156, 3.498, 20.0, 40.0), (3.597, 1.034, 2.731, 20.0, 40.0),(-1.488, -0.002, 2.261, 20.0, 40.0), (0.749, 1.921, -0.468, 20.0, 40.0),(1.304, -1.371, 6.394, 20.0, 40.0), (4.587, 2.936, -0.579, 20.0, 40.0),(-2.241, 1.791, -1.703, 20.0, 40.0), (-2.945, 1.372, -1.216, 20.0, 40.0),(1.375, 0.395, 2.898, 20.0, 40.0), (-1.281, -0.641, 3.642, 20.0, 40.0),(2.178, 0.895, 2.299, 20.0, 40.0), (3.031, -0.786, 6.087, 20.0, 40.0),(-1.385, -0.375, 3.058, 20.0, 40.0), (4.041, -0.431, 5.882, 20.0, 40.0),(0.480, -0.507, 4.254, 20.0, 40.0), (-3.797, 0.140, 0.822, 20.0, 40.0),(2.355, 2.502, -0.827, 20.0, 40.0), (1.376, -1.583, 6.854, 20.0, 40.0),(0.164, 1.405, 0.273, 20.0, 40.0), (-1.273, 1.471, -0.579, 20.0, 40.0),(0.770, 2.246, -1.107, 20.0, 40.0), (4.552, 2.904, -0.533, 20.0, 40.0),(4.259, -1.772, 8.674, 20.0, 40.0), (-0.309, 1.159, 0.528, 20.0, 40.0),(3.581, 2.700, -0.610, 20.0, 40.0), (-3.202, 0.346, 0.707, 20.0, 40.0),(-1.575, 1.242, -0.271, 20.0, 40.0), (-1.584, -0.493, 3.194, 20.0, 40.0),(-3.778, 0.150, 0.810, 20.0, 40.0), (-4.675, 1.749, -2.835, 20.0, 40.0),(3.567, -0.792, 6.367, 20.0, 40.0), (-0.417, 1.399, -0.006, 20.0, 40.0),(-4.672, 2.007, -3.349, 20.0, 40.0), (-1.034, 0.196, 2.090, 20.0, 40.0),(-3.796, 2.496, -3.890, 20.0, 40.0), (3.532, -0.497, 5.759, 20.0, 40.0),(4.868, -1.359, 8.151, 20.0, 40.0), (-0.769, 0.302, 2.011, 20.0, 40.0),(4.475, 2.612, 0.014, 20.0, 40.0), (-3.532, -0.395, 2.024, 20.0, 40.0),(0.322, 0.675, 1.812, 20.0, 40.0), (-2.028, -1.942, 5.870, 20.0, 40.0),(1.810, -1.244, 6.392, 20.0, 40.0), (-0.783, 1.242, 0.124, 20.0, 40.0),(-4.745, -1.300, 3.227, 20.0, 40.0), (1.902, 1.973, 0.005, 20.0, 40.0),(-3.453, -1.429, 4.132, 20.0, 40.0), (1.559, 0.986, 1.808, 20.0, 40.0),(0.128, 2.754, -2.443, 20.0, 40.0), (2.759, 1.727, 0.926, 20.0, 40.0),(-4.468, 1.690, -2.614, 20.0, 40.0), (-2.368, -1.922, 5.659, 20.0, 40.0),(-2.766, 2.128, -2.640, 20.0, 40.0), (0.967, -1.825, 7.133, 20.0, 40.0),(-2.854, 2.855, -4.136, 20.0, 40.0), (-2.944, 1.875, -2.222, 20.0, 40.0),(-2.632, -0.983, 3.649, 20.0, 40.0), (2.427, 2.239, -0.266, 20.0, 40.0),(-1.726, -0.838, 3.812, 20.0, 40.0), (0.007, -0.903, 4.809, 20.0, 40.0),(-2.013, 1.092, -0.191, 20.0, 40.0), (-0.449, 0.970, 0.836, 20.0, 40.0),(1.396, 0.411, 2.876, 20.0, 40.0), (-1.115, -1.790, 6.023, 20.0, 40.0),(3.748, 1.917, 1.039, 20.0, 40.0), (2.978, 1.043, 2.404, 20.0, 40.0),(-3.969, 2.514, -4.013, 20.0, 40.0), (4.455, -0.050, 5.328, 20.0, 40.0),(-3.065, -0.846, 3.160, 20.0, 40.0), (-1.069, 2.167, -1.869, 20.0, 40.0),(3.016, -1.393, 7.294, 20.0, 40.0), (0.045, -1.928, 6.879, 20.0, 40.0),(-2.555, -0.984, 3.690, 20.0, 40.0), (-1.995, -0.054, 2.111, 20.0, 40.0),(4.600, -0.509, 6.318, 20.0, 40.0), (-1.942, 1.215, -0.402, 20.0, 40.0),(1.262, 2.765, -1.899, 20.0, 40.0), (2.617, -1.106, 6.521, 20.0, 40.0),(1.737, 0.554, 2.761, 20.0, 40.0), (-2.197, 0.632, 0.638, 20.0, 40.0),(4.768, 2.618, 0.147, 20.0, 40.0), (-3.737, -0.939, 3.010, 20.0, 40.0),(-2.623, 0.595, 0.499, 20.0, 40.0), (4.752, -0.340, 6.057, 20.0, 40.0),(2.333, -1.037, 6.240, 20.0, 40.0), (4.234, -1.882, 8.881, 20.0, 40.0),(-3.393, -0.812, 2.927, 20.0, 40.0), (0.885, 1.383, 0.678, 20.0, 40.0),(0.123, 2.937, -2.812, 20.0, 40.0), (2.969, 0.760, 2.964, 20.0, 40.0),(-4.929, 1.251, -1.967, 20.0, 40.0), (1.916, 2.223, -0.488, 20.0, 40.0),(-0.020, -1.740, 6.469, 20.0, 40.0), (0.702, -1.272, 5.895, 20.0, 40.0),(2.496, 2.648, -1.048, 20.0, 40.0), (4.067, -1.475, 7.984, 20.0, 40.0),(-3.717, 1.851, -2.561, 20.0, 40.0), (1.678, -0.624, 5.088, 20.0, 40.0),(1.073, 0.695, 2.146, 20.0, 40.0), (1.842, -0.749, 5.419, 20.0, 40.0),(-3.518, 1.909, -2.578, 20.0, 40.0), (2.229, 1.189, 1.737, 20.0, 40.0),(4.987, 2.893, -0.292, 20.0, 40.0), (-4.809, 1.043, -1.490, 20.0, 40.0),(-0.241, -0.728, 4.334, 20.0, 40.0), (-3.331, 0.590, 0.156, 20.0, 40.0),(-0.455, 2.621, -2.470, 20.0, 40.0), (1.492, 1.223, 1.301, 20.0, 40.0),(3.948, 2.841, -0.709, 20.0, 40.0), (0.732, 0.446, 2.475, 20.0, 40.0),(2.400, 2.390, -0.579, 20.0, 40.0), (-2.718, 1.427, -1.213, 20.0, 40.0),(-1.826, 1.451, -0.815, 20.0, 40.0), (1.125, 0.438, 2.686, 20.0, 40.0),(-4.918, 1.880, -3.219, 20.0, 40.0), (3.068, -0.442, 5.418, 20.0, 40.0),(1.982, 1.201, 1.589, 20.0, 40.0), (0.701, -1.709, 6.768, 20.0, 40.0),(-1.496, 2.564, -2.877, 20.0, 40.0), (-3.812, 0.974, -0.853, 20.0, 40.0),(-3.405, 2.018, -2.739, 20.0, 40.0), (2.211, 2.889, -1.674, 20.0, 40.0),(-2.481, 2.931, -4.103, 20.0, 40.0), (-3.721, 2.765, -4.391, 20.0, 40.0),(-1.768, -1.292, 4.699, 20.0, 40.0), (-4.462, 1.058, -1.347, 20.0, 40.0),(-3.516, -1.942, 5.126, 20.0, 40.0), (0.485, 2.420, -1.597, 20.0, 40.0),(-0.492, 0.242, 2.270, 20.0, 40.0), (4.245, 1.689, 1.744, 20.0, 40.0),(2.234, 0.364, 3.389, 20.0, 40.0), (2.629, 2.224, -0.134, 20.0, 40.0),(-4.375, 1.221, -1.630, 20.0, 40.0), (-0.618, 1.374, -0.057, 20.0, 40.0),(-2.580, -1.604, 4.918, 20.0, 40.0), (0.159, 1.104, 0.871, 20.0, 40.0),(-3.597, 0.975, -0.749, 20.0, 40.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1806', () => {
    const query = `INSERT INTO store_sales (ss_sold_time_sk) VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1807', () => {
    const query = `INSERT INTO store_sales (ss_cdemo_sk) VALUES (0.1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1808', () => {
    const query = `INSERT INTO t0(c0) VALUES (1), (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1809', () => {
    const query = `INSERT INTO t1(c1) VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1810', () => {
    const query = `INSERT INTO ip4test VALUES (22906492245), (2319771222);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1811', () => {
    const query = `INSERT INTO test_tuple_element VALUES (tuple(1,2)), (tuple(NULL, 3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1812', () => {
    const query = `INSERT INTO t1_local VALUES('partition1', 1,1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1813', () => {
    const query = `INSERT INTO t1_local VALUES('partition2', 1,2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1814', () => {
    const query = `INSERT INTO t1_local VALUES('partition1', 2,3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1815', () => {
    const query = `INSERT INTO t1_local VALUES('partition2', 2,4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1816', () => {
    const query = `INSERT INTO 02540_date VALUES('65535', 65535);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1817', () => {
    const query = `INSERT INTO 02540_date VALUES('toUInt16(65535)', toUInt16(65535)); -- #43370 weird one -> used to be 1970-01-01 INSERT INTO 02540_date VALUES('toInt32(65535)', toInt32(65535));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1818', () => {
    const query = `INSERT INTO 02540_date VALUES('toUInt32(65535)', toUInt32(65535));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1819', () => {
    const query = `INSERT INTO 02540_date VALUES('toDate(65535)', toDate(65535));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1820', () => {
    const query = `INSERT INTO 02540_date VALUES('CAST(65535 as UInt16)', CAST(65535 as UInt16));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1821', () => {
    const query = `INSERT INTO 02540_date VALUES('CAST(65535 as Int32)', CAST(65535 as Int32));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1822', () => {
    const query = `INSERT INTO 02540_date VALUES('CAST(65535 as UInt32)', CAST(65535 as UInt32));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1823', () => {
    const query = `INSERT INTO 02540_date VALUES('CAST(65535 as Date)', CAST(65535 as Date));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1824', () => {
    const query = `INSERT INTO 02540_date VALUES('65534', 65534);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1825', () => {
    const query = `INSERT INTO 02540_date VALUES('toUInt16(65534)', toUInt16(65534));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1826', () => {
    const query = `INSERT INTO 02540_date VALUES('toInt32(65534)', toInt32(65534));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1827', () => {
    const query = `INSERT INTO 02540_date VALUES('toUInt32(65534)', toUInt32(65534));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1828', () => {
    const query = `INSERT INTO 02540_date VALUES('toDate(65534)', toDate(65534));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1829', () => {
    const query = `INSERT INTO 02540_date VALUES('CAST(65534 as UInt16)', CAST(65534 as UInt16));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1830', () => {
    const query = `INSERT INTO 02540_date VALUES('CAST(65534 as Int32)', CAST(65534 as Int32));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1831', () => {
    const query = `INSERT INTO 02540_date VALUES('CAST(65534 as UInt32)', CAST(65534 as UInt32));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1832', () => {
    const query = `INSERT INTO 02540_date VALUES('CAST(65534 as Date)', CAST(65534 as Date));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1833', () => {
    const query = `INSERT INTO 02540_date VALUES('0', 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1834', () => {
    const query = `INSERT INTO 02540_date VALUES('toUInt16(0)', toUInt16(0));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1835', () => {
    const query = `INSERT INTO 02540_date VALUES('toInt32(0)', toInt32(0));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1836', () => {
    const query = `INSERT INTO 02540_date VALUES('toUInt32(0)', toUInt32(0));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1837', () => {
    const query = `INSERT INTO 02540_date VALUES('toDate(0)', toDate(0));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1838', () => {
    const query = `INSERT INTO 02540_date VALUES('CAST(0 as UInt16)', CAST(0 as UInt16));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1839', () => {
    const query = `INSERT INTO 02540_date VALUES('CAST(0 as Int32)', CAST(0 as Int32));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1840', () => {
    const query = `INSERT INTO 02540_date VALUES('CAST(0 as UInt32)', CAST(0 as UInt32));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1841', () => {
    const query = `INSERT INTO 02540_date VALUES('CAST(0 as Date)', CAST(0 as Date));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1842', () => {
    const query = `INSERT INTO 02540_date VALUES('65536', 65536);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1843', () => {
    const query = `INSERT INTO 02540_date VALUES('toUInt16(65536)', toUInt16(65536)); -- Narrowing conversion 65536 ==> 0 INSERT INTO 02540_date VALUES('toInt32(65536)', toInt32(65536));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1844', () => {
    const query = `INSERT INTO 02540_date VALUES('toUInt32(65536)', toUInt32(65536));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1845', () => {
    const query = `INSERT INTO 02540_date VALUES('toDate(65536)', toDate(65536));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1846', () => {
    const query = `INSERT INTO 02540_date VALUES('CAST(65536 as UInt16)', CAST(65536 as UInt16)); -- Narrowing conversion 65536 ==> 0 INSERT INTO 02540_date VALUES('CAST(65536 as Int32)', CAST(65536 as Int32));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1847', () => {
    const query = `INSERT INTO 02540_date VALUES('CAST(65536 as UInt32)', CAST(65536 as UInt32));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1848', () => {
    const query = `INSERT INTO 02540_date VALUES('CAST(65536 as Date)', CAST(65536 as Date));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1849', () => {
    const query = `INSERT INTO t_compact_vertical_merge SELECT number, toString(number), range(number % 10) FROM numbers(40);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1850', () => {
    const query = `INSERT INTO 02538_bf_ngrambf_map_values_test VALUES (1, {'a': 'a'}, {'b': 'b'});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1851', () => {
    const query = `INSERT INTO test_table_data VALUES (0, 'Value');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1852', () => {
    const query = `INSERT INTO wrong_metadata VALUES (1, 2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1853', () => {
    const query = `INSERT INTO wrong_metadata VALUES (4, 5, 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1854', () => {
    const query = `INSERT INTO wrong_metadata_wide VALUES (1, 2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1855', () => {
    const query = `INSERT INTO wrong_metadata_wide VALUES (4, 5, 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1856', () => {
    const query = `INSERT INTO test_tab VALUES (1, 'Hello World', 'l', 'xx') (2, 'Hello World', 'll', 'x') (3, 'Hello World', 'not_found', 'x') (4, 'Hello World', '[eo]', 'x') (5, 'Hello World', '.', 'x');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1857', () => {
    const query = `INSERT INTO test_tab VALUES (1, 'Hello World', 'l', 'x') (2, 'Hello World', '', 'y');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1858', () => {
    const query = `insert into table function hdfs('hdfs://localhost:12222/test_02536.jsonl', 'TSV') select '{"x" : {"a" : 1, "b" : 2}}' settings hdfs_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1859', () => {
    const query = `insert into test select * from hdfsCluster('test_cluster_two_shards_localhost', 'hdfs://localhost:12222/test_02536.jsonl') settings use_structure_from_insertion_table_in_table_functions=0; -- {serverError ILLEGAL_COLUMN} insert into test select * from hdfsCluster('test_cluster_two_shards_localhost', 'hdfs://localhost:12222/test_02536.jsonl') settings use_structure_from_insertion_table_in_table_functions=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1860', () => {
    const query = `INSERT INTO test_dist_02536 SELECT number FROM numbers(5) SETTINGS prefer_localhost_replica=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1861', () => {
    const query = `insert into bug_delta_gorilla values (0)(1)(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1862', () => {
    const query = `insert into test select * from s3Cluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/a.tsv');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1863', () => {
    const query = `INSERT INTO sipHashKeyed_keys FORMAT VALUES ({'a':'b', 'c':'d'}), ({'e':'f', 'g':'h'});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1864', () => {
    const query = `INSERT INTO test1 VALUES (123, 123), (12321, -30), (321, -32);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1865', () => {
    const query = `INSERT INTO test2 VALUES (123, 5600), (321, 5601);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1866', () => {
    const query = `INSERT INTO t1__fuzz_8 VALUES (1, 1), (2, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1867', () => {
    const query = `INSERT INTO full_join__fuzz_4 VALUES (1, '1'), (2, '2'), (3, '3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1868', () => {
    const query = `INSERT INTO foo VALUES (1, 2), (3, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1869', () => {
    const query = `INSERT INTO foo SELECT number, number%5 FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1870', () => {
    const query = `INSERT INTO foo1 SELECT number, 1 FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1871', () => {
    const query = `INSERT INTO t2 values (4, 3, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1872', () => {
    const query = `INSERT INTO 02526_keeper_map SELECT * FROM generateRandom('\`key\` String, \`value\` UInt32') LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1873', () => {
    const query = `INSERT INTO 02526_rocksdb SELECT * FROM generateRandom('\`key\` String, \`value\` UInt32') LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1874', () => {
    const query = `INSERT INTO test_table VALUES (1, 0, 100, '2022-12-26 11:38:34'), (1, 101, 200, '2022-12-26 11:38:34'), (2, 0, 999, '2022-12-26 11:38:34'), (2, 1000, 10000, '2022-12-26 11:38:34');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1875', () => {
    const query = `INSERT INTO table_merge_tree_02525 VALUES (1, 'a'), (2, 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1876', () => {
    const query = `INSERT INTO table_merge_tree_02525 VALUES (3, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1877', () => {
    const query = `INSERT INTO table_log_02525 VALUES (1, 'a'), (2, 'b'), (3, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1878', () => {
    const query = `INSERT INTO table_stripe_log_02525 VALUES (1, 'a'), (2, 'b'), (3, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1879', () => {
    const query = `INSERT INTO table_tiny_log_02525 VALUES (1, 'a'), (2, 'b'), (3, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1880', () => {
    const query = `INSERT INTO test_table VALUES (1, '22.5'), (2, Null);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1881', () => {
    const query = `INSERT INTO data_a_02187 SELECT *
FROM system.one
SETTINGS max_block_size = '1', min_insert_block_size_rows = '65536', min_insert_block_size_bytes = '0', max_insert_threads = '0', max_threads = '3', receive_timeout = '10', receive_data_timeout_ms = '10000', connections_with_failover_max_tries = '0', extremes = '1', use_uncompressed_cache = '0', optimize_move_to_prewhere = '1', optimize_move_to_prewhere_if_final = '0', replication_alter_partitions_sync = '2', totals_mode = 'before_having', allow_suspicious_low_cardinality_types = '1', compile_expressions = '1', min_count_to_compile_expression = '0', group_by_two_level_threshold = '100', distributed_aggregation_memory_efficient = '0', distributed_group_by_no_merge = '1', optimize_distributed_group_by_sharding_key = '1', optimize_skip_unused_shards = '1', optimize_skip_unused_shards_rewrite_in = '1', force_optimize_skip_unused_shards = '2', optimize_skip_unused_shards_nesting = '1', force_optimize_skip_unused_shards_nesting = '2', merge_tree_min_rows_for_concurrent_read = '10000', force_primary_key = '1', network_compression_method = 'ZSTD', network_zstd_compression_level = '7', log_queries = '0', log_queries_min_type = 'QUERY_FINISH', distributed_product_mode = 'local', insert_quorum = '2', insert_quorum_timeout = '0', insert_quorum_parallel = '0', select_sequential_consistency = '1', join_use_nulls = '1', any_join_distinct_right_table_keys = '1', preferred_max_column_in_block_size_bytes = '32', distributed_foreground_insert = '1', insert_allow_materialized_columns = '1', use_index_for_in_with_subqueries = '1', joined_subquery_requires_alias = '0', empty_result_for_aggregation_by_empty_set = '1', allow_suspicious_codecs = '1', query_profiler_real_time_period_ns = '0', query_profiler_cpu_time_period_ns = '0', opentelemetry_start_trace_probability = '1', max_rows_to_read = '1000000', read_overflow_mode = 'break', max_rows_to_group_by = '10', group_by_overflow_mode = 'any', max_rows_to_sort = '100', sort_overflow_mode = 'break', max_result_rows = '10', max_execution_time = '9', max_execution_speed = '1', max_bytes_in_join = '100', join_algorithm = 'partial_merge', max_memory_usage = '1099511627776', log_query_threads = '1', send_logs_level = 'fatal', enable_optimize_predicate_expression = '1', prefer_localhost_replica = '1', optimize_read_in_order = '1', optimize_aggregation_in_order = '1', read_in_order_two_level_merge_threshold = '1', allow_introspection_functions = '1', check_query_single_value_result = '1', allow_experimental_live_view = '1', default_table_engine = 'Memory', mutations_sync = '2', convert_query_to_cnf = '0', optimize_arithmetic_operations_in_aggregate_functions = '1', optimize_duplicate_order_by_and_distinct = '0', optimize_multiif_to_if = '0', optimize_functions_to_subcolumns = '1', optimize_using_constraints = '1', optimize_substitute_columns = '1', optimize_append_index = '1', transform_null_in = '1', data_type_default_nullable = '1', cast_keep_nullable = '1', cast_ipv4_ipv6_default_on_conversion_error = '0', system_events_show_zero_values = '1', enable_global_with_statement = '1', optimize_on_insert = '0', optimize_rewrite_sum_if_to_count_if = '1', distributed_ddl_output_mode = 'throw', union_default_mode = 'ALL', optimize_aggregators_of_group_by_keys = '1', optimize_group_by_function_keys = '1', short_circuit_function_evaluation = 'enable', async_insert = '1', enable_filesystem_cache = '0', allow_deprecated_database_ordinary = '1', allow_deprecated_syntax_for_merge_tree = '1', allow_experimental_nlp_functions = '1', allow_experimental_object_type = '1', optimize_use_projections = '1', input_format_null_as_default = '1', input_format_ipv4_default_on_conversion_error = '0', input_format_ipv6_default_on_conversion_error = '0', output_format_json_named_tuples_as_objects = '1', output_format_write_statistics = '0', output_format_pretty_row_numbers = '1';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1882', () => {
    const query = `INSERT INTO lwd_test_02521 SELECT number, randomString(10), now() - INTERVAL 2 MONTH FROM numbers(50000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1883', () => {
    const query = `INSERT INTO lwd_test_02521 SELECT number, randomString(10), now() FROM numbers(50000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1884', () => {
    const query = `insert into test select toDate('2023-01-05') AS day, number from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1885', () => {
    const query = `INSERT INTO test_table VALUES ('a', 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1886', () => {
    const query = `insert into t1 select number from numbers_mt(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1887', () => {
    const query = `insert into t3 select number from numbers_mt(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1888', () => {
    const query = `insert into t4 select number from numbers_mt(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1889', () => {
    const query = `insert into t5 select number from numbers_mt(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1890', () => {
    const query = `insert into t6 select number from numbers_mt(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1891', () => {
    const query = `insert into t7 select number from numbers_mt(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1892', () => {
    const query = `insert into t8 select number from numbers_mt(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1893', () => {
    const query = `insert into t9 select number from numbers_mt(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1894', () => {
    const query = `insert into t10 select number, number from numbers_mt(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1895', () => {
    const query = `insert into t11 select number, number from numbers_mt(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1896', () => {
    const query = `insert into t12 select number, number from numbers_mt(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1897', () => {
    const query = `insert into t13 select number, number from numbers_mt(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1898', () => {
    const query = `insert into t14 select number, number from numbers_mt(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1899', () => {
    const query = `insert into t15 select number, number from numbers_mt(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1900', () => {
    const query = `insert into t16 select number, number from numbers_mt(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1901', () => {
    const query = `insert into t17 select number, number from numbers_mt(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1902', () => {
    const query = `insert into t18 select number, number from numbers_mt(50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1903', () => {
    const query = `insert into t19 select number, number from numbers_mt(50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1904', () => {
    const query = `insert into t20 select number, number from numbers_mt(50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1905', () => {
    const query = `insert into t21 select number, number from numbers_mt(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1906', () => {
    const query = `insert into t22 select number, number from numbers_mt(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1907', () => {
    const query = `insert into simple_agg_groupArrayLastArray values (1, [1,2,3]), (1, [4,5,6]), (2, [4,5,6]), (2, [1,2,3]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1908', () => {
    const query = `insert into simple_agg_groupArrayLastArray values (1, [7,8]), (2, [7,8]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1909', () => {
    const query = `INSERT INTO t VALUES (1.1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1910', () => {
    const query = `INSERT INTO t VALUES (1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1911', () => {
    const query = `INSERT INTO test_table_join_1 VALUES (1, 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1912', () => {
    const query = `INSERT INTO test_table_join_2 VALUES (1, 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1913', () => {
    const query = `INSERT INTO test_table_join_3 VALUES (1, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1914', () => {
    const query = `INSERT INTO foo SELECT number, number % 5 FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1915', () => {
    const query = `INSERT INTO foo__fuzz_0 SELECT number, number % 5 FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1916', () => {
    const query = `INSERT INTO kek VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1917', () => {
    const query = `INSERT INTO temp (id, field1, field2, field3, field4, field5, field6, field7, field8, event_at, order_id, identity) VALUES ('1011','1d83904a-c31d-4a6c-bbf0-217656b46444','1d83904a-c31d-4a6c-bbf0-217656b46444',-200,0,'FOO','BAR','','1d83904a-c31d-4a6c-bbf0-217656b46444','2022-12-18 03:14:56','','dispatcher'),('10112222334444','1d83904a-c31d-4a6c-bbf0-217656b46444','1d83904a-c31d-4a6c-bbf0-217656b46444',12300,0,'FOO','BAR','','1d83904a-c31d-4a6c-bbf0-217656b46444','2022-12-17 23:37:18','1d83904a-c31d-4a6c-bbf0-217656b46444','other');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1918', () => {
    const query = `INSERT INTO video_log SELECT toUnixTimestamp('2022-07-22 01:00:00') + (rowNumberInAllBlocks() / 20000),
user_id_raw % 100000000 AS user_id,
device_id_raw % 200000000 AS device_id,
domain_raw % 100,
(bytes_raw % 1024) + 128,
(duration_raw % 300) + 100
FROM rng
LIMIT 1728000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1919', () => {
    const query = `INSERT INTO video_log SELECT toUnixTimestamp('2022-07-22 01:00:00') + (rowNumberInAllBlocks() / 20000),
user_id_raw % 100000000 AS user_id,
100 AS device_id,
domain_raw % 100,
(bytes_raw % 1024) + 128,
(duration_raw % 300) + 100
FROM rng
LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1920', () => {
    const query = `insert into test1__fuzz_37 values ('2020-10-10');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1921', () => {
    const query = `INSERT INTO fh(a_value, b_value, c_value, d_value) VALUES (1, 5.6,-4.4, 2.6),(2, -9.6, 3, 3.3),(3, -1.3,-4, 1.2),(4, 5.3,9.7,2.3),(5, 4.4,0.037,1.222),(6, -8.6,-7.8,2.1233),(7, 5.1,9.3,8.1222),(8, 7.9,-3.6,9.837),(9, -8.2,0.62,8.43555),(10, -3,7.3,6.762);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1922', () => {
    const query = `insert into t (\`arr.key\`, \`arr.value\`) values (['a'], ['b']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1923', () => {
    const query = `INSERT INTO a VALUES (1, 1, 'a'), (2, 2, 'b'), (3, 3, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1924', () => {
    const query = `INSERT INTO b VALUES (1, 1, 'a'), (2, 2, 'b'), (3, 3, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1925', () => {
    const query = `INSERT INTO c VALUES (1, 1, 'a'), (2, 2, 'b'), (3, 3, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1926', () => {
    const query = `INSERT INTO d VALUES (1, 1, 'a'), (2, 2, 'b'), (3, 3, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1927', () => {
    const query = `INSERT INTO table_02513 SELECT number+11*13*1000 FROM numbers(20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1928', () => {
    const query = `INSERT INTO datetime_date_table VALUES ('2020-03-04', '2020-03-04 10:23:45', '2020-03-04 10:23:45.123', '2020-03-04', '2020-03-04 10:23:45', '2020-03-04 10:23:45.123', '2020-03-04', '2020-03-04 10:23:45', '2020-03-04 10:23:45.123');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1929', () => {
    const query = `INSERT INTO datetime_date_table VALUES ('2020-03-05', '2020-03-05 12:23:45', '2020-03-05 12:23:45.123', '2020-03-05', '2020-03-05 12:23:45', '2020-03-05 12:23:45.123', '2020-03-05', '2020-03-05 12:23:45', '2020-03-05 12:23:45.123');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1930', () => {
    const query = `INSERT INTO datetime_date_table VALUES ('2020-04-05', '2020-04-05 00:10:45', '2020-04-05 00:10:45.123', '2020-04-05', '2020-04-05 00:10:45', '2020-04-05 00:10:45.123', '2020-04-05', '2020-04-05 00:10:45', '2020-04-05 00:10:45.123');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1931', () => {
    const query = `INSERT INTO products VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1932', () => {
    const query = `INSERT INTO x VALUES (['Hello', 'World'], ['abc', 'def'], 'test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1933', () => {
    const query = `INSERT INTO table1 VALUES (1, 2), (1, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1934', () => {
    const query = `INSERT INTO data_table SELECT number, number, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1935', () => {
    const query = `INSERT INTO \`table\` VALUES ('4c36abda-8bd8-11eb-8204-005056aa8bf6', '2021-03-24 01:04:27'), ('4c408902-8bd8-11eb-8204-005056aa8bf6', '2021-03-24 01:04:27'), ('4c5bf20a-8bd8-11eb-8204-005056aa8bf6', '2021-03-24 01:04:27'), ('4c61623a-8bd8-11eb-8204-005056aa8bf6', '2021-03-24 01:04:27'), ('4c6efab2-8bd8-11eb-a952-005056aa8bf6', '2021-03-24 01:04:27');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1936', () => {
    const query = `INSERT INTO test_graphite (key) VALUES (0); -- { serverError BAD_ARGUMENTS } DROP TABLE test_graphite;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1937', () => {
    const query = `INSERT INTO needle_table select concat(toString(number + 30), '/tclwebkit', toString(number)) from system.numbers limit 15;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1938', () => {
    const query = `INSERT INTO regexp_dictionary_source_table VALUES (1, 2, 'Linux/(\\d+[\\.\\d]*).+tlinux', ['name', 'version'], ['TencentOS', '\\1']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1939', () => {
    const query = `INSERT INTO regexp_dictionary_source_table VALUES (2, 3, '(\\d+)/tclwebkit(\\d+[\\.\\d]*)', ['name', 'version', 'comment'], ['Android', '\$1', 'test \$1 and \$2']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1940', () => {
    const query = `INSERT INTO regexp_dictionary_source_table VALUES (3, 1, '(\\d+)/tclwebkit(\\d+[\\.\\d]*)', ['name', 'version', 'comment'], ['Android', '\$1', 'test \$1 and \$2']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1941', () => {
    const query = `INSERT INTO regexp_dictionary_source_table VALUES (1, 0, '(\\d+)/tclwebkit', ['name', 'version'], ['Android', '\$1']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1942', () => {
    const query = `INSERT INTO regexp_dictionary_source_table VALUES (3, 1, '33/tclwebkit', ['name'], ['Android1']); -- child has more priority than parents. INSERT INTO regexp_dictionary_source_table VALUES (2, 0, '33/tclwebkit', ['version', 'comment'], ['13', 'matched 3']); -- larger id has lower priority than small id.
SYSTEM RELOAD dictionary regexp_dict1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1943', () => {
    const query = `insert into \`my_table\` (\`col_date\`, \`col_date32\`, \`col_datetime\`, \`col_datetime32\`, \`col_datetime64\`) values (parseDateTime64BestEffort('1969-01-01'), '1969-01-01', parseDateTime64BestEffort('1969-01-01 10:42:00'), parseDateTime64BestEffort('1969-01-01 10:42:00'), parseDateTime64BestEffort('1969-01-01 10:42:00'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1944', () => {
    const query = `INSERT INTO test_02504 values (1, 1) (2, 2), (3, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1945', () => {
    const query = `INSERT INTO test54378 values ('2018-04-19', '2018-04-19', '2018-04-19');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1946', () => {
    const query = `INSERT INTO test_table SELECT 0, 'Value_0';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1947', () => {
    const query = `INSERT INTO test_table_data VALUES (1, 'Value_1'), (2, 'Value_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1948', () => {
    const query = `insert into 02501_test values(5),(6),(7),(8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1949', () => {
    const query = `INSERT INTO test_table SELECT 0, 0, groupArrayArrayState([toUInt64(1)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1950', () => {
    const query = `INSERT INTO 02500_nested(nes.a, nes.b) VALUES ([1], [2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1951', () => {
    const query = `INSERT INTO 02500_nested(nes.a, nes.b, z) VALUES ([1], [2], 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1952', () => {
    const query = `INSERT INTO 02500_nested(nes) VALUES ([(1, 2)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1953', () => {
    const query = `INSERT INTO 02500_nested(nes, z) VALUES ([(1, 2)], 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1954', () => {
    const query = `INSERT INTO test_table SELECT number, number, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1955', () => {
    const query = `INSERT INTO test_table SELECT number, toString(number) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1956', () => {
    const query = `INSERT INTO test_table VALUES (0, tuple(0));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1957', () => {
    const query = `INSERT INTO test_table VALUES (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1958', () => {
    const query = `INSERT INTO t1 VALUES (1, 1), (2, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1959', () => {
    const query = `INSERT INTO t2 VALUES (2, 2), (3, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1960', () => {
    const query = `INSERT INTO t_source_part_is_intact SELECT number,
if (number % 11 = 0, number, 0)
FROM numbers(2000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1961', () => {
    const query = `insert into fat_granularity select number, toString(number) || '_' from numbers(100000) settings max_block_size = 3000, max_insert_threads = 8, min_insert_block_size_rows = 0, min_insert_block_size_bytes = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1962', () => {
    const query = `INSERT INTO t_s3_events_02496 SELECT number FROM numbers(10) SETTINGS s3_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1963', () => {
    const query = `INSERT INTO t_s3_filter_02495 SELECT number FROM numbers(10) SETTINGS s3_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1964', () => {
    const query = `INSERT INTO tj VALUES (2, -2, 20, 200, 2000, 20000), (3, -3, 30, 300, 3000, 30000), (4, -4, 40, 400, 4000, 40000), (5, -5, 50, 500, 5000, 50000), (6, -6, 60, 600, 6000, 60000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1965', () => {
    const query = `INSERT INTO t1 VALUES (1, -1, 11), (2, -2, 22), (3, -3, 33), (4, -4, 44), (5, -5, 55);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1966', () => {
    const query = `INSERT INTO t VALUES (1, -1, 11, 111, 1111), (2, -2, 22, 222, 2222), (3, -3, 33, 333, 2222), (4, -4, 44, 444, 4444), (5, -5, 55, 555, 5555);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1967', () => {
    const query = `INSERT INTO wikistat1 SELECT toDateTime('2020-10-01 00:00:00'), 'hello', 'world', '/data/path', 10 from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1968', () => {
    const query = `INSERT INTO wikistat1 SELECT toDateTime('2020-10-01 00:00:00'), 'hello', 'world', '/data/path', 10 from numbers(99, 99);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1969', () => {
    const query = `INSERT INTO tbl VALUES (1, 3), (2, 2), (1, 4), (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1970', () => {
    const query = `INSERT INTO t values ('abc') ('def') ('ghi') ('jkl');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1971', () => {
    const query = `INSERT INTO t_cache_sparse SELECT number, number FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1972', () => {
    const query = `INSERT INTO t_cache_sparse SELECT number, 0 FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1973', () => {
    const query = `INSERT INTO db1.tab values(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1974', () => {
    const query = `INSERT INTO db2.tab values(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1975', () => {
    const query = `INSERT INTO eligible_test VALUES('a', 'b'); -- SETTINGS use_query_cache = true; -- SETTINGS rejected as unknown SELECT COUNT(*) FROM system.query_cache;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1976', () => {
    const query = `INSERT INTO eligible_test SELECT * FROM eligible_test SETTINGS use_query_cache = true;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1977', () => {
    const query = `INSERT INTO t SELECT multiIf(n = 0, 'abc', n = 1, 'def', n = 2, 'abc', n = 3, 'jkl', '<unused>') FROM (SELECT number % 4 AS n FROM numbers(1200));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1978', () => {
    const query = `INSERT INTO t (timestamp) VALUES ('2022-11-25 22:33:19'::DateTime), ('2022-11-25 22:33:19'::DateTime - INTERVAL 1 DAY), ('2022-11-25 22:33:19'::DateTime + INTERVAL 1 DAY), ('2022-11-25 22:33:19'::DateTime - INTERVAL 2 DAY), ('2022-11-25 22:33:19'::DateTime + INTERVAL 2 DAY);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1979', () => {
    const query = `INSERT INTO test_table VALUES (0, [[1]], ['1']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1980', () => {
    const query = `insert into t select number from numbers_mt(10000000) settings max_insert_threads=8;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1981', () => {
    const query = `insert into data_02491 values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1982', () => {
    const query = `INSERT INTO test (*) VALUES ('d1', 1, 0), ('d2', 1, 0), ('d6', 1, 0), ('d4', 1, 0), ('d6', 2, 1), ('d3', 1, 0), ('d1', 2, 1), ('d5', 1, 0), ('d4', 2, 1), ('d1', 3, 0), ('d1', 4, 1), ('d4', 3, 0), ('d1', 5, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1983', () => {
    const query = `INSERT INTO test (*) VALUES ('d6', 1, 0), ('d4', 1, 0), ('d6', 2, 1), ('d3', 1, 0), ('d1', 2, 1), ('d5', 1, 0), ('d4', 2, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1984', () => {
    const query = `INSERT INTO test (*) VALUES ('d4', 1, 0), ('d6', 2, 1), ('d3', 1, 0), ('d1', 2, 1), ('d5', 1, 0), ('d4', 2, 1), ('d1', 3, 1), ('d1', 4, 1), ('d4', 3, 0), ('d1', 5, 0), ('d2', 2, 1), ('d2', 3, 0), ('d3', 2, 1), ('d3', 3, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1985', () => {
    const query = `INSERT INTO testCleanupR1 (*) VALUES ('d1', 1, 0),('d2', 1, 0),('d3', 1, 0),('d4', 1, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1986', () => {
    const query = `INSERT INTO testCleanupR1 (*) VALUES ('d3', 2, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1987', () => {
    const query = `INSERT INTO testCleanupR1 (*) VALUES ('d1', 2, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1988', () => {
    const query = `INSERT INTO testSettingsR1 (*) VALUES ('c1', 1, 1),('c2', 1, 0),('c3', 1, 1),('c4', 1, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1989', () => {
    const query = `INSERT INTO test (*) VALUES ('d1', 1, 2); -- { serverError INCORRECT_DATA } DROP TABLE IF EXISTS test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1990', () => {
    const query = `INSERT INTO testMT (*) VALUES ('d1', 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1991', () => {
    const query = `INSERT INTO testSummingMT (*) VALUES ('d1', 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1992', () => {
    const query = `INSERT INTO testAggregatingMT (*) VALUES ('d1', 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1993', () => {
    const query = `INSERT INTO testCollapsingMT (*) VALUES ('d1', 1, 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1994', () => {
    const query = `INSERT INTO testVersionedCMT (*) VALUES ('d1', 1, 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1995', () => {
    const query = `INSERT INTO test_table SELECT number, toString(number), toString(number), toString(number) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1996', () => {
    const query = `insert into rmt select * from numbers(10) settings max_block_size=1, max_insert_threads=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1997', () => {
    const query = `insert into rmt values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1998', () => {
    const query = `insert into rmt1 values (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 1999', () => {
    const query = `insert into rmt3 values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2000', () => {
    const query = `insert into rmt3 values (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2001', () => {
    const query = `insert into rmt3 values (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2002', () => {
    const query = `insert into rmt1 values (1, 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2003', () => {
    const query = `insert into rmt1 values (2, 2, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2004', () => {
    const query = `INSERT INTO 02483_substitute_udf (id, number) VALUES (1, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2005', () => {
    const query = `INSERT INTO 02483_substitute_udf (id, number) VALUES (5, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2006', () => {
    const query = `INSERT INTO 02483_substitute_udf (id, new_number) VALUES (10, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2007', () => {
    const query = `insert into function file(02483_data.LineAsString) select 'Hello' settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2008', () => {
    const query = `insert into test select *, _file, _path from file(02483_data.LineAsString);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2009', () => {
    const query = `INSERT INTO range_key_dictionary_source_table__fuzz_323 FORMAT Values (1, toDate('2019-05-20'), toDate('2019-05-20'), 'First', 'First'); -- { clientError CANNOT_PARSE_INPUT_ASSERTION_FAILED }
CREATE TABLE complex_key_dictionary_source_table__fuzz_267
(
\`id\` Decimal(38, 30),
\`id_key\` Array(UUID),
\`value\` Array(Nullable(DateTime64(3))),
\`value_nullable\` Nullable(UUID)
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2010', () => {
    const query = `INSERT INTO dist_02482 VALUES (1, '1'), (2, '2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2011', () => {
    const query = `INSERT INTO dist_02482 SELECT number, number FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2012', () => {
    const query = `INSERT INTO dist_02482 VALUES (1, '1'),(2, '2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2013', () => {
    const query = `insert into test select 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2014', () => {
    const query = `insert into test select 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2015', () => {
    const query = `insert into test_02481_mismatch_files values (1, 'a'), (22, 'b'), (333, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2016', () => {
    const query = `INSERT INTO test_filter SELECT number, number+1, (number/2 + 1) % 2 FROM numbers(15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2017', () => {
    const query = `INSERT INTO github_events SELECT * FROM gen LIMIT 100000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2018', () => {
    const query = `INSERT INTO github_events VALUES ('apache/pulsar','PullRequestEvent','hangc0276','2021-01-22 06:58:03','opened',9276,'1970-01-01 00:00:00') ('apache/pulsar','PullRequestEvent','hangc0276','2021-01-25 02:38:07','closed',9276,'1970-01-01 00:00:00') ('apache/pulsar','PullRequestEvent','hangc0276','2021-01-25 02:38:09','reopened',9276,'1970-01-01 00:00:00') ('apache/pulsar','PullRequestEvent','hangc0276','2021-04-22 06:05:09','closed',9276,'2021-04-22 06:05:08') ('apache/pulsar','IssueCommentEvent','hangc0276','2021-01-23 00:32:09','created',9276,'1970-01-01 00:00:00') ('apache/pulsar','IssueCommentEvent','hangc0276','2021-01-23 02:52:11','created',9276,'1970-01-01 00:00:00') ('apache/pulsar','IssueCommentEvent','hangc0276','2021-01-24 03:02:31','created',9276,'1970-01-01 00:00:00') ('apache/pulsar','IssueCommentEvent','hangc0276','2021-01-25 02:16:42','created',9276,'1970-01-01 00:00:00') ('apache/pulsar','IssueCommentEvent','hangc0276','2021-01-26 06:52:42','created',9276,'1970-01-01 00:00:00') ('apache/pulsar','IssueCommentEvent','hangc0276','2021-01-27 01:10:33','created',9276,'1970-01-01 00:00:00') ('apache/pulsar','IssueCommentEvent','hangc0276','2021-01-29 02:11:41','created',9276,'1970-01-01 00:00:00') ('apache/pulsar','IssueCommentEvent','hangc0276','2021-02-02 07:35:40','created',9276,'1970-01-01 00:00:00') ('apache/pulsar','IssueCommentEvent','hangc0276','2021-02-03 00:44:26','created',9276,'1970-01-01 00:00:00') ('apache/pulsar','IssueCommentEvent','hangc0276','2021-02-03 02:14:26','created',9276,'1970-01-01 00:00:00') ('apache/pulsar','PullRequestReviewEvent','codelipenghui','2021-03-29 14:31:25','created',9276,'1970-01-01 00:00:00') ('apache/pulsar','PullRequestReviewEvent','eolivelli','2021-03-29 16:34:02','created',9276,'1970-01-01 00:00:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2019', () => {
    const query = `INSERT INTO 02481_mergetree SELECT number, number + 1, [1,2] FROM system.numbers LIMIT 100000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2020', () => {
    const query = `INSERT INTO test_rlp SELECT number, number FROM numbers(15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2021', () => {
    const query = `INSERT INTO arrays_test VALUES ('Hello', [1,2], map(1, '1', 2, '2'), map(1, '1')), ('World', [3,4,5], map(3, '3', 4, '4', 5, '5'), map(3, '3', 4, '4')), ('Goodbye', [], map(), map());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2022', () => {
    const query = `INSERT INTO test_table_join_1 VALUES (0, 'Value_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2023', () => {
    const query = `INSERT INTO test_table_join_2 VALUES (0, 'Value_1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2024', () => {
    const query = `insert into tab select 0, number % 3, 2 - intDiv(number, 3), (number % 3 + 1) * 10 from numbers(6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2025', () => {
    const query = `insert into tab select 0, number % 3, 2 - intDiv(number, 3), (number % 3 + 1) * 100 from numbers(6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2026', () => {
    const query = `insert into test values (nan);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2027', () => {
    const query = `insert into test_02480_support_wildcard_write values (1, 'a'), (22, 'b'), (333, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2028', () => {
    const query = `insert into test_02480_support_wildcard_write2 values (4, 'd'), (55, 'f'), (666, 'g');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2029', () => {
    const query = `insert into test_table values ('a', 'b'), ('a', null), (null, 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2030', () => {
    const query = `INSERT INTO dm_metric_small2 VALUES (1,1,NULL) (1,1,1) (1,2,0) (1,2,1) (1,2,NULL) (1,2,NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2031', () => {
    const query = `INSERT INTO foo VALUES (1, 'one', -1, 'een'), (2, 'two', -2, 'twee'), (3, 'three', -3, 'drie'), (4, 'four', -4, 'vier'), (5, 'five', -5, 'vijf');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2032', () => {
    const query = `INSERT INTO lc_00906__fuzz_46 SELECT '0123456789' FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2033', () => {
    const query = `INSERT INTO testing SELECT number, number, number, number, number%2 FROM numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2034', () => {
    const query = `INSERT INTO testing SELECT randomString(5), randomString(5), randomString(5), randomString(5) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2035', () => {
    const query = `INSERT into argmaxstate_hex_small VALUES ('22.8.5.29','0B0000003031323334353637383900010000000000000000'), ('22.8.6.71','0A00000030313233343536373839010000000000000000');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2036', () => {
    const query = `INSERT into argmaxstate_hex_large VALUES ('22.8.5.29','350000004142434445464748494A4B4C4D4E4F505152535455565758595A6162636465666768696A6B6C6D6E6F707172737475767778797A00010000000000000000'), ('22.8.6.71','340000004142434445464748494A4B4C4D4E4F505152535455565758595A6162636465666768696A6B6C6D6E6F707172737475767778797A010000000000000000');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2037', () => {
    const query = `INSERT into argmaxstate_hex_empty VALUES ('22.8.5.29','0100000000010000000000000000'), ('22.8.6.71','00000000010000000000000000');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2038', () => {
    const query = `insert into aggr select 1, maxState('');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2039', () => {
    const query = `insert into aggr select 2, maxState('\\0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2040', () => {
    const query = `insert into aggr select 3, maxState('\\0\\0\\0\\0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2041', () => {
    const query = `insert into aggr select 4, maxState('abrac\\0dabra\\0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2042', () => {
    const query = `insert into t (c1, c18) select number, -number from numbers(500000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2043', () => {
    const query = `INSERT INTO fuse_tbl SELECT number, number + 1 FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2044', () => {
    const query = `insert into test_rows_compact_part__fuzz_11 select 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2045', () => {
    const query = `INSERT INTO test_table VALUES (0, 'Value_0', [1,2,3]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2046', () => {
    const query = `INSERT INTO 02476_query_parameters_insert VALUES ({x: Int32});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2047', () => {
    const query = `INSERT INTO fuse_tbl VALUES (1, 1), (2, 2), (NULL, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2048', () => {
    const query = `INSERT INTO tab1 SELECT number, number, 1 from numbers(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2049', () => {
    const query = `INSERT INTO tab2 SELECT number + 2, number + 2 from numbers(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2050', () => {
    const query = `insert into unhex_in_fix_string_table values(today(), '436C69636B486F757365', '436C69636B486F757365');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2051', () => {
    const query = `INSERT INTO prewhere_int128 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2052', () => {
    const query = `INSERT INTO prewhere_int256 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2053', () => {
    const query = `INSERT INTO prewhere_uint128 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2054', () => {
    const query = `INSERT INTO prewhere_uint256 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2055', () => {
    const query = `INSERT INTO tdm__fuzz_23 FORMAT Values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2056', () => {
    const query = `insert into alias_2__fuzz_25 (dt, col, col2, col3) values ('2020-02-01', 1, 2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2057', () => {
    const query = `INSERT INTO bloom_filter_nullable_index__fuzz_0 VALUES (1, 'test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2058', () => {
    const query = `INSERT INTO bloom_filter_nullable_index__fuzz_0 VALUES (2, 'test2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2059', () => {
    const query = `INSERT INTO nullable_string_value__fuzz_2 VALUES ('test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2060', () => {
    const query = `INSERT INTO t_max_rows_to_read SELECT number FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2061', () => {
    const query = `INSERT INTO series__fuzz_35(i, x_value, y_value) VALUES (1, 5.6,-4.4),(2, -9.6,3),(3, -1.3,-4),(4, 5.3,9.7),(5, 4.4,0.037),(6, -8.6,-7.8),(7, 5.1,9.3),(8, 7.9,-3.6),(9, -8.2,0.62),(10, -3,7.3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2062', () => {
    const query = `INSERT INTO mt_match_pk VALUES ('a'), ('aaa'), ('aba'), ('bac'), ('acccca');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2063', () => {
    const query = `INSERT INTO welch_ttest__fuzz_7 VALUES (0.010268, 0), (0.000167, 0), (0.000167, 0), (0.159258, 1), (0.136278, 1), (0.122389, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2064', () => {
    const query = `insert into tab select number from numbers(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2065', () => {
    const query = `insert into tab select toDateTime('2022-02-02') + number from numbers(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2066', () => {
    const query = `INSERT INTO t1__fuzz_13 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2067', () => {
    const query = `INSERT INTO t2__fuzz_47 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2068', () => {
    const query = `insert into src values(1, 'one', 'test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2069', () => {
    const query = `insert into src values('one', 'one', 'test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2070', () => {
    const query = `INSERT INTO row_level_policy_prewhere(y, x) VALUES ('A',1), ('B',2), ('C',3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2071', () => {
    const query = `INSERT INTO mytable VALUES (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2072', () => {
    const query = `INSERT INTO mytable VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2073', () => {
    const query = `INSERT INTO mytable VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2074', () => {
    const query = `INSERT INTO mytable VALUES (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2075', () => {
    const query = `INSERT INTO mytable VALUES (4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2076', () => {
    const query = `INSERT INTO mytable VALUES (5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2077', () => {
    const query = `INSERT INTO mytable VALUES (6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2078', () => {
    const query = `INSERT INTO mytable VALUES (7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2079', () => {
    const query = `INSERT INTO mytable VALUES (8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2080', () => {
    const query = `INSERT INTO mytable VALUES (9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2081', () => {
    const query = `insert into queue values ('2019-05-01', 'test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2082', () => {
    const query = `INSERT INTO group_by_pk_lc_uint128 SELECT number / 100, number FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2083', () => {
    const query = `INSERT INTO group_by_pk_lc_uint256 SELECT number / 100, number FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2084', () => {
    const query = `insert into group_by_all values ('abc1', 1, 1), ('abc2', 1, 1), ('abc3', 1, 1), ('abc4', 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2085', () => {
    const query = `insert into function file(02458_data.jsonl) select NULL as x, 42 as y settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2086', () => {
    const query = `insert into function file(02458_data.jsoncompacteachrow) select NULL as x, 42 as y settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2087', () => {
    const query = `insert into test select * from file(02458_data.jsonl);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2088', () => {
    const query = `insert into test select x, 1 from file(02458_data.jsonl);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2089', () => {
    const query = `insert into test select x, y from file(02458_data.jsonl);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2090', () => {
    const query = `insert into test select x + 1, y from file(02458_data.jsonl); -- {serverError CANNOT_EXTRACT_TABLE_STRUCTURE} insert into test select x, z from file(02458_data.jsonl);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2091', () => {
    const query = `insert into test select * from file(02458_data.jsoncompacteachrow);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2092', () => {
    const query = `insert into test select x, 1 from file(02458_data.jsoncompacteachrow); -- {serverError CANNOT_EXTRACT_TABLE_STRUCTURE} insert into test select x, y from file(02458_data.jsoncompacteachrow); -- {serverError CANNOT_EXTRACT_TABLE_STRUCTURE}
insert into test select x + 1, y from file(02458_data.jsoncompacteachrow); -- {serverError CANNOT_EXTRACT_TABLE_STRUCTURE}
insert into test select x, z from file(02458_data.jsoncompacteachrow); -- {serverError CANNOT_EXTRACT_TABLE_STRUCTURE}
insert into test select * from input() format CSV 1,2
insert into test select x, y from input() format CSV 1,2 -- {serverError CANNOT_EXTRACT_TABLE_STRUCTURE}
insert into test select x, y from input() format JSONEachRow {"x" : null, "y" : 42};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2093', () => {
    const query = `insert into test select x from file(02458_data.jsonl);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2094', () => {
    const query = `insert into test select y from file(02458_data.jsonl);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2095', () => {
    const query = `insert into test select y as x from file(02458_data.jsonl);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2096', () => {
    const query = `insert into test select c1 from input() format CSV 1,2; -- {serverError CANNOT_EXTRACT_TABLE_STRUCTURE} insert into test select x from input() format JSONEachRow {"x" : null, "y" : 42};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2097', () => {
    const query = `INSERT INTO test VALUES (1, 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2098', () => {
    const query = `INSERT INTO test VALUES (2, 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2099', () => {
    const query = `INSERT INTO test VALUES (3, 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2100', () => {
    const query = `INSERT INTO test VALUES (4, 'a'); -- { serverError TOO_MANY_PARTS } ALTER TABLE test MODIFY SETTING max_avg_part_size_for_too_many_parts = '1M';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2101', () => {
    const query = `INSERT INTO test VALUES (5, 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2102', () => {
    const query = `INSERT INTO test VALUES (6, 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2103', () => {
    const query = `INSERT INTO test VALUES (7, 'a'); -- { serverError TOO_MANY_PARTS } SYSTEM START MERGES test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2104', () => {
    const query = `INSERT INTO test SELECT number, randomString(1000) FROM numbers(0, 10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2105', () => {
    const query = `INSERT INTO test SELECT number, randomString(1000) FROM numbers(10000, 10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2106', () => {
    const query = `INSERT INTO test SELECT number, randomString(1000) FROM numbers(20000, 10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2107', () => {
    const query = `INSERT INTO data (str) SELECT 'aa' FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2108', () => {
    const query = `INSERT INTO data (str) SELECT 'ba' FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2109', () => {
    const query = `INSERT INTO data (str) SELECT 'ca' FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2110', () => {
    const query = `insert into table function hdfs('hdfs://localhost:12222/test_02458_1.tsv', 'TSV', 'column1 UInt32, column2 UInt32, column3 UInt32') select 1, 2, 3 settings hdfs_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2111', () => {
    const query = `insert into table function hdfs('hdfs://localhost:12222/test_02458_2.tsv', 'TSV', 'column1 UInt32, column2 UInt32, column3 UInt32') select 4, 5, 6 settings hdfs_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2112', () => {
    const query = `insert into morton_numbers_mask_02457 select n1.number, n2.number, n3.number, n4.number
from           numbers(256-16, 16) n1
cross join numbers(256-16, 16) n2
cross join numbers(256-16, 16) n3
cross join numbers(256-16, 16) n4
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2113', () => {
    const query = `insert into morton_numbers_mask_1_02457 select untuple(mortonDecode((1,2,1,2), mortonEncode((1,2,1,2), n1, n2, n3, n4)))
from morton_numbers_mask_02457;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2114', () => {
    const query = `insert into morton_numbers_mask_02457 select n1.number, n2.number
from           numbers(pow(2, 32)-64, 64) n1
cross join numbers(pow(2, 8)-64, 64) n2
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2115', () => {
    const query = `insert into morton_numbers_mask_2_02457 select untuple(mortonDecode((1,4), mortonEncode((1,4), n1, n2)))
from morton_numbers_mask_02457;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2116', () => {
    const query = `insert into morton_numbers_mask_02457 select n1.number, n2.number, n3.number
from           numbers(pow(2, 16)-64, 64) n1
cross join numbers(pow(2, 16)-64, 64) n2
cross join numbers(pow(2, 8)-64, 64) n3
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2117', () => {
    const query = `insert into morton_numbers_mask_3_02457 select untuple(mortonDecode((1,1,2), mortonEncode((1,1,2), n1, n2, n3)))
from morton_numbers_mask_02457;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2118', () => {
    const query = `insert into morton_numbers_02457 select n1.number, n2.number, n3.number, n4.number, n5.number, n6.number, n7.number, n8.number
from numbers(256-4, 4) n1
cross join numbers(256-4, 4) n2
cross join numbers(256-4, 4) n3
cross join numbers(256-4, 4) n4
cross join numbers(256-4, 4) n5
cross join numbers(256-4, 4) n6
cross join numbers(256-4, 4) n7
cross join numbers(256-4, 4) n8
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2119', () => {
    const query = `insert into morton_numbers_1_02457 select untuple(mortonDecode(8, mortonEncode(n1, n2, n3, n4, n5, n6, n7, n8)))
from morton_numbers_02457;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2120', () => {
    const query = `insert into morton_numbers_02457 select n1.number, n2.number, n3.number, n4.number, 0, 0, 0, 0
from numbers(pow(2, 16)-8,8) n1
cross join numbers(pow(2, 16)-8, 8) n2
cross join numbers(pow(2, 16)-8, 8) n3
cross join numbers(pow(2, 16)-8, 8) n4
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2121', () => {
    const query = `insert into morton_numbers_2_02457 select untuple(mortonDecode(4, mortonEncode(n1, n2, n3, n4)))
from morton_numbers_02457;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2122', () => {
    const query = `insert into morton_numbers_02457 select n1.number, n2.number, 0, 0, 0, 0, 0, 0
from numbers(pow(2, 32)-8,8) n1
cross join numbers(pow(2, 32)-8, 8) n2
cross join numbers(pow(2, 32)-8, 8) n3
cross join numbers(pow(2, 32)-8, 8) n4
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2123', () => {
    const query = `insert into morton_numbers_3_02457 select untuple(mortonDecode(2, mortonEncode(n1, n2)))
from morton_numbers_02457;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2124', () => {
    const query = `insert into test values ('printer1', '2006-02-07 06:28:15');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2125', () => {
    const query = `INSERT INTO mutation_1 VALUES (1, 'Hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2126', () => {
    const query = `INSERT INTO t_summing_lc VALUES (1, 1, '2020-01-01'), (2, 1, '2020-01-02'), (1, 5, '2020-01-01'), (2, 5, '2020-01-02');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2127', () => {
    const query = `INSERT INTO keeper_retries_r1 SETTINGS insert_keeper_fault_injection_probability=0 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2128', () => {
    const query = `INSERT INTO keeper_retries_r1 SETTINGS insert_keeper_fault_injection_probability=1, insert_keeper_max_retries=0 VALUES (2); -- { serverError KEEPER_EXCEPTION } INSERT INTO keeper_retries_r1 SETTINGS insert_keeper_fault_injection_probability=1, insert_keeper_retry_max_backoff_ms=10 VALUES (3); -- { serverError KEEPER_EXCEPTION }
SET insert_quorum=2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2129', () => {
    const query = `INSERT INTO keeper_retries_r1 SETTINGS insert_keeper_fault_injection_probability=0 VALUES (11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2130', () => {
    const query = `INSERT INTO keeper_retries_r1 SETTINGS insert_keeper_fault_injection_probability=1, insert_keeper_max_retries=0 VALUES (12); -- { serverError KEEPER_EXCEPTION } INSERT INTO keeper_retries_r1 SETTINGS insert_keeper_fault_injection_probability=1, insert_keeper_retry_max_backoff_ms=1 VALUES (13); -- { serverError KEEPER_EXCEPTION }
SELECT * FROM keeper_retries_r1 order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2131', () => {
    const query = `INSERT INTO t1 values(1, '1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2132', () => {
    const query = `INSERT INTO test_a SELECT number%10 as id, number%2 as company, count() as total FROM numbers(100) GROUP BY id,company;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2133', () => {
    const query = `INSERT INTO test_fixed_string_nested_json (data) VALUES ('{"a" : {"b" : {"c" : 1, "d" : "str"}}}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2134', () => {
    const query = `insert into a values (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2135', () => {
    const query = `insert into function file(02454_data.jsonobjecteachrow) select number, concat('name_', toString(number)) as name from numbers(3) settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2136', () => {
    const query = `insert into t_row_exists values(1,1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2137', () => {
    const query = `insert into cc  values (2, 'World');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2138', () => {
    const query = `insert into function file(02453_data.jsonl, TSV) select 1 settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2139', () => {
    const query = `INSERT INTO test_low_cardinality_string (data) VALUES ('{"a": "hi", "b": "hello", "c": "hola", "d": "see you, bye, bye"}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2140', () => {
    const query = `INSERT INTO test_low_cardinality_int (data) VALUES ('{"a": 11, "b": 2222, "c": 33333333, "d": 4444444444444444}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2141', () => {
    const query = `INSERT INTO test_low_cardinality_uuid (data) VALUES ('{"a": "2d49dc6e-ddce-4cd0-afb8-790956df54c4", "b": "2d49dc6e-ddce-4cd0-afb8-790956df54c3", "c": "2d49dc6e-ddce-4cd0-afb8-790956df54c1", "d": "2d49dc6e-ddce-4cd0-afb8-790956df54c1"}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2142', () => {
    const query = `INSERT INTO view VALUES (1, 'v');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2143', () => {
    const query = `insert into rmt1 values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2144', () => {
    const query = `insert into rmt2 values (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2145', () => {
    const query = `insert into rmt2 values (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2146', () => {
    const query = `insert into rmt2 values (4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2147', () => {
    const query = `insert into rmt2 values (5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2148', () => {
    const query = `insert into rmt2 values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2149', () => {
    const query = `insert into rmt1 values (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2150', () => {
    const query = `insert into rmt1 values (4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2151', () => {
    const query = `insert into rmt1 values (5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2152', () => {
    const query = `insert into rmt1 values (123);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2153', () => {
    const query = `insert into rmt2 values (20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2154', () => {
    const query = `insert into rmt2 values (30);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2155', () => {
    const query = `insert into rmt2 values (40);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2156', () => {
    const query = `insert into rmt2 values (50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2157', () => {
    const query = `insert into rmt1 values (100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2158', () => {
    const query = `insert into rmt2 values (100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2159', () => {
    const query = `insert into rmt1 values (200);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2160', () => {
    const query = `insert into rmt2 values (200);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2161', () => {
    const query = `insert into rmt2 values (300);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2162', () => {
    const query = `insert into rmt2 values (500);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2163', () => {
    const query = `insert into rmt2 values (600);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2164', () => {
    const query = `insert into rmt1 values(1, 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2165', () => {
    const query = `insert into rmt2 values(2, 2, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2166', () => {
    const query = `insert into rmt1 values(3, 3, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2167', () => {
    const query = `insert into rmt2 values(4, 4, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2168', () => {
    const query = `insert into rmt1 values(5, 5, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2169', () => {
    const query = `insert into t1_r1 select * from generateRandom('x Int32') LIMIT 10013;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2170', () => {
    const query = `insert into mut values (1, 2, 3), (10, 20, 30);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2171', () => {
    const query = `insert into mut values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2172', () => {
    const query = `insert into tmp select * from numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2173', () => {
    const query = `insert into rmt select number, number from numbers(50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2174', () => {
    const query = `insert into rmt values (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2175', () => {
    const query = `insert into rmt values (1, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2176', () => {
    const query = `insert into rmt values (1, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2177', () => {
    const query = `insert into rmt values (1, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2178', () => {
    const query = `insert into rmt values (1, 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2179', () => {
    const query = `insert into rmt values (1, 7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2180', () => {
    const query = `insert into rmt values (1, 8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2181', () => {
    const query = `insert into rmt values (1, 9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2182', () => {
    const query = `insert into mt values (1, '');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2183', () => {
    const query = `INSERT INTO id_join values ('CLICK', [1234]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2184', () => {
    const query = `insert into rmt(n, m) values (1, 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2185', () => {
    const query = `insert into rmt(n, m) values (2, 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2186', () => {
    const query = `insert into rmt(n, m) values (3, 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2187', () => {
    const query = `insert into rmt(n, m) values (4, 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2188', () => {
    const query = `insert into rmt(n, m) values (5, 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2189', () => {
    const query = `insert into rmt(n, m) values (6, 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2190', () => {
    const query = `insert into rmt(n, m) values (7, 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2191', () => {
    const query = `insert into rmt(n, m) values (8, 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2192', () => {
    const query = `insert into rmt(n, m) values (9, 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2193', () => {
    const query = `insert into rmt(n, m) values (0, 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2194', () => {
    const query = `insert into rmt(n) values (10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2195', () => {
    const query = `insert into partial_sort_opt_bug select number + 100000 from numbers(4000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2196', () => {
    const query = `insert into partial_sort_opt_bug select number from numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2197', () => {
    const query = `insert into partial_sort_opt_bug select number + 200000 from numbers(3000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2198', () => {
    const query = `insert into partial_sort_opt_bug select number + 1000 from numbers(4000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2199', () => {
    const query = `insert into test select number, number, '2022-01-01 00:00:00' from numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2200', () => {
    const query = `insert into test_null_filter select number, number from numbers(10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2201', () => {
    const query = `insert into test select number, toString(number) from numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2202', () => {
    const query = `INSERT INTO decimal_in_float_test VALUES ('33', '44.44');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2203', () => {
    const query = `insert into test select uniqState(number) as x, number as y from numbers(10) group by number order by x, y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2204', () => {
    const query = `INSERT INTO mutate_and_zero_copy_replication1 VALUES (1, '1', 1.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2205', () => {
    const query = `insert into function file(02422_data.msgpack) select toUUID('f4cdd80d-5d15-4bdc-9527-adcca635ec1f') as uuid settings output_format_msgpack_uuid_representation='ext';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2206', () => {
    const query = `INSERT INTO table_one SELECT intDiv(number, 10), number   FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2207', () => {
    const query = `insert into function file(02421_data.jsonl) select '42.42' as d settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2208', () => {
    const query = `INSERT INTO dtest VALUES ('33', '44.4', '35');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2209', () => {
    const query = `insert into tba select number%500, 20220822 from numbers(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2210', () => {
    const query = `insert into replacing_mt values ('abc');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2211', () => {
    const query = `insert into lhs values ('abc');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2212', () => {
    const query = `insert into rhs values ('abc');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2213', () => {
    const query = `insert into regular_mt_table values ('abc');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2214', () => {
    const query = `insert into left_table values (1,'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2215', () => {
    const query = `insert into left_table values (1,'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2216', () => {
    const query = `insert into left_table values (1,'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2217', () => {
    const query = `insert into middle_table values (1,'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2218', () => {
    const query = `insert into middle_table values (1,'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2219', () => {
    const query = `insert into right_table values (1,'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2220', () => {
    const query = `insert into right_table values (1,'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2221', () => {
    const query = `insert into right_table values (1,'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2222', () => {
    const query = `insert into table_to_merge_a values (1,'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2223', () => {
    const query = `insert into table_to_merge_a values (1,'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2224', () => {
    const query = `insert into table_to_merge_a values (1,'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2225', () => {
    const query = `insert into table_to_merge_b values (2,'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2226', () => {
    const query = `insert into table_to_merge_b values (2,'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2227', () => {
    const query = `insert into table_to_merge_c values (3,'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2228', () => {
    const query = `insert into table_to_merge_c values (3,'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2229', () => {
    const query = `insert into table_to_merge_c values (3,'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2230', () => {
    const query = `insert into right_table_local values (1,'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2231', () => {
    const query = `insert into right_table_local values (1,'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2232', () => {
    const query = `insert into right_table_local values (1,'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2233', () => {
    const query = `INSERT INTO constCondOptimization (n) SELECT number FROM system.numbers LIMIT 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2234', () => {
    const query = `INSERT INTO 02418_test VALUES (1, 1.1), (2, 2.2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2235', () => {
    const query = `INSERT INTO 02418_test VALUES (3, 3.3), (4, 4.4); -- { serverError LIMIT_EXCEEDED } INSERT INTO 02418_test VALUES (1, 2.1), (2, 3.2), (3, 3.3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2236', () => {
    const query = `INSERT INTO 02418_test VALUES (4, 4.4); -- { serverError LIMIT_EXCEEDED } INSERT INTO 02418_test_another VALUES (4, 4.4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2237', () => {
    const query = `INSERT INTO 02418_test VALUES (1, 1.1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2238', () => {
    const query = `INSERT INTO 02418_test VALUES (2, 1.1); -- { serverError LIMIT_EXCEEDED } SELECT count() FROM 02418_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2239', () => {
    const query = `insert into test select uniqStateMap(map(1, number)) from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2240', () => {
    const query = `insert into test select uniqStateForEachMapForEachMap(map(1, [map(1, [number, number])])) from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2241', () => {
    const query = `insert into test select uniqStateForEachResample(30, 75, 30)([number, number + 1], 30) from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2242', () => {
    const query = `insert into test select uniqStateMapForEachResample(30, 75, 30)([map(1, number)], 30) from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2243', () => {
    const query = `INSERT INTO 02417_test VALUES (1, 11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2244', () => {
    const query = `INSERT INTO 02417_test_another VALUES (2, 22);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2245', () => {
    const query = `insert into function file(02417_data.jsonObjectEachRow) select number, 'Hello' as str, range(number) as arr from numbers(3) settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2246', () => {
    const query = `insert into tbl values ('123', 123);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2247', () => {
    const query = `INSERT INTO 02416_rocksdb VALUES (1, 'Some string', 0), (2, 'Some other string', 0), (3, 'random', 0), (4, 'random2', 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2248', () => {
    const query = `INSERT INTO 02416_rocksdb VALUES (1, 'String', 10), (2, 'String', 20), (3, 'String', 30), (4, 'String', 40);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2249', () => {
    const query = `INSERT INTO 02416_test SELECT '1_1', number FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2250', () => {
    const query = `INSERT INTO 02416_test SELECT concat(toString(number), '_1'), number FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2251', () => {
    const query = `INSERT INTO 02416_test SELECT number % 77 AS k, SUM(number) AS value, (1, 1.2), bitmapBuild(groupArray(number)) FROM numbers(10000) group by k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2252', () => {
    const query = `INSERT INTO 02416_test_memory SELECT number % 77 AS k, SUM(number) AS value, (1, 1.2), bitmapBuild(groupArray(number)) FROM numbers(10000) group by k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2253', () => {
    const query = `insert into function file(02416_data.json) select number::UInt32 as n, 'Hello' as s, range(number) as a from numbers(3) settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2254', () => {
    const query = `insert into function file(02416_data.jsonCompact) select number::UInt32 as n, 'Hello' as s, range(number) as a from numbers(3) settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2255', () => {
    const query = `insert into function file(02416_data.jsonColumnsWithMetadata) select number::UInt32 as n, 'Hello' as s, range(number) as a from numbers(3) settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2256', () => {
    const query = `INSERT INTO set_crash VALUES (-1, 1, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2257', () => {
    const query = `INSERT INTO test02416 SELECT number % 2 as a, number as b FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2258', () => {
    const query = `insert into src1 values(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2259', () => {
    const query = `insert into src2 values(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2260', () => {
    const query = `INSERT INTO data_02411 SELECT * FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2261', () => {
    const query = `INSERT INTO t2 VALUES (1, 'a'), (2, 'b'), (2, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2262', () => {
    const query = `INSERT INTO t2 VALUES (3, 'd'), (3, 'e'), (4, 'f');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2263', () => {
    const query = `insert into function file(02405_data.avro) select [(1, 'aa'), (2, 'bb')]::Nested(x UInt32, y String) as nested settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2264', () => {
    const query = `insert into function file(02405_data.avro) select [(1, (2, ['aa', 'bb']), [(3, 'cc'), (4, 'dd')]), (5, (6, ['ee', 'ff']), [(7, 'gg'), (8, 'hh')])]::Nested(x UInt32, y Tuple(y1 UInt32, y2 Array(String)), z Nested(z1 UInt32, z2 String)) as nested settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2265', () => {
    const query = `insert into t select number, number from numbers_mt(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2266', () => {
    const query = `insert into t_different_dbs select number % 1000, number % 1000 from numbers_mt(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2267', () => {
    const query = `insert into shard_1.t_different_dbs select number % 1000, number % 1000 from numbers_mt(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2268', () => {
    const query = `insert into pr_t select number % 1000, number % 1000 from numbers_mt(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2269', () => {
    const query = `INSERT INTO lwd_test SELECT number AS id, toString(number) AS value FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2270', () => {
    const query = `INSERT INTO lwd_test SELECT number AS id, toString(number+100) AS value FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2271', () => {
    const query = `INSERT INTO lwd_test SELECT number AS id, toString(number+200) AS value FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2272', () => {
    const query = `INSERT INTO ttl_table VALUES(toDate('2020-10-01'), 144);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2273', () => {
    const query = `INSERT INTO m0 SELECT number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2274', () => {
    const query = `INSERT INTO m1 SELECT number, 'boo' FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2275', () => {
    const query = `INSERT INTO test_inserts SELECT sleep(1), number FROM numbers(10) SETTINGS max_insert_delayed_streams_for_parallel_write = 100, max_insert_block_size = 1, min_insert_block_size_rows = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2276', () => {
    const query = `insert into local_t_l5ydey values (1, 2, 3, '4');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2277', () => {
    const query = `insert into t_l5ydey values (5, 6, 7, '8');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2278', () => {
    const query = `insert into mt values (1, 1), (2, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2279', () => {
    const query = `insert into mt values (1, 2), (2, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2280', () => {
    const query = `INSERT INTO test FORMAT JSONEachRow {"i": 123, "d": "2022-05-03"};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2281', () => {
    const query = `INSERT INTO test FORMAT JSONEachRow {"i": 456, "d": "2022-05-03 01:02:03"};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2282', () => {
    const query = `INSERT INTO userid_set VALUES (1, 'Mary'),(2, 'Jane'),(3, 'Mary'),(4, 'Jack');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2283', () => {
    const query = `INSERT INTO userid_test VALUES (1, 'Jack'),(2, 'Mary'),(3, 'Mary'),(4, 'John'),(5, 'Mary');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2284', () => {
    const query = `INSERT INTO userid_set2 values (1,'John', '1990-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2285', () => {
    const query = `INSERT INTO t SELECT value FROM system.events WHERE event = 'OverflowBreak';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2286', () => {
    const query = `INSERT INTO t SELECT value FROM system.events WHERE event = 'OverflowThrow';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2287', () => {
    const query = `INSERT INTO t SELECT value FROM system.events WHERE event = 'OverflowAny';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2288', () => {
    const query = `insert into function file(02384_data.arrow) select toLowCardinality(toNullable('abc')) as lc settings output_format_arrow_low_cardinality_as_dictionary=1, output_format_arrow_string_as_string=0, engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2289', () => {
    const query = `insert into function file(02384_data.arrow) select toLowCardinality(toNullable('abc')) as lc settings output_format_arrow_low_cardinality_as_dictionary=1, output_format_arrow_string_as_string=1, engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2290', () => {
    const query = `INSERT INTO test_table_join VALUES (0, 'Value');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2291', () => {
    const query = `INSERT INTO test_table_join_1 VALUES (0, 'Join_1_Value_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2292', () => {
    const query = `INSERT INTO test_table_join_1 VALUES (1, 'Join_1_Value_1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2293', () => {
    const query = `INSERT INTO test_table_join_1 VALUES (2, 'Join_1_Value_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2294', () => {
    const query = `INSERT INTO test_table_join_2 VALUES (0, 'Join_2_Value_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2295', () => {
    const query = `INSERT INTO test_table_join_2 VALUES (1, 'Join_2_Value_1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2296', () => {
    const query = `INSERT INTO test_table_join_2 VALUES (3, 'Join_2_Value_3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2297', () => {
    const query = `INSERT INTO test_table_join_3 VALUES (0, 'Join_3_Value_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2298', () => {
    const query = `INSERT INTO test_table_join_3 VALUES (1, 'Join_3_Value_1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2299', () => {
    const query = `INSERT INTO test_table_join_3 VALUES (4, 'Join_3_Value_4');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2300', () => {
    const query = `INSERT INTO t_parse_tuples VALUES (1, [[]]), (2, [[(500, -10)]]), (3, [[(500, '10')]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2301', () => {
    const query = `insert into test_02381 select number, number * 10 from system.numbers limit 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2302', () => {
    const query = `insert into test_02381_compress select number, number * 10 from system.numbers limit 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2303', () => {
    const query = `insert into test_02381_compact values (1, 'Hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2304', () => {
    const query = `insert into test_02381_compact values (2, 'World');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2305', () => {
    const query = `INSERT INTO test_table_join_1 VALUES (0, 1), (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2306', () => {
    const query = `INSERT INTO test_table_join_1 VALUES (0, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2307', () => {
    const query = `INSERT INTO test_table_join_2 VALUES (0, 1), (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2308', () => {
    const query = `INSERT INTO test_table_join_2 VALUES (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2309', () => {
    const query = `INSERT INTO test_table_join_1 VALUES (0, 'Value'), (1, 'Value_1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2310', () => {
    const query = `INSERT INTO test_table_join_2 VALUES (0, 'Value'), (1, 'Value_1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2311', () => {
    const query = `INSERT INTO part_log_profile_events_r1 SELECT number FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2312', () => {
    const query = `INSERT INTO test_table_compound VALUES (0, tuple(0, 'Value'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2313', () => {
    const query = `INSERT INTO test_table_join_1 VALUES (0, 'Join_1_Value', 'Join_1_Value');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2314', () => {
    const query = `INSERT INTO test_table_join_2 VALUES (0, 'Join_2_Value', 'Join_2_Value');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2315', () => {
    const query = `INSERT INTO test_table_join_3 VALUES (0, 'Join_3_Value', 'Join_3_Value');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2316', () => {
    const query = `INSERT INTO optimize_sorting VALUES(0, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2317', () => {
    const query = `INSERT INTO optimize_sorting VALUES(0xFFFFffffFFFFffff, 0xFFFFffffFFFFffff);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2318', () => {
    const query = `INSERT INTO optimize_sorting SELECT number, number%5, number%2 from numbers(0, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2319', () => {
    const query = `INSERT INTO optimize_sorting SELECT number, number%5, number%2 from numbers(5, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2320', () => {
    const query = `INSERT INTO t_nested_modify VALUES (1, [2], ['aa']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2321', () => {
    const query = `INSERT INTO t_nested_modify VALUES (2, [44, 55], ['bb', 'cc']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2322', () => {
    const query = `INSERT INTO t_modify_from_lc_1 SELECT number, number FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2323', () => {
    const query = `INSERT INTO t_modify_from_lc_2 SELECT number, number FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2324', () => {
    const query = `INSERT INTO quorum1 VALUES (1, '2018-11-15');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2325', () => {
    const query = `INSERT INTO quorum1 VALUES (2, '2018-11-15');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2326', () => {
    const query = `INSERT INTO quorum1 VALUES (3, '2018-12-16');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2327', () => {
    const query = `INSERT INTO quorum1 VALUES (2, '2018-11-15'); -- { serverError UNKNOWN_STATUS_OF_INSERT } SELECT x FROM quorum1 ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2328', () => {
    const query = `insert into test_02377 values(1, 's') (2, 'x') (3, 'y');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2329', () => {
    const query = `INSERT INTO special_set_table VALUES (0), (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2330', () => {
    const query = `insert into function file(02376_data.arrow) select toLowCardinality(toString(number)) as x from numbers(10) settings output_format_arrow_string_as_string=1, output_format_arrow_low_cardinality_as_dictionary=1, engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2331', () => {
    const query = `insert into function file('02374_data1.jsonl') select number as x, 'str' as s from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2332', () => {
    const query = `insert into function file('02374_data2.jsonl') select number as x, 'str' as s from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2333', () => {
    const query = `INSERT INTO t_in_tuple_index VALUES ('1', 33, 'insta'), ('2', 33, 'insta');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2334', () => {
    const query = `insert into m values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2335', () => {
    const query = `INSERT INTO test_table VALUES (0, 'Value', [1, 2, 3], [[1, 2, 3]]), (0, 'Value', [4, 5, 6], [[1, 2, 3], [4, 5, 6]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2336', () => {
    const query = `INSERT INTO video_log SELECT toUnixTimestamp('2022-07-22 01:00:00')
+ (rowNumberInAllBlocks() / 20000),
user_id_raw % 100000000 AS user_id,
device_id_raw % 200000000 AS device_id,
domain_raw % 100,
(bytes_raw % 1024) + 128,
(duration_raw % 300) + 100
FROM rng
LIMIT 1728000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2337', () => {
    const query = `INSERT INTO video_log SELECT toUnixTimestamp('2022-07-22 01:00:00')
+ (rowNumberInAllBlocks() / 20000),
user_id_raw % 100000000 AS user_id,
100 AS device_id,
domain_raw % 100,
(bytes_raw % 1024) + 128,
(duration_raw % 300) + 100
FROM rng
LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2338', () => {
    const query = `INSERT INTO video_log_result SELECT toStartOfHour(datetime) AS hour,
sum(bytes),
avg(duration)
FROM video_log
WHERE (toDate(hour) = '2022-07-22') AND (device_id = '100') --(device_id = '100') Make sure it's not good and doesn't go into prewhere.
GROUP BY hour;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2339', () => {
    const query = `INSERT INTO test_table_join_1 VALUES (3, 'Join_1_Value_3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2340', () => {
    const query = `INSERT INTO test_table_join_2 VALUES (2, 'Join_2_Value_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2341', () => {
    const query = `INSERT INTO test_table_join_3 VALUES (2, 'Join_3_Value_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2342', () => {
    const query = `INSERT INTO test_table VALUES (0, [1, 2, 3], [1, 2, 3, 4]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2343', () => {
    const query = `INSERT INTO Customers VALUES ('Theodore','Diaz','Skilled Manual','Bachelors',28), ('Stephanie','Cox','Management','Bachelors',33), ('Peter','Nara','Skilled Manual','Graduate Degree',26), ('Latoya','Shen','Professional','Graduate Degree',25), ('Joshua','Lee','Professional','Partial College',26), ('Edward','Hernandez','Skilled Manual','High School',36), ('Dalton','Wood','Professional','Partial College',42), ('Christine','Nara','Skilled Manual','Partial College',33), ('Cameron','Rodriguez','Professional','Partial College',28), ('Angel','Stewart','Professional','Partial College',46);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2344', () => {
    const query = `INSERT INTO Customers VALUES  ('Theodore','Diaz','Skilled Manual','Bachelors',28),('Stephanie','Cox','Management abcd defg','Bachelors',33),('Peter','Nara','Skilled Manual','Graduate Degree',26),('Latoya','Shen','Professional','Graduate Degree',25),('Joshua','Lee','Professional','Partial College',26),('Edward','Hernandez','Skilled Manual','High School',36),('Dalton','Wood','Professional','Partial College',42),('Christine','Nara','Skilled Manual','Partial College',33),('Cameron','Rodriguez','Professional','Partial College',28),('Angel','Stewart','Professional','Partial College',46),('Apple','','Skilled Manual','Bachelors',28),(NULL,'why','Professional','Partial College',38);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2345', () => {
    const query = `insert into EventLog values ('Darth Vader has entered the room.', 546), ('Rambo is suspciously looking at Darth Vader.', 245234), ('Darth Sidious electrocutes both using Force Lightning.', 245554);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2346', () => {
    const query = `Insert into Dates VALUES ('2015-10-12') , ('2016-10-12');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2347', () => {
    const query = `INSERT INTO Customers VALUES  ('Theodore','Diaz','Skilled Manual','Bachelors',28),('Stephanie','Cox','Management abcd defg','Bachelors',33),('Peter','Nara','Skilled Manual','Graduate Degree',26),('Latoya','Shen','Professional','Graduate Degree',25),('Apple','','Skilled Manual','Bachelors',28),(NULL,'why','Professional','Partial College',38);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2348', () => {
    const query = `INSERT INTO mv_expand_test_table VALUES (1, ['Salmon', 'Steak','Chicken'],[1,2,3,4],[5,6,7,8]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2349', () => {
    const query = `INSERT INTO Customers VALUES ('Theodore','Diaz','Skilled Manual','Bachelors',28), ('Stephanie','Cox','Management abcd defg','Bachelors',33),('Peter','Nara','Skilled Manual','Graduate Degree',26),('Latoya','Shen','Professional','Graduate Degree',25),('Apple','','Skilled Manual','Bachelors',28),(NULL,'why','Professional','Partial College',38);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2350', () => {
    const query = `INSERT INTO Versions VALUES ('1.2.3.4'),('1.2'),('1.2.3'),('1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2351', () => {
    const query = `INSERT INTO Bin_at_test VALUES ('2018-02-24T15:14:01',3), ('2018-02-23T16:14:01',4), ('2018-02-26T15:14:01',5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2352', () => {
    const query = `INSERT INTO array_test VALUES([1.0, 2.5], ['a', 'c'], ['A', NULL, 'C']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2353', () => {
    const query = `INSERT INTO Ledger VALUES  ('Aldi','Apple',4,'2016-09-10'), ('Costco','Apple',2,'2016-09-11'), ('Aldi','Apple',6,'2016-09-10'), ('Costco','Snargaluff',100,'2016-09-12'), ('Aldi','Apple',7,'2016-09-12'), ('Aldi','Snargaluff',400,'2016-09-11'),('Costco','Snargaluff',104,'2016-09-12'),('Aldi','Apple',5,'2016-09-12'),('Aldi','Snargaluff',600,'2016-09-11'),('Costco','Snargaluff',200,'2016-09-10');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2354', () => {
    const query = `INSERT INTO kql_table2 select * from kql(\$\$Customers|project FirstName,LastName,Age | filter FirstName=='Theodore'\$\$);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2355', () => {
    const query = `INSERT INTO test_table VALUES(0, 'value_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2356', () => {
    const query = `INSERT INTO test_lookup_table VALUES(0, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2357', () => {
    const query = `INSERT INTO test_lookup_table VALUES(1, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2358', () => {
    const query = `INSERT INTO test_lookup_table VALUES(2, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2359', () => {
    const query = `INSERT INTO test_lookup_table VALUES(3, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2360', () => {
    const query = `INSERT INTO test_lookup_table VALUES(4, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2361', () => {
    const query = `INSERT INTO test_lookup_table VALUES(5, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2362', () => {
    const query = `INSERT INTO test_lookup_table VALUES(6, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2363', () => {
    const query = `INSERT INTO test_lookup_table VALUES(7, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2364', () => {
    const query = `INSERT INTO test_lookup_table VALUES(8, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2365', () => {
    const query = `INSERT INTO test_lookup_table VALUES(9, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2366', () => {
    const query = `INSERT INTO producer_02366 (*) VALUES (19, '.1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2367', () => {
    const query = `INSERT INTO t1 (c1, c2) VALUES (1, 10), (1, 20), (1, 30);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2368', () => {
    const query = `INSERT INTO t2 (c1, c2, c3) VALUES (1, 5, 'a'), (1, 15, 'b'), (1, 25, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2369', () => {
    const query = `INSERT INTO t1 VALUES ( 1 ), ( 2 ), ( 3 );`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2370', () => {
    const query = `INSERT INTO t2 VALUES ( 2 ), ( 3 ), ( 4 );`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2371', () => {
    const query = `insert into dat values (1, '2022-01-24 02:30:00.008122000');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2372', () => {
    const query = `INSERT INTO map_test (tags) VALUES (map('fruit','apple','color','red'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2373', () => {
    const query = `INSERT INTO data_horizontal VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2374', () => {
    const query = `INSERT INTO data_vertical VALUES (1, '1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2375', () => {
    const query = `INSERT INTO data_vertical VALUES (2, '2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2376', () => {
    const query = `INSERT INTO 02356_destination (a, b) SELECT * FROM generateRandom('a Int64, b String') LIMIT 100 SETTINGS max_threads=1, max_block_size=100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2377', () => {
    const query = `INSERT INTO tab VALUES (0, [1.0, 0.0]), (1, [1.1, 0.0]), (2, [1.2, 0.0]), (3, [1.3, 0.0]), (4, [1.4, 0.0]), (5, [0.0, 2.0]), (6, [0.0, 2.1]), (7, [0.0, 2.2]), (8, [0.0, 2.3]), (9, [0.0, 2.4]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2378', () => {
    const query = `INSERT INTO tab VALUES (0, [1.0, 0.0]), (1, [1.1, 0.0]), (2, [1.2, 0.0]), (3, [1.3, 0.0]), (4, [1.4, 0.0]), (5, [1.5, 0.0]), (6, [0.0, 2.0]), (7, [0.0, 2.1]), (8, [0.0, 2.2]), (9, [0.0, 2.3]), (10, [0.0, 2.4]), (11, [0.0, 2.5]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2379', () => {
    const query = `INSERT INTO tab VALUES (0, [4.6, 2.3]), (1, [2.0, 3.2]), (2, [4.2, 3.4]), (3, [5.3, 2.9]), (4, [2.4, 5.2]), (5, [5.3, 2.3]), (6, [1.0, 9.3]), (7, [5.5, 4.7]), (8, [6.4, 3.5]), (9, [5.3, 2.5]), (10, [6.4, 3.4]), (11, [6.4, 3.2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2380', () => {
    const query = `INSERT INTO tab_f64 VALUES (0, [4.6, 2.3]), (1, [2.0, 3.2]), (2, [4.2, 3.4]), (3, [5.3, 2.9]), (4, [2.4, 5.2]), (5, [5.3, 2.3]), (6, [1.0, 9.3]), (7, [5.5, 4.7]), (8, [6.4, 3.5]), (9, [5.3, 2.5]), (10, [6.4, 3.4]), (11, [6.4, 3.2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2381', () => {
    const query = `INSERT INTO tab_f32 VALUES (0, [4.6, 2.3]), (1, [2.0, 3.2]), (2, [4.2, 3.4]), (3, [5.3, 2.9]), (4, [2.4, 5.2]), (5, [5.3, 2.3]), (6, [1.0, 9.3]), (7, [5.5, 4.7]), (8, [6.4, 3.5]), (9, [5.3, 2.5]), (10, [6.4, 3.4]), (11, [6.4, 3.2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2382', () => {
    const query = `INSERT INTO tab_f16 VALUES (0, [4.6, 2.3]), (1, [2.0, 3.2]), (2, [4.2, 3.4]), (3, [5.3, 2.9]), (4, [2.4, 5.2]), (5, [5.3, 2.3]), (6, [1.0, 9.3]), (7, [5.5, 4.7]), (8, [6.4, 3.5]), (9, [5.3, 2.5]), (10, [6.4, 3.4]), (11, [6.4, 3.2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2383', () => {
    const query = `INSERT INTO tab_bf16 VALUES (0, [4.6, 2.3]), (1, [2.0, 3.2]), (2, [4.2, 3.4]), (3, [5.3, 2.9]), (4, [2.4, 5.2]), (5, [5.3, 2.3]), (6, [1.0, 9.3]), (7, [5.5, 4.7]), (8, [6.4, 3.5]), (9, [5.3, 2.5]), (10, [6.4, 3.4]), (11, [6.4, 3.2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2384', () => {
    const query = `INSERT INTO tab_i8 VALUES (0, [4.6, 2.3]), (1, [2.0, 3.2]), (2, [4.2, 3.4]), (3, [5.3, 2.9]), (4, [2.4, 5.2]), (5, [5.3, 2.3]), (6, [1.0, 9.3]), (7, [5.5, 4.7]), (8, [6.4, 3.5]), (9, [5.3, 2.5]), (10, [6.4, 3.4]), (11, [6.4, 3.2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2385', () => {
    const query = `INSERT INTO tab VALUES (0, [1.0, 0.0]), (1, [1.1, 0.0]), (2, [1.2, 0.0]), (3, [1.3, 0.0]), (4, [1.4, 0.0]), (5, [0.0, 2.0]), (6, [0.0, 2.1]), (7, [0.0, 2.2]), (8, [0.0, 2.3]), (9, [0.0, 2.4]); -- { serverError ILLEGAL_INDEX } WITH [0.0, 2.0] AS reference_vec
SELECT id, vec, L2Distance(vec, reference_vec)
FROM tab
ORDER BY L2Distance(vec, reference_vec)
LIMIT 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2386', () => {
    const query = `INSERT INTO tab values (0, [2.2, 2.3]) (1, [3.1, 3.2, 3.3]); -- { serverError INCORRECT_DATA } DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2387', () => {
    const query = `INSERT INTO tab VALUES (1, []); -- { serverError INCORRECT_DATA } INSERT INTO tab (id) VALUES (1); -- { serverError INCORRECT_DATA }
DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2388', () => {
    const query = `INSERT INTO tab values (0, [2.2, 2.3]) (1, [3.1, 3.2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2389', () => {
    const query = `INSERT INTO tab values (2, [2.2, 2.3, 2.4]) (3, [3.1, 3.2, 3.3]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2390', () => {
    const query = `insert into order select number%2000, 1, number, (1656700561 - intDiv(intHash32(number), 1000)) from numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2391', () => {
    const query = `insert into t_2354_dist_with_external_aggr select number, toString(number) as s, toFixedString(s, 100) from numbers_mt(5e7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2392', () => {
    const query = `insert into n values (null);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2393', () => {
    const query = `INSERT INTO replicated_table_r1 select number, toString(number) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2394', () => {
    const query = `INSERT INTO t_light_r1 SELECT number, number, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2395', () => {
    const query = `INSERT INTO t_light_sync_r1 SELECT number, number, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2396', () => {
    const query = `INSERT INTO t_merge_tree select '2024-08-01', '1', toString(number) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2397', () => {
    const query = `INSERT INTO t_merge_tree select '2024-08-02', '1', toString(number)  FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2398', () => {
    const query = `INSERT INTO t_replicated_merge_tree select '2024-08-01', '1', toString(number) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2399', () => {
    const query = `INSERT INTO t_replicated_merge_tree select '2024-08-02', '1', toString(number)  FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2400', () => {
    const query = `INSERT INTO t_obj select number, '{"a" : "' || toString(number) || '"}' FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2401', () => {
    const query = `INSERT INTO lwd_test SELECT number, randomString(10) FROM system.numbers LIMIT 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2402', () => {
    const query = `insert into t select * from numbers_mt(10e6) settings max_threads = 16, max_insert_threads=16, max_block_size=100000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2403', () => {
    const query = `insert into test_tz_hour select toDateTime('2021-06-01 00:00:00', 'UTC') + number * 600, 'x' from numbers(1e3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2404', () => {
    const query = `insert into tab values (1, 'aaaxxxaa\\0xxx', 'x');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2405', () => {
    const query = `insert into tab values (2, 'aaaaa\\0x', 'x');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2406', () => {
    const query = `INSERT INTO nnd VALUES (1, toDateTime64('1979-12-12 21:21:21.123456788', 9, 'UTC'), 1.1), (2, toDateTime64('1979-12-12 21:21:21.123456789', 9, 'UTC'), 2.34), (3, toDateTime64('1979-12-12 21:21:21.127', 3, 'UTC'), 3.7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2407', () => {
    const query = `INSERT INTO nnd VALUES (4, toDateTime64('1979-12-12 21:21:21.129', 3, 'UTC'), 2.1), (5, toDateTime('1979-12-12 21:21:22', 'UTC'), 1.3345), (6, toDateTime('1979-12-12 21:21:23', 'UTC'), 1.54), (7, toDateTime('1979-12-12 21:21:23', 'UTC'), 1.54);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2408', () => {
    const query = `INSERT INTO tab VALUES (101, 'Alick a01'), (102, 'Blick a02'), (103, 'Click a03'), (104, 'Dlick a04'), (105, 'Elick a05'), (106, 'Alick a06'), (107, 'Blick a07'), (108, 'Click a08'), (109, 'Dlick a09'), (110, 'Elick a10'), (111, 'Alick b01'), (112, 'Blick b02'), (113, 'Click b03'), (114, 'Dlick b04'), (115, 'Elick b05'), (116, 'Alick b06'), (117, 'Blick b07'), (118, 'Click b08'), (119, 'Dlick b09'), (120, 'Elick b10');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2409', () => {
    const query = `INSERT INTO tab_x VALUES (101, 'x Alick a01 y'), (102, 'x Blick a02 y'), (103, 'x Click a03 y'), (104, 'x Dlick a04 y'), (105, 'x Elick a05 y'), (106, 'x Alick a06 y'), (107, 'x Blick a07 y'), (108, 'x Click a08 y'), (109, 'x Dlick a09 y'), (110, 'x Elick a10 y'), (111, 'x Alick b01 y'), (112, 'x Blick b02 y'), (113, 'x Click b03 y'), (114, 'x Dlick b04 y'), (115, 'x Elick b05 y'), (116, 'x Alick b06 y'), (117, 'x Blick b07 y'), (118, 'x Click b08 y'), (119, 'x Dlick b09 y'), (120, 'x Elick b10 y');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2410', () => {
    const query = `INSERT INTO tab SELECT rowNumberInBlock(), groupArray(s) FROM tab_x GROUP BY k%10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2411', () => {
    const query = `INSERT INTO tab VALUES (101, {'Alick':'Alick a01'}), (102, {'Blick':'Blick a02'}), (103, {'Click':'Click a03'}), (104, {'Dlick':'Dlick a04'}), (105, {'Elick':'Elick a05'}), (106, {'Alick':'Alick a06'}), (107, {'Blick':'Blick a07'}), (108, {'Click':'Click a08'}), (109, {'Dlick':'Dlick a09'}), (110, {'Elick':'Elick a10'}), (111, {'Alick':'Alick b01'}), (112, {'Blick':'Blick b02'}), (113, {'Click':'Click b03'}), (114, {'Dlick':'Dlick b04'}), (115, {'Elick':'Elick b05'}), (116, {'Alick':'Alick b06'}), (117, {'Blick':'Blick b07'}), (118, {'Click':'Click b08'}), (119, {'Dlick':'Dlick b09'}), (120, {'Elick':'Elick b10'});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2412', () => {
    const query = `INSERT INTO tab VALUES (101, 'Alick a01'), (102, 'Blick a02'), (103, 'Click a03'), (104, 'Dlick a04'), (105, 'Elick a05'), (106, 'Alick a06'), (107, 'Blick a07'), (108, 'Click a08'), (109, 'Dlick a09'), (110, 'Elick b10'), (111, 'Alick b01'), (112, 'Blick b02'), (113, 'Click b03'), (114, 'Dlick b04'), (115, 'Elick b05'), (116, 'Alick b06'), (117, 'Blick b07'), (118, 'Click b08'), (119, 'Dlick b09'), (120, 'Elick b10');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2413', () => {
    const query = `INSERT INTO tab VALUES (201, 'rick c01'), (202, 'mick c02'), (203, 'nick c03');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2414', () => {
    const query = `INSERT INTO tab VALUES (101, 'Alick e%='), (102, 'clickhoused= e%='), (103, 'Click d= '), (104, 'Dlick d= ae%='), (105, 'Elick e%=e%=d= d= '), (106, 'Alick e%=ae%=ad= ad= ');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2415', () => {
    const query = `INSERT INTO tab VALUES (0, 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2416', () => {
    const query = `INSERT INTO tab VALUES (1, 'ab') (2, 'bc');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2417', () => {
    const query = `INSERT INTO tab VALUES (1, 'Well, Hello ClickHouse !'), (2, 'Well, Hello World !'), (3, 'Good Weather !'), (4, 'Say Hello !'), (5, 'Its An OLAP Database'), (6, 'True World Champion');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2418', () => {
    const query = `INSERT INTO t VALUES (1, 'Hello World');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2419', () => {
    const query = `INSERT INTO tab (k) VALUES (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2420', () => {
    const query = `INSERT INTO tab (str) VALUES ('I am inverted');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2421', () => {
    const query = `insert into table_1 values (1, 'a'), (2, 'bb'), (3, 'ccc'), (4, 'dddd');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2422', () => {
    const query = `insert into shard_0.data_02346 values (1, 'a'), (2, 'bb'), (3, 'ccc'), (4, 'dddd');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2423', () => {
    const query = `insert into shard_1.data_02346 values (5, 'a'), (6, 'bb'), (7, 'ccc'), (8, 'dddd');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2424', () => {
    const query = `insert into table_2 values (4, 'dddd'), (5, 'eeeee'), (6, 'ffffff'), (7, 'ggggggg');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2425', () => {
    const query = `INSERT INTO landing SELECT * FROM numbers(10000); -- { serverError FUNCTION_THROW_IF_VALUE_IS_NON_ZERO } SELECT 'no_transaction_landing', count() FROM landing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2426', () => {
    const query = `INSERT INTO landing SELECT * FROM numbers(10000); -- { serverError FUNCTION_THROW_IF_VALUE_IS_NON_ZERO } ROLLBACK;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2427', () => {
    const query = `INSERT INTO landing SETTINGS implicit_transaction=True SELECT * FROM numbers(10000); -- { serverError FUNCTION_THROW_IF_VALUE_IS_NON_ZERO } SELECT 'after_implicit_txn_in_query_settings_landing', count() FROM landing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2428', () => {
    const query = `INSERT INTO landing SELECT * FROM numbers(10000); -- { serverError FUNCTION_THROW_IF_VALUE_IS_NON_ZERO } SET implicit_transaction=False;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2429', () => {
    const query = `INSERT INTO target SELECT * FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2430', () => {
    const query = `insert into function remote('127.1', currentDatabase(), data_02344) select number from numbers(3e9) settings prefer_localhost_replica=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2431', () => {
    const query = `insert into t_distinct_limit select '2021-12-15', -1 from numbers(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2432', () => {
    const query = `insert into t_distinct_limit select '2022-12-15', 1 from numbers(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2433', () => {
    const query = `insert into t_distinct_limit select '2022-12-16', 11 from numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2434', () => {
    const query = `insert into t_distinct_limit select '2023-12-16', 12 from numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2435', () => {
    const query = `insert into t_distinct_limit select '2023-12-16', 13 from numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2436', () => {
    const query = `insert into t_distinct_limit select '2023-12-16', 14 from numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2437', () => {
    const query = `INSERT INTO t_s3_compressed_blocks SELECT number, randomPrintableASCII(128) from numbers(57344);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2438', () => {
    const query = `INSERT INTO test_table_tuple VALUES (0, ('value_0_level_0', 'value_1_level_0'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2439', () => {
    const query = `INSERT INTO proj_agg_02343 SELECT 1, number % 2, number % 4, number FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2440', () => {
    const query = `insert into dist_t select number from numbers_mt(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2441', () => {
    const query = `INSERT INTO data_02342 VALUES (42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2442', () => {
    const query = `INSERT INTO data_02342 VALUES (42, 'data_02342');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2443', () => {
    const query = `INSERT INTO test_table VALUES (0, (('value_0_level_1', 'value_1_level_1'), 'value_1_level_0'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2444', () => {
    const query = `INSERT INTO test_table VALUES (0, [[('value_0_level_1', 'value_1_level_1')]], ['value_1_level_0']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2445', () => {
    const query = `INSERT INTO 02339_db.test_table VALUES (0, 'Value');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2446', () => {
    const query = `INSERT INTO nested_name_tuples VALUES(('asd', (12, 'ddd')));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2447', () => {
    const query = `INSERT INTO 02337_db.test_table VALUES (0, 'Value');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2448', () => {
    const query = `INSERT INTO t_sparse_s3 SELECT 1, number % 2, '' FROM numbers(8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2449', () => {
    const query = `INSERT INTO t_sparse_s3 SELECT 2, number % 2, '' FROM numbers(24576);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2450', () => {
    const query = `INSERT INTO t_sparse_s3 SELECT 3, number % 2, '' FROM numbers(8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2451', () => {
    const query = `INSERT INTO t_sparse_s3 SELECT 4, number % 2, '' FROM numbers(24576);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2452', () => {
    const query = `INSERT INTO t_sparse_s3 SELECT 5, number % 2, '' FROM numbers(8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2453', () => {
    const query = `INSERT INTO t_sparse_s3 SELECT 6, number % 2, '' FROM numbers(24576);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2454', () => {
    const query = `INSERT INTO t_sparse_s3 SELECT 7, number % 2, '' FROM numbers(8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2455', () => {
    const query = `INSERT INTO t_sparse_s3 SELECT 8, number % 2, '' FROM numbers(24576);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2456', () => {
    const query = `INSERT INTO t_sparse_s3 SELECT 9, number % 2, '' FROM numbers(8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2457', () => {
    const query = `INSERT INTO t_sparse_s3 SELECT 10, number % 2, '' FROM numbers(24576);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2458', () => {
    const query = `INSERT INTO t_sparse_s3 SELECT 11, number % 2, '' FROM numbers(8000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2459', () => {
    const query = `INSERT INTO t_sparse_s3 SELECT 12, number % 2, 'foo' FROM numbers(192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2460', () => {
    const query = `INSERT INTO t_sparse_s3 SELECT 13, number % 2, '' FROM numbers(24576);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2461', () => {
    const query = `INSERT INTO t_sparse_s3 SELECT 14, number % 2, 'foo' FROM numbers(8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2462', () => {
    const query = `INSERT INTO t_sparse_s3 SELECT 15, number % 2, '' FROM numbers(24576);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2463', () => {
    const query = `INSERT INTO t_sparse_s3 SELECT 16, number % 2, 'foo' FROM numbers(4730);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2464', () => {
    const query = `INSERT INTO t_sparse_s3 SELECT 17, number % 2, 'foo' FROM numbers(3462);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2465', () => {
    const query = `INSERT INTO t_sparse_s3 SELECT 18, number % 2, '' FROM numbers(24576);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2466', () => {
    const query = `INSERT INTO segfault SELECT * FROM generateRandom('id UInt32, uuid UUID, c Array(UInt32)', 10, 5, 5) LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2467', () => {
    const query = `insert into function file(data_02323.tsv) select number % 2 ? number : NULL from numbers(3) settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2468', () => {
    const query = `insert into function file(02322_data.sql, 'SQLInsert') select number as x, number % 3 as y, 'Hello' as z from numbers(5) settings output_format_sql_insert_max_batch_size=2, output_format_sql_insert_quote_names=0, engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2469', () => {
    const query = `insert into function file(02322_data.sql, 'SQLInsert') select number, number % 3, 'Hello' from numbers(5) settings output_format_sql_insert_max_batch_size=2, engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2470', () => {
    const query = `INSERT INTO decimal (a, b, c) SELECT toDecimal32(number - 50, 4), toDecimal64(number - 50, 8) / 3, toDecimal128(number - 50, 8) / 5
FROM system.numbers LIMIT 101;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2471', () => {
    const query = `INSERT INTO test_table SELECT number, concat('some string ', CAST(number, 'String')) FROM numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2472', () => {
    const query = `INSERT INTO merge_table_standard_delete select number, toString(number) from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2473', () => {
    const query = `INSERT INTO t_light SELECT number, number, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2474', () => {
    const query = `INSERT INTO t_large SELECT number + 1, number + 1  FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2475', () => {
    const query = `INSERT INTO t_proj SELECT number + 1, number + 1  FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2476', () => {
    const query = `INSERT INTO dictionary_source_table VALUES (0, 'Value');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2477', () => {
    const query = `INSERT INTO dictionary_source_table values (0, 0, 5, 'Value');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2478', () => {
    const query = `insert into function file(data_02318.tsv) select * from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2479', () => {
    const query = `INSERT INTO tab VALUES ('haystack', 'pattern\\\\');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2480', () => {
    const query = `insert into distinct_in_order (a) select * from zeros(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2481', () => {
    const query = `insert into distinct_in_order (a) select * from zeros(10); -- this entire chunk should be skipped in pre-distinct select distinct * from distinct_in_order settings max_block_size=10, max_threads=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2482', () => {
    const query = `insert into distinct_in_order select * from numbers(10); -- first row (0) from this chunk should be skipped in pre-distinct select distinct a from distinct_in_order settings max_block_size=10, max_threads=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2483', () => {
    const query = `insert into distinct_in_order select number % number, number % 5, number % 10 from numbers(1,1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2484', () => {
    const query = `INSERT INTO distinct_cardinality_low SELECT number % 1e1, number % 1e2, number % 1e3 FROM numbers_mt(1e4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2485', () => {
    const query = `insert into distinct_in_order select distinct * from distinct_cardinality_low order by high settings optimize_distinct_in_order=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2486', () => {
    const query = `insert into ordinary_distinct select distinct * from distinct_cardinality_low order by high settings optimize_distinct_in_order=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2487', () => {
    const query = `insert into distinct_in_order select distinct * from distinct_cardinality_low settings optimize_distinct_in_order=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2488', () => {
    const query = `insert into ordinary_distinct select distinct * from distinct_cardinality_low settings optimize_distinct_in_order=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2489', () => {
    const query = `insert into distinct_in_order select distinct * from distinct_cardinality_low where low > 0 settings optimize_distinct_in_order=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2490', () => {
    const query = `insert into ordinary_distinct select distinct * from distinct_cardinality_low where low > 0 settings optimize_distinct_in_order=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2491', () => {
    const query = `insert into sorting_key_empty_tuple select number % 2, number % 5 from numbers(1,10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2492', () => {
    const query = `insert into sorting_key_contain_function values ('2000-01-01', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2493', () => {
    const query = `insert into sorting_key_contain_function values ('2000-01-01', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2494', () => {
    const query = `INSERT INTO test02315 SELECT number % 2 as a, number as b FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2495', () => {
    const query = `insert into function file(data_02314.csv) select number, number + 1 from numbers(5) settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2496', () => {
    const query = `insert into function file(data_02314.csv) select number, number + 1, number + 2 from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2497', () => {
    const query = `insert into function file(data_02314.tsv) select number, number + 1 from numbers(5) settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2498', () => {
    const query = `insert into function file(data_02314.tsv) select number, number + 1, number + 2 from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2499', () => {
    const query = `INSERT INTO codecTest (key, name, ref_valueF64, valueF64, ref_valueF32, valueF32) 	SELECT number AS n, 'e()', e() AS v, v, v, v FROM system.numbers LIMIT 1, 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2500', () => {
    const query = `INSERT INTO codecTest (key, name, ref_valueF64, valueF64, ref_valueF32, valueF32) 	SELECT number AS n, 'log2(n)', log2(n) AS v, v, v, v FROM system.numbers LIMIT 101, 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2501', () => {
    const query = `INSERT INTO codecTest (key, name, ref_valueF64, valueF64, ref_valueF32, valueF32) 	SELECT number AS n, 'n*sqrt(n)', n*sqrt(n) AS v, v, v, v FROM system.numbers LIMIT 201, 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2502', () => {
    const query = `INSERT INTO codecTest (key, name, ref_valueF64, valueF64, ref_valueF32, valueF32) 	SELECT number AS n, 'sin(n*n*n)*n', sin(n * n * n * n* n) AS v, v, v, v FROM system.numbers LIMIT 301, 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2503', () => {
    const query = `INSERT INTO test02313 SELECT number % 2 + 1 AS a, number % 2 AS b, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2504', () => {
    const query = `insert into function file(data_02313.avro) select tuple(number, 'String')::Tuple(a UInt32, b String) as t from numbers(3) settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2505', () => {
    const query = `insert into function file(data_02313.avro) select tuple(number, tuple(number + 1, number + 2), range(number))::Tuple(a UInt32, b Tuple(c UInt32, d UInt32), e Array(UInt32)) as t from numbers(3) settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2506', () => {
    const query = `insert into function file(data_02313.avro, auto, 'a Nested(b UInt32, c UInt32)') select [number, number + 1], [number + 2, number + 3] from  numbers(3) settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2507', () => {
    const query = `insert into function file(data_02313.avro, auto, 'a Nested(b Nested(c UInt32, d UInt32))') select [[(number, number + 1), (number + 2, number + 3)]] from  numbers(3) settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2508', () => {
    const query = `insert into function file(data_02313.avro) select map(concat('key_', toString(number)), number) as m from numbers(3) settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2509', () => {
    const query = `insert into function file(data_02313.avro) select map(concat('key_', toString(number)), tuple(number, range(number))) as m from numbers(3) settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2510', () => {
    const query = `insert into test_02312 values ((1,2)), ((2,3)), ((3,4));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2511', () => {
    const query = `insert into test_02312 values ([[(1), (2), (3)]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2512', () => {
    const query = `insert into test_zkinsert (name, path, value) values ('c', '/1-insert-testc/c/c/c/c/c/c', 11), ('e', '/1-insert-testc/c/c/d', 10), ('c', '/1-insert-testc/c/c/c/c/c/c/c', 10), ('c', '/1-insert-testc/c/c/c/c/c/c', 9), ('f', '/1-insert-testc/c/c/d', 11), ('g', '/1-insert-testc/c/c/d', 12), ('g', '/1-insert-testc/c/c/e', 13), ('g', '/1-insert-testc/c/c/f', 14), ('g', '/1-insert-testc/c/c/kk', 14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2513', () => {
    const query = `insert into system.zookeeper (name, path, value) SELECT name, '/' || currentDatabase() || path, value from test_zkinsert;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2514', () => {
    const query = `insert into test_zkinsert (name, path, value) values ('testc', '/2-insert-testx', 'x');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2515', () => {
    const query = `insert into test_zkinsert (name, path, value) values ('testz', '/2-insert-testx', 'y');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2516', () => {
    const query = `insert into test_zkinsert (name, path, value) values ('testc', '/2-insert-testz//c/cd/dd//', 'y');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2517', () => {
    const query = `insert into test_zkinsert (name, path) values ('testc', '/2-insert-testz//c/cd/');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2518', () => {
    const query = `insert into test_zkinsert (name, value, path) values ('testb', 'z', '/2-insert-testx');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2519', () => {
    const query = `insert into system.zookeeper (name, value) values ('abc', 'y'); -- { serverError BAD_ARGUMENTS } insert into system.zookeeper (path, value) values ('a/b/c', 'y'); -- { serverError BAD_ARGUMENTS }
insert into system.zookeeper (name, version) values ('abc', 111); -- { serverError ILLEGAL_COLUMN }
insert into system.zookeeper (name, versionxyz) values ('abc', 111); -- { serverError NO_SUCH_COLUMN_IN_TABLE }
insert into system.zookeeper (name, path, value) values ('a/b/c', '/', 'y'); -- { serverError BAD_ARGUMENTS }
insert into system.zookeeper (name, path, value) values ('/', '/a/b/c', 'z'); -- { serverError BAD_ARGUMENTS }
insert into system.zookeeper (name, path, value) values ('', '/', 'y'); -- { serverError BAD_ARGUMENTS }
insert into system.zookeeper (name, path, value) values ('abc', '/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc', 'y'); -- { serverError BAD_ARGUMENTS }
drop table if exists test_zkinsert;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2520', () => {
    const query = `INSERT INTO dictionary_source_table values (1, 0, 18446744073709551615, 'Value');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2521', () => {
    const query = `INSERT INTO t_parts_profile_events VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2522', () => {
    const query = `INSERT INTO t_parts_profile_events SELECT number FROM numbers(20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2523', () => {
    const query = `insert into function file(data_02304.parquet) select 'hello' as s from numbers(3) settings engine_file_truncate_on_insert=1, output_format_parquet_string_as_string=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2524', () => {
    const query = `insert into function file(data_02304.orc) select 'hello' as s from numbers(3) settings engine_file_truncate_on_insert=1, output_format_orc_string_as_string=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2525', () => {
    const query = `insert into function file(data_02304.arrow) select 'hello' as s from numbers(3) settings engine_file_truncate_on_insert=1, output_format_arrow_string_as_string=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2526', () => {
    const query = `insert into test_02302 select number from numbers(10) settings s3_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2527', () => {
    const query = `insert into test_02302 select 0 settings s3_create_new_file_on_insert = true;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2528', () => {
    const query = `insert into test_02302 select 1 settings s3_create_new_file_on_insert = true;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2529', () => {
    const query = `insert into test_02302 select 2 settings s3_create_new_file_on_insert = true;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2530', () => {
    const query = `insert into test_agg_proj_02302 select intDiv(number, 2), -intDiv(number,3) - 1 from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2531', () => {
    const query = `INSERT INTO lc_nullable_string (c1) FORMAT Values (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2532', () => {
    const query = `INSERT INTO lc_nullable_string (c1) Values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2533', () => {
    const query = `insert into function file(data_02302.parquet) select 1 as x settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2534', () => {
    const query = `insert into function file(data_02302.orc) select 1 as x settings engine_file_truncate_on_insert=1; `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2535', () => {
    const query = `insert into function file(data_02302.arrow) select 1 as x settings engine_file_truncate_on_insert=1; `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2536', () => {
    const query = `INSERT INTO e SELECT 1, toDateTime('2020-02-01 12:00:01') + INTERVAL number MONTH FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2537', () => {
    const query = `insert into data_02295 select 0 b, intDiv(number, 2) a, groupArrayArrayState([toUInt64(number)]) from numbers(4) group by a, b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2538', () => {
    const query = `insert into data_02294 select intDiv(number, 2) a, 0 b, groupArrayArrayState([toUInt64(number)]), groupArrayArray([toUInt64(number)]) from numbers(4) group by a, b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2539', () => {
    const query = `INSERT INTO test_hierarchy_source_table VALUES (1, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2540', () => {
    const query = `insert into data_02293 select 1 a, groupArrayArrayState([toUInt64(number)]), groupArrayArray([toUInt64(number)]) from numbers(2) group by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2541', () => {
    const query = `INSERT INTO tab VALUES ('AA') ('Aa');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2542', () => {
    const query = `INSERT INTO h3_indexes VALUES (1, '830631fffffffff','830780fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2543', () => {
    const query = `INSERT INTO h3_indexes VALUES (2, '830631fffffffff','830783fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2544', () => {
    const query = `INSERT INTO h3_indexes VALUES (3, '830631fffffffff','83079dfffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2545', () => {
    const query = `INSERT INTO h3_indexes VALUES (4, '830631fffffffff','830799fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2546', () => {
    const query = `INSERT INTO h3_indexes VALUES (5, '830631fffffffff','8306f5fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2547', () => {
    const query = `INSERT INTO h3_indexes VALUES (6, '830631fffffffff','8306e6fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2548', () => {
    const query = `INSERT INTO h3_indexes VALUES (7, '830631fffffffff','8306e4fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2549', () => {
    const query = `INSERT INTO h3_indexes VALUES (8, '830631fffffffff','830701fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2550', () => {
    const query = `INSERT INTO h3_indexes VALUES (9, '830631fffffffff','830700fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2551', () => {
    const query = `INSERT INTO h3_indexes VALUES (10, '830631fffffffff','830706fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2552', () => {
    const query = `INSERT INTO h3_indexes VALUES (11, '830631fffffffff','830733fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2553', () => {
    const query = `INSERT INTO h3_indexes VALUES (12, '8301a6fffffffff','830014fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2554', () => {
    const query = `INSERT INTO h3_indexes VALUES (13, '8301a6fffffffff','830033fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2555', () => {
    const query = `INSERT INTO h3_indexes VALUES (14, '8301a6fffffffff','830031fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2556', () => {
    const query = `INSERT INTO h3_indexes VALUES (15, '8301a6fffffffff','830022fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2557', () => {
    const query = `INSERT INTO h3_indexes VALUES (16, '8301a6fffffffff','830020fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2558', () => {
    const query = `INSERT INTO h3_indexes VALUES (17, '8301a6fffffffff','830024fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2559', () => {
    const query = `INSERT INTO h3_indexes VALUES (18, '8301a6fffffffff','830120fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2560', () => {
    const query = `INSERT INTO h3_indexes VALUES (19, '8301a6fffffffff','830124fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2561', () => {
    const query = `INSERT INTO h3_indexes VALUES (20, '8301a6fffffffff','8308cdfffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2562', () => {
    const query = `INSERT INTO h3_indexes VALUES (21, '8301a5fffffffff','831059fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2563', () => {
    const query = `INSERT INTO h3_indexes VALUES (22, '8301a5fffffffff','830b2dfffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2564', () => {
    const query = `INSERT INTO h3_indexes VALUES (23, '8301a5fffffffff','830b29fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2565', () => {
    const query = `INSERT INTO h3_indexes VALUES (24, '8301a5fffffffff','830b76fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2566', () => {
    const query = `INSERT INTO h3_indexes VALUES (25, '8301a5fffffffff','830b43fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2567', () => {
    const query = `INSERT INTO h3_indexes VALUES (26, '8301a5fffffffff','830b4efffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2568', () => {
    const query = `INSERT INTO h3_indexes VALUES (27, '8301a5fffffffff','830b48fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2569', () => {
    const query = `INSERT INTO h3_indexes VALUES (28, '8301a5fffffffff','830b49fffffffff');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2570', () => {
    const query = `INSERT INTO h3_indexes VALUES (581276613233082367,1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2571', () => {
    const query = `INSERT INTO h3_indexes VALUES (581263419093549055,2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2572', () => {
    const query = `INSERT INTO h3_indexes VALUES (589753847883235327,3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2573', () => {
    const query = `INSERT INTO h3_indexes VALUES (594082350283882495,4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2574', () => {
    const query = `INSERT INTO h3_indexes VALUES (598372386957426687,5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2575', () => {
    const query = `INSERT INTO h3_indexes VALUES (599542359671177215,6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2576', () => {
    const query = `INSERT INTO h3_indexes VALUES (604296355086598143,7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2577', () => {
    const query = `INSERT INTO h3_indexes VALUES (608785214872748031,8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2578', () => {
    const query = `INSERT INTO h3_indexes VALUES (615732192485572607,9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2579', () => {
    const query = `INSERT INTO h3_indexes VALUES (617056794467368959,10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2580', () => {
    const query = `INSERT INTO h3_indexes VALUES (624586477873168383,11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2581', () => {
    const query = `INSERT INTO h3_indexes VALUES (627882919484481535,12);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2582', () => {
    const query = `INSERT INTO h3_indexes VALUES (634600058503392255,13);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2583', () => {
    const query = `INSERT INTO h3_indexes VALUES (635544851677385791,14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2584', () => {
    const query = `INSERT INTO h3_indexes VALUES (639763125756281263,15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2585', () => {
    const query = `INSERT INTO h3_indexes VALUES (644178757620501158,16);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2586', () => {
    const query = `insert into function file(02293_data.arrow) select toLowCardinality(toString(number)) from numbers(300) settings output_format_arrow_low_cardinality_as_dictionary=1, engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2587', () => {
    const query = `INSERT INTO test_distributed SELECT randomString(100) AS text, randomString(100) AS text2 FROM system.numbers LIMIT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2588', () => {
    const query = `INSERT INTO user_local (id, name, age) VALUES (1, 'aaa', 21);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2589', () => {
    const query = `INSERT INTO event (id, user_id, content, created_time) VALUES(1, 1, 'hello', '2022-01-05 12:00:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2590', () => {
    const query = `INSERT INTO test_dictionary_source_table VALUES (1, '1'), (2, '2'), (3, '3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2591', () => {
    const query = `INSERT INTO test_dictionary_source_table VALUES (4, '4');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2592', () => {
    const query = `INSERT INTO t_object_convert SELECT 1, CAST(CAST('{"x" : 1}', 'Object(\\'json\\')'), 'Object(Nullable(\\'json\\'))');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2593', () => {
    const query = `INSERT INTO t_object_convert SELECT 2, CAST(CAST('{"y" : 2}', 'Object(\\'json\\')'), 'Object(Nullable(\\'json\\'))');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2594', () => {
    const query = `INSERT INTO t_object_convert FORMAT JSONEachRow {"id": 3, "data": {"x": 1, "y" : 2}};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2595', () => {
    const query = `INSERT INTO t_object_convert2 SELECT 1, CAST(CAST('{"x" : 1}', 'Object(\\'json\\')'), 'Object(Nullable(\\'json\\'))');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2596', () => {
    const query = `INSERT INTO t_object_convert2 SELECT 2, CAST(CAST('{"y" : 2}', 'Object(\\'json\\')'), 'Object(Nullable(\\'json\\'))');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2597', () => {
    const query = `INSERT INTO t_vertical_merges SELECT NULL, 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2598', () => {
    const query = `INSERT INTO t_vertical_merges SELECT [], 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2599', () => {
    const query = `INSERT INTO t_tuple_numeric VALUES (((2, 3), 4));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2600', () => {
    const query = `INSERT INTO t_tuple_numeric FORMAT JSONEachRow {"t":{"1":{"2":2,"3":3},"4":4}} SELECT toTypeName(t) FROM t_tuple_numeric LIMIT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2601', () => {
    const query = `INSERT INTO issue32107 SELECT A, quantilesTDigestState(0.1, 0.25, 0.5, 0.75, 0.9, 0.95, 0.99)(x) FROM (SELECT 1 A, arrayJoin(cast([2.0, inf, number / 33333],'Array(Float64)')) x FROM numbers(100)) GROUP BY A;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2602', () => {
    const query = `INSERT INTO vec1 VALUES (1, [3, 4]), (2, [2]), (3, [3, 3, 3]), (4, NULL), (5, range(7, 27)), (6, range(3, 103));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2603', () => {
    const query = `INSERT INTO vec1f VALUES (1, [3, 4]), (2, [2]), (3, [3, 3, 3]), (4, NULL), (5, range(7, 27)), (6, range(3, 103));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2604', () => {
    const query = `INSERT INTO vec1d VALUES (1, [3, 4]), (2, [2]), (3, [3, 3, 3]), (4, NULL), (5, range(7, 27)), (6, range(3, 103));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2605', () => {
    const query = `INSERT INTO vec1 VALUES (1, [3, 4, 5]), (2, [2, 4, 8]), (3, [7, 7, 7]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2606', () => {
    const query = `INSERT INTO vec2 VALUES (1, [100, 200, 0]), (2, [888, 777, 666]), (3, range(1, 35, 1)), (4, range(3, 37, 1)), (5, range(1, 135, 1)), (6, range(3, 137, 1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2607', () => {
    const query = `INSERT INTO vec2f VALUES (1, [100, 200, 0]), (2, [888, 777, 666]), (3, range(1, 35, 1)), (4, range(3, 37, 1)), (5, range(1, 135, 1)), (6, range(3, 137, 1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2608', () => {
    const query = `INSERT INTO vec2d VALUES (1, [100, 200, 0]), (2, [888, 777, 666]), (3, range(1, 35, 1)), (4, range(3, 37, 1)), (5, range(1, 135, 1)), (6, range(3, 137, 1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2609', () => {
    const query = `INSERT INTO table_for_alter VALUES (1, '1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2610', () => {
    const query = `INSERT INTO table_for_alter VALUES (2, '2'); -- { serverError TOO_MANY_PARTS } INSERT INTO table_for_alter settings parts_to_throw_insert = 100, parts_to_delay_insert = 100 VALUES (2, '2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2611', () => {
    const query = `INSERT INTO table_for_alter VALUES (3, '3'); -- { serverError TOO_MANY_PARTS } ALTER TABLE table_for_alter MODIFY SETTING parts_to_throw_insert = 100, parts_to_delay_insert = 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2612', () => {
    const query = `INSERT INTO table_for_alter VALUES (3, '3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2613', () => {
    const query = `INSERT INTO t2 VALUES (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2614', () => {
    const query = `INSERT INTO replace_partition_source VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2615', () => {
    const query = `insert into function file('02269_data', 'RowBinary') select 1 settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2616', () => {
    const query = `insert into function file('02268_data.jsonl', 'TSV') select 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2617', () => {
    const query = `INSERT INTO function null() SELECT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2618', () => {
    const query = `INSERT INTO function null() SELECT number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2619', () => {
    const query = `INSERT INTO function null() SELECT number, toString(number) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2620', () => {
    const query = `INSERT INTO function null('auto') SELECT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2621', () => {
    const query = `INSERT INTO function null('auto') SELECT number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2622', () => {
    const query = `INSERT INTO function null('auto') SELECT number, toString(number) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2623', () => {
    const query = `INSERT INTO 02267_t FORMAT JSONLines {"n1": 1, "n2": 2} {"n1": 3, "n2": 4} {"n1": 5, "n2": 6};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2624', () => {
    const query = `INSERT INTO 02267_t FORMAT NDJSON {"n1": 1, "n2": 2} {"n1": 3, "n2": 4} {"n1": 5, "n2": 6};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2625', () => {
    const query = `INSERT INTO t VALUES; -- { clientError NO_DATA_TO_INSERT } set throw_if_no_data_to_insert = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2626', () => {
    const query = `INSERT INTO t VALUES;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2627', () => {
    const query = `INSERT INTO t_02267 (b, a, c) SELECT 0, ['x'],  ['1','2','3','4','5','6'] FROM numbers(1) ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2628', () => {
    const query = `INSERT INTO t_02267 (b, a, c) SELECT 1, [],     ['1','2','3','4','5','6'] FROM numbers(300000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2629', () => {
    const query = `INSERT INTO 02265_ordinary_db.join_table VALUES (111);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2630', () => {
    const query = `insert into per_table_ttl_02265 values (1, today(), '1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2631', () => {
    const query = `insert into ttl_02265 values ('2010-01-01', 2010, 'foo');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2632', () => {
    const query = `INSERT INTO alter_enum_array VALUES (1, ['Option2', 'Option1']), (2, ['Option1']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2633', () => {
    const query = `INSERT INTO alter_enum_array VALUES (3, ['Option1','Option3']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2634', () => {
    const query = `insert into table function file('data_02250.jsonl') select NULL as x settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2635', () => {
    const query = `insert into test_02250 select * from file('data_02250.jsonl');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2636', () => {
    const query = `INSERT INTO t(a, b, c, d ,e)  VALUES ('2022-03-31','','','',1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2637', () => {
    const query = `INSERT INTO t(a, b, c, d ,e)  VALUES (1648804224,'','','',2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2638', () => {
    const query = `INSERT INTO t(a, b, c, d ,e)  VALUES ('2022-03-31 10:18:56','','','',3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2639', () => {
    const query = `INSERT INTO t(a, b, c, d ,e)  VALUES ('2022-03-31T10:18:56','','','',4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2640', () => {
    const query = `INSERT INTO t(a, b, c, d ,e)  VALUES ('1648804224','','','',5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2641', () => {
    const query = `insert into test_02249 select * from input() format JSONEachRow {"x" : 1, "y" : "string1"}, {"y" : "string2", "x" : 2};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2642', () => {
    const query = `INSERT INTO t_flatten_tuple VALUES (([(1, 'a'), (2, 'b')], 3, ('c', 4)));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2643', () => {
    const query = `INSERT INTO t_flatten_object VALUES ('{"id": 1, "obj": {"k1": 1, "k2": {"k3": 2, "k4": [{"k5": 3}, {"k5": 4}]}}, "s": "foo"}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2644', () => {
    const query = `INSERT INTO t_flatten_object VALUES ('{"id": 2, "obj": {"k2": {"k3": "str", "k4": [{"k6": 55}]}, "some": 42}, "s": "bar"}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2645', () => {
    const query = `INSERT INTO weird_partitions_02245(d, id) SELECT
toDateTime('2021-12-31 22:30:00') AS d,
number
FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2646', () => {
    const query = `INSERT INTO weird_partitions_02245(d, id) SELECT
toDateTime('2022-01-01 00:30:00') AS d,
number
FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2647', () => {
    const query = `INSERT INTO weird_partitions_02245(d, id) SELECT
toDateTime('2022-01-31 22:30:00') AS d,
number
FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2648', () => {
    const query = `INSERT INTO weird_partitions_02245(d, id) SELECT
toDateTime('2023-01-31 22:30:00') AS d,
number
FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2649', () => {
    const query = `insert into test_02245 select 1 settings s3_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2650', () => {
    const query = `insert into test_02245_2 select 1, 2 settings s3_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2651', () => {
    const query = `insert into test_02245_s3_nested_parquet1 values (1, (2, 'a'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2652', () => {
    const query = `insert into test_02245_s3_nested_parquet2 values (1, (2, (3, 'a')));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2653', () => {
    const query = `insert into test_02245_s3_nested_arrow1 values (1, (2, 'a'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2654', () => {
    const query = `insert into test_02245_s3_nested_arrow2 values (1, (2, (3, 'a')));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2655', () => {
    const query = `insert into test_02245_s3_nested_orc1 values (1, (2, 'a'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2656', () => {
    const query = `insert into test_02245_s3_nested_orc2 values (1, (2, (3, 'a')));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2657', () => {
    const query = `insert into with_nullable values(0,'f'),(0,'usa');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2658', () => {
    const query = `insert into without_nullable values(0,'usa'),(0,'us2a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2659', () => {
    const query = `INSERT INTO lc_table VALUES('x');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2660', () => {
    const query = `INSERT INTO test_table_ipv4 VALUES ('1.1.1.1', '1.1.1.1'), ('', ''); --{clientError CANNOT_PARSE_IPV4} SET input_format_ipv4_default_on_conversion_error = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2661', () => {
    const query = `INSERT INTO test_table_ipv4 VALUES ('1.1.1.1', '1.1.1.1'), ('', '');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2662', () => {
    const query = `INSERT INTO test_table_ipv4_materialized(ip) VALUES ('1.1.1.1'), (''); --{serverError CANNOT_PARSE_IPV4} SET input_format_ipv4_default_on_conversion_error = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2663', () => {
    const query = `INSERT INTO test_table_ipv4_materialized(ip) VALUES ('1.1.1.1'), (''); --{serverError CANNOT_PARSE_IPV4} SET cast_ipv4_ipv6_default_on_conversion_error = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2664', () => {
    const query = `INSERT INTO test_table_ipv4_materialized(ip) VALUES ('1.1.1.1'), ('');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2665', () => {
    const query = `INSERT INTO test_table_ipv6 VALUES ('fe80::9801:43ff:fe1f:7690', 'fe80::9801:43ff:fe1f:7690'), ('1.1.1.1', '1.1.1.1'), ('', ''); --{clientError CANNOT_PARSE_IPV6} SET input_format_ipv6_default_on_conversion_error = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2666', () => {
    const query = `INSERT INTO test_table_ipv6 VALUES ('fe80::9801:43ff:fe1f:7690', 'fe80::9801:43ff:fe1f:7690'), ('1.1.1.1', '1.1.1.1'), ('', '');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2667', () => {
    const query = `INSERT INTO test_table_ipv6_materialized(ip) VALUES ('fe80::9801:43ff:fe1f:7690'), ('1.1.1.1'), (''); --{serverError CANNOT_PARSE_IPV6} SET input_format_ipv6_default_on_conversion_error = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2668', () => {
    const query = `INSERT INTO test_table_ipv6_materialized(ip) VALUES ('fe80::9801:43ff:fe1f:7690'), ('1.1.1.1'), (''); --{serverError CANNOT_PARSE_IPV6} SET cast_ipv4_ipv6_default_on_conversion_error = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2669', () => {
    const query = `INSERT INTO test_table_ipv6_materialized(ip) VALUES ('fe80::9801:43ff:fe1f:7690'), ('1.1.1.1'), ('');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2670', () => {
    const query = `insert into table function hdfs('hdfs://localhost:12222/test_1.tsv', 'TSV', 'column1 UInt32, column2 UInt32, column3 UInt32') select 1, 2, 3 settings hdfs_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2671', () => {
    const query = `insert into table function hdfs('hdfs://localhost:12222/test_2.tsv', 'TSV', 'column1 UInt32, column2 UInt32, column3 UInt32') select 4, 5, 6 settings hdfs_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2672', () => {
    const query = `insert into table function hdfs('hdfs://localhost:12222/test_3.tsv', 'TSV', 'column1 UInt32, column2 UInt32, column3 UInt32') select 7, 8, 9 settings hdfs_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2673', () => {
    const query = `insert into function file('test_02244', 'TSV', 'x String, y UInt32') select 'Hello, world!', 42 settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2674', () => {
    const query = `insert into function file('test_02244', 'CSV', 'x String, y UInt32') select 'Hello, world!', 42 settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2675', () => {
    const query = `insert into function file('test_02244', 'JSONCompactEachRow', 'x String, y UInt32') select 'Hello, world!', 42 settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2676', () => {
    const query = `insert into function file('test_02244', 'Values', 'x String, y UInt32') select 'Hello, world!', 42 settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2677', () => {
    const query = `INSERT INTO test_table VALUES (0, '0000:0000:0000:0000:0000:ffff:1.12.12.12');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2678', () => {
    const query = `INSERT INTO test_table VALUES (1, '0000:0000:0000:0000:0000:ffff:123.123.123.123');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2679', () => {
    const query = `INSERT INTO test_table VALUES (2, '0000:0000:0000:0000:0000:ffff:192.168.100.228');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2680', () => {
    const query = `INSERT INTO test_table VALUES (0, '127.0.0.1', '127.0.0.1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2681', () => {
    const query = `INSERT INTO t_subcolumns_sizes FORMAT JSONEachRow {"id": 1, "arr": [1, 2, 3], "n": null, "d": {"k1": "v1", "k2": [{"k3": 1, "k4": "v2"}, {"k3": 3}]}} INSERT INTO t_subcolumns_sizes FORMAT JSONEachRow {"id": 2, "arr": [0], "n": "foo", "d": {"k1": "v3", "k2": [{"k4": "v4"}, {"k3": "v5", "k5": 5}]}}
OPTIMIZE TABLE t_subcolumns_sizes FINAL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2682', () => {
    const query = `INSERT INTO rdb SELECT
toUInt32(sipHash64(number) % 10) as key,
[key, key+1] as value,
('val2' || toString(key)) as value2
FROM numbers_mt(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2683', () => {
    const query = `INSERT INTO t1 SELECT number as k from numbers_mt(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2684', () => {
    const query = `INSERT INTO t2 SELECT number as k from numbers_mt(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2685', () => {
    const query = `INSERT INTO test SELECT number, toString(number) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2686', () => {
    const query = `INSERT INTO t_sparse_02235 SELECT 1 FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2687', () => {
    const query = `INSERT INTO t_sparse_02235 SELECT 0 FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2688', () => {
    const query = `INSERT INTO t_1 select rowNumberInAllBlocks(), *, '1984-01-01' from t_random_1 limit 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2689', () => {
    const query = `insert into dict_table values ('SomeStr', toDate('2021-01-01'), 1.1), ('SomeStr2', toDate('2021-01-02'), 2.2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2690', () => {
    const query = `insert into data_table values (1.1, 1.2, 'SomeStr', 'SomeStr'), (2.1, 2.2, 'SomeStr2', 'SomeStr2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2691', () => {
    const query = `INSERT INTO ev SELECT number, number FROM numbers(10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2692', () => {
    const query = `INSERT INTO idx SELECT number * 5 FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2693', () => {
    const query = `insert into data_02233 values (1, 10, 100, 1000)(1, 20, 200, 2000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2694', () => {
    const query = `insert into data_02233 values (2, 10, 100, 1000)(2, 20, 200, 2000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2695', () => {
    const query = `insert into data_02233 select number%10, number%3, number from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2696', () => {
    const query = `INSERT INTO t_inter_02233 VALUES (1),(3),(3),(6),(6),(6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2697', () => {
    const query = `INSERT INTO lower_test (a,b) VALUES (1,'A'),(2,'B'),(3,'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2698', () => {
    const query = `INSERT INTO broken (time) VALUES (1647353101000), (1647353101001), (1647353101002), (1647353101003);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2699', () => {
    const query = `INSERT INTO t_functions_to_subcolumns_alias VALUES (1, (100, 'abc'), map('foo', 1, 'bar', 2)) (2, NULL, map());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2700', () => {
    const query = `INSERT INTO hierarchy_source_table VALUES (1, 0), (2, 1), (3, 1), (4, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2701', () => {
    const query = `insert into in_02231 select * from numbers(5e6) settings max_memory_usage='400Mi', max_threads=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2702', () => {
    const query = `INSERT INTO bloom_filter_sizing_pk SELECT
number % 100 as key, -- 100 unique keys
number as value -- whatever
FROM numbers(100_000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2703', () => {
    const query = `INSERT INTO bloom_filter_sizing_sec SELECT
number % 100 as key1, -- 100 unique keys
rand() % 100 as key2, -- 100 unique keys
number as value -- whatever
FROM numbers(100_000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2704', () => {
    const query = `insert into data_02228 select number, 1, number from numbers_mt(10_000) settings max_memory_usage='30Mi', max_partitions_per_insert_block=1024, max_insert_delayed_streams_for_parallel_write=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2705', () => {
    const query = `insert into data_02228 select number, 1, number from numbers_mt(10_000) settings max_memory_usage='30Mi', max_partitions_per_insert_block=1024, max_insert_delayed_streams_for_parallel_write=1000000; -- { serverError MEMORY_LIMIT_EXCEEDED } drop table data_02228;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2706', () => {
    const query = `insert into data_rep_02228 select number, 1, number from numbers_mt(10_000) settings max_memory_usage='30Mi', max_partitions_per_insert_block=1024, max_insert_delayed_streams_for_parallel_write=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2707', () => {
    const query = `insert into data_rep_02228 select number, 1, number from numbers_mt(10_000) settings max_memory_usage='30Mi', max_partitions_per_insert_block=1024, max_insert_delayed_streams_for_parallel_write=1000000; -- { serverError MEMORY_LIMIT_EXCEEDED } drop table data_rep_02228 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2708', () => {
    const query = `INSERT INTO bf_tokenbf_lowcard_test VALUES (1, 'K1', 'K1ZZZZZZ'), (2, 'K2', 'K2ZZZZZZ');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2709', () => {
    const query = `INSERT INTO bf_ngram_lowcard_test VALUES (1, 'K1', 'K1ZZZZZZ'), (2, 'K2', 'K2ZZZZZZ');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2710', () => {
    const query = `INSERT INTO bf_tokenbf_lowcard_test VALUES (3, 'abCD3ef', 'abCD3ef'), (4, 'abCD4ef', 'abCD4ef');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2711', () => {
    const query = `INSERT INTO bf_ngram_lowcard_test   VALUES (3, 'abCD3ef', 'abCD3ef'), (4, 'abCD4ef', 'abCD4ef');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2712', () => {
    const query = `INSERT INTO calendar VALUES (2000, 1), (2001, 2), (2000, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2713', () => {
    const query = `INSERT INTO events32 VALUES (2001, 2), (2001, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2714', () => {
    const query = `INSERT INTO function remote('127.0.0.1', currentDatabase(), t_async_insert_table_function) values (1, 'aaa') (2, 'bbb');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2715', () => {
    const query = `insert into src_02224 values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2716', () => {
    const query = `insert into function cluster('test_cluster_two_shards', currentDatabase(), dst_02224, key) select * from cluster('test_cluster_two_shards', currentDatabase(), src_02224, key)
settings parallel_distributed_insert_select=1, max_distributed_depth=1; -- { serverError TOO_LARGE_DISTRIBUTED_DEPTH }
select * from dst_02224;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2717', () => {
    const query = `insert into function cluster('test_cluster_two_shards', currentDatabase(), dst_02224, key) select * from cluster('test_cluster_two_shards', currentDatabase(), src_02224, key)
settings parallel_distributed_insert_select=1, max_distributed_depth=2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2718', () => {
    const query = `insert into function cluster('test_cluster_two_shards', currentDatabase(), dst_02224, key) select * from cluster('test_cluster_two_shards', currentDatabase(), src_02224, key)
settings parallel_distributed_insert_select=2, max_distributed_depth=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2719', () => {
    const query = `insert into function remote('127.{1,2}', currentDatabase(), dst_02224, key) select * from remote('127.{1,2}', currentDatabase(), src_02224, key)
settings parallel_distributed_insert_select=2, max_distributed_depth=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2720', () => {
    const query = `insert into table function file('data.native.zst') select * from test settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2721', () => {
    const query = `INSERT INTO table1 VALUES(-10.0 ,0.0, 10.0, 0.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2722', () => {
    const query = `INSERT INTO table1 VALUES(-1, -1, 2, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2723', () => {
    const query = `INSERT INTO table1 VALUES(0, 2, 1, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2724', () => {
    const query = `INSERT INTO table1 VALUES(-2, -3, -1, -2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2725', () => {
    const query = `INSERT INTO table1 VALUES(-87, 0, -85, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2726', () => {
    const query = `INSERT INTO table1 VALUES(-89, 1, -88, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2727', () => {
    const query = `INSERT INTO table1 VALUES(-84, 1, -83, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2728', () => {
    const query = `INSERT INTO table1 VALUES(-88, 90, -86, 91);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2729', () => {
    const query = `INSERT INTO table1 VALUES(-84, -91, -83, -90);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2730', () => {
    const query = `INSERT INTO table1 VALUES(-90, 181, -89, 182);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2731', () => {
    const query = `INSERT INTO table1 VALUES(-84, 181, -83, 182);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2732', () => {
    const query = `INSERT INTO table1 VALUES(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2733', () => {
    const query = `INSERT INTO table1 VALUES(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2734', () => {
    const query = `INSERT INTO table1 VALUES(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2735', () => {
    const query = `INSERT INTO table1 VALUES(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2736', () => {
    const query = `INSERT INTO table1 VALUES(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2737', () => {
    const query = `INSERT INTO table1 VALUES(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2738', () => {
    const query = `INSERT INTO table1 VALUES(6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2739', () => {
    const query = `INSERT INTO table1 VALUES(7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2740', () => {
    const query = `INSERT INTO table1 VALUES(8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2741', () => {
    const query = `INSERT INTO table1 VALUES(9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2742', () => {
    const query = `INSERT INTO table1 VALUES(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2743', () => {
    const query = `INSERT INTO table1 VALUES(11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2744', () => {
    const query = `INSERT INTO table1 VALUES(12);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2745', () => {
    const query = `INSERT INTO table1 VALUES(13);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2746', () => {
    const query = `INSERT INTO table1 VALUES(14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2747', () => {
    const query = `INSERT INTO table1 VALUES(15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2748', () => {
    const query = `insert into table function file('data.jsonl', 'JSONEachRow', 'x UInt32') select * from numbers(10) SETTINGS engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2749', () => {
    const query = `insert into table function file('/dev/null', 'Parquet', 'number UInt64') select * from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2750', () => {
    const query = `insert into table function file('/dev/null', 'ORC', 'number UInt64') select * from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2751', () => {
    const query = `insert into table function file('/dev/null', 'JSON', 'number UInt64') select * from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2752', () => {
    const query = `INSERT INTO t_key_condition_float VALUES (0.1), (0.2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2753', () => {
    const query = `INSERT INTO t_key_condition_float VALUES (1), (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2754', () => {
    const query = `INSERT INTO minimum_sample_size_continuos VALUES (20, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2755', () => {
    const query = `INSERT INTO minimum_sample_size_continuos VALUES (200, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2756', () => {
    const query = `INSERT INTO minimum_sample_size_conversion VALUES (0.9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2757', () => {
    const query = `INSERT INTO minimum_sample_size_conversion VALUES (0.8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2758', () => {
    const query = `INSERT INTO 02005_test_table VALUES (map(0, 5));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2759', () => {
    const query = `INSERT INTO 02005_test_table VALUES (map(0, 5, 5, 10));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2760', () => {
    const query = `INSERT INTO 02005_test_table VALUES (map(-5, -5, 0, 5, 5, 10));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2761', () => {
    const query = `INSERT INTO 02005_test_table VALUES (map(-5, -5, 0, 5, 5, 10, 10, 15));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2762', () => {
    const query = `INSERT INTO 02005_test_table VALUES ([0], [5]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2763', () => {
    const query = `INSERT INTO 02005_test_table VALUES ([0, 5], [5, 10]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2764', () => {
    const query = `INSERT INTO 02005_test_table VALUES ([-5, 0, 5], [-5, 5, 10]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2765', () => {
    const query = `INSERT INTO 02005_test_table VALUES ([-5, 0, 5, 10], [-5, 5, 10, 15]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2766', () => {
    const query = `INSERT INTO t_ephemeral_02205_1 VALUES (DEFAULT, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2767', () => {
    const query = `INSERT INTO data_02201 SELECT number, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2768', () => {
    const query = `INSERT INTO data_02201 SELECT number, number+1 FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2769', () => {
    const query = `INSERT INTO data_02200 SELECT number, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2770', () => {
    const query = `INSERT INTO t_async_insert_02193_1 SETTINGS async_insert = 1 FORMAT CSV 1,aaa INSERT INTO t_async_insert_02193_1 SETTINGS async_insert = 1 FORMAT Values (2, 'bbb');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2771', () => {
    const query = `INSERT INTO t_async_insert_02193_1 VALUES (3, 'ccc');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2772', () => {
    const query = `INSERT INTO t_async_insert_02193_1 FORMAT JSONEachRow {"id": 4, "s": "ddd"};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2773', () => {
    const query = `INSERT INTO t_nested_with_dots VALUES ([1], [[1]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2774', () => {
    const query = `INSERT INTO t_nested_with_dots VALUES ([(1, [1])]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2775', () => {
    const query = `INSERT INTO t_nested_with_dots VALUES ((('a', 1), 'b'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2776', () => {
    const query = `INSERT INTO 02188_test_dictionary_source VALUES (0, 'Value');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2777', () => {
    const query = `INSERT INTO TABLE test_02187 VALUES ('nothing', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2778', () => {
    const query = `INSERT INTO TABLE test_02187 VALUES ('something', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2779', () => {
    const query = `INSERT INTO data_a_02187 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2780', () => {
    const query = `INSERT INTO data_a_02187 SELECT * FROM system.one;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2781', () => {
    const query = `INSERT INTO 02186_range_dictionary_source_table VALUES (1, '2020-01-01', '2100-01-01', 'Value0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2782', () => {
    const query = `INSERT INTO 02186_range_dictionary_source_table VALUES (1, '2020-01-02', '2100-01-01', 'Value1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2783', () => {
    const query = `INSERT INTO 02186_range_dictionary_source_table VALUES (1, '2020-01-03', '2100-01-01', 'Value2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2784', () => {
    const query = `INSERT INTO 02185_range_dictionary_source_table VALUES (0, NULL, 5000, 'Value0'), (0, 5001, 10000, 'Value1'), (0, 10001, NULL, 'Value2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2785', () => {
    const query = `insert into t values ([1, 2, 3, 4, 5, 6, 7, 8], -2, -2), ([1, 2, 3, 4, 5, 6, 7, 8], -3, -3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2786', () => {
    const query = `INSERT INTO 02184_range_dictionary_source_table VALUES (1, 0, 18446744073709551615, 'value0', 'value1', 'value2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2787', () => {
    const query = `INSERT INTO t_nested_tuple FORMAT JSONEachRow {"endUserIDs":{"_experience":{"aaid":{"id":"id_1","namespace":{"code":"code_1"},"primary":1},"mcid":{"id":"id_2","namespace":{"code":"code_2"},"primary":2}}}};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2788', () => {
    const query = `INSERT INTO ips_v6 SELECT toIPv6('::ffff:127.0.0.1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2789', () => {
    const query = `INSERT INTO ips_v6 values       ('::ffff:127.0.0.1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2790', () => {
    const query = `INSERT INTO ips_v6     FORMAT TSV ::ffff:127.0.0.1 INSERT INTO ips_v6 SELECT       ('::ffff:127.0.0.1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2791', () => {
    const query = `insert into ipv6_test26473 values ('2600:1011:b104:a86f:2832:b9c6:6d45:237b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2792', () => {
    const query = `INSERT INTO test_table (EventDate, UTCEventTime) VALUES ('2014-01-02', '2014-01-02 03:04:06');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2793', () => {
    const query = `INSERT INTO 02183_dictionary_test_table VALUES (0), (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2794', () => {
    const query = `INSERT INTO ip_trie_dictionary_source_table VALUES ('127.0.0.0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2795', () => {
    const query = `INSERT INTO 02183_polygon_dictionary_source_table VALUES ([[[(0, 0), (0, 1), (1, 1), (1, 0)]]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2796', () => {
    const query = `INSERT INTO 02183_range_dictionary_source_table VALUES(0, 0, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2797', () => {
    const query = `INSERT INTO 02183_dictionary_source_table VALUES (0, '2019-05-05', '2019-05-05', '2019-05-05', '2019-05-05');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2798', () => {
    const query = `INSERT INTO 02183_ip_trie_dictionary_source_table VALUES ('127.0.0.1', '2019-05-05', '2019-05-05', '2019-05-05', '2019-05-05');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2799', () => {
    const query = `INSERT INTO 02183_polygon_dictionary_source_table VALUES ([[[(0, 0), (0, 1), (1, 1), (1, 0)]]], '2019-05-05', '2019-05-05', '2019-05-05', '2019-05-05');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2800', () => {
    const query = `INSERT INTO 02183_range_dictionary_source_table VALUES(0, 0, 1, '2019-05-05', '2019-05-05', '2019-05-05', '2019-05-05');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2801', () => {
    const query = `INSERT INTO 02181_test_table VALUES (0, 'Value');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2802', () => {
    const query = `insert into t settings bool_true_representation='P4P0' values ('P4P0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2803', () => {
    const query = `insert into t_group_by_lowcardinality select today() as p_date, toString(number/5) as val from numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2804', () => {
    const query = `insert into t_group_by_lowcardinality select today() as p_date, Null as val from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2805', () => {
    const query = `INSERT INTO t_sparse_detach SELECT number, number % 21 = 0 ? toString(number) : '' FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2806', () => {
    const query = `INSERT INTO 02179_test_table VALUES (0, 'Value', 10, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2807', () => {
    const query = `INSERT INTO 02179_test_table VALUES (0, 'Value', 15, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2808', () => {
    const query = `INSERT INTO 02179_test_table VALUES (0, 'Value', 15, 20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2809', () => {
    const query = `insert into t values (0.9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2810', () => {
    const query = `INSERT INTO dict_db_02179.dict_data VALUES(1,11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2811', () => {
    const query = `INSERT INTO test_degs_to_rads VALUES (-1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2812', () => {
    const query = `INSERT INTO test_degs_to_rads VALUES (-180);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2813', () => {
    const query = `INSERT INTO test_degs_to_rads VALUES (-180.6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2814', () => {
    const query = `INSERT INTO test_degs_to_rads VALUES (-360);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2815', () => {
    const query = `INSERT INTO test_degs_to_rads VALUES (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2816', () => {
    const query = `INSERT INTO test_degs_to_rads VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2817', () => {
    const query = `INSERT INTO test_degs_to_rads VALUES (180);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2818', () => {
    const query = `INSERT INTO test_degs_to_rads VALUES (180.5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2819', () => {
    const query = `INSERT INTO test_degs_to_rads VALUES (360);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2820', () => {
    const query = `INSERT INTO test_rads_to_degs VALUES (-6.283185307179586);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2821', () => {
    const query = `INSERT INTO test_rads_to_degs VALUES (-3.152064629101759);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2822', () => {
    const query = `INSERT INTO test_rads_to_degs VALUES (-3.141592653589793);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2823', () => {
    const query = `INSERT INTO test_rads_to_degs VALUES (-0.017453292519943295);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2824', () => {
    const query = `INSERT INTO test_rads_to_degs VALUES(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2825', () => {
    const query = `INSERT INTO test_rads_to_degs VALUES(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2826', () => {
    const query = `INSERT INTO test_rads_to_degs VALUES(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2827', () => {
    const query = `INSERT INTO test_rads_to_degs VALUES(-10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2828', () => {
    const query = `INSERT INTO test_rads_to_degs VALUES (0.017453292519943295);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2829', () => {
    const query = `INSERT INTO test_rads_to_degs VALUES (3.141592653589793);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2830', () => {
    const query = `INSERT INTO test_rads_to_degs VALUES (3.1503192998497647);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2831', () => {
    const query = `INSERT INTO test_rads_to_degs VALUES (6.283185307179586);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2832', () => {
    const query = `INSERT INTO TESTTABLE values (0,'0',['1']), (1,'1',['1']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2833', () => {
    const query = `insert into data_02177 values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2834', () => {
    const query = `INSERT INTO left SELECT number, toString(number) FROM numbers(25367182);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2835', () => {
    const query = `INSERT INTO right SELECT number, toString(number) FROM numbers(23124707);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2836', () => {
    const query = `INSERT INTO t02176 VALUES (1559952000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2837', () => {
    const query = `INSERT INTO 02176_test_simple_key_table VALUES (0, 'Value');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2838', () => {
    const query = `INSERT INTO 02176_test_complex_key_table VALUES (0, '0', 'Value');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2839', () => {
    const query = `INSERT INTO t1 SELECT number, number FROM system.numbers LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2840', () => {
    const query = `INSERT INTO t1 WITH
(SELECT max(i) FROM t1) AS t1
SELECT
number as i,
t1 + t1 + t1 AS j -- Using global cache
FROM system.numbers
LIMIT 100
SETTINGS
min_insert_block_size_rows=5,
max_insert_block_size=5,
min_insert_block_size_rows_for_materialized_views=5,
max_block_size=5,
max_threads=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2841', () => {
    const query = `INSERT INTO t1 SELECT 0 as i, number as j from numbers(100)
SETTINGS
min_insert_block_size_rows=5,
max_insert_block_size=5,
min_insert_block_size_rows_for_materialized_views=5,
max_block_size=5,
max_threads=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2842', () => {
    const query = `INSERT INTO t1 SELECT number as i, number as j from numbers(100)
SETTINGS
min_insert_block_size_rows=5,
max_insert_block_size=5,
min_insert_block_size_rows_for_materialized_views=5,
max_block_size=5,
max_threads=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2843', () => {
    const query = `INSERT INTO table_map SELECT number, map('key1', number, 'key2', number * 2) FROM numbers(1111, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2844', () => {
    const query = `INSERT INTO table_map SELECT number, map('key3', number, 'key2', number + 1, 'key4', number + 2) FROM numbers(100, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2845', () => {
    const query = `INSERT INTO counter SELECT number, now() FROM numbers(500);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2846', () => {
    const query = `insert into table function file('data.avro', 'Parquet', 'x UInt64') select * from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2847', () => {
    const query = `insert into table function file('data.avro', 'Parquet', 'x UInt64') select * from numbers(10); -- { serverError CANNOT_APPEND_TO_FILE } insert into table function file('data.avro', 'Parquet', 'x UInt64') select * from numbers(10); -- { serverError CANNOT_APPEND_TO_FILE }
select 'OK';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2848', () => {
    const query = `INSERT INTO test_nested_default(\`id\`, \`with_dot.array\`) VALUES('id', ['str1', 'str2']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2849', () => {
    const query = `INSERT INTO h3_indexes VALUES (1298057039473278975);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2850', () => {
    const query = `INSERT INTO h3_indexes VALUES (1370114633511206911);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2851', () => {
    const query = `INSERT INTO h3_indexes VALUES (1442172227549134847);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2852', () => {
    const query = `INSERT INTO h3_indexes VALUES (1514229821587062783);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2853', () => {
    const query = `INSERT INTO h3_indexes VALUES (1232301846085763071);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2854', () => {
    const query = `INSERT INTO h3_indexes VALUES (1304359440123691007);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2855', () => {
    const query = `INSERT INTO h3_indexes VALUES (1376417034161618943);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2856', () => {
    const query = `INSERT INTO h3_indexes VALUES (1448474628199546879);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2857', () => {
    const query = `INSERT INTO h3_indexes VALUES (1598506838100279295);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2858', () => {
    const query = `INSERT INTO h3_indexes VALUES (1238219417666453503);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2859', () => {
    const query = `INSERT INTO h3_indexes VALUES (1310277011704381439);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2860', () => {
    const query = `INSERT INTO h3_indexes VALUES (1382334605742309375);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2861', () => {
    const query = `INSERT INTO h3_indexes VALUES (1458182628678041599);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2862', () => {
    const query = `INSERT INTO h3_indexes VALUES (1530240222715969535);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2863', () => {
    const query = `INSERT INTO h3_indexes VALUES (1602297816753897471);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2864', () => {
    const query = `INSERT INTO h3_indexes VALUES (1242009915283734527);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2865', () => {
    const query = `INSERT INTO test_tb VALUES (1, '1'), (2, '2'), (3, '3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2866', () => {
    const query = `INSERT INTO 02162_test_table VALUES (0, 'Value', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2867', () => {
    const query = `INSERT INTO h3_indexes VALUES (579205133326352383);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2868', () => {
    const query = `INSERT INTO h3_indexes VALUES (581263419093549055);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2869', () => {
    const query = `INSERT INTO h3_indexes VALUES (589753847883235327);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2870', () => {
    const query = `INSERT INTO h3_indexes VALUES (594082350283882495);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2871', () => {
    const query = `INSERT INTO h3_indexes VALUES (598372386957426687);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2872', () => {
    const query = `INSERT INTO h3_indexes VALUES (599542359671177215);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2873', () => {
    const query = `INSERT INTO h3_indexes VALUES (604296355086598143);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2874', () => {
    const query = `INSERT INTO h3_indexes VALUES (608785214872748031);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2875', () => {
    const query = `INSERT INTO h3_indexes VALUES (615732192485572607);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2876', () => {
    const query = `INSERT INTO h3_indexes VALUES (617056794467368959);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2877', () => {
    const query = `INSERT INTO h3_indexes VALUES (624586477873168383);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2878', () => {
    const query = `INSERT INTO h3_indexes VALUES (627882919484481535);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2879', () => {
    const query = `INSERT INTO h3_indexes VALUES (634600058503392255);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2880', () => {
    const query = `INSERT INTO h3_indexes VALUES (635544851677385791);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2881', () => {
    const query = `INSERT INTO h3_indexes VALUES (639763125756281263);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2882', () => {
    const query = `INSERT INTO h3_indexes VALUES (644178757620501158);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2883', () => {
    const query = `INSERT INTO mean_ztest SELECT number, 0 FROM numbers(100) WHERE number % 2 = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2884', () => {
    const query = `INSERT INTO mean_ztest SELECT number, 1 FROM numbers(100) WHERE number % 2 = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2885', () => {
    const query = `INSERT INTO proportions_ztest VALUES (10, 11, 100, 101);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2886', () => {
    const query = `insert into merge_kek_1 select number, number from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2887', () => {
    const query = `insert into merge_kek_2 select number + 500, number + 500 from numbers(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2888', () => {
    const query = `insert into t_02156_ololo_1 values (1, 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2889', () => {
    const query = `insert into t_02156_ololo_2 values (2, 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2890', () => {
    const query = `INSERT INTO t_02156_mt1 SELECT number, toString(number) FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2891', () => {
    const query = `INSERT INTO t_02156_mt2 SELECT number, toString(number) FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2892', () => {
    const query = `INSERT INTO t_02156_log SELECT number, toString(number) FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2893', () => {
    const query = `INSERT INTO nested_test (x, \`nest.col1\`, \`nest.col2\`) values (1, ['a', 'b'], [3, 4]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2894', () => {
    const query = `insert into test select * from numbers(10, 10); -- { serverError CANNOT_APPEND_TO_FILE } insert into test select * from numbers(10, 10) settings engine_file_allow_create_multiple_files=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2895', () => {
    const query = `insert into test select * from numbers(10) settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2896', () => {
    const query = `insert into table function file(concat(currentDatabase(), '/test2/data.Parquet'), 'Parquet', 'number UInt64') select * from numbers(10) settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2897', () => {
    const query = `insert into table function file(concat(currentDatabase(), '/test2/data.Parquet'), 'Parquet', 'number UInt64') select * from numbers(10, 10); -- { serverError CANNOT_APPEND_TO_FILE } insert into table function file(concat(currentDatabase(), '/test2/data.Parquet'), 'Parquet', 'number UInt64') select * from numbers(10, 10) settings engine_file_allow_create_multiple_files=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2898', () => {
    const query = `insert into table function file(concat(currentDatabase(), '/test4/data.Parquet.gz'), 'Parquet', 'number UInt64') select * from numbers(10) settings engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2899', () => {
    const query = `insert into table function file(concat(currentDatabase(), '/test4/data.Parquet.gz'), 'Parquet', 'number UInt64') select * from numbers(10, 10); -- { serverError CANNOT_APPEND_TO_FILE } insert into table function file(concat(currentDatabase(), '/test4/data.Parquet.gz'), 'Parquet', 'number UInt64') select * from numbers(10, 10) settings engine_file_allow_create_multiple_files=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2900', () => {
    const query = `INSERT INTO h3_indexes VALUES (1,577023702256844799,1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2901', () => {
    const query = `INSERT INTO h3_indexes VALUES (2,577023702256844799,2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2902', () => {
    const query = `INSERT INTO h3_indexes VALUES (3,577023702256844799,3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2903', () => {
    const query = `INSERT INTO h3_indexes VALUES (4,577023702256844799,4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2904', () => {
    const query = `INSERT INTO h3_indexes VALUES (5,577023702256844799,5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2905', () => {
    const query = `INSERT INTO h3_indexes VALUES (6,577023702256844799,6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2906', () => {
    const query = `INSERT INTO h3_indexes VALUES (7,577023702256844799,7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2907', () => {
    const query = `INSERT INTO h3_indexes VALUES (8,577023702256844799,8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2908', () => {
    const query = `INSERT INTO h3_indexes VALUES (9,577023702256844799,9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2909', () => {
    const query = `INSERT INTO h3_indexes VALUES (10,577023702256844799,10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2910', () => {
    const query = `INSERT INTO h3_indexes VALUES (11,577023702256844799,11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2911', () => {
    const query = `INSERT INTO h3_indexes VALUES (12,577023702256844799,12);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2912', () => {
    const query = `INSERT INTO h3_indexes VALUES (13,577023702256844799,13);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2913', () => {
    const query = `INSERT INTO h3_indexes VALUES (14,577023702256844799,14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2914', () => {
    const query = `INSERT INTO h3_indexes VALUES (15,577023702256844799,15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2915', () => {
    const query = `INSERT INTO h3_indexes VALUES (16,581518505791193087,2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2916', () => {
    const query = `INSERT INTO h3_indexes VALUES (17,581518505791193087,3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2917', () => {
    const query = `INSERT INTO h3_indexes VALUES (18,581518505791193087,4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2918', () => {
    const query = `INSERT INTO h3_indexes VALUES (19,581518505791193087,5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2919', () => {
    const query = `INSERT INTO h3_indexes VALUES (20,581518505791193087,6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2920', () => {
    const query = `INSERT INTO h3_indexes VALUES (21,581518505791193087,7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2921', () => {
    const query = `INSERT INTO h3_indexes VALUES (22,581518505791193087,8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2922', () => {
    const query = `INSERT INTO h3_indexes VALUES (23,581518505791193087,9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2923', () => {
    const query = `INSERT INTO h3_indexes VALUES (24,581518505791193087,10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2924', () => {
    const query = `INSERT INTO h3_indexes VALUES (25,581518505791193087,11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2925', () => {
    const query = `INSERT INTO h3_indexes VALUES (26,581518505791193087,12);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2926', () => {
    const query = `INSERT INTO h3_indexes VALUES (27,581518505791193087,13);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2927', () => {
    const query = `INSERT INTO h3_indexes VALUES (28,581518505791193087,14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2928', () => {
    const query = `INSERT INTO h3_indexes VALUES (29,581518505791193087,15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2929', () => {
    const query = `INSERT INTO h3_indexes VALUES (30,586021555662749695,3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2930', () => {
    const query = `INSERT INTO h3_indexes VALUES (31,586021555662749695,4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2931', () => {
    const query = `INSERT INTO h3_indexes VALUES (32,586021555662749695,5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2932', () => {
    const query = `INSERT INTO h3_indexes VALUES (33,586021555662749695,6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2933', () => {
    const query = `INSERT INTO h3_indexes VALUES (34,586021555662749695,7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2934', () => {
    const query = `INSERT INTO h3_indexes VALUES (35,586021555662749695,8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2935', () => {
    const query = `INSERT INTO h3_indexes VALUES (36,586021555662749695,9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2936', () => {
    const query = `INSERT INTO h3_indexes VALUES (37,586021555662749695,10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2937', () => {
    const query = `INSERT INTO h3_indexes VALUES (38,586021555662749695,11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2938', () => {
    const query = `INSERT INTO h3_indexes VALUES (39,586021555662749695,12);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2939', () => {
    const query = `INSERT INTO h3_indexes VALUES (40,586021555662749695,13);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2940', () => {
    const query = `INSERT INTO h3_indexes VALUES (41,586021555662749695,14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2941', () => {
    const query = `INSERT INTO h3_indexes VALUES (42,586021555662749695,15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2942', () => {
    const query = `INSERT INTO h3_indexes VALUES (43,590525017851166719,4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2943', () => {
    const query = `INSERT INTO h3_indexes VALUES (44,590525017851166719,5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2944', () => {
    const query = `INSERT INTO h3_indexes VALUES (45,590525017851166719,6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2945', () => {
    const query = `INSERT INTO h3_indexes VALUES (46,590525017851166719,7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2946', () => {
    const query = `INSERT INTO h3_indexes VALUES (47,590525017851166719,8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2947', () => {
    const query = `INSERT INTO h3_indexes VALUES (48,590525017851166719,9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2948', () => {
    const query = `INSERT INTO h3_indexes VALUES (49,590525017851166719,10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2949', () => {
    const query = `INSERT INTO h3_indexes VALUES (50,590525017851166719,11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2950', () => {
    const query = `INSERT INTO h3_indexes VALUES (51,590525017851166719,12);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2951', () => {
    const query = `INSERT INTO h3_indexes VALUES (52,590525017851166719,13);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2952', () => {
    const query = `INSERT INTO h3_indexes VALUES (53,590525017851166719,14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2953', () => {
    const query = `INSERT INTO h3_indexes VALUES (54,590525017851166719,15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2954', () => {
    const query = `INSERT INTO h3_indexes VALUES (55,595028608888602623,5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2955', () => {
    const query = `INSERT INTO h3_indexes VALUES (56,595028608888602623,6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2956', () => {
    const query = `INSERT INTO h3_indexes VALUES (57,595028608888602623,7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2957', () => {
    const query = `INSERT INTO h3_indexes VALUES (58,595028608888602623,8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2958', () => {
    const query = `INSERT INTO h3_indexes VALUES (59,595028608888602623,9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2959', () => {
    const query = `INSERT INTO h3_indexes VALUES (60,595028608888602623,10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2960', () => {
    const query = `INSERT INTO h3_indexes VALUES (61,595028608888602623,11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2961', () => {
    const query = `INSERT INTO h3_indexes VALUES (62,595028608888602623,12);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2962', () => {
    const query = `INSERT INTO h3_indexes VALUES (63,595028608888602623,13);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2963', () => {
    const query = `INSERT INTO h3_indexes VALUES (64,595028608888602623,14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2964', () => {
    const query = `INSERT INTO h3_indexes VALUES (65,595028608888602623,15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2965', () => {
    const query = `INSERT INTO h3_indexes VALUES (66,599532206368489471,6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2966', () => {
    const query = `INSERT INTO h3_indexes VALUES (67,599532206368489471,7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2967', () => {
    const query = `INSERT INTO h3_indexes VALUES (68,599532206368489471,8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2968', () => {
    const query = `INSERT INTO h3_indexes VALUES (69,599532206368489471,9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2969', () => {
    const query = `INSERT INTO h3_indexes VALUES (70,599532206368489471,10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2970', () => {
    const query = `INSERT INTO h3_indexes VALUES (71,599532206368489471,11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2971', () => {
    const query = `INSERT INTO h3_indexes VALUES (72,599532206368489471,12);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2972', () => {
    const query = `INSERT INTO h3_indexes VALUES (73,599532206368489471,13);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2973', () => {
    const query = `INSERT INTO h3_indexes VALUES (74,599532206368489471,14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2974', () => {
    const query = `INSERT INTO h3_indexes VALUES (75,599532206368489471,15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2975', () => {
    const query = `INSERT INTO h3_indexes VALUES (76,604035805861642239,7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2976', () => {
    const query = `INSERT INTO h3_indexes VALUES (77,604035805861642239,8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2977', () => {
    const query = `INSERT INTO h3_indexes VALUES (78,604035805861642239,9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2978', () => {
    const query = `INSERT INTO h3_indexes VALUES (79,604035805861642239,10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2979', () => {
    const query = `INSERT INTO h3_indexes VALUES (80,604035805861642239,11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2980', () => {
    const query = `INSERT INTO h3_indexes VALUES (81,604035805861642239,12);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2981', () => {
    const query = `INSERT INTO h3_indexes VALUES (82,604035805861642239,13);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2982', () => {
    const query = `INSERT INTO h3_indexes VALUES (83,604035805861642239,14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2983', () => {
    const query = `INSERT INTO h3_indexes VALUES (84,604035805861642239,15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2984', () => {
    const query = `INSERT INTO h3_indexes VALUES (85,608136739873095679,8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2985', () => {
    const query = `INSERT INTO h3_indexes VALUES (86,608136739873095679,9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2986', () => {
    const query = `INSERT INTO h3_indexes VALUES (87,608136739873095679,10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2987', () => {
    const query = `INSERT INTO h3_indexes VALUES (88,608136739873095679,11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2988', () => {
    const query = `INSERT INTO h3_indexes VALUES (89,608136739873095679,12);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2989', () => {
    const query = `INSERT INTO h3_indexes VALUES (90,608136739873095679,13);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2990', () => {
    const query = `INSERT INTO h3_indexes VALUES (91,608136739873095679,14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2991', () => {
    const query = `INSERT INTO h3_indexes VALUES (92,608136739873095679,15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2992', () => {
    const query = `INSERT INTO h3_indexes VALUES (93,612640339489980415,9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2993', () => {
    const query = `INSERT INTO h3_indexes VALUES (94,612640339489980415,10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2994', () => {
    const query = `INSERT INTO h3_indexes VALUES (95,612640339489980415,11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2995', () => {
    const query = `INSERT INTO h3_indexes VALUES (96,612640339489980415,12);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2996', () => {
    const query = `INSERT INTO h3_indexes VALUES (97,612640339489980415,13);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2997', () => {
    const query = `INSERT INTO h3_indexes VALUES (98,612640339489980415,14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2998', () => {
    const query = `INSERT INTO h3_indexes VALUES (99,612640339489980415,15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 2999', () => {
    const query = `INSERT INTO h3_indexes VALUES (100,617143939115515903,10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3000', () => {
    const query = `INSERT INTO h3_indexes VALUES (101,617143939115515903,11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3001', () => {
    const query = `INSERT INTO h3_indexes VALUES (102,617143939115515903,12);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3002', () => {
    const query = `INSERT INTO h3_indexes VALUES (103,617143939115515903,13);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3003', () => {
    const query = `INSERT INTO h3_indexes VALUES (104,617143939115515903,14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3004', () => {
    const query = `INSERT INTO h3_indexes VALUES (105,617143939115515903,15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3005', () => {
    const query = `INSERT INTO h3_indexes VALUES (106,621647538742657023,11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3006', () => {
    const query = `INSERT INTO h3_indexes VALUES (107,621647538742657023,12);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3007', () => {
    const query = `INSERT INTO h3_indexes VALUES (108,621647538742657023,13);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3008', () => {
    const query = `INSERT INTO h3_indexes VALUES (109,621647538742657023,14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3009', () => {
    const query = `INSERT INTO h3_indexes VALUES (110,621647538742657023,15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3010', () => {
    const query = `INSERT INTO h3_indexes VALUES (111,626151138369998847,12);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3011', () => {
    const query = `INSERT INTO h3_indexes VALUES (112,626151138369998847,13);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3012', () => {
    const query = `INSERT INTO h3_indexes VALUES (113,626151138369998847,14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3013', () => {
    const query = `INSERT INTO h3_indexes VALUES (114,626151138369998847,15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3014', () => {
    const query = `INSERT INTO h3_indexes VALUES (115,630654737997365759,13);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3015', () => {
    const query = `INSERT INTO h3_indexes VALUES (116,630654737997365759,14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3016', () => {
    const query = `INSERT INTO h3_indexes VALUES (117,630654737997365759,15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3017', () => {
    const query = `INSERT INTO h3_indexes VALUES (118,635158337624735807,14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3018', () => {
    const query = `INSERT INTO h3_indexes VALUES (119,635158337624735807,15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3019', () => {
    const query = `INSERT INTO h3_indexes VALUES (120,639661937252106247,15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3020', () => {
    const query = `INSERT INTO 02155_test_table VALUES (0, 'Value');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3021', () => {
    const query = `INSERT INTO t values (-4.5, 4.5, -45.5, 45.5, 2.5, -3.5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3022', () => {
    const query = `INSERT INTO t values (4.5, -4.5, 45.5, -45.5, -3.5, 2.5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3023', () => {
    const query = `INSERT INTO t values (2.5, -2.5, 25.5, -25.5, -2.5, 3.5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3024', () => {
    const query = `INSERT INTO t values (-2.5, 2.5, -25.5, 25.5, 3.5, -2.5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3025', () => {
    const query = `INSERT INTO default_table(x) values (DEFAULT);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3026', () => {
    const query = `INSERT INTO default_table(x, z) values (1, DEFAULT);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3027', () => {
    const query = `INSERT INTO default_table values (2, 33, DEFAULT);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3028', () => {
    const query = `INSERT INTO test_table VALUES (0, toDate32('2019-05-05'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3029', () => {
    const query = `insert into test_02152 select 1, 'Hello', [1,2,3], tuple(2, 'World', [4,5,6]); `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3030', () => {
    const query = `insert into test_02152 select 1, 'Hello', [1,2,3], tuple(2, 'World', [4,5,6]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3031', () => {
    const query = `insert into table_02152 values ('a_1', 'b_1') ('a_2', 'b_2') ('a_1', 'b_3') ('a_2', 'b_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3032', () => {
    const query = `insert into tab_lc select number, toString(number % 10) from numbers(20000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3033', () => {
    const query = `INSERT INTO t_read_in_order SELECT '2020-10-10', number % 10, number FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3034', () => {
    const query = `INSERT INTO t_read_in_order SELECT '2020-10-11', number % 10, number FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3035', () => {
    const query = `INSERT INTO t_read_in_order SELECT '2020-10-12', number, number FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3036', () => {
    const query = `INSERT INTO t_read_in_order VALUES (0, 100), (1, 2), (1, 3), (1, 4), (2, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3037', () => {
    const query = `INSERT INTO t_read_in_order SELECT toDateTime('2020-10-10 00:00:00') + number, 1 / (number % 100 + 1), number FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3038', () => {
    const query = `INSERT INTO 02148_test_table VALUES (0, 'Value');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3039', () => {
    const query = `INSERT INTO source SELECT number FROM numbers(2000) SETTINGS min_insert_block_size_rows=1500, max_insert_block_size=1500;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3040', () => {
    const query = `INSERT INTO main VALUES ('sku_0001','black','women','nice shirt');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3041', () => {
    const query = `INSERT INTO t1 VALUES (0, '');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3042', () => {
    const query = `INSERT INTO t2 VALUES (0, '');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3043', () => {
    const query = `insert into errors_local select toString(number) from numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3044', () => {
    const query = `INSERT INTO 02131_rqtable VALUES (1), (2), (3), (4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3045', () => {
    const query = `INSERT INTO t_index_non_materialized VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3046', () => {
    const query = `INSERT INTO 02131_rptable VALUES (1), (2), (3), (4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3047', () => {
    const query = `insert into t select number from numbers(300);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3048', () => {
    const query = `INSERT INTO t_materialize_column VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3049', () => {
    const query = `INSERT INTO t_materialize_column (i) VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3050', () => {
    const query = `insert into ttl_test_02129 select number, '', '2021-01-01' from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3051', () => {
    const query = `insert into ttl_test_02129 select number, '', '2021-01-01', 1 from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3052', () => {
    const query = `INSERT INTO data VALUES(1,now());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3053', () => {
    const query = `insert into src select * from numbers(1e6) settings log_queries=1, max_untracked_memory=0, parallel_view_processing=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3054', () => {
    const query = `INSERT INTO 02125_test_table VALUES (0, 'Value');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3055', () => {
    const query = `insert into test values (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3056', () => {
    const query = `INSERT INTO t_uncompressed_cache SELECT number, number FROM numbers(200);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3057', () => {
    const query = `INSERT INTO insert_dedup_token1 VALUES(1, 1001);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3058', () => {
    const query = `INSERT INTO insert_dedup_token1 VALUES(2, 1002);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3059', () => {
    const query = `INSERT INTO insert_dedup_token2 VALUES(1, 1001); -- deduplicated by data digest SELECT * FROM insert_dedup_token2 ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3060', () => {
    const query = `INSERT INTO insert_dedup_token2 VALUES(3, 1003); -- deduplicated by dedup token SELECT * FROM insert_dedup_token2 ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3061', () => {
    const query = `INSERT INTO insert_dedup_token2  VALUES(2, 1002); -- inserted SELECT * FROM insert_dedup_token2 ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3062', () => {
    const query = `INSERT INTO test SELECT 'case1', number%3, 1 FROM numbers(9); -- { serverError TOO_MANY_PARTS } SET max_partitions_per_insert_block = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3063', () => {
    const query = `INSERT INTO test SELECT 'case1', number%3, 1 FROM numbers(9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3064', () => {
    const query = `INSERT INTO test SELECT 'case1', number%3, 2 FROM numbers(9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3065', () => {
    const query = `INSERT INTO test SELECT 'case2', number%3, 1 FROM numbers(9) ; -- { serverError TOO_MANY_PARTS } SET max_partitions_per_insert_block = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3066', () => {
    const query = `INSERT INTO test SELECT 'case2', number%3, 1 FROM numbers(9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3067', () => {
    const query = `INSERT INTO test SELECT 'case2', number%3, 2 FROM numbers(9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3068', () => {
    const query = `INSERT INTO test SELECT 'case3', number%3, 1 FROM numbers(9) SETTINGS insert_deduplication_token = 'case3test1'; -- { serverError TOO_MANY_PARTS } SET max_partitions_per_insert_block = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3069', () => {
    const query = `INSERT INTO test SELECT 'case3', number%3, 1 FROM numbers(9) SETTINGS insert_deduplication_token = 'case3test1';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3070', () => {
    const query = `INSERT INTO test SELECT 'case3', number%3, 2 FROM numbers(9) SETTINGS insert_deduplication_token = 'case3test2';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3071', () => {
    const query = `INSERT INTO test SELECT 'case4', number%3, 1 FROM numbers(9) SETTINGS insert_deduplication_token = 'case4test1' ; -- { serverError TOO_MANY_PARTS } SET max_partitions_per_insert_block = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3072', () => {
    const query = `INSERT INTO test SELECT 'case4', number%3, 1 FROM numbers(9) SETTINGS insert_deduplication_token = 'case4test1';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3073', () => {
    const query = `INSERT INTO test SELECT 'case4', number%3, 2 FROM numbers(9) SETTINGS insert_deduplication_token = 'case4test2';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3074', () => {
    const query = `INSERT INTO insert_dedup_token VALUES(0, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3075', () => {
    const query = `INSERT INTO insert_dedup_token VALUES(1, 1001);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3076', () => {
    const query = `INSERT INTO insert_dedup_token VALUES(2, 1002);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3077', () => {
    const query = `INSERT INTO t values (-1.5, -1.5, -1.5, -1.5, 1.5, 1.5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3078', () => {
    const query = `INSERT INTO t values (1.5, 1.5, 1.5, 1.5, -1.5, -1.5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3079', () => {
    const query = `INSERT INTO s VALUES(1, 'OK');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3080', () => {
    const query = `INSERT INTO table_MySQLWire SELECT number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3081', () => {
    const query = `INSERT INTO t_tuple_element VALUES ((1, 'a'), (2, 'b'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3082', () => {
    const query = `insert into t1_local values (1), (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3083', () => {
    const query = `insert into t2_local values (1), (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3084', () => {
    const query = `INSERT INTO t_map_contains VALUES (map('a', 1, 'b', 2)), (map('c', 3, 'd', 4));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3085', () => {
    const query = `INSERT INTO bool_test (value,f) VALUES (false, 'test'), (true , 'test'), (0, 'test'), (1, 'test'), (FALSE, 'test'), (TRUE, 'test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3086', () => {
    const query = `INSERT INTO bool_test (value,f) FORMAT JSONEachRow {"value":false,"f":"test"}{"value":true,"f":"test"}{"value":0,"f":"test"}{"value":1,"f":"test"} SELECT value,f FROM bool_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3087', () => {
    const query = `INSERT INTO bool_test (value,f) FORMAT CSV True,test INSERT INTO bool_test (value,f) FORMAT TSV False	test
SELECT value,f FROM bool_test order by value FORMAT CSV;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3088', () => {
    const query = `INSERT INTO bool_test (value,f) FORMAT CSV Yes,test INSERT INTO bool_test (value,f) FORMAT TSV No	test
SELECT value,f FROM bool_test order by value FORMAT CSV;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3089', () => {
    const query = `INSERT INTO bool_test (value,f) FORMAT CSV On,test INSERT INTO bool_test (value,f) FORMAT TSV Off	test
SELECT value,f FROM bool_test order by value FORMAT CSV;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3090', () => {
    const query = `INSERT INTO with_fill_date VALUES (toDate('2020-02-05'), toDate32('2020-02-05'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3091', () => {
    const query = `INSERT INTO with_fill_date VALUES (toDate('2020-02-16'), toDate32('2020-02-16'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3092', () => {
    const query = `INSERT INTO with_fill_date VALUES (toDate('2020-03-03'), toDate32('2020-03-03'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3093', () => {
    const query = `INSERT INTO with_fill_date VALUES (toDate('2020-06-10'), toDate32('2020-06-10'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3094', () => {
    const query = `INSERT INTO with_fill_date VALUES (toDateTime('2020-02-05 10:20:00', 'UTC'), toDateTime64('2020-02-05 10:20:00', 3, 'UTC'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3095', () => {
    const query = `INSERT INTO with_fill_date VALUES (toDateTime('2020-03-08 11:01:00', 'UTC'), toDateTime64('2020-03-08 11:01:00', 3, 'UTC'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3096', () => {
    const query = `INSERT INTO with_fill_date VALUES (toDate('2020-02-05'), 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3097', () => {
    const query = `INSERT INTO with_fill_date VALUES (toDate('2020-02-16'), 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3098', () => {
    const query = `INSERT INTO with_fill_date VALUES (toDate('2020-03-10'), 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3099', () => {
    const query = `INSERT INTO with_fill_date VALUES (toDate('2020-03-03'), 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3100', () => {
    const query = `insert into set_index values (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3101', () => {
    const query = `INSERT INTO map_extractKeyLike_test VALUES (1, {'P1-K1':'1-V1','P2-K2':'1-V2'}),(2,{'P1-K1':'2-V1','P2-K2':'2-V2'});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3102', () => {
    const query = `INSERT INTO map_extractKeyLike_test VALUES (3, {'P1-K1':'3-V1','P2-K2':'3-V2'}),(4,{'P1-K1':'4-V1','P2-K2':'4-V2'});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3103', () => {
    const query = `INSERT INTO map_extractKeyLike_test VALUES (5, {'5-K1':'5-V1','5-K2':'5-V2'}),(6, {'P3-K1':'6-V1','P4-K2':'6-V2'});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3104', () => {
    const query = `INSERT INTO foo (ts, x) SELECT toDateTime('2020-01-01 00:05:00'), number from system.numbers_mt LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3105', () => {
    const query = `INSERT INTO bar (ts, x) SELECT toDateTime('2020-01-01 00:05:00'), number from system.numbers_mt LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3106', () => {
    const query = `INSERT INTO t_remove_sample_by VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3107', () => {
    const query = `INSERT INTO polygons_test_table VALUES ([[[(3, 1), (0, 1), (0, -1), (3, -1)]]], 'Value');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3108', () => {
    const query = `insert into db_hang.test select * from numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3109', () => {
    const query = `INSERT INTO t2 VALUES (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3110', () => {
    const query = `INSERT INTO t3 VALUES (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3111', () => {
    const query = `INSERT INTO join_on_disk SELECT number as id FROM numbers_mt(50000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3112', () => {
    const query = `INSERT INTO join_on_disk SELECT number as id FROM numbers_mt(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3113', () => {
    const query = `INSERT INTO partslost_0 SELECT toString(number) AS x from system.numbers LIMIT 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3114', () => {
    const query = `insert into data_02053 values (1, 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3115', () => {
    const query = `insert into data_02053 select 1, 42;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3116', () => {
    const query = `INSERT INTO FUNCTION remote(remote1, database=currentDatabase()) VALUES(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3117', () => {
    const query = `INSERT INTO FUNCTION remote(remote1, database=currentDatabase()) VALUES(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3118', () => {
    const query = `INSERT INTO FUNCTION remote(remote1, database=currentDatabase()) VALUES(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3119', () => {
    const query = `INSERT INTO FUNCTION remote(remote1, database=currentDatabase()) VALUES(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3120', () => {
    const query = `INSERT INTO test_table VALUES ('Test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3121', () => {
    const query = `INSERT INTO test_tuple_filter VALUES (1,'A','2021-01-01'),(2,'B','2021-01-01'),(3,'C','2021-01-01'),(4,'D','2021-01-02'),(5,'E','2021-01-02');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3122', () => {
    const query = `INSERT INTO map_containsKeyLike_test VALUES (1, {'1-K1':'1-V1','1-K2':'1-V2'}),(2,{'2-K1':'2-V1','2-K2':'2-V2'});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3123', () => {
    const query = `INSERT INTO map_containsKeyLike_test VALUES (3, {'3-K1':'3-V1','3-K2':'3-V2'}),(4, {'4-K1':'4-V1','4-K2':'4-V2'});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3124', () => {
    const query = `INSERT INTO map_containsKeyLike_test VALUES (5, {'5-K1':'5-V1','5-K2':'5-V2'}),(6, {'6-K1':'6-V1','6-K2':'6-V2'});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3125', () => {
    const query = `INSERT INTO test_data VALUES ('val1', NULL, 'val3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3126', () => {
    const query = `INSERT INTO t1_local VALUES('partition2', 1,1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3127', () => {
    const query = `INSERT INTO t2_local VALUES('partition1', 3,3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3128', () => {
    const query = `INSERT INTO t2_local VALUES('partition2', 6,6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3129', () => {
    const query = `INSERT INTO t_comp_subcolumns SELECT number, 'a', [range(number % 11), range(number % 13)] FROM numbers(20000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3130', () => {
    const query = `INSERT INTO 2025_test_db.test_table VALUES (0, 'Value');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3131', () => {
    const query = `INSERT INTO 2025_test_db.view_table VALUES (0, 'ViewValue');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3132', () => {
    const query = `INSERT INTO dict_nested_map_test_table VALUES (3, 't', [{'l': 0.0, 'h': 10000.0, 't': 0.1}, {'l': 10001.0, 'h': 100000000000000.0, 't': 0.2}], 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3133', () => {
    const query = `INSERT INTO source_table VALUES (1, 'First');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3134', () => {
    const query = `INSERT INTO source_table VALUES (2, 'Second');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3135', () => {
    const query = `INSERT INTO t_transform_or SELECT uniqState(''), '0';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3136', () => {
    const query = `insert into t1 values (21585718595728998), (null);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3137', () => {
    const query = `INSERT INTO bf_tokenbf_array_test VALUES (1, ['K1'], ['K1']), (2, ['K2'], ['K2']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3138', () => {
    const query = `INSERT INTO bf_ngram_array_test VALUES (1, ['K1'], ['K1']), (2, ['K2'], ['K2']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3139', () => {
    const query = `insert into data_02021 values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3140', () => {
    const query = `INSERT INTO test_map VALUES ({'K0':'V0'});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3141', () => {
    const query = `INSERT INTO map_test_index_map_keys VALUES (0, {'K0':'V0'}), (1, {'K1':'V1'});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3142', () => {
    const query = `INSERT INTO map_test_index_map_values VALUES (0, {'K0':'V0'}), (1, {'K1':'V1'});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3143', () => {
    const query = `INSERT INTO h3_indexes VALUES (geoToH3(0.0, 0.0, 0));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3144', () => {
    const query = `INSERT INTO h3_indexes VALUES (geoToH3(10.0, 0.0, 1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3145', () => {
    const query = `INSERT INTO h3_indexes VALUES (geoToH3(0.0, 10.0, 2));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3146', () => {
    const query = `INSERT INTO h3_indexes VALUES (geoToH3(10.0, 10.0, 3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3147', () => {
    const query = `INSERT INTO h3_indexes VALUES (stringToH3('8f28308280f18f2'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3148', () => {
    const query = `INSERT INTO h3_indexes VALUES (stringToH3('0x8f28308280f18f2L'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3149', () => {
    const query = `INSERT INTO h3_indexes VALUES (stringToH3('821c07fffffffff'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3150', () => {
    const query = `INSERT INTO h3_indexes VALUES (stringToH3('0x821c07fffffffffL'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3151', () => {
    const query = `INSERT INTO h3_indexes VALUES (stringToH3('0x85283473fffffffL'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3152', () => {
    const query = `INSERT INTO h3_indexes VALUES (stringToH3('85283473fffffff'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3153', () => {
    const query = `INSERT INTO h3_indexes VALUES (stringToH3('0x8167bffffffffffL'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3154', () => {
    const query = `INSERT INTO h3_indexes VALUES (stringToH3('0x804dfffffffffffL'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3155', () => {
    const query = `INSERT INTO test_nested VALUES('123', 'asd', [1,2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3156', () => {
    const query = `INSERT INTO t_with_dots VALUES (1, [0, 0], 2, [1, 1, 3]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3157', () => {
    const query = `INSERT INTO test_bit_shift_left_string_integer VALUES('Hello','Hello',0),('Hello','Hello',1),('Hello','Hello',7),('Hello','Hello',8),('Hello','Hello',9),('Hello','Hello',15),('Hello','Hello',16),('Hello','Hello',17),('Hello','Hello',23),('Hello','Hello',24),('Hello','Hello',25),('Hello','Hello',31),('Hello','Hello',32),('Hello','Hello',33),('Hello','Hello',39),('Hello','Hello',40),('Hel','Hel',7),('Hel','Hel',8),('Hel','Hel',9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3158', () => {
    const query = `INSERT INTO summing_mt_aggregating_column SELECT 1, 2, [333, 444], groupArrayArrayState([toUInt64(33), toUInt64(44)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3159', () => {
    const query = `INSERT INTO summing_mt_aggregating_column SELECT 1, 3, [555, 999], groupArrayArrayState([toUInt64(55), toUInt64(99)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3160', () => {
    const query = `INSERT INTO test_bit_shift_right_string_integer VALUES('Hello','Hello',0),('Hello','Hello',1),('Hello','Hello',7),('Hello','Hello',8),('Hello','Hello',9),('Hello','Hello',15),('Hello','Hello',16),('Hello','Hello',17),('Hello','Hello',23),('Hello','Hello',24),('Hello','Hello',25),('Hello','Hello',31),('Hello','Hello',32),('Hello','Hello',33),('Hello','Hello',39),('Hello','Hello',40),('Hel','Hel',7),('Hel','Hel',8),('Hel','Hel',9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3161', () => {
    const query = `INSERT INTO spark_bar_test VALUES(1,'2020-01-01'),(4,'2020-01-02'),(5,'2020-01-03'),(2,'2020-01-04'),(3,'2020-01-05'),(7,'2020-01-06'),(6,'2020-01-07'),(8,'2020-01-08'),(2,'2020-01-11');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3162', () => {
    const query = `INSERT INTO nullable_division VALUES (1, 1, 1, 1), (1, NULL, 1, NULL), (1, 0, 1, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3163', () => {
    const query = `INSERT INTO test_table VALUES (0, 0, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3164', () => {
    const query = `INSERT INTO test_table_default(data_1) VALUES (5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3165', () => {
    const query = `insert into short select number % 11, toDateTime('2021-01-01 00:00:00') + number from numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3166', () => {
    const query = `insert into long select number % 11, toDateTime('2021-01-01 00:00:00') + number from numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3167', () => {
    const query = `INSERT INTO t_map_02014 VALUES (1, -1, map(1, 'foo', 2, 'bar'), map(-1, 'foo', 1, 'bar'), map(-1, 'foo', 1, 'bar'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3168', () => {
    const query = `INSERT INTO t_map_02014 VALUES ('aaa', 'bbb', map('aaa', 'foo', 'bbb', 'bar'), map('aaa', 'foo', 'bbb', 'bar'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3169', () => {
    const query = `INSERT INTO dictionary_non_nullable_source_table VALUES (0, 'Test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3170', () => {
    const query = `INSERT INTO dictionary_nullable_source_table VALUES (0, 'Test'), (1, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3171', () => {
    const query = `insert into test_uint64 values ('0'), (NULL), (1), ('2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3172', () => {
    const query = `insert into test_float64 values ('0.1'), (NULL), (1.1), ('2.2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3173', () => {
    const query = `insert into test_date values ('2021-01-01'), (NULL), ('2021-02-01'), ('2021-03-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3174', () => {
    const query = `insert into test_datetime values ('2021-01-01 00:00:00'), (NULL), ('2021-02-01 01:00:00'), ('2021-03-01 02:00:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3175', () => {
    const query = `INSERT INTO bftest (k, x) SELECT number, arrayMap(i->rand64()%565656, range(10)) FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3176', () => {
    const query = `insert into enum_alter_issue values ('one', 1), ('two', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3177', () => {
    const query = `insert into enum_alter_issue values ('one', 1), ('two', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3178', () => {
    const query = `insert into enum_alter_issue values ('one', 3), ('two', 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3179', () => {
    const query = `INSERT INTO defaults SELECT s FROM generateRandom('s FixedString(20)', 1, 1, 1) LIMIT 20;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3180', () => {
    const query = `INSERT INTO tbl VALUES ('0562380c-d1f3-4091-83d5-8c972f534317');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3181', () => {
    const query = `insert into enum_alter_issue values ('one'), ('two');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3182', () => {
    const query = `INSERT INTO normalize_test (id, value) VALUES (5, 'o7:');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3183', () => {
    const query = `INSERT INTO test02008 VALUES (tuple(tuple(1, 2), tuple(3, 4)));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3184', () => {
    const query = `INSERT INTO test02008 VALUES (tuple(tuple(5, 6), tuple(7, 8)));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3185', () => {
    const query = `INSERT INTO test02008 VALUES (tuple(3.3, 5.5, 6.6));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3186', () => {
    const query = `insert into test select '1', '00000000-0000-0000-0000-000000000000';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3187', () => {
    const query = `insert into test select '2', '00000000-0000-0000-0000-000000000000';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3188', () => {
    const query = `insert into test select '3', '00000000-0000-0000-0000-000000000000';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3189', () => {
    const query = `insert into test select '4', '00000000-0000-0000-0000-000000000000';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3190', () => {
    const query = `insert into test select '5', '00000000-0000-0000-0000-000000000000';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3191', () => {
    const query = `INSERT INTO tmp SELECT * FROM system.numbers LIMIT 20;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3192', () => {
    const query = `INSERT INTO date_table VALUES(1, '1', toDate('2019-05-05'), toDate('2019-05-20'), 0.33);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3193', () => {
    const query = `INSERT INTO date_table VALUES(1, '1', toDate('2019-05-21'), toDate('2019-05-30'), 0.42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3194', () => {
    const query = `INSERT INTO date_table VALUES(2, '2', toDate('2019-05-21'), toDate('2019-05-30'), 0.46);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3195', () => {
    const query = `INSERT INTO date_table VALUES(2, '2', toDate('2019-05-21'), toDate('2019-05-30'), NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3196', () => {
    const query = `INSERT INTO click_storage SELECT number AS PhraseID from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3197', () => {
    const query = `insert into test values (1, 10, 100), (10, 1, 10), (100, 100, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3198', () => {
    const query = `insert into test2 values (1, 10, 100), (10, 1, 10), (100, 100, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3199', () => {
    const query = `insert into tp2 select 'bbb', 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3200', () => {
    const query = `insert into tp2 select 'aaa', 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3201', () => {
    const query = `INSERT INTO rep_data VALUES (1, now());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3202', () => {
    const query = `INSERT INTO data VALUES (1, now());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3203', () => {
    const query = `insert into tab values ('1', 'a'), ('2', 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3204', () => {
    const query = `insert into sessions values(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3205', () => {
    const query = `INSERT INTO t_map_int_key FORMAT CSV "{1:2, 3: 4, 5 :6, 7 : 8}","{'2021-05-20':1, '2021-05-21': 2, '2021-05-22' :3, '2021-05-23' : 4}" SELECT m1, m2 FROM t_map_int_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3206', () => {
    const query = `INSERT INTO bf_tokenbf_map_keys_test VALUES (0, {'K0':'V0'}, {'K0':'V0'}), (1, {'K1':'V1'}, {'K1':'V1'});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3207', () => {
    const query = `INSERT INTO bf_tokenbf_map_values_test VALUES (0, {'K0':'V0'}, {'K0':'V0'}), (1, {'K1':'V1'}, {'K1':'V1'});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3208', () => {
    const query = `INSERT INTO bf_ngrambf_map_keys_test VALUES (0, {'K0':'V0'}, {'K0':'V0'}), (1, {'K1':'V1'}, {'K1':'V1'});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3209', () => {
    const query = `INSERT INTO bf_ngrambf_map_values_test VALUES (0, {'K0':'V0'}, {'K0':'V0'}), (1, {'K1':'V1'}, {'K1':'V1'});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3210', () => {
    const query = `INSERT INTO t1 VALUES (1), (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3211', () => {
    const query = `INSERT INTO t2 VALUES (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3212', () => {
    const query = `INSERT INTO test VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3213', () => {
    const query = `INSERT INTO \`01945.db\`.test_dictionary_values VALUES (0, 'Value');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3214', () => {
    const query = `INSERT into src SELECT number + 100 as id, 1 FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3215', () => {
    const query = `INSERT into src SELECT number + 200 as id, 1 FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3216', () => {
    const query = `INSERT INTO TABLE FUNCTION s3('http://localhost:9001/foo/test_{_partition_id}.csv', 'admin', 'admin', 'CSV', 'id Int32, val String') PARTITION BY val VALUES (1, '\\r\\n'); -- { serverError CANNOT_PARSE_TEXT } INSERT INTO TABLE FUNCTION s3('http://localhost:9001/foo/test_{_partition_id}.csv', 'admin', 'admin', 'CSV', 'id Int32, val String') PARTITION BY val VALUES (1, 'abc\\x00abc'); -- { serverError CANNOT_PARSE_TEXT }
INSERT INTO TABLE FUNCTION s3('http://localhost:9001/foo/test_{_partition_id}.csv', 'admin', 'admin', 'CSV', 'id Int32, val String') PARTITION BY val VALUES (1, 'abc\\xc3\\x28abc'); -- { serverError CANNOT_PARSE_TEXT }
INSERT INTO TABLE FUNCTION s3('http://localhost:9001/foo/test_{_partition_id}.csv', 'admin', 'admin', 'CSV', 'id Int32, val String') PARTITION BY val VALUES (1, 'abc}{abc'); -- { serverError CANNOT_PARSE_TEXT }
INSERT INTO TABLE FUNCTION s3('http://localhost:9001/foo/test_{_partition_id}.csv', 'admin', 'admin', 'CSV', 'id Int32, val String') PARTITION BY val VALUES (1, 'abc*abc'); -- { serverError CANNOT_PARSE_TEXT }
INSERT INTO TABLE FUNCTION s3('http://localhost:9001/foo/{_partition_id}', 'admin', 'admin', 'CSV', 'id Int32, val String') PARTITION BY val VALUES (1, ''); -- { serverError BAD_ARGUMENTS }
INSERT INTO TABLE FUNCTION s3('http://localhost:9001/{_partition_id}/key.csv', 'admin', 'admin', 'CSV', 'id Int32, val String') PARTITION BY val VALUES (1, ''); -- { serverError BAD_ARGUMENTS }
INSERT INTO TABLE FUNCTION s3('http://localhost:9001/{_partition_id}/key.csv', 'admin', 'admin', 'CSV', 'id Int32, val String') PARTITION BY val VALUES (1, 'aa/bb'); -- { serverError CANNOT_PARSE_TEXT }
`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3217', () => {
    const query = `INSERT INTO tmp (*) VALUES ('a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3218', () => {
    const query = `INSERT INTO test_log VALUES (64, 'Value1', ['Value2', 'Value3', NULL]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3219', () => {
    const query = `INSERT INTO test_tiny_log VALUES (64, 'Value1', ['Value2', 'Value3', NULL]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3220', () => {
    const query = `INSERT INTO tab VALUES (42, 'Asia/Singapore');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3221', () => {
    const query = `INSERT INTO test_dictionary_source VALUES ('Key', 'Value');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3222', () => {
    const query = `INSERT INTO totimezone_op_mono VALUES (1, 'UTC', toDateTime('2020-09-01 00:00:00', 'UTC')), (2, 'UTC', toDateTime('2020-09-02 00:00:00', 'UTC'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3223', () => {
    const query = `INSERT INTO map_json FORMAT JSONEachRow {"m1" : {"k1" : 1, "k2" : 2}, "m2" : {"1" : 2, "2" : 3}, "m3" : {"2020-10-10" : "foo"}};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3224', () => {
    const query = `insert into "/t0" values (0, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3225', () => {
    const query = `insert into "/t1" values (0, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3226', () => {
    const query = `INSERT INTO users VALUES ('00000000-0000-0000-0000-000000000001');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3227', () => {
    const query = `INSERT INTO users VALUES ('00000000-0000-0000-0000-000000000002');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3228', () => {
    const query = `INSERT INTO orders VALUES ('00000000-0000-0000-0000-000000000003', '00000000-0000-0000-0000-000000000001');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3229', () => {
    const query = `INSERT INTO test VALUES ('2018-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3230', () => {
    const query = `INSERT INTO table_a SELECT '111', * FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3231', () => {
    const query = `INSERT INTO table_d SELECT 0.5, * FROM numbers(50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3232', () => {
    const query = `INSERT INTO order_by_desc SELECT number, repeat('a', 1024) FROM numbers(1024 * 300);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3233', () => {
    const query = `INSERT INTO predicate_table VALUES (0), (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3234', () => {
    const query = `insert into alias_1 (dt, col, col2, col3) values ('2020-02-02', 1, 2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3235', () => {
    const query = `insert into alias_2 (dt, col, col2, col3) values ('2020-02-01', 1, 2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3236', () => {
    const query = `INSERT INTO json_square_brackets FORMAT JSONAsString [{"id": 1, "name": "name1"}, {"id": 2, "name": "name2"}];`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3237', () => {
    const query = `INSERT INTO json_square_brackets FORMAT JSONAsString[];`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3238', () => {
    const query = `INSERT INTO json_square_brackets FORMAT JSONAsString [  ]  ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3239', () => {
    const query = `INSERT INTO json_square_brackets FORMAT JSONEachRow ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3240', () => {
    const query = `INSERT INTO t1 VALUES ('2020-01-01 12:00:00', 'fact1', 't1_val1'), ('2020-02-02 13:00:00', 'fact2', 't1_val2'), ('2020-01-01 13:00:00', 'fact3', 't1_val3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3241', () => {
    const query = `INSERT INTO t2 VALUES ('2020-01-01 12:00:00', 'fact1', 't2_val2'), ('2020-02-05 13:00:00', 'fact2', 't1_val2'), ('2019-01-01 12:00:00', 'fact4', 't2_val2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3242', () => {
    const query = `INSERT INTO test_table SELECT number % 3, number, if (number % 2 == 0, number, NULL) FROM system.numbers LIMIT 120;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3243', () => {
    const query = `INSERT INTO t_ttl_modify_column VALUES (now(), 23);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3244', () => {
    const query = `INSERT INTO t_ttl_modify_column VALUES (now());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3245', () => {
    const query = `INSERT INTO merge_tree_table VALUES(toDate('2016-03-01'), 4, 0, 0, 1486392);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3246', () => {
    const query = `INSERT INTO t_array_index VALUES (['a', 'b'], ['c', 'd']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3247', () => {
    const query = `insert into t1 values ('1900-01-01'),('1899-01-01'),('2299-12-15'),('2300-12-31'),('2021-06-22');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3248', () => {
    const query = `INSERT INTO t1 VALUES ('111', 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3249', () => {
    const query = `INSERT INTO t1 VALUES (1, 1, 1), (1, 1, 2), (2, 2, 2), (1, 2, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3250', () => {
    const query = `INSERT INTO a VALUES (1,1)(2,2)(3,3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3251', () => {
    const query = `INSERT INTO j VALUES (2,2)(4,4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3252', () => {
    const query = `INSERT INTO t1 VALUES (1, '1'), (2, '2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3253', () => {
    const query = `INSERT INTO t2 VALUES (1, '61f0c404-5cb3-11e7-907b-a6006ad3dba2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3254', () => {
    const query = `INSERT INTO t2 VALUES (2, '2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3255', () => {
    const query = `INSERT INTO test_01915_db.test_source_table_1 VALUES (0, 'Value0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3256', () => {
    const query = `INSERT INTO test_01915_db.test_source_table_2 VALUES (0, 'Value1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3257', () => {
    const query = `insert into test values(1,1,1),(2,2,2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3258', () => {
    const query = `INSERT INTO 01914_db.table_1 VALUES (1, 'Table1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3259', () => {
    const query = `INSERT INTO 01914_db.table_2 VALUES (2, 'Table2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3260', () => {
    const query = `insert into smta(k, city) values (1, 'x');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3261', () => {
    const query = `insert into smta(k, city) values (1, 'y');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3262', () => {
    const query = `INSERT INTO 01913_db.test_source_table_1 VALUES (0, 'Value0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3263', () => {
    const query = `INSERT INTO 01913_db.test_source_table_2 VALUES (0, 'Value1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3264', () => {
    const query = `INSERT INTO test VALUES (1,0,1),(1,0,2),(1,0,3),(1,0,4),(1,0,5),(1,0,6),(1,1,7),(0,0,7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3265', () => {
    const query = `insert into test_rows_compact_part select  0,arrayJoin(range(10000)) ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3266', () => {
    const query = `insert into test_rows_compact_part select  1,arrayJoin(range(10000));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3267', () => {
    const query = `insert into test_rows_wide_part select  0,arrayJoin(range(10000)) ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3268', () => {
    const query = `insert into test_rows_wide_part select  1,arrayJoin(range(10000));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3269', () => {
    const query = `INSERT INTO codecTest (key, name, ref_valueF64, valueF64, ref_valueF32, valueF32) SELECT number AS n, 'e()', e() AS v, v, v, v FROM system.numbers LIMIT 1, 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3270', () => {
    const query = `INSERT INTO codecTest (key, name, ref_valueF64, valueF64, ref_valueF32, valueF32) SELECT number AS n, 'log2(n)', log2(n) AS v, v, v, v FROM system.numbers LIMIT 101, 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3271', () => {
    const query = `INSERT INTO codecTest (key, name, ref_valueF64, valueF64, ref_valueF32, valueF32) SELECT number AS n, 'n*sqrt(n)', n*sqrt(n) AS v, v, v, v FROM system.numbers LIMIT 201, 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3272', () => {
    const query = `INSERT INTO codecTest (key, name, ref_valueF64, valueF64, ref_valueF32, valueF32) SELECT number AS n, 'sin(n*n*n)*n', sin(n * n * n * n* n) AS v, v, v, v FROM system.numbers LIMIT 301, 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3273', () => {
    const query = `INSERT INTO codecTest (key, ref_valueU64, valueU64, ref_valueI64, valueI64) VALUES (1, 18446744073709551615, 18446744073709551615, 9223372036854775807, 9223372036854775807), (2, 0, 0, -9223372036854775808, -9223372036854775808), (3, 18446744073709551615, 18446744073709551615, 9223372036854775807, 9223372036854775807);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3274', () => {
    const query = `INSERT INTO codecTest (key, ref_valueU64, valueU64, ref_valueU32, valueU32, ref_valueU16, valueU16, ref_valueU8, valueU8, ref_valueI64, valueI64, ref_valueI32, valueI32, ref_valueI16, valueI16, ref_valueI8, valueI8, ref_valueDT, valueDT, ref_valueD, valueD) SELECT number as n, n * n * n as v, v, v, v, v, v, v, v, v, v, v, v, v, v, v, v, toDateTime(v), toDateTime(v), toDate(v), toDate(v)
FROM system.numbers LIMIT 101, 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3275', () => {
    const query = `INSERT INTO codecTest (key, ref_valueU64, valueU64, ref_valueU32, valueU32, ref_valueU16, valueU16, ref_valueU8, valueU8, ref_valueI64, valueI64, ref_valueI32, valueI32, ref_valueI16, valueI16, ref_valueI8, valueI8, ref_valueDT, valueDT, ref_valueD, valueD) SELECT number as n, n as v, v, v, v, v, v, v, v, v, v, v, v, v, v, v, v, toDateTime(v), toDateTime(v), toDate(v), toDate(v)
FROM system.numbers LIMIT 2001, 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3276', () => {
    const query = `INSERT INTO codecTest (key, ref_valueU64, valueU64, ref_valueU32, valueU32, ref_valueU16, valueU16, ref_valueU8, valueU8, ref_valueI64, valueI64, ref_valueI32, valueI32, ref_valueI16, valueI16, ref_valueI8, valueI8, ref_valueDT, valueDT, ref_valueD, valueD) SELECT number as n, n + (rand64() - 9223372036854775807)/1000 as v, v, v, v, v, v, v, v, v, v, v, v, v, v, v, v, toDateTime(v), toDateTime(v), toDate(v), toDate(v)
FROM system.numbers LIMIT 3001, 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3277', () => {
    const query = `insert into TestTbl values(1, '2022-10-20', 'first');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3278', () => {
    const query = `insert into TestTbl values(1, '2022-10-21', 'second');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3279', () => {
    const query = `INSERT INTO dictionary_source_en VALUES (1, 'One'), (2,'Two'), (3, 'Three');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3280', () => {
    const query = `INSERT INTO DATE_INFO_DICT (TV, SHAMSI, HIJRI, MILADI, S_DAY, H_DAY, S_MONTH, H_MONTH, WEEK_DAY_NAME, DAY_NUMBER, HOLIDAY, WEEK_NAME) VALUES ('2017-04-01', '1396-01-12', '1438-07-04', '2017-04-01', 12, 4, 1, 7, 'saturday ', 7, 0, 'NONE') ,('2017-04-02', '1396-01-13', '1438-07-05', '2017-04-02', 13, 5, 1, 7, 'sunday   ', 1, 0, 'NONE') ,('2017-04-03', '1396-01-14', '1438-07-06', '2017-04-03', 14, 6, 1, 7, 'monday   ', 2, 0, 'NONE') ,('2017-04-04', '1396-01-15', '1438-07-07', '2017-04-04', 15, 7, 1, 7, 'tuesday  ', 3, 0, 'NONE') ,('2017-04-05', '1396-01-16', '1438-07-08', '2017-04-05', 16, 8, 1, 7, 'wednesday', 4, 0, 'NONE') ,('2017-04-06', '1396-01-17', '1438-07-09', '2017-04-06', 17, 9, 1, 7, 'thursday ', 5, 0, 'NONE') ,('2017-04-07', '1396-01-18', '1438-07-10', '2017-04-07', 18, 10, 1, 7, 'friday   ', 6, 0, 'NONE') ,('2017-04-08', '1396-01-19', '1438-07-11', '2017-04-08', 19, 11, 1, 7, 'saturday ', 7, 0, 'NONE') ,('2017-04-09', '1396-01-20', '1438-07-12', '2017-04-09', 20, 12, 1, 7, 'sunday   ', 1, 0, 'NONE') ,('2017-04-10', '1396-01-21', '1438-07-13', '2017-04-10', 21, 13, 1, 7, 'monday   ', 2, 0, 'NONE') ,('2017-04-11', '1396-01-22', '1438-07-14', '2017-04-11', 22, 14, 1, 7, 'tuesday  ', 3, 0, 'NONE') ,('2017-04-12', '1396-01-23', '1438-07-15', '2017-04-12', 23, 15, 1, 7, 'wednesday', 4, 0, 'NONE') ,('2017-04-13', '1396-01-24', '1438-07-16', '2017-04-13', 24, 16, 1, 7, 'thursday ', 5, 0, 'NONE') ,('2017-04-14', '1396-01-25', '1438-07-17', '2017-04-14', 25, 17, 1, 7, 'friday   ', 6, 0, 'NONE') ,('2017-04-15', '1396-01-26', '1438-07-18', '2017-04-15', 26, 18, 1, 7, 'saturday ', 7, 0, 'NONE') ,('2017-04-16', '1396-01-27', '1438-07-19', '2017-04-16', 27, 19, 1, 7, 'sunday   ', 1, 0, 'NONE') ,('2017-04-17', '1396-01-28', '1438-07-20', '2017-04-17', 28, 20, 1, 7, 'monday   ', 2, 0, 'NONE') ,('2017-04-18', '1396-01-29', '1438-07-21', '2017-04-18', 29, 21, 1, 7, 'tuesday  ', 3, 0, 'NONE') ,('2017-04-19', '1396-01-30', '1438-07-22', '2017-04-19', 30, 22, 1, 7, 'wednesday', 4, 0, 'NONE') ,('2017-04-20', '1396-01-31', '1438-07-23', '2017-04-20', 31, 23, 1, 7, 'thursday ', 5, 0, 'NONE') ,('2017-04-21', '1396-02-01', '1438-07-24', '2017-04-21', 1, 24, 2, 7, 'friday   ', 6, 0, 'NONE') ,('2017-04-22', '1396-02-02', '1438-07-25', '2017-04-22', 2, 25, 2, 7, 'saturday ', 7, 0, 'NONE') ,('2017-04-23', '1396-02-03', '1438-07-26', '2017-04-23', 3, 26, 2, 7, 'sunday   ', 1, 0, 'NONE') ,('2017-04-24', '1396-02-04', '1438-07-27', '2017-04-24', 4, 27, 2, 7, 'monday   ', 2, 0, 'NONE') ,('2017-04-25', '1396-02-05', '1438-07-28', '2017-04-25', 5, 28, 2, 7, 'tuesday  ', 3, 0, 'NONE') ,('2017-04-26', '1396-02-06', '1438-07-29', '2017-04-26', 6, 29, 2, 7, 'wednesday', 4, 0, 'NONE') ,('2017-04-27', '1396-02-07', '1438-07-30', '2017-04-27', 7, 30, 2, 7, 'thursday ', 5, 0, 'NONE') ,('2017-04-28', '1396-02-08', '1438-08-01', '2017-04-28', 8, 1, 2, 8, 'friday   ', 6, 0, 'NONE') ,('2017-04-29', '1396-02-09', '1438-08-02', '2017-04-29', 9, 2, 2, 8, 'saturday ', 7, 0, 'NONE') ,('2017-04-30', '1396-02-10', '1438-08-03', '2017-04-30', 10, 3, 2, 8, 'sunday   ', 1, 0, 'NONE') ,('2017-05-01', '1396-02-11', '1438-08-04', '2017-05-01', 11, 4, 2, 8, 'monday   ', 2, 0, 'NONE') ,('2017-05-02', '1396-02-12', '1438-08-05', '2017-05-02', 12, 5, 2, 8, 'tuesday  ', 3, 0, 'NONE') ,('2017-05-03', '1396-02-13', '1438-08-06', '2017-05-03', 13, 6, 2, 8, 'wednesday', 4, 0, 'NONE') ,('2017-05-04', '1396-02-14', '1438-08-07', '2017-05-04', 14, 7, 2, 8, 'thursday ', 5, 0, 'NONE') ,('2017-05-05', '1396-02-15', '1438-08-08', '2017-05-05', 15, 8, 2, 8, 'friday   ', 6, 0, 'NONE') ,('2017-05-06', '1396-02-16', '1438-08-09', '2017-05-06', 16, 9, 2, 8, 'saturday ', 7, 0, 'NONE') ,('2017-05-07', '1396-02-17', '1438-08-10', '2017-05-07', 17, 10, 2, 8, 'sunday   ', 1, 0, 'NONE') ,('2017-05-08', '1396-02-18', '1438-08-11', '2017-05-08', 18, 11, 2, 8, 'monday   ', 2, 0, 'NONE') ,('2017-05-09', '1396-02-19', '1438-08-12', '2017-05-09', 19, 12, 2, 8, 'tuesday  ', 3, 0, 'NONE') ,('2017-05-10', '1396-02-20', '1438-08-13', '2017-05-10', 20, 13, 2, 8, 'wednesday', 4, 0, 'NONE') ,('2017-05-11', '1396-02-21', '1438-08-14', '2017-05-11', 21, 14, 2, 8, 'thursday ', 5, 0, 'NONE') ,('2017-05-12', '1396-02-22', '1438-08-15', '2017-05-12', 22, 15, 2, 8, 'friday   ', 6, 0, 'NONE') ,('2017-05-13', '1396-02-23', '1438-08-16', '2017-05-13', 23, 16, 2, 8, 'saturday ', 7, 0, 'NONE') ,('2017-05-14', '1396-02-24', '1438-08-17', '2017-05-14', 24, 17, 2, 8, 'sunday   ', 1, 0, 'NONE') ,('2017-05-15', '1396-02-25', '1438-08-18', '2017-05-15', 25, 18, 2, 8, 'monday   ', 2, 0, 'NONE') ,('2017-05-16', '1396-02-26', '1438-08-19', '2017-05-16', 26, 19, 2, 8, 'tuesday  ', 3, 0, 'NONE') ,('2017-05-17', '1396-02-27', '1438-08-20', '2017-05-17', 27, 20, 2, 8, 'wednesday', 4, 0, 'NONE') ,('2017-05-18', '1396-02-28', '1438-08-21', '2017-05-18', 28, 21, 2, 8, 'thursday ', 5, 0, 'NONE') ,('2017-05-19', '1396-02-29', '1438-08-22', '2017-05-19', 29, 22, 2, 8, 'friday   ', 6, 0, 'NONE') ,('2017-05-20', '1396-02-30', '1438-08-23', '2017-05-20', 30, 23, 2, 8, 'saturday ', 7, 0, 'NONE') ,('2017-05-21', '1396-02-31', '1438-08-24', '2017-05-21', 31, 24, 2, 8, 'sunday   ', 1, 0, 'NONE') ,('2017-05-22', '1396-03-01', '1438-08-25', '2017-05-22', 1, 25, 3, 8, 'monday   ', 2, 0, 'NONE') ,('2017-05-23', '1396-03-02', '1438-08-26', '2017-05-23', 2, 26, 3, 8, 'tuesday  ', 3, 0, 'NONE') ,('2017-05-24', '1396-03-03', '1438-08-27', '2017-05-24', 3, 27, 3, 8, 'wednesday', 4, 0, 'NONE') ,('2017-05-25', '1396-03-04', '1438-08-28', '2017-05-25', 4, 28, 3, 8, 'thursday ', 5, 0, 'NONE') ,('2017-05-26', '1396-03-05', '1438-08-29', '2017-05-26', 5, 29, 3, 8, 'friday   ', 6, 0, 'NONE') ,('2017-05-27', '1396-03-06', '1438-09-01', '2017-05-27', 6, 1, 3, 9, 'saturday ', 7, 0, 'NONE') ,('2017-05-28', '1396-03-07', '1438-09-02', '2017-05-28', 7, 2, 3, 9, 'sunday   ', 1, 0, 'NONE') ,('2017-05-29', '1396-03-08', '1438-09-03', '2017-05-29', 8, 3, 3, 9, 'monday   ', 2, 0, 'NONE') ,('2017-05-30', '1396-03-09', '1438-09-04', '2017-05-30', 9, 4, 3, 9, 'tuesday  ', 3, 0, 'NONE') ,('2017-05-31', '1396-03-10', '1438-09-05', '2017-05-31', 10, 5, 3, 9, 'wednesday', 4, 0, 'NONE') ,('2017-06-01', '1396-03-11', '1438-09-06', '2017-06-01', 11, 6, 3, 9, 'thursday ', 5, 0, 'NONE') ,('2017-06-02', '1396-03-12', '1438-09-07', '2017-06-02', 12, 7, 3, 9, 'friday   ', 6, 0, 'NONE') ,('2017-06-03', '1396-03-13', '1438-09-08', '2017-06-03', 13, 8, 3, 9, 'saturday ', 7, 0, 'NONE') ,('2017-06-04', '1396-03-14', '1438-09-09', '2017-06-04', 14, 9, 3, 9, 'sunday   ', 1, 0, 'NONE') ,('2017-06-05', '1396-03-15', '1438-09-10', '2017-06-05', 15, 10, 3, 9, 'monday   ', 2, 0, 'NONE') ,('2017-06-06', '1396-03-16', '1438-09-11', '2017-06-06', 16, 11, 3, 9, 'tuesday  ', 3, 0, 'NONE') ,('2017-06-07', '1396-03-17', '1438-09-12', '2017-06-07', 17, 12, 3, 9, 'wednesday', 4, 0, 'NONE') ,('2017-06-08', '1396-03-18', '1438-09-13', '2017-06-08', 18, 13, 3, 9, 'thursday ', 5, 0, 'NONE') ,('2017-06-09', '1396-03-19', '1438-09-14', '2017-06-09', 19, 14, 3, 9, 'friday   ', 6, 0, 'NONE') ,('2017-06-10', '1396-03-20', '1438-09-15', '2017-06-10', 20, 15, 3, 9, 'saturday ', 7, 0, 'NONE') ,('2017-06-11', '1396-03-21', '1438-09-16', '2017-06-11', 21, 16, 3, 9, 'sunday   ', 1, 0, 'NONE') ,('2017-06-12', '1396-03-22', '1438-09-17', '2017-06-12', 22, 17, 3, 9, 'monday   ', 2, 0, 'NONE') ,('2017-06-13', '1396-03-23', '1438-09-18', '2017-06-13', 23, 18, 3, 9, 'tuesday  ', 3, 0, 'NONE') ,('2017-06-14', '1396-03-24', '1438-09-19', '2017-06-14', 24, 19, 3, 9, 'wednesday', 4, 0, 'NONE') ,('2017-06-15', '1396-03-25', '1438-09-20', '2017-06-15', 25, 20, 3, 9, 'thursday ', 5, 0, 'NONE') ,('2017-06-16', '1396-03-26', '1438-09-21', '2017-06-16', 26, 21, 3, 9, 'friday   ', 6, 0, 'NONE') ,('2017-06-17', '1396-03-27', '1438-09-22', '2017-06-17', 27, 22, 3, 9, 'saturday ', 7, 0, 'NONE') ,('2017-06-18', '1396-03-28', '1438-09-23', '2017-06-18', 28, 23, 3, 9, 'sunday   ', 1, 0, 'NONE') ,('2017-06-19', '1396-03-29', '1438-09-24', '2017-06-19', 29, 24, 3, 9, 'monday   ', 2, 0, 'NONE') ,('2017-06-20', '1396-03-30', '1438-09-25', '2017-06-20', 30, 25, 3, 9, 'tuesday  ', 3, 0, 'NONE') ,('2017-06-21', '1396-03-31', '1438-09-26', '2017-06-21', 31, 26, 3, 9, 'wednesday', 4, 0, 'NONE') ,('2017-06-22', '1396-04-01', '1438-09-27', '2017-06-22', 1, 27, 4, 9, 'thursday ', 5, 0, 'NONE') ,('2017-06-23', '1396-04-02', '1438-09-28', '2017-06-23', 2, 28, 4, 9, 'friday   ', 6, 0, 'NONE') ,('2017-06-24', '1396-04-03', '1438-09-29', '2017-06-24', 3, 29, 4, 9, 'saturday ', 7, 0, 'NONE') ,('2017-06-25', '1396-04-04', '1438-09-30', '2017-06-25', 4, 30, 4, 9, 'sunday   ', 1, 0, 'NONE') ,('2017-06-26', '1396-04-05', '1438-10-01', '2017-06-26', 5, 1, 4, 10, 'monday   ', 2, 0, 'NONE') ,('2017-06-27', '1396-04-06', '1438-10-02', '2017-06-27', 6, 2, 4, 10, 'tuesday  ', 3, 0, 'NONE') ,('2017-06-28', '1396-04-07', '1438-10-03', '2017-06-28', 7, 3, 4, 10, 'wednesday', 4, 0, 'NONE') ,('2017-06-29', '1396-04-08', '1438-10-04', '2017-06-29', 8, 4, 4, 10, 'thursday ', 5, 0, 'NONE') ,('2017-06-30', '1396-04-09', '1438-10-05', '2017-06-30', 9, 5, 4, 10, 'friday   ', 6, 0, 'NONE') ,('2017-07-01', '1396-04-10', '1438-10-06', '2017-07-01', 10, 6, 4, 10, 'saturday ', 7, 0, 'NONE') ,('2017-07-02', '1396-04-11', '1438-10-07', '2017-07-02', 11, 7, 4, 10, 'sunday   ', 1, 0, 'NONE') ,('2017-07-03', '1396-04-12', '1438-10-08', '2017-07-03', 12, 8, 4, 10, 'monday   ', 2, 0, 'NONE') ,('2017-07-04', '1396-04-13', '1438-10-09', '2017-07-04', 13, 9, 4, 10, 'tuesday  ', 3, 0, 'NONE') ,('2017-07-05', '1396-04-14', '1438-10-10', '2017-07-05', 14, 10, 4, 10, 'wednesday', 4, 0, 'NONE') ,('2017-07-06', '1396-04-15', '1438-10-11', '2017-07-06', 15, 11, 4, 10, 'thursday ', 5, 0, 'NONE') ,('2017-07-07', '1396-04-16', '1438-10-12', '2017-07-07', 16, 12, 4, 10, 'friday   ', 6, 0, 'NONE') ,('2017-07-08', '1396-04-17', '1438-10-13', '2017-07-08', 17, 13, 4, 10, 'saturday ', 7, 0, 'NONE') ,('2017-07-09', '1396-04-18', '1438-10-14', '2017-07-09', 18, 14, 4, 10, 'sunday   ', 1, 0, 'NONE') ,('2017-07-10', '1396-04-19', '1438-10-15', '2017-07-10', 19, 15, 4, 10, 'monday   ', 2, 0, 'NONE') ,('2017-07-11', '1396-04-20', '1438-10-16', '2017-07-11', 20, 16, 4, 10, 'tuesday  ', 3, 0, 'NONE') ,('2017-07-12', '1396-04-21', '1438-10-17', '2017-07-12', 21, 17, 4, 10, 'wednesday', 4, 0, 'NONE') ,('2017-07-13', '1396-04-22', '1438-10-18', '2017-07-13', 22, 18, 4, 10, 'thursday ', 5, 0, 'NONE') ,('2017-07-14', '1396-04-23', '1438-10-19', '2017-07-14', 23, 19, 4, 10, 'friday   ', 6, 0, 'NONE') ,('2017-07-15', '1396-04-24', '1438-10-20', '2017-07-15', 24, 20, 4, 10, 'saturday ', 7, 0, 'NONE') ,('2017-07-16', '1396-04-25', '1438-10-21', '2017-07-16', 25, 21, 4, 10, 'sunday   ', 1, 0, 'NONE') ,('2017-07-17', '1396-04-26', '1438-10-22', '2017-07-17', 26, 22, 4, 10, 'monday   ', 2, 0, 'NONE') ,('2017-07-18', '1396-04-27', '1438-10-23', '2017-07-18', 27, 23, 4, 10, 'tuesday  ', 3, 0, 'NONE') ,('2017-07-19', '1396-04-28', '1438-10-24', '2017-07-19', 28, 24, 4, 10, 'wednesday', 4, 0, 'NONE') ,('2017-07-20', '1396-04-29', '1438-10-25', '2017-07-20', 29, 25, 4, 10, 'thursday ', 5, 0, 'NONE') ,('2017-07-21', '1396-04-30', '1438-10-26', '2017-07-21', 30, 26, 4, 10, 'friday   ', 6, 0, 'NONE') ,('2017-07-22', '1396-04-31', '1438-10-27', '2017-07-22', 31, 27, 4, 10, 'saturday ', 7, 0, 'NONE') ,('2017-07-23', '1396-05-01', '1438-10-28', '2017-07-23', 1, 28, 5, 10, 'sunday   ', 1, 0, 'NONE') ,('2017-07-24', '1396-05-02', '1438-10-29', '2017-07-24', 2, 29, 5, 10, 'monday   ', 2, 0, 'NONE') ,('2017-07-25', '1396-05-03', '1438-11-01', '2017-07-25', 3, 1, 5, 11, 'tuesday  ', 3, 0, 'NONE') ,('2017-07-26', '1396-05-04', '1438-11-02', '2017-07-26', 4, 2, 5, 11, 'wednesday', 4, 0, 'NONE') ,('2017-07-27', '1396-05-05', '1438-11-03', '2017-07-27', 5, 3, 5, 11, 'thursday ', 5, 0, 'NONE') ,('2017-07-28', '1396-05-06', '1438-11-04', '2017-07-28', 6, 4, 5, 11, 'friday   ', 6, 0, 'NONE') ,('2017-07-29', '1396-05-07', '1438-11-05', '2017-07-29', 7, 5, 5, 11, 'saturday ', 7, 0, 'NONE') ,('2017-07-30', '1396-05-08', '1438-11-06', '2017-07-30', 8, 6, 5, 11, 'sunday   ', 1, 0, 'NONE') ,('2017-07-31', '1396-05-09', '1438-11-07', '2017-07-31', 9, 7, 5, 11, 'monday   ', 2, 0, 'NONE') ,('2017-08-01', '1396-05-10', '1438-11-08', '2017-08-01', 10, 8, 5, 11, 'tuesday  ', 3, 0, 'NONE') ,('2017-08-02', '1396-05-11', '1438-11-09', '2017-08-02', 11, 9, 5, 11, 'wednesday', 4, 0, 'NONE') ,('2017-08-03', '1396-05-12', '1438-11-10', '2017-08-03', 12, 10, 5, 11, 'thursday ', 5, 0, 'NONE') ,('2017-08-04', '1396-05-13', '1438-11-11', '2017-08-04', 13, 11, 5, 11, 'friday   ', 6, 0, 'NONE') ,('2017-08-05', '1396-05-14', '1438-11-12', '2017-08-05', 14, 12, 5, 11, 'saturday ', 7, 0, 'NONE') ,('2017-08-06', '1396-05-15', '1438-11-13', '2017-08-06', 15, 13, 5, 11, 'sunday   ', 1, 0, 'NONE') ,('2017-08-07', '1396-05-16', '1438-11-14', '2017-08-07', 16, 14, 5, 11, 'monday   ', 2, 0, 'NONE') ,('2017-08-08', '1396-05-17', '1438-11-15', '2017-08-08', 17, 15, 5, 11, 'tuesday  ', 3, 0, 'NONE') ,('2017-08-09', '1396-05-18', '1438-11-16', '2017-08-09', 18, 16, 5, 11, 'wednesday', 4, 0, 'NONE') ,('2017-08-10', '1396-05-19', '1438-11-17', '2017-08-10', 19, 17, 5, 11, 'thursday ', 5, 0, 'NONE') ,('2017-08-11', '1396-05-20', '1438-11-18', '2017-08-11', 20, 18, 5, 11, 'friday   ', 6, 0, 'NONE') ,('2017-08-12', '1396-05-21', '1438-11-19', '2017-08-12', 21, 19, 5, 11, 'saturday ', 7, 0, 'NONE') ,('2017-08-13', '1396-05-22', '1438-11-20', '2017-08-13', 22, 20, 5, 11, 'sunday   ', 1, 0, 'NONE') ,('2017-08-14', '1396-05-23', '1438-11-21', '2017-08-14', 23, 21, 5, 11, 'monday   ', 2, 0, 'NONE') ,('2017-08-15', '1396-05-24', '1438-11-22', '2017-08-15', 24, 22, 5, 11, 'tuesday  ', 3, 0, 'NONE') ,('2017-08-16', '1396-05-25', '1438-11-23', '2017-08-16', 25, 23, 5, 11, 'wednesday', 4, 0, 'NONE') ,('2017-08-17', '1396-05-26', '1438-11-24', '2017-08-17', 26, 24, 5, 11, 'thursday ', 5, 0, 'NONE') ,('2017-08-18', '1396-05-27', '1438-11-25', '2017-08-18', 27, 25, 5, 11, 'friday   ', 6, 0, 'NONE') ,('2017-08-19', '1396-05-28', '1438-11-26', '2017-08-19', 28, 26, 5, 11, 'saturday ', 7, 0, 'NONE') ,('2017-08-20', '1396-05-29', '1438-11-27', '2017-08-20', 29, 27, 5, 11, 'sunday   ', 1, 0, 'NONE') ,('2017-08-21', '1396-05-30', '1438-11-28', '2017-08-21', 30, 28, 5, 11, 'monday   ', 2, 0, 'NONE') ,('2017-08-22', '1396-05-31', '1438-11-29', '2017-08-22', 31, 29, 5, 11, 'tuesday  ', 3, 0, 'NONE') ,('2017-08-23', '1396-06-01', '1438-11-30', '2017-08-23', 1, 30, 6, 11, 'wednesday', 4, 0, 'NONE') ,('2017-08-24', '1396-06-02', '1438-12-01', '2017-08-24', 2, 1, 6, 12, 'thursday ', 5, 0, 'NONE') ,('2017-08-25', '1396-06-03', '1438-12-02', '2017-08-25', 3, 2, 6, 12, 'friday   ', 6, 0, 'NONE') ,('2017-08-26', '1396-06-04', '1438-12-03', '2017-08-26', 4, 3, 6, 12, 'saturday ', 7, 0, 'NONE') ,('2017-08-27', '1396-06-05', '1438-12-04', '2017-08-27', 5, 4, 6, 12, 'sunday   ', 1, 0, 'NONE') ,('2017-08-28', '1396-06-06', '1438-12-05', '2017-08-28', 6, 5, 6, 12, 'monday   ', 2, 0, 'NONE') ,('2017-08-29', '1396-06-07', '1438-12-06', '2017-08-29', 7, 6, 6, 12, 'tuesday  ', 3, 0, 'NONE') ,('2017-08-30', '1396-06-08', '1438-12-07', '2017-08-30', 8, 7, 6, 12, 'wednesday', 4, 0, 'NONE') ,('2017-08-31', '1396-06-09', '1438-12-08', '2017-08-31', 9, 8, 6, 12, 'thursday ', 5, 0, 'NONE') ,('2017-09-01', '1396-06-10', '1438-12-09', '2017-09-01', 10, 9, 6, 12, 'friday   ', 6, 0, 'NONE') ,('2017-09-02', '1396-06-11', '1438-12-10', '2017-09-02', 11, 10, 6, 12, 'saturday ', 7, 0, 'NONE') ,('2017-09-03', '1396-06-12', '1438-12-11', '2017-09-03', 12, 11, 6, 12, 'sunday   ', 1, 0, 'NONE') ,('2017-09-04', '1396-06-13', '1438-12-12', '2017-09-04', 13, 12, 6, 12, 'monday   ', 2, 0, 'NONE') ,('2017-09-05', '1396-06-14', '1438-12-13', '2017-09-05', 14, 13, 6, 12, 'tuesday  ', 3, 0, 'NONE') ,('2017-09-06', '1396-06-15', '1438-12-14', '2017-09-06', 15, 14, 6, 12, 'wednesday', 4, 0, 'NONE') ,('2017-09-07', '1396-06-16', '1438-12-15', '2017-09-07', 16, 15, 6, 12, 'thursday ', 5, 0, 'NONE') ,('2017-09-08', '1396-06-17', '1438-12-16', '2017-09-08', 17, 16, 6, 12, 'friday   ', 6, 0, 'NONE') ,('2017-09-09', '1396-06-18', '1438-12-17', '2017-09-09', 18, 17, 6, 12, 'saturday ', 7, 0, 'NONE') ,('2017-09-10', '1396-06-19', '1438-12-18', '2017-09-10', 19, 18, 6, 12, 'sunday   ', 1, 0, 'NONE') ,('2017-09-11', '1396-06-20', '1438-12-19', '2017-09-11', 20, 19, 6, 12, 'monday   ', 2, 0, 'NONE') ,('2017-09-12', '1396-06-21', '1438-12-20', '2017-09-12', 21, 20, 6, 12, 'tuesday  ', 3, 0, 'NONE') ,('2017-09-13', '1396-06-22', '1438-12-21', '2017-09-13', 22, 21, 6, 12, 'wednesday', 4, 0, 'NONE') ,('2017-09-14', '1396-06-23', '1438-12-22', '2017-09-14', 23, 22, 6, 12, 'thursday ', 5, 0, 'NONE') ,('2017-09-15', '1396-06-24', '1438-12-23', '2017-09-15', 24, 23, 6, 12, 'friday   ', 6, 0, 'NONE') ,('2017-09-16', '1396-06-25', '1438-12-24', '2017-09-16', 25, 24, 6, 12, 'saturday ', 7, 0, 'NONE') ,('2017-09-17', '1396-06-26', '1438-12-25', '2017-09-17', 26, 25, 6, 12, 'sunday   ', 1, 0, 'NONE') ,('2017-09-18', '1396-06-27', '1438-12-26', '2017-09-18', 27, 26, 6, 12, 'monday   ', 2, 0, 'NONE') ,('2017-09-19', '1396-06-28', '1438-12-27', '2017-09-19', 28, 27, 6, 12, 'tuesday  ', 3, 0, 'NONE') ,('2017-09-20', '1396-06-29', '1438-12-28', '2017-09-20', 29, 28, 6, 12, 'wednesday', 4, 0, 'NONE') ,('2017-09-21', '1396-06-30', '1438-12-29', '2017-09-21', 30, 29, 6, 12, 'thursday ', 5, 0, 'NONE') ,('2017-09-22', '1396-06-31', '1439-01-01', '2017-09-22', 31, 1, 6, 1, 'friday   ', 6, 0, 'NONE') ,('2017-09-23', '1396-07-01', '1439-01-02', '2017-09-23', 1, 2, 7, 1, 'saturday ', 7, 0, 'NONE') ,('2017-09-24', '1396-07-02', '1439-01-03', '2017-09-24', 2, 3, 7, 1, 'sunday   ', 1, 0, 'NONE') ,('2017-09-25', '1396-07-03', '1439-01-04', '2017-09-25', 3, 4, 7, 1, 'monday   ', 2, 0, 'NONE') ,('2017-09-26', '1396-07-04', '1439-01-05', '2017-09-26', 4, 5, 7, 1, 'tuesday  ', 3, 0, 'NONE') ,('2017-09-27', '1396-07-05', '1439-01-06', '2017-09-27', 5, 6, 7, 1, 'wednesday', 4, 0, 'NONE') ,('2017-09-28', '1396-07-06', '1439-01-07', '2017-09-28', 6, 7, 7, 1, 'thursday ', 5, 0, 'NONE') ,('2017-09-29', '1396-07-07', '1439-01-08', '2017-09-29', 7, 8, 7, 1, 'friday   ', 6, 0, 'NONE') ,('2017-09-30', '1396-07-08', '1439-01-09', '2017-09-30', 8, 9, 7, 1, 'saturday ', 7, 0, 'NONE') ,('2017-10-01', '1396-07-09', '1439-01-10', '2017-10-01', 9, 10, 7, 1, 'sunday   ', 1, 0, 'NONE') ,('2017-10-02', '1396-07-10', '1439-01-11', '2017-10-02', 10, 11, 7, 1, 'monday   ', 2, 0, 'NONE') ,('2017-10-03', '1396-07-11', '1439-01-12', '2017-10-03', 11, 12, 7, 1, 'tuesday  ', 3, 0, 'NONE') ,('2017-10-04', '1396-07-12', '1439-01-13', '2017-10-04', 12, 13, 7, 1, 'wednesday', 4, 0, 'NONE') ,('2017-10-05', '1396-07-13', '1439-01-14', '2017-10-05', 13, 14, 7, 1, 'thursday ', 5, 0, 'NONE') ,('2017-10-06', '1396-07-14', '1439-01-15', '2017-10-06', 14, 15, 7, 1, 'friday   ', 6, 0, 'NONE') ,('2017-10-07', '1396-07-15', '1439-01-16', '2017-10-07', 15, 16, 7, 1, 'saturday ', 7, 0, 'NONE') ,('2017-10-08', '1396-07-16', '1439-01-17', '2017-10-08', 16, 17, 7, 1, 'sunday   ', 1, 0, 'NONE') ,('2017-10-09', '1396-07-17', '1439-01-18', '2017-10-09', 17, 18, 7, 1, 'monday   ', 2, 0, 'NONE') ,('2017-10-10', '1396-07-18', '1439-01-19', '2017-10-10', 18, 19, 7, 1, 'tuesday  ', 3, 0, 'NONE') ,('2017-10-11', '1396-07-19', '1439-01-20', '2017-10-11', 19, 20, 7, 1, 'wednesday', 4, 0, 'NONE') ,('2017-10-12', '1396-07-20', '1439-01-21', '2017-10-12', 20, 21, 7, 1, 'thursday ', 5, 0, 'NONE') ,('2017-10-13', '1396-07-21', '1439-01-22', '2017-10-13', 21, 22, 7, 1, 'friday   ', 6, 0, 'NONE') ,('2017-10-14', '1396-07-22', '1439-01-23', '2017-10-14', 22, 23, 7, 1, 'saturday ', 7, 0, 'NONE') ,('2017-10-15', '1396-07-23', '1439-01-24', '2017-10-15', 23, 24, 7, 1, 'sunday   ', 1, 0, 'NONE') ,('2017-10-16', '1396-07-24', '1439-01-25', '2017-10-16', 24, 25, 7, 1, 'monday   ', 2, 0, 'NONE') ,('2017-10-17', '1396-07-25', '1439-01-26', '2017-10-17', 25, 26, 7, 1, 'tuesday  ', 3, 0, 'NONE') ,('2017-10-18', '1396-07-26', '1439-01-27', '2017-10-18', 26, 27, 7, 1, 'wednesday', 4, 0, 'NONE') ,('2017-10-19', '1396-07-27', '1439-01-28', '2017-10-19', 27, 28, 7, 1, 'thursday ', 5, 0, 'NONE') ,('2017-10-20', '1396-07-28', '1439-01-29', '2017-10-20', 28, 29, 7, 1, 'friday   ', 6, 0, 'NONE') ,('2017-10-21', '1396-07-29', '1439-01-30', '2017-10-21', 29, 30, 7, 1, 'saturday ', 7, 0, 'NONE') ,('2017-10-22', '1396-07-30', '1439-02-01', '2017-10-22', 30, 1, 7, 2, 'sunday   ', 1, 0, 'NONE') ,('2017-10-23', '1396-08-01', '1439-02-02', '2017-10-23', 1, 2, 8, 2, 'monday   ', 2, 0, 'NONE') ,('2017-10-24', '1396-08-02', '1439-02-03', '2017-10-24', 2, 3, 8, 2, 'tuesday  ', 3, 0, 'NONE') ,('2017-10-25', '1396-08-03', '1439-02-04', '2017-10-25', 3, 4, 8, 2, 'wednesday', 4, 0, 'NONE') ,('2017-10-26', '1396-08-04', '1439-02-05', '2017-10-26', 4, 5, 8, 2, 'thursday ', 5, 0, 'NONE') ,('2017-10-27', '1396-08-05', '1439-02-06', '2017-10-27', 5, 6, 8, 2, 'friday   ', 6, 0, 'NONE') ,('2017-10-28', '1396-08-06', '1439-02-07', '2017-10-28', 6, 7, 8, 2, 'saturday ', 7, 0, 'NONE') ,('2017-10-29', '1396-08-07', '1439-02-08', '2017-10-29', 7, 8, 8, 2, 'sunday   ', 1, 0, 'NONE') ,('2017-10-30', '1396-08-08', '1439-02-09', '2017-10-30', 8, 9, 8, 2, 'monday   ', 2, 0, 'NONE') ,('2017-10-31', '1396-08-09', '1439-02-10', '2017-10-31', 9, 10, 8, 2, 'tuesday  ', 3, 0, 'NONE') ,('2017-11-01', '1396-08-10', '1439-02-11', '2017-11-01', 10, 11, 8, 2, 'wednesday', 4, 0, 'NONE') ,('2017-11-02', '1396-08-11', '1439-02-12', '2017-11-02', 11, 12, 8, 2, 'thursday ', 5, 0, 'NONE') ,('2017-11-03', '1396-08-12', '1439-02-13', '2017-11-03', 12, 13, 8, 2, 'friday   ', 6, 0, 'NONE') ,('2017-11-04', '1396-08-13', '1439-02-14', '2017-11-04', 13, 14, 8, 2, 'saturday ', 7, 0, 'NONE') ,('2017-11-05', '1396-08-14', '1439-02-15', '2017-11-05', 14, 15, 8, 2, 'sunday   ', 1, 0, 'NONE') ,('2017-11-06', '1396-08-15', '1439-02-16', '2017-11-06', 15, 16, 8, 2, 'monday   ', 2, 0, 'NONE') ,('2017-11-07', '1396-08-16', '1439-02-17', '2017-11-07', 16, 17, 8, 2, 'tuesday  ', 3, 0, 'NONE') ,('2017-11-08', '1396-08-17', '1439-02-18', '2017-11-08', 17, 18, 8, 2, 'wednesday', 4, 0, 'NONE') ,('2017-11-09', '1396-08-18', '1439-02-19', '2017-11-09', 18, 19, 8, 2, 'thursday ', 5, 0, 'NONE') ,('2017-11-10', '1396-08-19', '1439-02-20', '2017-11-10', 19, 20, 8, 2, 'friday   ', 6, 0, 'NONE') ,('2017-11-11', '1396-08-20', '1439-02-21', '2017-11-11', 20, 21, 8, 2, 'saturday ', 7, 0, 'NONE') ,('2017-11-12', '1396-08-21', '1439-02-22', '2017-11-12', 21, 22, 8, 2, 'sunday   ', 1, 0, 'NONE') ,('2017-11-13', '1396-08-22', '1439-02-23', '2017-11-13', 22, 23, 8, 2, 'monday   ', 2, 0, 'NONE') ,('2017-11-14', '1396-08-23', '1439-02-24', '2017-11-14', 23, 24, 8, 2, 'tuesday  ', 3, 0, 'NONE') ,('2017-11-15', '1396-08-24', '1439-02-25', '2017-11-15', 24, 25, 8, 2, 'wednesday', 4, 0, 'NONE') ,('2017-11-16', '1396-08-25', '1439-02-26', '2017-11-16', 25, 26, 8, 2, 'thursday ', 5, 0, 'NONE') ,('2017-11-17', '1396-08-26', '1439-02-27', '2017-11-17', 26, 27, 8, 2, 'friday   ', 6, 0, 'NONE') ,('2017-11-18', '1396-08-27', '1439-02-28', '2017-11-18', 27, 28, 8, 2, 'saturday ', 7, 0, 'NONE') ,('2017-11-19', '1396-08-28', '1439-02-29', '2017-11-19', 28, 29, 8, 2, 'sunday   ', 1, 0, 'NONE') ,('2017-11-20', '1396-08-29', '1439-03-01', '2017-11-20', 29, 1, 8, 3, 'monday   ', 2, 0, 'NONE') ,('2017-11-21', '1396-08-30', '1439-03-02', '2017-11-21', 30, 2, 8, 3, 'tuesday  ', 3, 0, 'NONE') ,('2017-11-22', '1396-09-01', '1439-03-03', '2017-11-22', 1, 3, 9, 3, 'wednesday', 4, 0, 'NONE') ,('2017-11-23', '1396-09-02', '1439-03-04', '2017-11-23', 2, 4, 9, 3, 'thursday ', 5, 0, 'NONE') ,('2017-11-24', '1396-09-03', '1439-03-05', '2017-11-24', 3, 5, 9, 3, 'friday   ', 6, 0, 'NONE') ,('2017-11-25', '1396-09-04', '1439-03-06', '2017-11-25', 4, 6, 9, 3, 'saturday ', 7, 0, 'NONE') ,('2017-11-26', '1396-09-05', '1439-03-07', '2017-11-26', 5, 7, 9, 3, 'sunday   ', 1, 0, 'NONE') ,('2017-11-27', '1396-09-06', '1439-03-08', '2017-11-27', 6, 8, 9, 3, 'monday   ', 2, 0, 'NONE') ,('2017-11-28', '1396-09-07', '1439-03-09', '2017-11-28', 7, 9, 9, 3, 'tuesday  ', 3, 0, 'NONE') ,('2017-11-29', '1396-09-08', '1439-03-10', '2017-11-29', 8, 10, 9, 3, 'wednesday', 4, 0, 'NONE') ,('2017-11-30', '1396-09-09', '1439-03-11', '2017-11-30', 9, 11, 9, 3, 'thursday ', 5, 0, 'NONE') ,('2017-12-01', '1396-09-10', '1439-03-12', '2017-12-01', 10, 12, 9, 3, 'friday   ', 6, 0, 'NONE') ,('2017-12-02', '1396-09-11', '1439-03-13', '2017-12-02', 11, 13, 9, 3, 'saturday ', 7, 0, 'NONE') ,('2017-12-03', '1396-09-12', '1439-03-14', '2017-12-03', 12, 14, 9, 3, 'sunday   ', 1, 0, 'NONE') ,('2017-12-04', '1396-09-13', '1439-03-15', '2017-12-04', 13, 15, 9, 3, 'monday   ', 2, 0, 'NONE') ,('2017-12-05', '1396-09-14', '1439-03-16', '2017-12-05', 14, 16, 9, 3, 'tuesday  ', 3, 0, 'NONE') ,('2017-12-06', '1396-09-15', '1439-03-17', '2017-12-06', 15, 17, 9, 3, 'wednesday', 4, 0, 'NONE') ,('2017-12-07', '1396-09-16', '1439-03-18', '2017-12-07', 16, 18, 9, 3, 'thursday ', 5, 0, 'NONE') ,('2017-12-08', '1396-09-17', '1439-03-19', '2017-12-08', 17, 19, 9, 3, 'friday   ', 6, 0, 'NONE') ,('2017-12-09', '1396-09-18', '1439-03-20', '2017-12-09', 18, 20, 9, 3, 'saturday ', 7, 0, 'NONE') ,('2017-12-10', '1396-09-19', '1439-03-21', '2017-12-10', 19, 21, 9, 3, 'sunday   ', 1, 0, 'NONE') ,('2017-12-11', '1396-09-20', '1439-03-22', '2017-12-11', 20, 22, 9, 3, 'monday   ', 2, 0, 'NONE') ,('2017-12-12', '1396-09-21', '1439-03-23', '2017-12-12', 21, 23, 9, 3, 'tuesday  ', 3, 0, 'NONE') ,('2017-12-13', '1396-09-22', '1439-03-24', '2017-12-13', 22, 24, 9, 3, 'wednesday', 4, 0, 'NONE') ,('2017-12-14', '1396-09-23', '1439-03-25', '2017-12-14', 23, 25, 9, 3, 'thursday ', 5, 0, 'NONE') ,('2017-12-15', '1396-09-24', '1439-03-26', '2017-12-15', 24, 26, 9, 3, 'friday   ', 6, 0, 'NONE') ,('2017-12-16', '1396-09-25', '1439-03-27', '2017-12-16', 25, 27, 9, 3, 'saturday ', 7, 0, 'NONE') ,('2017-12-17', '1396-09-26', '1439-03-28', '2017-12-17', 26, 28, 9, 3, 'sunday   ', 1, 0, 'NONE') ,('2017-12-18', '1396-09-27', '1439-03-29', '2017-12-18', 27, 29, 9, 3, 'monday   ', 2, 0, 'NONE') ,('2017-12-19', '1396-09-28', '1439-03-30', '2017-12-19', 28, 30, 9, 3, 'tuesday  ', 3, 0, 'NONE') ,('2017-12-20', '1396-09-29', '1439-04-01', '2017-12-20', 29, 1, 9, 4, 'wednesday', 4, 0, 'NONE') ,('2017-12-21', '1396-09-30', '1439-04-02', '2017-12-21', 30, 2, 9, 4, 'thursday ', 5, 0, 'NONE') ,('2017-12-22', '1396-10-01', '1439-04-03', '2017-12-22', 1, 3, 10, 4, 'friday   ', 6, 0, 'NONE') ,('2017-12-23', '1396-10-02', '1439-04-04', '2017-12-23', 2, 4, 10, 4, 'saturday ', 7, 0, 'NONE') ,('2017-12-24', '1396-10-03', '1439-04-05', '2017-12-24', 3, 5, 10, 4, 'sunday   ', 1, 0, 'NONE') ,('2017-12-25', '1396-10-04', '1439-04-06', '2017-12-25', 4, 6, 10, 4, 'monday   ', 2, 0, 'NONE') ,('2017-12-26', '1396-10-05', '1439-04-07', '2017-12-26', 5, 7, 10, 4, 'tuesday  ', 3, 0, 'NONE') ,('2017-12-27', '1396-10-06', '1439-04-08', '2017-12-27', 6, 8, 10, 4, 'wednesday', 4, 0, 'NONE') ,('2017-12-28', '1396-10-07', '1439-04-09', '2017-12-28', 7, 9, 10, 4, 'thursday ', 5, 0, 'NONE') ,('2017-12-29', '1396-10-08', '1439-04-10', '2017-12-29', 8, 10, 10, 4, 'friday   ', 6, 0, 'NONE') ,('2017-12-30', '1396-10-09', '1439-04-11', '2017-12-30', 9, 11, 10, 4, 'saturday ', 7, 0, 'NONE') ,('2017-12-31', '1396-10-10', '1439-04-12', '2017-12-31', 10, 12, 10, 4, 'sunday   ', 1, 0, 'NONE') ,('2018-01-01', '1396-10-11', '1439-04-13', '2018-01-01', 11, 13, 10, 4, 'monday   ', 2, 0, 'NONE') ,('2018-01-02', '1396-10-12', '1439-04-14', '2018-01-02', 12, 14, 10, 4, 'tuesday  ', 3, 0, 'NONE') ,('2018-01-03', '1396-10-13', '1439-04-15', '2018-01-03', 13, 15, 10, 4, 'wednesday', 4, 0, 'NONE') ,('2018-01-04', '1396-10-14', '1439-04-16', '2018-01-04', 14, 16, 10, 4, 'thursday ', 5, 0, 'NONE') ,('2018-01-05', '1396-10-15', '1439-04-17', '2018-01-05', 15, 17, 10, 4, 'friday   ', 6, 0, 'NONE') ,('2018-01-06', '1396-10-16', '1439-04-18', '2018-01-06', 16, 18, 10, 4, 'saturday ', 7, 0, 'NONE') ,('2018-01-07', '1396-10-17', '1439-04-19', '2018-01-07', 17, 19, 10, 4, 'sunday   ', 1, 0, 'NONE') ,('2018-01-08', '1396-10-18', '1439-04-20', '2018-01-08', 18, 20, 10, 4, 'monday   ', 2, 0, 'NONE') ,('2018-01-09', '1396-10-19', '1439-04-21', '2018-01-09', 19, 21, 10, 4, 'tuesday  ', 3, 0, 'NONE') ,('2018-01-10', '1396-10-20', '1439-04-22', '2018-01-10', 20, 22, 10, 4, 'wednesday', 4, 0, 'NONE') ,('2018-01-11', '1396-10-21', '1439-04-23', '2018-01-11', 21, 23, 10, 4, 'thursday ', 5, 0, 'NONE') ,('2018-01-12', '1396-10-22', '1439-04-24', '2018-01-12', 22, 24, 10, 4, 'friday   ', 6, 0, 'NONE') ,('2018-01-13', '1396-10-23', '1439-04-25', '2018-01-13', 23, 25, 10, 4, 'saturday ', 7, 0, 'NONE') ,('2018-01-14', '1396-10-24', '1439-04-26', '2018-01-14', 24, 26, 10, 4, 'sunday   ', 1, 0, 'NONE') ,('2018-01-15', '1396-10-25', '1439-04-27', '2018-01-15', 25, 27, 10, 4, 'monday   ', 2, 0, 'NONE') ,('2018-01-16', '1396-10-26', '1439-04-28', '2018-01-16', 26, 28, 10, 4, 'tuesday  ', 3, 0, 'NONE') ,('2018-01-17', '1396-10-27', '1439-04-29', '2018-01-17', 27, 29, 10, 4, 'wednesday', 4, 0, 'NONE') ,('2018-01-18', '1396-10-28', '1439-05-01', '2018-01-18', 28, 1, 10, 5, 'thursday ', 5, 0, 'NONE') ,('2018-01-19', '1396-10-29', '1439-05-02', '2018-01-19', 29, 2, 10, 5, 'friday   ', 6, 0, 'NONE') ,('2018-01-20', '1396-10-30', '1439-05-03', '2018-01-20', 30, 3, 10, 5, 'saturday ', 7, 0, 'NONE') ,('2018-01-21', '1396-11-01', '1439-05-04', '2018-01-21', 1, 4, 11, 5, 'sunday   ', 1, 0, 'NONE') ,('2018-01-22', '1396-11-02', '1439-05-05', '2018-01-22', 2, 5, 11, 5, 'monday   ', 2, 0, 'NONE') ,('2018-01-23', '1396-11-03', '1439-05-06', '2018-01-23', 3, 6, 11, 5, 'tuesday  ', 3, 0, 'NONE') ,('2018-01-24', '1396-11-04', '1439-05-07', '2018-01-24', 4, 7, 11, 5, 'wednesday', 4, 0, 'NONE') ,('2018-01-25', '1396-11-05', '1439-05-08', '2018-01-25', 5, 8, 11, 5, 'thursday ', 5, 0, 'NONE') ,('2018-01-26', '1396-11-06', '1439-05-09', '2018-01-26', 6, 9, 11, 5, 'friday   ', 6, 0, 'NONE') ,('2018-01-27', '1396-11-07', '1439-05-10', '2018-01-27', 7, 10, 11, 5, 'saturday ', 7, 0, 'NONE') ,('2018-01-28', '1396-11-08', '1439-05-11', '2018-01-28', 8, 11, 11, 5, 'sunday   ', 1, 0, 'NONE') ,('2018-01-29', '1396-11-09', '1439-05-12', '2018-01-29', 9, 12, 11, 5, 'monday   ', 2, 0, 'NONE') ,('2018-01-30', '1396-11-10', '1439-05-13', '2018-01-30', 10, 13, 11, 5, 'tuesday  ', 3, 0, 'NONE') ,('2018-01-31', '1396-11-11', '1439-05-14', '2018-01-31', 11, 14, 11, 5, 'wednesday', 4, 0, 'NONE') ,('2018-02-01', '1396-11-12', '1439-05-15', '2018-02-01', 12, 15, 11, 5, 'thursday ', 5, 0, 'NONE') ,('2018-02-02', '1396-11-13', '1439-05-16', '2018-02-02', 13, 16, 11, 5, 'friday   ', 6, 0, 'NONE') ,('2018-02-03', '1396-11-14', '1439-05-17', '2018-02-03', 14, 17, 11, 5, 'saturday ', 7, 0, 'NONE') ,('2018-02-04', '1396-11-15', '1439-05-18', '2018-02-04', 15, 18, 11, 5, 'sunday   ', 1, 0, 'NONE') ,('2018-02-05', '1396-11-16', '1439-05-19', '2018-02-05', 16, 19, 11, 5, 'monday   ', 2, 0, 'NONE') ,('2018-02-06', '1396-11-17', '1439-05-20', '2018-02-06', 17, 20, 11, 5, 'tuesday  ', 3, 0, 'NONE') ,('2018-02-07', '1396-11-18', '1439-05-21', '2018-02-07', 18, 21, 11, 5, 'wednesday', 4, 0, 'NONE') ,('2018-02-08', '1396-11-19', '1439-05-22', '2018-02-08', 19, 22, 11, 5, 'thursday ', 5, 0, 'NONE') ,('2018-02-09', '1396-11-20', '1439-05-23', '2018-02-09', 20, 23, 11, 5, 'friday   ', 6, 0, 'NONE') ,('2018-02-10', '1396-11-21', '1439-05-24', '2018-02-10', 21, 24, 11, 5, 'saturday ', 7, 0, 'NONE') ,('2018-02-11', '1396-11-22', '1439-05-25', '2018-02-11', 22, 25, 11, 5, 'sunday   ', 1, 0, 'NONE') ,('2018-02-12', '1396-11-23', '1439-05-26', '2018-02-12', 23, 26, 11, 5, 'monday   ', 2, 0, 'NONE') ,('2018-02-13', '1396-11-24', '1439-05-27', '2018-02-13', 24, 27, 11, 5, 'tuesday  ', 3, 0, 'NONE') ,('2018-02-14', '1396-11-25', '1439-05-28', '2018-02-14', 25, 28, 11, 5, 'wednesday', 4, 0, 'NONE') ,('2018-02-15', '1396-11-26', '1439-05-29', '2018-02-15', 26, 29, 11, 5, 'thursday ', 5, 0, 'NONE') ,('2018-02-16', '1396-11-27', '1439-05-30', '2018-02-16', 27, 30, 11, 5, 'friday   ', 6, 0, 'NONE') ,('2018-02-17', '1396-11-28', '1439-06-01', '2018-02-17', 28, 1, 11, 6, 'saturday ', 7, 0, 'NONE') ,('2018-02-18', '1396-11-29', '1439-06-02', '2018-02-18', 29, 2, 11, 6, 'sunday   ', 1, 0, 'NONE') ,('2018-02-19', '1396-11-30', '1439-06-03', '2018-02-19', 30, 3, 11, 6, 'monday   ', 2, 0, 'NONE') ,('2018-02-20', '1396-12-01', '1439-06-04', '2018-02-20', 1, 4, 12, 6, 'tuesday  ', 3, 0, 'NONE') ,('2018-02-21', '1396-12-02', '1439-06-05', '2018-02-21', 2, 5, 12, 6, 'wednesday', 4, 0, 'NONE') ,('2018-02-22', '1396-12-03', '1439-06-06', '2018-02-22', 3, 6, 12, 6, 'thursday ', 5, 0, 'NONE') ,('2018-02-23', '1396-12-04', '1439-06-07', '2018-02-23', 4, 7, 12, 6, 'friday   ', 6, 0, 'NONE') ,('2018-02-24', '1396-12-05', '1439-06-08', '2018-02-24', 5, 8, 12, 6, 'saturday ', 7, 0, 'NONE') ,('2018-02-25', '1396-12-06', '1439-06-09', '2018-02-25', 6, 9, 12, 6, 'sunday   ', 1, 0, 'NONE') ,('2018-02-26', '1396-12-07', '1439-06-10', '2018-02-26', 7, 10, 12, 6, 'monday   ', 2, 0, 'NONE') ,('2018-02-27', '1396-12-08', '1439-06-11', '2018-02-27', 8, 11, 12, 6, 'tuesday  ', 3, 0, 'NONE') ,('2018-02-28', '1396-12-09', '1439-06-12', '2018-02-28', 9, 12, 12, 6, 'wednesday', 4, 0, 'NONE') ,('2018-03-01', '1396-12-10', '1439-06-13', '2018-03-01', 10, 13, 12, 6, 'thursday ', 5, 0, 'NONE') ,('2018-03-02', '1396-12-11', '1439-06-14', '2018-03-02', 11, 14, 12, 6, 'friday   ', 6, 0, 'NONE') ,('2018-03-03', '1396-12-12', '1439-06-15', '2018-03-03', 12, 15, 12, 6, 'saturday ', 7, 0, 'NONE') ,('2018-03-04', '1396-12-13', '1439-06-16', '2018-03-04', 13, 16, 12, 6, 'sunday   ', 1, 0, 'NONE') ,('2018-03-05', '1396-12-14', '1439-06-17', '2018-03-05', 14, 17, 12, 6, 'monday   ', 2, 0, 'NONE') ,('2018-03-06', '1396-12-15', '1439-06-18', '2018-03-06', 15, 18, 12, 6, 'tuesday  ', 3, 0, 'NONE') ,('2018-03-07', '1396-12-16', '1439-06-19', '2018-03-07', 16, 19, 12, 6, 'wednesday', 4, 0, 'NONE') ,('2018-03-08', '1396-12-17', '1439-06-20', '2018-03-08', 17, 20, 12, 6, 'thursday ', 5, 0, 'NONE') ,('2018-03-09', '1396-12-18', '1439-06-21', '2018-03-09', 18, 21, 12, 6, 'friday   ', 6, 0, 'NONE') ,('2018-03-10', '1396-12-19', '1439-06-22', '2018-03-10', 19, 22, 12, 6, 'saturday ', 7, 0, 'NONE') ,('2018-03-11', '1396-12-20', '1439-06-23', '2018-03-11', 20, 23, 12, 6, 'sunday   ', 1, 0, 'NONE') ,('2018-03-12', '1396-12-21', '1439-06-24', '2018-03-12', 21, 24, 12, 6, 'monday   ', 2, 0, 'NONE') ,('2018-03-13', '1396-12-22', '1439-06-25', '2018-03-13', 22, 25, 12, 6, 'tuesday  ', 3, 0, 'NONE') ,('2018-03-14', '1396-12-23', '1439-06-26', '2018-03-14', 23, 26, 12, 6, 'wednesday', 4, 0, 'NONE') ,('2018-03-15', '1396-12-24', '1439-06-27', '2018-03-15', 24, 27, 12, 6, 'thursday ', 5, 0, 'NONE') ,('2018-03-16', '1396-12-25', '1439-06-28', '2018-03-16', 25, 28, 12, 6, 'friday   ', 6, 0, 'NONE') ,('2018-03-17', '1396-12-26', '1439-06-29', '2018-03-17', 26, 29, 12, 6, 'saturday ', 7, 0, 'NONE') ,('2018-03-18', '1396-12-27', '1439-07-01', '2018-03-18', 27, 1, 12, 7, 'sunday   ', 1, 0, 'NONE') ,('2018-03-19', '1396-12-28', '1439-07-02', '2018-03-19', 28, 2, 12, 7, 'monday   ', 2, 0, 'NONE') ,('2018-03-20', '1396-12-29', '1439-07-03', '2018-03-20', 29, 3, 12, 7, 'tuesday  ', 3, 0, 'NONE') ,('2018-03-21', '1397-01-01', '1439-07-04', '2018-03-21', 1, 4, 1, 7, 'wednesday', 4, 0, 'NONE') ,('2018-03-22', '1397-01-02', '1439-07-05', '2018-03-22', 2, 5, 1, 7, 'thursday ', 5, 0, 'NONE') ,('2018-03-23', '1397-01-03', '1439-07-06', '2018-03-23', 3, 6, 1, 7, 'friday   ', 6, 0, 'NONE') ,('2018-03-24', '1397-01-04', '1439-07-07', '2018-03-24', 4, 7, 1, 7, 'saturday ', 7, 0, 'NONE') ,('2018-03-25', '1397-01-05', '1439-07-08', '2018-03-25', 5, 8, 1, 7, 'sunday   ', 1, 0, 'NONE') ,('2018-03-26', '1397-01-06', '1439-07-09', '2018-03-26', 6, 9, 1, 7, 'monday   ', 2, 0, 'NONE') ,('2018-03-27', '1397-01-07', '1439-07-10', '2018-03-27', 7, 10, 1, 7, 'tuesday  ', 3, 0, 'NONE') ,('2018-03-28', '1397-01-08', '1439-07-11', '2018-03-28', 8, 11, 1, 7, 'wednesday', 4, 0, 'NONE') ,('2018-03-29', '1397-01-09', '1439-07-12', '2018-03-29', 9, 12, 1, 7, 'thursday ', 5, 0, 'NONE') ,('2018-03-30', '1397-01-10', '1439-07-13', '2018-03-30', 10, 13, 1, 7, 'friday   ', 6, 0, 'NONE') ,('2018-03-31', '1397-01-11', '1439-07-14', '2018-03-31', 11, 14, 1, 7, 'saturday ', 7, 0, 'NONE') ,('2018-04-01', '1397-01-12', '1439-07-15', '2018-04-01', 12, 15, 1, 7, 'sunday   ', 1, 0, 'NONE') ,('2018-04-02', '1397-01-13', '1439-07-16', '2018-04-02', 13, 16, 1, 7, 'monday   ', 2, 0, 'NONE') ,('2018-04-03', '1397-01-14', '1439-07-17', '2018-04-03', 14, 17, 1, 7, 'tuesday  ', 3, 0, 'NONE') ,('2018-04-04', '1397-01-15', '1439-07-18', '2018-04-04', 15, 18, 1, 7, 'wednesday', 4, 0, 'NONE') ,('2018-04-05', '1397-01-16', '1439-07-19', '2018-04-05', 16, 19, 1, 7, 'thursday ', 5, 0, 'NONE') ,('2018-04-06', '1397-01-17', '1439-07-20', '2018-04-06', 17, 20, 1, 7, 'friday   ', 6, 0, 'NONE') ,('2018-04-07', '1397-01-18', '1439-07-21', '2018-04-07', 18, 21, 1, 7, 'saturday ', 7, 0, 'NONE') ,('2018-04-08', '1397-01-19', '1439-07-22', '2018-04-08', 19, 22, 1, 7, 'sunday   ', 1, 0, 'NONE') ,('2018-04-09', '1397-01-20', '1439-07-23', '2018-04-09', 20, 23, 1, 7, 'monday   ', 2, 0, 'NONE') ,('2018-04-10', '1397-01-21', '1439-07-24', '2018-04-10', 21, 24, 1, 7, 'tuesday  ', 3, 0, 'NONE') ,('2018-04-11', '1397-01-22', '1439-07-25', '2018-04-11', 22, 25, 1, 7, 'wednesday', 4, 0, 'NONE') ,('2018-04-12', '1397-01-23', '1439-07-26', '2018-04-12', 23, 26, 1, 7, 'thursday ', 5, 0, 'NONE') ,('2018-04-13', '1397-01-24', '1439-07-27', '2018-04-13', 24, 27, 1, 7, 'friday   ', 6, 0, 'NONE') ,('2018-04-14', '1397-01-25', '1439-07-28', '2018-04-14', 25, 28, 1, 7, 'saturday ', 7, 0, 'NONE') ,('2018-04-15', '1397-01-26', '1439-07-29', '2018-04-15', 26, 29, 1, 7, 'sunday   ', 1, 0, 'NONE') ,('2018-04-16', '1397-01-27', '1439-07-30', '2018-04-16', 27, 30, 1, 7, 'monday   ', 2, 0, 'NONE') ,('2018-04-17', '1397-01-28', '1439-08-01', '2018-04-17', 28, 1, 1, 8, 'tuesday  ', 3, 0, 'NONE') ,('2018-04-18', '1397-01-29', '1439-08-02', '2018-04-18', 29, 2, 1, 8, 'wednesday', 4, 0, 'NONE') ,('2018-04-19', '1397-01-30', '1439-08-03', '2018-04-19', 30, 3, 1, 8, 'thursday ', 5, 0, 'NONE') ,('2018-04-20', '1397-01-31', '1439-08-04', '2018-04-20', 31, 4, 1, 8, 'friday   ', 6, 0, 'NONE') ,('2018-04-21', '1397-02-01', '1439-08-05', '2018-04-21', 1, 5, 2, 8, 'saturday ', 7, 0, 'NONE') ,('2018-04-22', '1397-02-02', '1439-08-06', '2018-04-22', 2, 6, 2, 8, 'sunday   ', 1, 0, 'NONE') ,('2018-04-23', '1397-02-03', '1439-08-07', '2018-04-23', 3, 7, 2, 8, 'monday   ', 2, 0, 'NONE') ,('2018-04-24', '1397-02-04', '1439-08-08', '2018-04-24', 4, 8, 2, 8, 'tuesday  ', 3, 0, 'NONE') ,('2018-04-25', '1397-02-05', '1439-08-09', '2018-04-25', 5, 9, 2, 8, 'wednesday', 4, 0, 'NONE') ,('2018-04-26', '1397-02-06', '1439-08-10', '2018-04-26', 6, 10, 2, 8, 'thursday ', 5, 0, 'NONE') ,('2018-04-27', '1397-02-07', '1439-08-11', '2018-04-27', 7, 11, 2, 8, 'friday   ', 6, 0, 'NONE') ,('2018-04-28', '1397-02-08', '1439-08-12', '2018-04-28', 8, 12, 2, 8, 'saturday ', 7, 0, 'NONE') ,('2018-04-29', '1397-02-09', '1439-08-13', '2018-04-29', 9, 13, 2, 8, 'sunday   ', 1, 0, 'NONE') ,('2018-04-30', '1397-02-10', '1439-08-14', '2018-04-30', 10, 14, 2, 8, 'monday   ', 2, 0, 'NONE') ,('2018-05-01', '1397-02-11', '1439-08-15', '2018-05-01', 11, 15, 2, 8, 'tuesday  ', 3, 0, 'NONE') ,('2018-05-02', '1397-02-12', '1439-08-16', '2018-05-02', 12, 16, 2, 8, 'wednesday', 4, 0, 'NONE') ,('2018-05-03', '1397-02-13', '1439-08-17', '2018-05-03', 13, 17, 2, 8, 'thursday ', 5, 0, 'NONE') ,('2018-05-04', '1397-02-14', '1439-08-18', '2018-05-04', 14, 18, 2, 8, 'friday   ', 6, 0, 'NONE') ,('2018-05-05', '1397-02-15', '1439-08-19', '2018-05-05', 15, 19, 2, 8, 'saturday ', 7, 0, 'NONE') ,('2018-05-06', '1397-02-16', '1439-08-20', '2018-05-06', 16, 20, 2, 8, 'sunday   ', 1, 0, 'NONE') ,('2018-05-07', '1397-02-17', '1439-08-21', '2018-05-07', 17, 21, 2, 8, 'monday   ', 2, 0, 'NONE') ,('2018-05-08', '1397-02-18', '1439-08-22', '2018-05-08', 18, 22, 2, 8, 'tuesday  ', 3, 0, 'NONE') ,('2018-05-09', '1397-02-19', '1439-08-23', '2018-05-09', 19, 23, 2, 8, 'wednesday', 4, 0, 'NONE') ,('2018-05-10', '1397-02-20', '1439-08-24', '2018-05-10', 20, 24, 2, 8, 'thursday ', 5, 0, 'NONE') ,('2018-05-11', '1397-02-21', '1439-08-25', '2018-05-11', 21, 25, 2, 8, 'friday   ', 6, 0, 'NONE') ,('2018-05-12', '1397-02-22', '1439-08-26', '2018-05-12', 22, 26, 2, 8, 'saturday ', 7, 0, 'NONE') ,('2018-05-13', '1397-02-23', '1439-08-27', '2018-05-13', 23, 27, 2, 8, 'sunday   ', 1, 0, 'NONE') ,('2018-05-14', '1397-02-24', '1439-08-28', '2018-05-14', 24, 28, 2, 8, 'monday   ', 2, 0, 'NONE') ,('2018-05-15', '1397-02-25', '1439-08-29', '2018-05-15', 25, 29, 2, 8, 'tuesday  ', 3, 0, 'NONE') ,('2018-05-16', '1397-02-26', '1439-09-01', '2018-05-16', 26, 1, 2, 9, 'wednesday', 4, 0, 'NONE') ,('2018-05-17', '1397-02-27', '1439-09-02', '2018-05-17', 27, 2, 2, 9, 'thursday ', 5, 0, 'NONE') ,('2018-05-18', '1397-02-28', '1439-09-03', '2018-05-18', 28, 3, 2, 9, 'friday   ', 6, 0, 'NONE') ,('2018-05-19', '1397-02-29', '1439-09-04', '2018-05-19', 29, 4, 2, 9, 'saturday ', 7, 0, 'NONE') ,('2018-05-20', '1397-02-30', '1439-09-05', '2018-05-20', 30, 5, 2, 9, 'sunday   ', 1, 0, 'NONE') ,('2018-05-21', '1397-02-31', '1439-09-06', '2018-05-21', 31, 6, 2, 9, 'monday   ', 2, 0, 'NONE') ,('2018-05-22', '1397-03-01', '1439-09-07', '2018-05-22', 1, 7, 3, 9, 'tuesday  ', 3, 0, 'NONE') ,('2018-05-23', '1397-03-02', '1439-09-08', '2018-05-23', 2, 8, 3, 9, 'wednesday', 4, 0, 'NONE') ,('2018-05-24', '1397-03-03', '1439-09-09', '2018-05-24', 3, 9, 3, 9, 'thursday ', 5, 0, 'NONE') ,('2018-05-25', '1397-03-04', '1439-09-10', '2018-05-25', 4, 10, 3, 9, 'friday   ', 6, 0, 'NONE') ,('2018-05-26', '1397-03-05', '1439-09-11', '2018-05-26', 5, 11, 3, 9, 'saturday ', 7, 0, 'NONE') ,('2018-05-27', '1397-03-06', '1439-09-12', '2018-05-27', 6, 12, 3, 9, 'sunday   ', 1, 0, 'NONE') ,('2018-05-28', '1397-03-07', '1439-09-13', '2018-05-28', 7, 13, 3, 9, 'monday   ', 2, 0, 'NONE') ,('2018-05-29', '1397-03-08', '1439-09-14', '2018-05-29', 8, 14, 3, 9, 'tuesday  ', 3, 0, 'NONE') ,('2018-05-30', '1397-03-09', '1439-09-15', '2018-05-30', 9, 15, 3, 9, 'wednesday', 4, 0, 'NONE') ,('2018-05-31', '1397-03-10', '1439-09-16', '2018-05-31', 10, 16, 3, 9, 'thursday ', 5, 0, 'NONE') ,('2018-06-01', '1397-03-11', '1439-09-17', '2018-06-01', 11, 17, 3, 9, 'friday   ', 6, 0, 'NONE') ,('2018-06-02', '1397-03-12', '1439-09-18', '2018-06-02', 12, 18, 3, 9, 'saturday ', 7, 0, 'NONE') ,('2018-06-03', '1397-03-13', '1439-09-19', '2018-06-03', 13, 19, 3, 9, 'sunday   ', 1, 0, 'NONE') ,('2018-06-04', '1397-03-14', '1439-09-20', '2018-06-04', 14, 20, 3, 9, 'monday   ', 2, 0, 'NONE') ,('2018-06-05', '1397-03-15', '1439-09-21', '2018-06-05', 15, 21, 3, 9, 'tuesday  ', 3, 0, 'NONE') ,('2018-06-06', '1397-03-16', '1439-09-22', '2018-06-06', 16, 22, 3, 9, 'wednesday', 4, 0, 'NONE') ,('2018-06-07', '1397-03-17', '1439-09-23', '2018-06-07', 17, 23, 3, 9, 'thursday ', 5, 0, 'NONE') ,('2018-06-08', '1397-03-18', '1439-09-24', '2018-06-08', 18, 24, 3, 9, 'friday   ', 6, 0, 'NONE') ,('2018-06-09', '1397-03-19', '1439-09-25', '2018-06-09', 19, 25, 3, 9, 'saturday ', 7, 0, 'NONE') ,('2018-06-10', '1397-03-20', '1439-09-26', '2018-06-10', 20, 26, 3, 9, 'sunday   ', 1, 0, 'NONE') ,('2018-06-11', '1397-03-21', '1439-09-27', '2018-06-11', 21, 27, 3, 9, 'monday   ', 2, 0, 'NONE') ,('2018-06-12', '1397-03-22', '1439-09-28', '2018-06-12', 22, 28, 3, 9, 'tuesday  ', 3, 0, 'NONE') ,('2018-06-13', '1397-03-23', '1439-09-29', '2018-06-13', 23, 29, 3, 9, 'wednesday', 4, 0, 'NONE') ,('2018-06-14', '1397-03-24', '1439-09-30', '2018-06-14', 24, 30, 3, 9, 'thursday ', 5, 0, 'NONE') ,('2018-06-15', '1397-03-25', '1439-10-01', '2018-06-15', 25, 1, 3, 10, 'friday   ', 6, 0, 'NONE') ,('2018-06-16', '1397-03-26', '1439-10-02', '2018-06-16', 26, 2, 3, 10, 'saturday ', 7, 0, 'NONE') ,('2018-06-17', '1397-03-27', '1439-10-03', '2018-06-17', 27, 3, 3, 10, 'sunday   ', 1, 0, 'NONE') ,('2018-06-18', '1397-03-28', '1439-10-04', '2018-06-18', 28, 4, 3, 10, 'monday   ', 2, 0, 'NONE') ,('2018-06-19', '1397-03-29', '1439-10-05', '2018-06-19', 29, 5, 3, 10, 'tuesday  ', 3, 0, 'NONE') ,('2018-06-20', '1397-03-30', '1439-10-06', '2018-06-20', 30, 6, 3, 10, 'wednesday', 4, 0, 'NONE') ,('2018-06-21', '1397-03-31', '1439-10-07', '2018-06-21', 31, 7, 3, 10, 'thursday ', 5, 0, 'NONE') ,('2018-06-22', '1397-04-01', '1439-10-08', '2018-06-22', 1, 8, 4, 10, 'friday   ', 6, 0, 'NONE') ,('2018-06-23', '1397-04-02', '1439-10-09', '2018-06-23', 2, 9, 4, 10, 'saturday ', 7, 0, 'NONE') ,('2018-06-24', '1397-04-03', '1439-10-10', '2018-06-24', 3, 10, 4, 10, 'sunday   ', 1, 0, 'NONE') ,('2018-06-25', '1397-04-04', '1439-10-11', '2018-06-25', 4, 11, 4, 10, 'monday   ', 2, 0, 'NONE') ,('2018-06-26', '1397-04-05', '1439-10-12', '2018-06-26', 5, 12, 4, 10, 'tuesday  ', 3, 0, 'NONE') ,('2018-06-27', '1397-04-06', '1439-10-13', '2018-06-27', 6, 13, 4, 10, 'wednesday', 4, 0, 'NONE') ,('2018-06-28', '1397-04-07', '1439-10-14', '2018-06-28', 7, 14, 4, 10, 'thursday ', 5, 0, 'NONE') ,('2018-06-29', '1397-04-08', '1439-10-15', '2018-06-29', 8, 15, 4, 10, 'friday   ', 6, 0, 'NONE') ,('2018-06-30', '1397-04-09', '1439-10-16', '2018-06-30', 9, 16, 4, 10, 'saturday ', 7, 0, 'NONE') ,('2018-07-01', '1397-04-10', '1439-10-17', '2018-07-01', 10, 17, 4, 10, 'sunday   ', 1, 0, 'NONE') ,('2018-07-02', '1397-04-11', '1439-10-18', '2018-07-02', 11, 18, 4, 10, 'monday   ', 2, 0, 'NONE') ,('2018-07-03', '1397-04-12', '1439-10-19', '2018-07-03', 12, 19, 4, 10, 'tuesday  ', 3, 0, 'NONE') ,('2018-07-04', '1397-04-13', '1439-10-20', '2018-07-04', 13, 20, 4, 10, 'wednesday', 4, 0, 'NONE') ,('2018-07-05', '1397-04-14', '1439-10-21', '2018-07-05', 14, 21, 4, 10, 'thursday ', 5, 0, 'NONE') ,('2018-07-06', '1397-04-15', '1439-10-22', '2018-07-06', 15, 22, 4, 10, 'friday   ', 6, 0, 'NONE') ,('2018-07-07', '1397-04-16', '1439-10-23', '2018-07-07', 16, 23, 4, 10, 'saturday ', 7, 0, 'NONE') ,('2018-07-08', '1397-04-17', '1439-10-24', '2018-07-08', 17, 24, 4, 10, 'sunday   ', 1, 0, 'NONE') ,('2018-07-09', '1397-04-18', '1439-10-25', '2018-07-09', 18, 25, 4, 10, 'monday   ', 2, 0, 'NONE') ,('2018-07-10', '1397-04-19', '1439-10-26', '2018-07-10', 19, 26, 4, 10, 'tuesday  ', 3, 0, 'NONE') ,('2018-07-11', '1397-04-20', '1439-10-27', '2018-07-11', 20, 27, 4, 10, 'wednesday', 4, 0, 'NONE') ,('2018-07-12', '1397-04-21', '1439-10-28', '2018-07-12', 21, 28, 4, 10, 'thursday ', 5, 0, 'NONE') ,('2018-07-13', '1397-04-22', '1439-10-29', '2018-07-13', 22, 29, 4, 10, 'friday   ', 6, 0, 'NONE') ,('2018-07-14', '1397-04-23', '1439-11-01', '2018-07-14', 23, 1, 4, 11, 'saturday ', 7, 0, 'NONE') ,('2018-07-15', '1397-04-24', '1439-11-02', '2018-07-15', 24, 2, 4, 11, 'sunday   ', 1, 0, 'NONE') ,('2018-07-16', '1397-04-25', '1439-11-03', '2018-07-16', 25, 3, 4, 11, 'monday   ', 2, 0, 'NONE') ,('2018-07-17', '1397-04-26', '1439-11-04', '2018-07-17', 26, 4, 4, 11, 'tuesday  ', 3, 0, 'NONE') ,('2018-07-18', '1397-04-27', '1439-11-05', '2018-07-18', 27, 5, 4, 11, 'wednesday', 4, 0, 'NONE') ,('2018-07-19', '1397-04-28', '1439-11-06', '2018-07-19', 28, 6, 4, 11, 'thursday ', 5, 0, 'NONE') ,('2018-07-20', '1397-04-29', '1439-11-07', '2018-07-20', 29, 7, 4, 11, 'friday   ', 6, 0, 'NONE') ,('2018-07-21', '1397-04-30', '1439-11-08', '2018-07-21', 30, 8, 4, 11, 'saturday ', 7, 0, 'NONE') ,('2018-07-22', '1397-04-31', '1439-11-09', '2018-07-22', 31, 9, 4, 11, 'sunday   ', 1, 0, 'NONE') ,('2018-07-23', '1397-05-01', '1439-11-10', '2018-07-23', 1, 10, 5, 11, 'monday   ', 2, 0, 'NONE') ,('2018-07-24', '1397-05-02', '1439-11-11', '2018-07-24', 2, 11, 5, 11, 'tuesday  ', 3, 0, 'NONE') ,('2018-07-25', '1397-05-03', '1439-11-12', '2018-07-25', 3, 12, 5, 11, 'wednesday', 4, 0, 'NONE') ,('2018-07-26', '1397-05-04', '1439-11-13', '2018-07-26', 4, 13, 5, 11, 'thursday ', 5, 0, 'NONE') ,('2018-07-27', '1397-05-05', '1439-11-14', '2018-07-27', 5, 14, 5, 11, 'friday   ', 6, 0, 'NONE') ,('2018-07-28', '1397-05-06', '1439-11-15', '2018-07-28', 6, 15, 5, 11, 'saturday ', 7, 0, 'NONE') ,('2018-07-29', '1397-05-07', '1439-11-16', '2018-07-29', 7, 16, 5, 11, 'sunday   ', 1, 0, 'NONE') ,('2018-07-30', '1397-05-08', '1439-11-17', '2018-07-30', 8, 17, 5, 11, 'monday   ', 2, 0, 'NONE') ,('2018-07-31', '1397-05-09', '1439-11-18', '2018-07-31', 9, 18, 5, 11, 'tuesday  ', 3, 0, 'NONE') ,('2018-08-01', '1397-05-10', '1439-11-19', '2018-08-01', 10, 19, 5, 11, 'wednesday', 4, 0, 'NONE') ,('2018-08-02', '1397-05-11', '1439-11-20', '2018-08-02', 11, 20, 5, 11, 'thursday ', 5, 0, 'NONE') ,('2018-08-03', '1397-05-12', '1439-11-21', '2018-08-03', 12, 21, 5, 11, 'friday   ', 6, 0, 'NONE') ,('2018-08-04', '1397-05-13', '1439-11-22', '2018-08-04', 13, 22, 5, 11, 'saturday ', 7, 0, 'NONE') ,('2018-08-05', '1397-05-14', '1439-11-23', '2018-08-05', 14, 23, 5, 11, 'sunday   ', 1, 0, 'NONE') ,('2018-08-06', '1397-05-15', '1439-11-24', '2018-08-06', 15, 24, 5, 11, 'monday   ', 2, 0, 'NONE') ,('2018-08-07', '1397-05-16', '1439-11-25', '2018-08-07', 16, 25, 5, 11, 'tuesday  ', 3, 0, 'NONE') ,('2018-08-08', '1397-05-17', '1439-11-26', '2018-08-08', 17, 26, 5, 11, 'wednesday', 4, 0, 'NONE') ,('2018-08-09', '1397-05-18', '1439-11-27', '2018-08-09', 18, 27, 5, 11, 'thursday ', 5, 0, 'NONE') ,('2018-08-10', '1397-05-19', '1439-11-28', '2018-08-10', 19, 28, 5, 11, 'friday   ', 6, 0, 'NONE') ,('2018-08-11', '1397-05-20', '1439-11-29', '2018-08-11', 20, 29, 5, 11, 'saturday ', 7, 0, 'NONE') ,('2018-08-12', '1397-05-21', '1439-11-30', '2018-08-12', 21, 30, 5, 11, 'sunday   ', 1, 0, 'NONE') ,('2018-08-13', '1397-05-22', '1439-12-01', '2018-08-13', 22, 1, 5, 12, 'monday   ', 2, 0, 'NONE') ,('2018-08-14', '1397-05-23', '1439-12-02', '2018-08-14', 23, 2, 5, 12, 'tuesday  ', 3, 0, 'NONE') ,('2018-08-15', '1397-05-24', '1439-12-03', '2018-08-15', 24, 3, 5, 12, 'wednesday', 4, 0, 'NONE') ,('2018-08-16', '1397-05-25', '1439-12-04', '2018-08-16', 25, 4, 5, 12, 'thursday ', 5, 0, 'NONE') ,('2018-08-17', '1397-05-26', '1439-12-05', '2018-08-17', 26, 5, 5, 12, 'friday   ', 6, 0, 'NONE') ,('2018-08-18', '1397-05-27', '1439-12-06', '2018-08-18', 27, 6, 5, 12, 'saturday ', 7, 0, 'NONE') ,('2018-08-19', '1397-05-28', '1439-12-07', '2018-08-19', 28, 7, 5, 12, 'sunday   ', 1, 0, 'NONE') ,('2018-08-20', '1397-05-29', '1439-12-08', '2018-08-20', 29, 8, 5, 12, 'monday   ', 2, 0, 'NONE') ,('2018-08-21', '1397-05-30', '1439-12-09', '2018-08-21', 30, 9, 5, 12, 'tuesday  ', 3, 0, 'NONE') ,('2018-08-22', '1397-05-31', '1439-12-10', '2018-08-22', 31, 10, 5, 12, 'wednesday', 4, 0, 'NONE') ,('2018-08-23', '1397-06-01', '1439-12-11', '2018-08-23', 1, 11, 6, 12, 'thursday ', 5, 0, 'NONE') ,('2018-08-24', '1397-06-02', '1439-12-12', '2018-08-24', 2, 12, 6, 12, 'friday   ', 6, 0, 'NONE') ,('2018-08-25', '1397-06-03', '1439-12-13', '2018-08-25', 3, 13, 6, 12, 'saturday ', 7, 0, 'NONE') ,('2018-08-26', '1397-06-04', '1439-12-14', '2018-08-26', 4, 14, 6, 12, 'sunday   ', 1, 0, 'NONE') ,('2018-08-27', '1397-06-05', '1439-12-15', '2018-08-27', 5, 15, 6, 12, 'monday   ', 2, 0, 'NONE') ,('2018-08-28', '1397-06-06', '1439-12-16', '2018-08-28', 6, 16, 6, 12, 'tuesday  ', 3, 0, 'NONE') ,('2018-08-29', '1397-06-07', '1439-12-17', '2018-08-29', 7, 17, 6, 12, 'wednesday', 4, 0, 'NONE') ,('2018-08-30', '1397-06-08', '1439-12-18', '2018-08-30', 8, 18, 6, 12, 'thursday ', 5, 0, 'NONE') ,('2018-08-31', '1397-06-09', '1439-12-19', '2018-08-31', 9, 19, 6, 12, 'friday   ', 6, 0, 'NONE') ,('2018-09-01', '1397-06-10', '1439-12-20', '2018-09-01', 10, 20, 6, 12, 'saturday ', 7, 0, 'NONE') ,('2018-09-02', '1397-06-11', '1439-12-21', '2018-09-02', 11, 21, 6, 12, 'sunday   ', 1, 0, 'NONE') ,('2018-09-03', '1397-06-12', '1439-12-22', '2018-09-03', 12, 22, 6, 12, 'monday   ', 2, 0, 'NONE') ,('2018-09-04', '1397-06-13', '1439-12-23', '2018-09-04', 13, 23, 6, 12, 'tuesday  ', 3, 0, 'NONE') ,('2018-09-05', '1397-06-14', '1439-12-24', '2018-09-05', 14, 24, 6, 12, 'wednesday', 4, 0, 'NONE') ,('2018-09-06', '1397-06-15', '1439-12-25', '2018-09-06', 15, 25, 6, 12, 'thursday ', 5, 0, 'NONE') ,('2018-09-07', '1397-06-16', '1439-12-26', '2018-09-07', 16, 26, 6, 12, 'friday   ', 6, 0, 'NONE') ,('2018-09-08', '1397-06-17', '1439-12-27', '2018-09-08', 17, 27, 6, 12, 'saturday ', 7, 0, 'NONE') ,('2018-09-09', '1397-06-18', '1439-12-28', '2018-09-09', 18, 28, 6, 12, 'sunday   ', 1, 0, 'NONE') ,('2018-09-10', '1397-06-19', '1439-12-29', '2018-09-10', 19, 29, 6, 12, 'monday   ', 2, 0, 'NONE') ,('2018-09-11', '1397-06-20', '1439-12-30', '2018-09-11', 20, 30, 6, 12, 'tuesday  ', 3, 0, 'NONE') ,('2018-09-12', '1397-06-21', '1440-01-01', '2018-09-12', 21, 1, 6, 1, 'wednesday', 4, 0, 'NONE') ,('2018-09-13', '1397-06-22', '1440-01-02', '2018-09-13', 22, 2, 6, 1, 'thursday ', 5, 0, 'NONE') ,('2018-09-14', '1397-06-23', '1440-01-03', '2018-09-14', 23, 3, 6, 1, 'friday   ', 6, 0, 'NONE') ,('2018-09-15', '1397-06-24', '1440-01-04', '2018-09-15', 24, 4, 6, 1, 'saturday ', 7, 0, 'NONE') ,('2018-09-16', '1397-06-25', '1440-01-05', '2018-09-16', 25, 5, 6, 1, 'sunday   ', 1, 0, 'NONE') ,('2018-09-17', '1397-06-26', '1440-01-06', '2018-09-17', 26, 6, 6, 1, 'monday   ', 2, 0, 'NONE') ,('2018-09-18', '1397-06-27', '1440-01-07', '2018-09-18', 27, 7, 6, 1, 'tuesday  ', 3, 0, 'NONE') ,('2018-09-19', '1397-06-28', '1440-01-08', '2018-09-19', 28, 8, 6, 1, 'wednesday', 4, 0, 'NONE') ,('2018-09-20', '1397-06-29', '1440-01-09', '2018-09-20', 29, 9, 6, 1, 'thursday ', 5, 0, 'NONE') ,('2018-09-21', '1397-06-30', '1440-01-10', '2018-09-21', 30, 10, 6, 1, 'friday   ', 6, 0, 'NONE') ,('2018-09-22', '1397-06-31', '1440-01-11', '2018-09-22', 31, 11, 6, 1, 'saturday ', 7, 0, 'NONE') ,('2018-09-23', '1397-07-01', '1440-01-12', '2018-09-23', 1, 12, 7, 1, 'sunday   ', 1, 0, 'NONE') ,('2018-09-24', '1397-07-02', '1440-01-13', '2018-09-24', 2, 13, 7, 1, 'monday   ', 2, 0, 'NONE') ,('2018-09-25', '1397-07-03', '1440-01-14', '2018-09-25', 3, 14, 7, 1, 'tuesday  ', 3, 0, 'NONE') ,('2018-09-26', '1397-07-04', '1440-01-15', '2018-09-26', 4, 15, 7, 1, 'wednesday', 4, 0, 'NONE') ,('2018-09-27', '1397-07-05', '1440-01-16', '2018-09-27', 5, 16, 7, 1, 'thursday ', 5, 0, 'NONE') ,('2018-09-28', '1397-07-06', '1440-01-17', '2018-09-28', 6, 17, 7, 1, 'friday   ', 6, 0, 'NONE') ,('2018-09-29', '1397-07-07', '1440-01-18', '2018-09-29', 7, 18, 7, 1, 'saturday ', 7, 0, 'NONE') ,('2018-09-30', '1397-07-08', '1440-01-19', '2018-09-30', 8, 19, 7, 1, 'sunday   ', 1, 0, 'NONE') ,('2018-10-01', '1397-07-09', '1440-01-20', '2018-10-01', 9, 20, 7, 1, 'monday   ', 2, 0, 'NONE') ,('2018-10-02', '1397-07-10', '1440-01-21', '2018-10-02', 10, 21, 7, 1, 'tuesday  ', 3, 0, 'NONE') ,('2018-10-03', '1397-07-11', '1440-01-22', '2018-10-03', 11, 22, 7, 1, 'wednesday', 4, 0, 'NONE') ,('2018-10-04', '1397-07-12', '1440-01-23', '2018-10-04', 12, 23, 7, 1, 'thursday ', 5, 0, 'NONE') ,('2018-10-05', '1397-07-13', '1440-01-24', '2018-10-05', 13, 24, 7, 1, 'friday   ', 6, 0, 'NONE') ,('2018-10-06', '1397-07-14', '1440-01-25', '2018-10-06', 14, 25, 7, 1, 'saturday ', 7, 0, 'NONE') ,('2018-10-07', '1397-07-15', '1440-01-26', '2018-10-07', 15, 26, 7, 1, 'sunday   ', 1, 0, 'NONE') ,('2018-10-08', '1397-07-16', '1440-01-27', '2018-10-08', 16, 27, 7, 1, 'monday   ', 2, 0, 'NONE') ,('2018-10-09', '1397-07-17', '1440-01-28', '2018-10-09', 17, 28, 7, 1, 'tuesday  ', 3, 0, 'NONE') ,('2018-10-10', '1397-07-18', '1440-01-29', '2018-10-10', 18, 29, 7, 1, 'wednesday', 4, 0, 'NONE') ,('2018-10-11', '1397-07-19', '1440-01-30', '2018-10-11', 19, 30, 7, 1, 'thursday ', 5, 0, 'NONE') ,('2018-10-12', '1397-07-20', '1440-02-01', '2018-10-12', 20, 1, 7, 2, 'friday   ', 6, 0, 'NONE') ,('2018-10-13', '1397-07-21', '1440-02-02', '2018-10-13', 21, 2, 7, 2, 'saturday ', 7, 0, 'NONE') ,('2018-10-14', '1397-07-22', '1440-02-03', '2018-10-14', 22, 3, 7, 2, 'sunday   ', 1, 0, 'NONE') ,('2018-10-15', '1397-07-23', '1440-02-04', '2018-10-15', 23, 4, 7, 2, 'monday   ', 2, 0, 'NONE') ,('2018-10-16', '1397-07-24', '1440-02-05', '2018-10-16', 24, 5, 7, 2, 'tuesday  ', 3, 0, 'NONE') ,('2018-10-17', '1397-07-25', '1440-02-06', '2018-10-17', 25, 6, 7, 2, 'wednesday', 4, 0, 'NONE') ,('2018-10-18', '1397-07-26', '1440-02-07', '2018-10-18', 26, 7, 7, 2, 'thursday ', 5, 0, 'NONE') ,('2018-10-19', '1397-07-27', '1440-02-08', '2018-10-19', 27, 8, 7, 2, 'friday   ', 6, 0, 'NONE') ,('2018-10-20', '1397-07-28', '1440-02-09', '2018-10-20', 28, 9, 7, 2, 'saturday ', 7, 0, 'NONE') ,('2018-10-21', '1397-07-29', '1440-02-10', '2018-10-21', 29, 10, 7, 2, 'sunday   ', 1, 0, 'NONE') ,('2018-10-22', '1397-07-30', '1440-02-11', '2018-10-22', 30, 11, 7, 2, 'monday   ', 2, 0, 'NONE') ,('2018-10-23', '1397-08-01', '1440-02-12', '2018-10-23', 1, 12, 8, 2, 'tuesday  ', 3, 0, 'NONE') ,('2018-10-24', '1397-08-02', '1440-02-13', '2018-10-24', 2, 13, 8, 2, 'wednesday', 4, 0, 'NONE') ,('2018-10-25', '1397-08-03', '1440-02-14', '2018-10-25', 3, 14, 8, 2, 'thursday ', 5, 0, 'NONE') ,('2018-10-26', '1397-08-04', '1440-02-15', '2018-10-26', 4, 15, 8, 2, 'friday   ', 6, 0, 'NONE') ,('2018-10-27', '1397-08-05', '1440-02-16', '2018-10-27', 5, 16, 8, 2, 'saturday ', 7, 0, 'NONE') ,('2018-10-28', '1397-08-06', '1440-02-17', '2018-10-28', 6, 17, 8, 2, 'sunday   ', 1, 0, 'NONE') ,('2018-10-29', '1397-08-07', '1440-02-18', '2018-10-29', 7, 18, 8, 2, 'monday   ', 2, 0, 'NONE') ,('2018-10-30', '1397-08-08', '1440-02-19', '2018-10-30', 8, 19, 8, 2, 'tuesday  ', 3, 0, 'NONE') ,('2018-10-31', '1397-08-09', '1440-02-20', '2018-10-31', 9, 20, 8, 2, 'wednesday', 4, 0, 'NONE') ,('2018-11-01', '1397-08-10', '1440-02-21', '2018-11-01', 10, 21, 8, 2, 'thursday ', 5, 0, 'NONE') ,('2018-11-02', '1397-08-11', '1440-02-22', '2018-11-02', 11, 22, 8, 2, 'friday   ', 6, 0, 'NONE') ,('2018-11-03', '1397-08-12', '1440-02-23', '2018-11-03', 12, 23, 8, 2, 'saturday ', 7, 0, 'NONE') ,('2018-11-04', '1397-08-13', '1440-02-24', '2018-11-04', 13, 24, 8, 2, 'sunday   ', 1, 0, 'NONE') ,('2018-11-05', '1397-08-14', '1440-02-25', '2018-11-05', 14, 25, 8, 2, 'monday   ', 2, 0, 'NONE') ,('2018-11-06', '1397-08-15', '1440-02-26', '2018-11-06', 15, 26, 8, 2, 'tuesday  ', 3, 0, 'NONE') ,('2018-11-07', '1397-08-16', '1440-02-27', '2018-11-07', 16, 27, 8, 2, 'wednesday', 4, 0, 'NONE') ,('2018-11-08', '1397-08-17', '1440-02-28', '2018-11-08', 17, 28, 8, 2, 'thursday ', 5, 0, 'NONE') ,('2018-11-09', '1397-08-18', '1440-02-29', '2018-11-09', 18, 29, 8, 2, 'friday   ', 6, 0, 'NONE') ,('2018-11-10', '1397-08-19', '1440-03-01', '2018-11-10', 19, 1, 8, 3, 'saturday ', 7, 0, 'NONE') ,('2018-11-11', '1397-08-20', '1440-03-02', '2018-11-11', 20, 2, 8, 3, 'sunday   ', 1, 0, 'NONE') ,('2018-11-12', '1397-08-21', '1440-03-03', '2018-11-12', 21, 3, 8, 3, 'monday   ', 2, 0, 'NONE') ,('2018-11-13', '1397-08-22', '1440-03-04', '2018-11-13', 22, 4, 8, 3, 'tuesday  ', 3, 0, 'NONE') ,('2018-11-14', '1397-08-23', '1440-03-05', '2018-11-14', 23, 5, 8, 3, 'wednesday', 4, 0, 'NONE') ,('2018-11-15', '1397-08-24', '1440-03-06', '2018-11-15', 24, 6, 8, 3, 'thursday ', 5, 0, 'NONE') ,('2018-11-16', '1397-08-25', '1440-03-07', '2018-11-16', 25, 7, 8, 3, 'friday   ', 6, 0, 'NONE') ,('2018-11-17', '1397-08-26', '1440-03-08', '2018-11-17', 26, 8, 8, 3, 'saturday ', 7, 0, 'NONE') ,('2018-11-18', '1397-08-27', '1440-03-09', '2018-11-18', 27, 9, 8, 3, 'sunday   ', 1, 0, 'NONE') ,('2018-11-19', '1397-08-28', '1440-03-10', '2018-11-19', 28, 10, 8, 3, 'monday   ', 2, 0, 'NONE') ,('2018-11-20', '1397-08-29', '1440-03-11', '2018-11-20', 29, 11, 8, 3, 'tuesday  ', 3, 0, 'NONE') ,('2018-11-21', '1397-08-30', '1440-03-12', '2018-11-21', 30, 12, 8, 3, 'wednesday', 4, 0, 'NONE') ,('2018-11-22', '1397-09-01', '1440-03-13', '2018-11-22', 1, 13, 9, 3, 'thursday ', 5, 0, 'NONE') ,('2018-11-23', '1397-09-02', '1440-03-14', '2018-11-23', 2, 14, 9, 3, 'friday   ', 6, 0, 'NONE') ,('2018-11-24', '1397-09-03', '1440-03-15', '2018-11-24', 3, 15, 9, 3, 'saturday ', 7, 0, 'NONE') ,('2018-11-25', '1397-09-04', '1440-03-16', '2018-11-25', 4, 16, 9, 3, 'sunday   ', 1, 0, 'NONE') ,('2018-11-26', '1397-09-05', '1440-03-17', '2018-11-26', 5, 17, 9, 3, 'monday   ', 2, 0, 'NONE') ,('2018-11-27', '1397-09-06', '1440-03-18', '2018-11-27', 6, 18, 9, 3, 'tuesday  ', 3, 0, 'NONE') ,('2018-11-28', '1397-09-07', '1440-03-19', '2018-11-28', 7, 19, 9, 3, 'wednesday', 4, 0, 'NONE') ,('2018-11-29', '1397-09-08', '1440-03-20', '2018-11-29', 8, 20, 9, 3, 'thursday ', 5, 0, 'NONE') ,('2018-11-30', '1397-09-09', '1440-03-21', '2018-11-30', 9, 21, 9, 3, 'friday   ', 6, 0, 'NONE') ,('2018-12-01', '1397-09-10', '1440-03-22', '2018-12-01', 10, 22, 9, 3, 'saturday ', 7, 0, 'NONE') ,('2018-12-02', '1397-09-11', '1440-03-23', '2018-12-02', 11, 23, 9, 3, 'sunday   ', 1, 0, 'NONE') ,('2018-12-03', '1397-09-12', '1440-03-24', '2018-12-03', 12, 24, 9, 3, 'monday   ', 2, 0, 'NONE') ,('2018-12-04', '1397-09-13', '1440-03-25', '2018-12-04', 13, 25, 9, 3, 'tuesday  ', 3, 0, 'NONE') ,('2018-12-05', '1397-09-14', '1440-03-26', '2018-12-05', 14, 26, 9, 3, 'wednesday', 4, 0, 'NONE') ,('2018-12-06', '1397-09-15', '1440-03-27', '2018-12-06', 15, 27, 9, 3, 'thursday ', 5, 0, 'NONE') ,('2018-12-07', '1397-09-16', '1440-03-28', '2018-12-07', 16, 28, 9, 3, 'friday   ', 6, 0, 'NONE') ,('2018-12-08', '1397-09-17', '1440-03-29', '2018-12-08', 17, 29, 9, 3, 'saturday ', 7, 0, 'NONE') ,('2018-12-09', '1397-09-18', '1440-03-30', '2018-12-09', 18, 30, 9, 3, 'sunday   ', 1, 0, 'NONE') ,('2018-12-10', '1397-09-19', '1440-04-01', '2018-12-10', 19, 1, 9, 4, 'monday   ', 2, 0, 'NONE') ,('2018-12-11', '1397-09-20', '1440-04-02', '2018-12-11', 20, 2, 9, 4, 'tuesday  ', 3, 0, 'NONE') ,('2018-12-12', '1397-09-21', '1440-04-03', '2018-12-12', 21, 3, 9, 4, 'wednesday', 4, 0, 'NONE') ,('2018-12-13', '1397-09-22', '1440-04-04', '2018-12-13', 22, 4, 9, 4, 'thursday ', 5, 0, 'NONE') ,('2018-12-14', '1397-09-23', '1440-04-05', '2018-12-14', 23, 5, 9, 4, 'friday   ', 6, 0, 'NONE') ,('2018-12-15', '1397-09-24', '1440-04-06', '2018-12-15', 24, 6, 9, 4, 'saturday ', 7, 0, 'NONE') ,('2018-12-16', '1397-09-25', '1440-04-07', '2018-12-16', 25, 7, 9, 4, 'sunday   ', 1, 0, 'NONE') ,('2018-12-17', '1397-09-26', '1440-04-08', '2018-12-17', 26, 8, 9, 4, 'monday   ', 2, 0, 'NONE') ,('2018-12-18', '1397-09-27', '1440-04-09', '2018-12-18', 27, 9, 9, 4, 'tuesday  ', 3, 0, 'NONE') ,('2018-12-19', '1397-09-28', '1440-04-10', '2018-12-19', 28, 10, 9, 4, 'wednesday', 4, 0, 'NONE') ,('2018-12-20', '1397-09-29', '1440-04-11', '2018-12-20', 29, 11, 9, 4, 'thursday ', 5, 0, 'NONE') ,('2018-12-21', '1397-09-30', '1440-04-12', '2018-12-21', 30, 12, 9, 4, 'friday   ', 6, 0, 'NONE') ,('2018-12-22', '1397-10-01', '1440-04-13', '2018-12-22', 1, 13, 10, 4, 'saturday ', 7, 0, 'NONE') ,('2018-12-23', '1397-10-02', '1440-04-14', '2018-12-23', 2, 14, 10, 4, 'sunday   ', 1, 0, 'NONE') ,('2018-12-24', '1397-10-03', '1440-04-15', '2018-12-24', 3, 15, 10, 4, 'monday   ', 2, 0, 'NONE') ,('2018-12-25', '1397-10-04', '1440-04-16', '2018-12-25', 4, 16, 10, 4, 'tuesday  ', 3, 0, 'NONE') ,('2018-12-26', '1397-10-05', '1440-04-17', '2018-12-26', 5, 17, 10, 4, 'wednesday', 4, 0, 'NONE') ,('2018-12-27', '1397-10-06', '1440-04-18', '2018-12-27', 6, 18, 10, 4, 'thursday ', 5, 0, 'NONE') ,('2018-12-28', '1397-10-07', '1440-04-19', '2018-12-28', 7, 19, 10, 4, 'friday   ', 6, 0, 'NONE') ,('2018-12-29', '1397-10-08', '1440-04-20', '2018-12-29', 8, 20, 10, 4, 'saturday ', 7, 0, 'NONE') ,('2018-12-30', '1397-10-09', '1440-04-21', '2018-12-30', 9, 21, 10, 4, 'sunday   ', 1, 0, 'NONE') ,('2018-12-31', '1397-10-10', '1440-04-22', '2018-12-31', 10, 22, 10, 4, 'monday   ', 2, 0, 'NONE') ,('2019-01-01', '1397-10-11', '1440-04-23', '2019-01-01', 11, 23, 10, 4, 'tuesday  ', 3, 0, 'NONE') ,('2019-01-02', '1397-10-12', '1440-04-24', '2019-01-02', 12, 24, 10, 4, 'wednesday', 4, 0, 'NONE') ,('2019-01-03', '1397-10-13', '1440-04-25', '2019-01-03', 13, 25, 10, 4, 'thursday ', 5, 0, 'NONE') ,('2019-01-04', '1397-10-14', '1440-04-26', '2019-01-04', 14, 26, 10, 4, 'friday   ', 6, 0, 'NONE') ,('2019-01-05', '1397-10-15', '1440-04-27', '2019-01-05', 15, 27, 10, 4, 'saturday ', 7, 0, 'NONE') ,('2019-01-06', '1397-10-16', '1440-04-28', '2019-01-06', 16, 28, 10, 4, 'sunday   ', 1, 0, 'NONE') ,('2019-01-07', '1397-10-17', '1440-04-29', '2019-01-07', 17, 29, 10, 4, 'monday   ', 2, 0, 'NONE') ,('2019-01-08', '1397-10-18', '1440-05-01', '2019-01-08', 18, 1, 10, 5, 'tuesday  ', 3, 0, 'NONE') ,('2019-01-09', '1397-10-19', '1440-05-02', '2019-01-09', 19, 2, 10, 5, 'wednesday', 4, 0, 'NONE') ,('2019-01-10', '1397-10-20', '1440-05-03', '2019-01-10', 20, 3, 10, 5, 'thursday ', 5, 0, 'NONE') ,('2019-01-11', '1397-10-21', '1440-05-04', '2019-01-11', 21, 4, 10, 5, 'friday   ', 6, 0, 'NONE') ,('2019-01-12', '1397-10-22', '1440-05-05', '2019-01-12', 22, 5, 10, 5, 'saturday ', 7, 0, 'NONE') ,('2019-01-13', '1397-10-23', '1440-05-06', '2019-01-13', 23, 6, 10, 5, 'sunday   ', 1, 0, 'NONE') ,('2019-01-14', '1397-10-24', '1440-05-07', '2019-01-14', 24, 7, 10, 5, 'monday   ', 2, 0, 'NONE') ,('2019-01-15', '1397-10-25', '1440-05-08', '2019-01-15', 25, 8, 10, 5, 'tuesday  ', 3, 0, 'NONE') ,('2019-01-16', '1397-10-26', '1440-05-09', '2019-01-16', 26, 9, 10, 5, 'wednesday', 4, 0, 'NONE') ,('2019-01-17', '1397-10-27', '1440-05-10', '2019-01-17', 27, 10, 10, 5, 'thursday ', 5, 0, 'NONE') ,('2019-01-18', '1397-10-28', '1440-05-11', '2019-01-18', 28, 11, 10, 5, 'friday   ', 6, 0, 'NONE') ,('2019-01-19', '1397-10-29', '1440-05-12', '2019-01-19', 29, 12, 10, 5, 'saturday ', 7, 0, 'NONE') ,('2019-01-20', '1397-10-30', '1440-05-13', '2019-01-20', 30, 13, 10, 5, 'sunday   ', 1, 0, 'NONE') ,('2019-01-21', '1397-11-01', '1440-05-14', '2019-01-21', 1, 14, 11, 5, 'monday   ', 2, 0, 'NONE') ,('2019-01-22', '1397-11-02', '1440-05-15', '2019-01-22', 2, 15, 11, 5, 'tuesday  ', 3, 0, 'NONE') ,('2019-01-23', '1397-11-03', '1440-05-16', '2019-01-23', 3, 16, 11, 5, 'wednesday', 4, 0, 'NONE') ,('2019-01-24', '1397-11-04', '1440-05-17', '2019-01-24', 4, 17, 11, 5, 'thursday ', 5, 0, 'NONE') ,('2019-01-25', '1397-11-05', '1440-05-18', '2019-01-25', 5, 18, 11, 5, 'friday   ', 6, 0, 'NONE') ,('2019-01-26', '1397-11-06', '1440-05-19', '2019-01-26', 6, 19, 11, 5, 'saturday ', 7, 0, 'NONE') ,('2019-01-27', '1397-11-07', '1440-05-20', '2019-01-27', 7, 20, 11, 5, 'sunday   ', 1, 0, 'NONE') ,('2019-01-28', '1397-11-08', '1440-05-21', '2019-01-28', 8, 21, 11, 5, 'monday   ', 2, 0, 'NONE') ,('2019-01-29', '1397-11-09', '1440-05-22', '2019-01-29', 9, 22, 11, 5, 'tuesday  ', 3, 0, 'NONE') ,('2019-01-30', '1397-11-10', '1440-05-23', '2019-01-30', 10, 23, 11, 5, 'wednesday', 4, 0, 'NONE') ,('2019-01-31', '1397-11-11', '1440-05-24', '2019-01-31', 11, 24, 11, 5, 'thursday ', 5, 0, 'NONE') ,('2019-02-01', '1397-11-12', '1440-05-25', '2019-02-01', 12, 25, 11, 5, 'friday   ', 6, 0, 'NONE') ,('2019-02-02', '1397-11-13', '1440-05-26', '2019-02-02', 13, 26, 11, 5, 'saturday ', 7, 0, 'NONE') ,('2019-02-03', '1397-11-14', '1440-05-27', '2019-02-03', 14, 27, 11, 5, 'sunday   ', 1, 0, 'NONE') ,('2019-02-04', '1397-11-15', '1440-05-28', '2019-02-04', 15, 28, 11, 5, 'monday   ', 2, 0, 'NONE') ,('2019-02-05', '1397-11-16', '1440-05-29', '2019-02-05', 16, 29, 11, 5, 'tuesday  ', 3, 0, 'NONE') ,('2019-02-06', '1397-11-17', '1440-05-30', '2019-02-06', 17, 30, 11, 5, 'wednesday', 4, 0, 'NONE') ,('2019-02-07', '1397-11-18', '1440-06-01', '2019-02-07', 18, 1, 11, 6, 'thursday ', 5, 0, 'NONE') ,('2019-02-08', '1397-11-19', '1440-06-02', '2019-02-08', 19, 2, 11, 6, 'friday   ', 6, 0, 'NONE') ,('2019-02-09', '1397-11-20', '1440-06-03', '2019-02-09', 20, 3, 11, 6, 'saturday ', 7, 0, 'NONE') ,('2019-02-10', '1397-11-21', '1440-06-04', '2019-02-10', 21, 4, 11, 6, 'sunday   ', 1, 0, 'NONE') ,('2019-02-11', '1397-11-22', '1440-06-05', '2019-02-11', 22, 5, 11, 6, 'monday   ', 2, 0, 'NONE') ,('2019-02-12', '1397-11-23', '1440-06-06', '2019-02-12', 23, 6, 11, 6, 'tuesday  ', 3, 0, 'NONE') ,('2019-02-13', '1397-11-24', '1440-06-07', '2019-02-13', 24, 7, 11, 6, 'wednesday', 4, 0, 'NONE') ,('2019-02-14', '1397-11-25', '1440-06-08', '2019-02-14', 25, 8, 11, 6, 'thursday ', 5, 0, 'NONE') ,('2019-02-15', '1397-11-26', '1440-06-09', '2019-02-15', 26, 9, 11, 6, 'friday   ', 6, 0, 'NONE') ,('2019-02-16', '1397-11-27', '1440-06-10', '2019-02-16', 27, 10, 11, 6, 'saturday ', 7, 0, 'NONE') ,('2019-02-17', '1397-11-28', '1440-06-11', '2019-02-17', 28, 11, 11, 6, 'sunday   ', 1, 0, 'NONE') ,('2019-02-18', '1397-11-29', '1440-06-12', '2019-02-18', 29, 12, 11, 6, 'monday   ', 2, 0, 'NONE') ,('2019-02-19', '1397-11-30', '1440-06-13', '2019-02-19', 30, 13, 11, 6, 'tuesday  ', 3, 0, 'NONE') ,('2019-02-20', '1397-12-01', '1440-06-14', '2019-02-20', 1, 14, 12, 6, 'wednesday', 4, 0, 'NONE') ,('2019-02-21', '1397-12-02', '1440-06-15', '2019-02-21', 2, 15, 12, 6, 'thursday ', 5, 0, 'NONE') ,('2019-02-22', '1397-12-03', '1440-06-16', '2019-02-22', 3, 16, 12, 6, 'friday   ', 6, 0, 'NONE') ,('2019-02-23', '1397-12-04', '1440-06-17', '2019-02-23', 4, 17, 12, 6, 'saturday ', 7, 0, 'NONE') ,('2019-02-24', '1397-12-05', '1440-06-18', '2019-02-24', 5, 18, 12, 6, 'sunday   ', 1, 0, 'NONE') ,('2019-02-25', '1397-12-06', '1440-06-19', '2019-02-25', 6, 19, 12, 6, 'monday   ', 2, 0, 'NONE') ,('2019-02-26', '1397-12-07', '1440-06-20', '2019-02-26', 7, 20, 12, 6, 'tuesday  ', 3, 0, 'NONE') ,('2019-02-27', '1397-12-08', '1440-06-21', '2019-02-27', 8, 21, 12, 6, 'wednesday', 4, 0, 'NONE') ,('2019-02-28', '1397-12-09', '1440-06-22', '2019-02-28', 9, 22, 12, 6, 'thursday ', 5, 0, 'NONE') ,('2019-03-01', '1397-12-10', '1440-06-23', '2019-03-01', 10, 23, 12, 6, 'friday   ', 6, 0, 'NONE') ,('2019-03-02', '1397-12-11', '1440-06-24', '2019-03-02', 11, 24, 12, 6, 'saturday ', 7, 0, 'NONE') ,('2019-03-03', '1397-12-12', '1440-06-25', '2019-03-03', 12, 25, 12, 6, 'sunday   ', 1, 0, 'NONE') ,('2019-03-04', '1397-12-13', '1440-06-26', '2019-03-04', 13, 26, 12, 6, 'monday   ', 2, 0, 'NONE') ,('2019-03-05', '1397-12-14', '1440-06-27', '2019-03-05', 14, 27, 12, 6, 'tuesday  ', 3, 0, 'NONE') ,('2019-03-06', '1397-12-15', '1440-06-28', '2019-03-06', 15, 28, 12, 6, 'wednesday', 4, 0, 'NONE') ,('2019-03-07', '1397-12-16', '1440-06-29', '2019-03-07', 16, 29, 12, 6, 'thursday ', 5, 0, 'NONE') ,('2019-03-08', '1397-12-17', '1440-07-01', '2019-03-08', 17, 1, 12, 7, 'friday   ', 6, 0, 'NONE') ,('2019-03-09', '1397-12-18', '1440-07-02', '2019-03-09', 18, 2, 12, 7, 'saturday ', 7, 0, 'NONE') ,('2019-03-10', '1397-12-19', '1440-07-03', '2019-03-10', 19, 3, 12, 7, 'sunday   ', 1, 0, 'NONE') ,('2019-03-11', '1397-12-20', '1440-07-04', '2019-03-11', 20, 4, 12, 7, 'monday   ', 2, 0, 'NONE') ,('2019-03-12', '1397-12-21', '1440-07-05', '2019-03-12', 21, 5, 12, 7, 'tuesday  ', 3, 0, 'NONE') ,('2019-03-13', '1397-12-22', '1440-07-06', '2019-03-13', 22, 6, 12, 7, 'wednesday', 4, 0, 'NONE') ,('2019-03-14', '1397-12-23', '1440-07-07', '2019-03-14', 23, 7, 12, 7, 'thursday ', 5, 0, 'NONE') ,('2019-03-15', '1397-12-24', '1440-07-08', '2019-03-15', 24, 8, 12, 7, 'friday   ', 6, 0, 'NONE') ,('2019-03-16', '1397-12-25', '1440-07-09', '2019-03-16', 25, 9, 12, 7, 'saturday ', 7, 0, 'NONE') ,('2019-03-17', '1397-12-26', '1440-07-10', '2019-03-17', 26, 10, 12, 7, 'sunday   ', 1, 0, 'NONE') ,('2019-03-18', '1397-12-27', '1440-07-11', '2019-03-18', 27, 11, 12, 7, 'monday   ', 2, 0, 'NONE') ,('2019-03-19', '1397-12-28', '1440-07-12', '2019-03-19', 28, 12, 12, 7, 'tuesday  ', 3, 0, 'NONE') ,('2019-03-20', '1397-12-29', '1440-07-13', '2019-03-20', 29, 13, 12, 7, 'wednesday', 4, 0, 'NONE') ,('2019-03-21', '1398-01-01', '1440-07-14', '2019-03-21', 1, 14, 1, 7, 'thursday ', 5, 0, 'NONE') ,('2019-03-22', '1398-01-02', '1440-07-15', '2019-03-22', 2, 15, 1, 7, 'friday   ', 6, 0, 'NONE') ,('2019-03-23', '1398-01-03', '1440-07-16', '2019-03-23', 3, 16, 1, 7, 'saturday ', 7, 0, 'NONE') ,('2019-03-24', '1398-01-04', '1440-07-17', '2019-03-24', 4, 17, 1, 7, 'sunday   ', 1, 0, 'NONE') ,('2019-03-25', '1398-01-05', '1440-07-18', '2019-03-25', 5, 18, 1, 7, 'monday   ', 2, 0, 'NONE') ,('2019-03-26', '1398-01-06', '1440-07-19', '2019-03-26', 6, 19, 1, 7, 'tuesday  ', 3, 0, 'NONE') ,('2019-03-27', '1398-01-07', '1440-07-20', '2019-03-27', 7, 20, 1, 7, 'wednesday', 4, 0, 'NONE') ,('2019-03-28', '1398-01-08', '1440-07-21', '2019-03-28', 8, 21, 1, 7, 'thursday ', 5, 0, 'NONE') ,('2019-03-29', '1398-01-09', '1440-07-22', '2019-03-29', 9, 22, 1, 7, 'friday   ', 6, 0, 'NONE') ,('2019-03-30', '1398-01-10', '1440-07-23', '2019-03-30', 10, 23, 1, 7, 'saturday ', 7, 0, 'NONE') ,('2019-03-31', '1398-01-11', '1440-07-24', '2019-03-31', 11, 24, 1, 7, 'sunday   ', 1, 0, 'NONE') ,('2019-04-01', '1398-01-12', '1440-07-25', '2019-04-01', 12, 25, 1, 7, 'monday   ', 2, 0, 'NONE') ,('2019-04-02', '1398-01-13', '1440-07-26', '2019-04-02', 13, 26, 1, 7, 'tuesday  ', 3, 0, 'NONE') ,('2019-04-03', '1398-01-14', '1440-07-27', '2019-04-03', 14, 27, 1, 7, 'wednesday', 4, 0, 'NONE') ,('2019-04-04', '1398-01-15', '1440-07-28', '2019-04-04', 15, 28, 1, 7, 'thursday ', 5, 0, 'NONE') ,('2019-04-05', '1398-01-16', '1440-07-29', '2019-04-05', 16, 29, 1, 7, 'friday   ', 6, 0, 'NONE') ,('2019-04-06', '1398-01-17', '1440-07-30', '2019-04-06', 17, 30, 1, 7, 'saturday ', 7, 0, 'NONE') ,('2019-04-07', '1398-01-18', '1440-08-01', '2019-04-07', 18, 1, 1, 8, 'sunday   ', 1, 0, 'NONE') ,('2019-04-08', '1398-01-19', '1440-08-02', '2019-04-08', 19, 2, 1, 8, 'monday   ', 2, 0, 'NONE') ,('2019-04-09', '1398-01-20', '1440-08-03', '2019-04-09', 20, 3, 1, 8, 'tuesday  ', 3, 0, 'NONE') ,('2019-04-10', '1398-01-21', '1440-08-04', '2019-04-10', 21, 4, 1, 8, 'wednesday', 4, 0, 'NONE') ,('2019-04-11', '1398-01-22', '1440-08-05', '2019-04-11', 22, 5, 1, 8, 'thursday ', 5, 0, 'NONE') ,('2019-04-12', '1398-01-23', '1440-08-06', '2019-04-12', 23, 6, 1, 8, 'friday   ', 6, 0, 'NONE') ,('2019-04-13', '1398-01-24', '1440-08-07', '2019-04-13', 24, 7, 1, 8, 'saturday ', 7, 0, 'NONE') ,('2019-04-14', '1398-01-25', '1440-08-08', '2019-04-14', 25, 8, 1, 8, 'sunday   ', 1, 0, 'NONE') ,('2019-04-15', '1398-01-26', '1440-08-09', '2019-04-15', 26, 9, 1, 8, 'monday   ', 2, 0, 'NONE') ,('2019-04-16', '1398-01-27', '1440-08-10', '2019-04-16', 27, 10, 1, 8, 'tuesday  ', 3, 0, 'NONE') ,('2019-04-17', '1398-01-28', '1440-08-11', '2019-04-17', 28, 11, 1, 8, 'wednesday', 4, 0, 'NONE') ,('2019-04-18', '1398-01-29', '1440-08-12', '2019-04-18', 29, 12, 1, 8, 'thursday ', 5, 0, 'NONE') ,('2019-04-19', '1398-01-30', '1440-08-13', '2019-04-19', 30, 13, 1, 8, 'friday   ', 6, 0, 'NONE') ,('2019-04-20', '1398-01-31', '1440-08-14', '2019-04-20', 31, 14, 1, 8, 'saturday ', 7, 0, 'NONE') ,('2019-04-21', '1398-02-01', '1440-08-15', '2019-04-21', 1, 15, 2, 8, 'sunday   ', 1, 0, 'NONE') ,('2019-04-22', '1398-02-02', '1440-08-16', '2019-04-22', 2, 16, 2, 8, 'monday   ', 2, 0, 'NONE') ,('2019-04-23', '1398-02-03', '1440-08-17', '2019-04-23', 3, 17, 2, 8, 'tuesday  ', 3, 0, 'NONE') ,('2019-04-24', '1398-02-04', '1440-08-18', '2019-04-24', 4, 18, 2, 8, 'wednesday', 4, 0, 'NONE') ,('2019-04-25', '1398-02-05', '1440-08-19', '2019-04-25', 5, 19, 2, 8, 'thursday ', 5, 0, 'NONE') ,('2019-04-26', '1398-02-06', '1440-08-20', '2019-04-26', 6, 20, 2, 8, 'friday   ', 6, 0, 'NONE') ,('2019-04-27', '1398-02-07', '1440-08-21', '2019-04-27', 7, 21, 2, 8, 'saturday ', 7, 0, 'NONE') ,('2019-04-28', '1398-02-08', '1440-08-22', '2019-04-28', 8, 22, 2, 8, 'sunday   ', 1, 0, 'NONE') ,('2019-04-29', '1398-02-09', '1440-08-23', '2019-04-29', 9, 23, 2, 8, 'monday   ', 2, 0, 'NONE') ,('2019-04-30', '1398-02-10', '1440-08-24', '2019-04-30', 10, 24, 2, 8, 'tuesday  ', 3, 0, 'NONE') ,('2019-05-01', '1398-02-11', '1440-08-25', '2019-05-01', 11, 25, 2, 8, 'wednesday', 4, 0, 'NONE') ,('2019-05-02', '1398-02-12', '1440-08-26', '2019-05-02', 12, 26, 2, 8, 'thursday ', 5, 0, 'NONE') ,('2019-05-03', '1398-02-13', '1440-08-27', '2019-05-03', 13, 27, 2, 8, 'friday   ', 6, 0, 'NONE') ,('2019-05-04', '1398-02-14', '1440-08-28', '2019-05-04', 14, 28, 2, 8, 'saturday ', 7, 0, 'NONE') ,('2019-05-05', '1398-02-15', '1440-08-29', '2019-05-05', 15, 29, 2, 8, 'sunday   ', 1, 0, 'NONE') ,('2019-05-06', '1398-02-16', '1440-09-01', '2019-05-06', 16, 1, 2, 9, 'monday   ', 2, 0, 'NONE') ,('2019-05-07', '1398-02-17', '1440-09-02', '2019-05-07', 17, 2, 2, 9, 'tuesday  ', 3, 0, 'NONE') ,('2019-05-08', '1398-02-18', '1440-09-03', '2019-05-08', 18, 3, 2, 9, 'wednesday', 4, 0, 'NONE') ,('2019-05-09', '1398-02-19', '1440-09-04', '2019-05-09', 19, 4, 2, 9, 'thursday ', 5, 0, 'NONE') ,('2019-05-10', '1398-02-20', '1440-09-05', '2019-05-10', 20, 5, 2, 9, 'friday   ', 6, 0, 'NONE') ,('2019-05-11', '1398-02-21', '1440-09-06', '2019-05-11', 21, 6, 2, 9, 'saturday ', 7, 0, 'NONE') ,('2019-05-12', '1398-02-22', '1440-09-07', '2019-05-12', 22, 7, 2, 9, 'sunday   ', 1, 0, 'NONE') ,('2019-05-13', '1398-02-23', '1440-09-08', '2019-05-13', 23, 8, 2, 9, 'monday   ', 2, 0, 'NONE') ,('2019-05-14', '1398-02-24', '1440-09-09', '2019-05-14', 24, 9, 2, 9, 'tuesday  ', 3, 0, 'NONE') ,('2019-05-15', '1398-02-25', '1440-09-10', '2019-05-15', 25, 10, 2, 9, 'wednesday', 4, 0, 'NONE') ,('2019-05-16', '1398-02-26', '1440-09-11', '2019-05-16', 26, 11, 2, 9, 'thursday ', 5, 0, 'NONE') ,('2019-05-17', '1398-02-27', '1440-09-12', '2019-05-17', 27, 12, 2, 9, 'friday   ', 6, 0, 'NONE') ,('2019-05-18', '1398-02-28', '1440-09-13', '2019-05-18', 28, 13, 2, 9, 'saturday ', 7, 0, 'NONE') ,('2019-05-19', '1398-02-29', '1440-09-14', '2019-05-19', 29, 14, 2, 9, 'sunday   ', 1, 0, 'NONE') ,('2019-05-20', '1398-02-30', '1440-09-15', '2019-05-20', 30, 15, 2, 9, 'monday   ', 2, 0, 'NONE') ,('2019-05-21', '1398-02-31', '1440-09-16', '2019-05-21', 31, 16, 2, 9, 'tuesday  ', 3, 0, 'NONE') ,('2019-05-22', '1398-03-01', '1440-09-17', '2019-05-22', 1, 17, 3, 9, 'wednesday', 4, 0, 'NONE') ,('2019-05-23', '1398-03-02', '1440-09-18', '2019-05-23', 2, 18, 3, 9, 'thursday ', 5, 0, 'NONE') ,('2019-05-24', '1398-03-03', '1440-09-19', '2019-05-24', 3, 19, 3, 9, 'friday   ', 6, 0, 'NONE') ,('2019-05-25', '1398-03-04', '1440-09-20', '2019-05-25', 4, 20, 3, 9, 'saturday ', 7, 0, 'NONE') ,('2019-05-26', '1398-03-05', '1440-09-21', '2019-05-26', 5, 21, 3, 9, 'sunday   ', 1, 0, 'NONE') ,('2019-05-27', '1398-03-06', '1440-09-22', '2019-05-27', 6, 22, 3, 9, 'monday   ', 2, 0, 'NONE') ,('2019-05-28', '1398-03-07', '1440-09-23', '2019-05-28', 7, 23, 3, 9, 'tuesday  ', 3, 0, 'NONE') ,('2019-05-29', '1398-03-08', '1440-09-24', '2019-05-29', 8, 24, 3, 9, 'wednesday', 4, 0, 'NONE') ,('2019-05-30', '1398-03-09', '1440-09-25', '2019-05-30', 9, 25, 3, 9, 'thursday ', 5, 0, 'NONE') ,('2019-05-31', '1398-03-10', '1440-09-26', '2019-05-31', 10, 26, 3, 9, 'friday   ', 6, 0, 'NONE') ,('2019-06-01', '1398-03-11', '1440-09-27', '2019-06-01', 11, 27, 3, 9, 'saturday ', 7, 0, 'NONE') ,('2019-06-02', '1398-03-12', '1440-09-28', '2019-06-02', 12, 28, 3, 9, 'sunday   ', 1, 0, 'NONE') ,('2019-06-03', '1398-03-13', '1440-09-29', '2019-06-03', 13, 29, 3, 9, 'monday   ', 2, 0, 'NONE') ,('2019-06-04', '1398-03-14', '1440-09-30', '2019-06-04', 14, 30, 3, 9, 'tuesday  ', 3, 0, 'NONE') ,('2019-06-05', '1398-03-15', '1440-10-01', '2019-06-05', 15, 1, 3, 10, 'wednesday', 4, 0, 'NONE') ,('2019-06-06', '1398-03-16', '1440-10-02', '2019-06-06', 16, 2, 3, 10, 'thursday ', 5, 0, 'NONE') ,('2019-06-07', '1398-03-17', '1440-10-03', '2019-06-07', 17, 3, 3, 10, 'friday   ', 6, 0, 'NONE') ,('2019-06-08', '1398-03-18', '1440-10-04', '2019-06-08', 18, 4, 3, 10, 'saturday ', 7, 0, 'NONE') ,('2019-06-09', '1398-03-19', '1440-10-05', '2019-06-09', 19, 5, 3, 10, 'sunday   ', 1, 0, 'NONE') ,('2019-06-10', '1398-03-20', '1440-10-06', '2019-06-10', 20, 6, 3, 10, 'monday   ', 2, 0, 'NONE') ,('2019-06-11', '1398-03-21', '1440-10-07', '2019-06-11', 21, 7, 3, 10, 'tuesday  ', 3, 0, 'NONE') ,('2019-06-12', '1398-03-22', '1440-10-08', '2019-06-12', 22, 8, 3, 10, 'wednesday', 4, 0, 'NONE') ,('2019-06-13', '1398-03-23', '1440-10-09', '2019-06-13', 23, 9, 3, 10, 'thursday ', 5, 0, 'NONE') ,('2019-06-14', '1398-03-24', '1440-10-10', '2019-06-14', 24, 10, 3, 10, 'friday   ', 6, 0, 'NONE') ,('2019-06-15', '1398-03-25', '1440-10-11', '2019-06-15', 25, 11, 3, 10, 'saturday ', 7, 0, 'NONE') ,('2019-06-16', '1398-03-26', '1440-10-12', '2019-06-16', 26, 12, 3, 10, 'sundaINSERT INTO DATE_INFO_DICT (TV, SHAMSI, HIJRI, MILADI, S_DAY, H_DAY, S_MONTH, H_MONTH, WEEK_DAY_NAME, DAY_NUMBER, HOLIDAY, WEEK_NAME) VALUESy   ', 1, 0, 'NONE') ,('2019-06-17', '1398-03-27', '1440-10-13', '2019-06-17', 27, 13, 3, 10, 'monday   ', 2, 0, 'NONE') ,('2019-06-18', '1398-03-28', '1440-10-14', '2019-06-18', 28, 14, 3, 10, 'tuesday  ', 3, 0, 'NONE') ,('2019-06-19', '1398-03-29', '1440-10-15', '2019-06-19', 29, 15, 3, 10, 'wednesday', 4, 0, 'NONE') ,('2019-06-20', '1398-03-30', '1440-10-16', '2019-06-20', 30, 16, 3, 10, 'thursday ', 5, 0, 'NONE') ,('2019-06-21', '1398-03-31', '1440-10-17', '2019-06-21', 31, 17, 3, 10, 'friday   ', 6, 0, 'NONE') ,('2019-06-22', '1398-04-01', '1440-10-18', '2019-06-22', 1, 18, 4, 10, 'saturday ', 7, 0, 'NONE') ,('2019-06-23', '1398-04-02', '1440-10-19', '2019-06-23', 2, 19, 4, 10, 'sunday   ', 1, 0, 'NONE') ,('2019-06-24', '1398-04-03', '1440-10-20', '2019-06-24', 3, 20, 4, 10, 'monday   ', 2, 0, 'NONE') ,('2019-06-25', '1398-04-04', '1440-10-21', '2019-06-25', 4, 21, 4, 10, 'tuesday  ', 3, 0, 'NONE') ,('2019-06-26', '1398-04-05', '1440-10-22', '2019-06-26', 5, 22, 4, 10, 'wednesday', 4, 0, 'NONE') ,('2019-06-27', '1398-04-06', '1440-10-23', '2019-06-27', 6, 23, 4, 10, 'thursday ', 5, 0, 'NONE') ,('2019-06-28', '1398-04-07', '1440-10-24', '2019-06-28', 7, 24, 4, 10, 'friday   ', 6, 0, 'NONE') ,('2019-06-29', '1398-04-08', '1440-10-25', '2019-06-29', 8, 25, 4, 10, 'saturday ', 7, 0, 'NONE') ,('2019-06-30', '1398-04-09', '1440-10-26', '2019-06-30', 9, 26, 4, 10, 'sunday   ', 1, 0, 'NONE') ,('2019-07-01', '1398-04-10', '1440-10-27', '2019-07-01', 10, 27, 4, 10, 'monday   ', 2, 0, 'NONE') ,('2019-07-02', '1398-04-11', '1440-10-28', '2019-07-02', 11, 28, 4, 10, 'tuesday  ', 3, 0, 'NONE') ,('2019-07-03', '1398-04-12', '1440-10-29', '2019-07-03', 12, 29, 4, 10, 'wednesday', 4, 0, 'NONE') ,('2019-07-04', '1398-04-13', '1440-11-01', '2019-07-04', 13, 1, 4, 11, 'thursday ', 5, 0, 'NONE') ,('2019-07-05', '1398-04-14', '1440-11-02', '2019-07-05', 14, 2, 4, 11, 'friday   ', 6, 0, 'NONE') ,('2019-07-06', '1398-04-15', '1440-11-03', '2019-07-06', 15, 3, 4, 11, 'saturday ', 7, 0, 'NONE') ,('2019-07-07', '1398-04-16', '1440-11-04', '2019-07-07', 16, 4, 4, 11, 'sunday   ', 1, 0, 'NONE') ,('2019-07-08', '1398-04-17', '1440-11-05', '2019-07-08', 17, 5, 4, 11, 'monday   ', 2, 0, 'NONE') ,('2019-07-09', '1398-04-18', '1440-11-06', '2019-07-09', 18, 6, 4, 11, 'tuesday  ', 3, 0, 'NONE') ,('2019-07-10', '1398-04-19', '1440-11-07', '2019-07-10', 19, 7, 4, 11, 'wednesday', 4, 0, 'NONE') ,('2019-07-11', '1398-04-20', '1440-11-08', '2019-07-11', 20, 8, 4, 11, 'thursday ', 5, 0, 'NONE') ,('2019-07-12', '1398-04-21', '1440-11-09', '2019-07-12', 21, 9, 4, 11, 'friday   ', 6, 0, 'NONE') ,('2019-07-13', '1398-04-22', '1440-11-10', '2019-07-13', 22, 10, 4, 11, 'saturday ', 7, 0, 'NONE') ,('2019-07-14', '1398-04-23', '1440-11-11', '2019-07-14', 23, 11, 4, 11, 'sunday   ', 1, 0, 'NONE') ,('2019-07-15', '1398-04-24', '1440-11-12', '2019-07-15', 24, 12, 4, 11, 'monday   ', 2, 0, 'NONE') ,('2019-07-16', '1398-04-25', '1440-11-13', '2019-07-16', 25, 13, 4, 11, 'tuesday  ', 3, 0, 'NONE') ,('2019-07-17', '1398-04-26', '1440-11-14', '2019-07-17', 26, 14, 4, 11, 'wednesday', 4, 0, 'NONE') ,('2019-07-18', '1398-04-27', '1440-11-15', '2019-07-18', 27, 15, 4, 11, 'thursday ', 5, 0, 'NONE') ,('2019-07-19', '1398-04-28', '1440-11-16', '2019-07-19', 28, 16, 4, 11, 'friday   ', 6, 0, 'NONE') ,('2019-07-20', '1398-04-29', '1440-11-17', '2019-07-20', 29, 17, 4, 11, 'saturday ', 7, 0, 'NONE') ,('2019-07-21', '1398-04-30', '1440-11-18', '2019-07-21', 30, 18, 4, 11, 'sunday   ', 1, 0, 'NONE') ,('2019-07-22', '1398-04-31', '1440-11-19', '2019-07-22', 31, 19, 4, 11, 'monday   ', 2, 0, 'NONE') ,('2019-07-23', '1398-05-01', '1440-11-20', '2019-07-23', 1, 20, 5, 11, 'tuesday  ', 3, 0, 'NONE') ,('2019-07-24', '1398-05-02', '1440-11-21', '2019-07-24', 2, 21, 5, 11, 'wednesday', 4, 0, 'NONE') ,('2019-07-25', '1398-05-03', '1440-11-22', '2019-07-25', 3, 22, 5, 11, 'thursday ', 5, 0, 'NONE') ,('2019-07-26', '1398-05-04', '1440-11-23', '2019-07-26', 4, 23, 5, 11, 'friday   ', 6, 0, 'NONE') ,('2019-07-27', '1398-05-05', '1440-11-24', '2019-07-27', 5, 24, 5, 11, 'saturday ', 7, 0, 'NONE') ,('2019-07-28', '1398-05-06', '1440-11-25', '2019-07-28', 6, 25, 5, 11, 'sunday   ', 1, 0, 'NONE') ,('2019-07-29', '1398-05-07', '1440-11-26', '2019-07-29', 7, 26, 5, 11, 'monday   ', 2, 0, 'NONE') ,('2019-07-30', '1398-05-08', '1440-11-27', '2019-07-30', 8, 27, 5, 11, 'tuesday  ', 3, 0, 'NONE') ,('2019-07-31', '1398-05-09', '1440-11-28', '2019-07-31', 9, 28, 5, 11, 'wednesday', 4, 0, 'NONE') ,('2019-08-01', '1398-05-10', '1440-11-29', '2019-08-01', 10, 29, 5, 11, 'thursday ', 5, 0, 'NONE') ,('2019-08-02', '1398-05-11', '1440-11-30', '2019-08-02', 11, 30, 5, 11, 'friday   ', 6, 0, 'NONE') ,('2019-08-03', '1398-05-12', '1440-12-01', '2019-08-03', 12, 1, 5, 12, 'saturday ', 7, 0, 'NONE') ,('2019-08-04', '1398-05-13', '1440-12-02', '2019-08-04', 13, 2, 5, 12, 'sunday   ', 1, 0, 'NONE') ,('2019-08-05', '1398-05-14', '1440-12-03', '2019-08-05', 14, 3, 5, 12, 'monday   ', 2, 0, 'NONE') ,('2019-08-06', '1398-05-15', '1440-12-04', '2019-08-06', 15, 4, 5, 12, 'tuesday  ', 3, 0, 'NONE') ,('2019-08-07', '1398-05-16', '1440-12-05', '2019-08-07', 16, 5, 5, 12, 'wednesday', 4, 0, 'NONE') ,('2019-08-08', '1398-05-17', '1440-12-06', '2019-08-08', 17, 6, 5, 12, 'thursday ', 5, 0, 'NONE') ,('2019-08-09', '1398-05-18', '1440-12-07', '2019-08-09', 18, 7, 5, 12, 'friday   ', 6, 0, 'NONE') ,('2019-08-10', '1398-05-19', '1440-12-08', '2019-08-10', 19, 8, 5, 12, 'saturday ', 7, 0, 'NONE') ,('2019-08-11', '1398-05-20', '1440-12-09', '2019-08-11', 20, 9, 5, 12, 'sunday   ', 1, 0, 'NONE') ,('2019-08-12', '1398-05-21', '1440-12-10', '2019-08-12', 21, 10, 5, 12, 'monday   ', 2, 0, 'NONE') ,('2019-08-13', '1398-05-22', '1440-12-11', '2019-08-13', 22, 11, 5, 12, 'tuesday  ', 3, 0, 'NONE') ,('2019-08-14', '1398-05-23', '1440-12-12', '2019-08-14', 23, 12, 5, 12, 'wednesday', 4, 0, 'NONE') ,('2019-08-15', '1398-05-24', '1440-12-13', '2019-08-15', 24, 13, 5, 12, 'thursday ', 5, 0, 'NONE') ,('2019-08-16', '1398-05-25', '1440-12-14', '2019-08-16', 25, 14, 5, 12, 'friday   ', 6, 0, 'NONE') ,('2019-08-17', '1398-05-26', '1440-12-15', '2019-08-17', 26, 15, 5, 12, 'saturday ', 7, 0, 'NONE') ,('2019-08-18', '1398-05-27', '1440-12-16', '2019-08-18', 27, 16, 5, 12, 'sunday   ', 1, 0, 'NONE') ,('2019-08-19', '1398-05-28', '1440-12-17', '2019-08-19', 28, 17, 5, 12, 'monday   ', 2, 0, 'NONE') ,('2019-08-20', '1398-05-29', '1440-12-18', '2019-08-20', 29, 18, 5, 12, 'tuesday  ', 3, 0, 'NONE') ,('2019-08-21', '1398-05-30', '1440-12-19', '2019-08-21', 30, 19, 5, 12, 'wednesday', 4, 0, 'NONE') ,('2019-08-22', '1398-05-31', '1440-12-20', '2019-08-22', 31, 20, 5, 12, 'thursday ', 5, 0, 'NONE') ,('2019-08-23', '1398-06-01', '1440-12-21', '2019-08-23', 1, 21, 6, 12, 'friday   ', 6, 0, 'NONE') ,('2019-08-24', '1398-06-02', '1440-12-22', '2019-08-24', 2, 22, 6, 12, 'saturday ', 7, 0, 'NONE') ,('2019-08-25', '1398-06-03', '1440-12-23', '2019-08-25', 3, 23, 6, 12, 'sunday   ', 1, 0, 'NONE') ,('2019-08-26', '1398-06-04', '1440-12-24', '2019-08-26', 4, 24, 6, 12, 'monday   ', 2, 0, 'NONE') ,('2019-08-27', '1398-06-05', '1440-12-25', '2019-08-27', 5, 25, 6, 12, 'tuesday  ', 3, 0, 'NONE') ,('2019-08-28', '1398-06-06', '1440-12-26', '2019-08-28', 6, 26, 6, 12, 'wednesday', 4, 0, 'NONE') ,('2019-08-29', '1398-06-07', '1440-12-27', '2019-08-29', 7, 27, 6, 12, 'thursday ', 5, 0, 'NONE') ,('2019-08-30', '1398-06-08', '1440-12-28', '2019-08-30', 8, 28, 6, 12, 'friday   ', 6, 0, 'NONE') ,('2019-08-31', '1398-06-09', '1440-12-29', '2019-08-31', 9, 29, 6, 12, 'saturday ', 7, 0, 'NONE') ,('2019-09-01', '1398-06-10', '1441-01-01', '2019-09-01', 10, 1, 6, 1, 'sunday   ', 1, 0, 'NONE') ,('2019-09-02', '1398-06-11', '1441-01-02', '2019-09-02', 11, 2, 6, 1, 'monday   ', 2, 0, 'NONE') ,('2019-09-03', '1398-06-12', '1441-01-03', '2019-09-03', 12, 3, 6, 1, 'tuesday  ', 3, 0, 'NONE') ,('2019-09-04', '1398-06-13', '1441-01-04', '2019-09-04', 13, 4, 6, 1, 'wednesday', 4, 0, 'NONE') ,('2019-09-05', '1398-06-14', '1441-01-05', '2019-09-05', 14, 5, 6, 1, 'thursday ', 5, 0, 'NONE') ,('2019-09-06', '1398-06-15', '1441-01-06', '2019-09-06', 15, 6, 6, 1, 'friday   ', 6, 0, 'NONE') ,('2019-09-07', '1398-06-16', '1441-01-07', '2019-09-07', 16, 7, 6, 1, 'saturday ', 7, 0, 'NONE') ,('2019-09-08', '1398-06-17', '1441-01-08', '2019-09-08', 17, 8, 6, 1, 'sunday   ', 1, 0, 'NONE') ,('2019-09-09', '1398-06-18', '1441-01-09', '2019-09-09', 18, 9, 6, 1, 'monday   ', 2, 0, 'NONE') ,('2019-09-10', '1398-06-19', '1441-01-10', '2019-09-10', 19, 10, 6, 1, 'tuesday  ', 3, 0, 'NONE') ,('2019-09-11', '1398-06-20', '1441-01-11', '2019-09-11', 20, 11, 6, 1, 'wednesday', 4, 0, 'NONE') ,('2019-09-12', '1398-06-21', '1441-01-12', '2019-09-12', 21, 12, 6, 1, 'thursday ', 5, 0, 'NONE') ,('2019-09-13', '1398-06-22', '1441-01-13', '2019-09-13', 22, 13, 6, 1, 'friday   ', 6, 0, 'NONE') ,('2019-09-14', '1398-06-23', '1441-01-14', '2019-09-14', 23, 14, 6, 1, 'saturday ', 7, 0, 'NONE') ,('2019-09-15', '1398-06-24', '1441-01-15', '2019-09-15', 24, 15, 6, 1, 'sunday   ', 1, 0, 'NONE') ,('2019-09-16', '1398-06-25', '1441-01-16', '2019-09-16', 25, 16, 6, 1, 'monday   ', 2, 0, 'NONE') ,('2019-09-17', '1398-06-26', '1441-01-17', '2019-09-17', 26, 17, 6, 1, 'tuesday  ', 3, 0, 'NONE') ,('2019-09-18', '1398-06-27', '1441-01-18', '2019-09-18', 27, 18, 6, 1, 'wednesday', 4, 0, 'NONE') ,('2019-09-19', '1398-06-28', '1441-01-19', '2019-09-19', 28, 19, 6, 1, 'thursday ', 5, 0, 'NONE') ,('2019-09-20', '1398-06-29', '1441-01-20', '2019-09-20', 29, 20, 6, 1, 'friday   ', 6, 0, 'NONE') ,('2019-09-21', '1398-06-30', '1441-01-21', '2019-09-21', 30, 21, 6, 1, 'saturday ', 7, 0, 'NONE') ,('2019-09-22', '1398-06-31', '1441-01-22', '2019-09-22', 31, 22, 6, 1, 'sunday   ', 1, 0, 'NONE') ,('2019-09-23', '1398-07-01', '1441-01-23', '2019-09-23', 1, 23, 7, 1, 'monday   ', 2, 0, 'NONE') ,('2019-09-24', '1398-07-02', '1441-01-24', '2019-09-24', 2, 24, 7, 1, 'tuesday  ', 3, 0, 'NONE') ,('2019-09-25', '1398-07-03', '1441-01-25', '2019-09-25', 3, 25, 7, 1, 'wednesday', 4, 0, 'NONE') ,('2019-09-26', '1398-07-04', '1441-01-26', '2019-09-26', 4, 26, 7, 1, 'thursday ', 5, 0, 'NONE') ,('2019-09-27', '1398-07-05', '1441-01-27', '2019-09-27', 5, 27, 7, 1, 'friday   ', 6, 0, 'NONE') ,('2019-09-28', '1398-07-06', '1441-01-28', '2019-09-28', 6, 28, 7, 1, 'saturday ', 7, 0, 'NONE') ,('2019-09-29', '1398-07-07', '1441-01-29', '2019-09-29', 7, 29, 7, 1, 'sunday   ', 1, 0, 'NONE') ,('2019-09-30', '1398-07-08', '1441-01-30', '2019-09-30', 8, 30, 7, 1, 'monday   ', 2, 0, 'NONE') ,('2019-10-01', '1398-07-09', '1441-02-01', '2019-10-01', 9, 1, 7, 2, 'tuesday  ', 3, 0, 'NONE') ,('2019-10-02', '1398-07-10', '1441-02-02', '2019-10-02', 10, 2, 7, 2, 'wednesday', 4, 0, 'NONE') ,('2019-10-03', '1398-07-11', '1441-02-03', '2019-10-03', 11, 3, 7, 2, 'thursday ', 5, 0, 'NONE') ,('2019-10-04', '1398-07-12', '1441-02-04', '2019-10-04', 12, 4, 7, 2, 'friday   ', 6, 0, 'NONE') ,('2019-10-05', '1398-07-13', '1441-02-05', '2019-10-05', 13, 5, 7, 2, 'saturday ', 7, 0, 'NONE') ,('2019-10-06', '1398-07-14', '1441-02-06', '2019-10-06', 14, 6, 7, 2, 'sunday   ', 1, 0, 'NONE') ,('2019-10-07', '1398-07-15', '1441-02-07', '2019-10-07', 15, 7, 7, 2, 'monday   ', 2, 0, 'NONE') ,('2019-10-08', '1398-07-16', '1441-02-08', '2019-10-08', 16, 8, 7, 2, 'tuesday  ', 3, 0, 'NONE') ,('2019-10-09', '1398-07-17', '1441-02-09', '2019-10-09', 17, 9, 7, 2, 'wednesday', 4, 0, 'NONE') ,('2019-10-10', '1398-07-18', '1441-02-10', '2019-10-10', 18, 10, 7, 2, 'thursday ', 5, 0, 'NONE') ,('2019-10-11', '1398-07-19', '1441-02-11', '2019-10-11', 19, 11, 7, 2, 'friday   ', 6, 0, 'NONE') ,('2019-10-12', '1398-07-20', '1441-02-12', '2019-10-12', 20, 12, 7, 2, 'saturday ', 7, 0, 'NONE') ,('2019-10-13', '1398-07-21', '1441-02-13', '2019-10-13', 21, 13, 7, 2, 'sunday   ', 1, 0, 'NONE') ,('2019-10-14', '1398-07-22', '1441-02-14', '2019-10-14', 22, 14, 7, 2, 'monday   ', 2, 0, 'NONE') ,('2019-10-15', '1398-07-23', '1441-02-15', '2019-10-15', 23, 15, 7, 2, 'tuesday  ', 3, 0, 'NONE') ,('2019-10-16', '1398-07-24', '1441-02-16', '2019-10-16', 24, 16, 7, 2, 'wednesday', 4, 0, 'NONE') ,('2019-10-17', '1398-07-25', '1441-02-17', '2019-10-17', 25, 17, 7, 2, 'thursday ', 5, 0, 'NONE') ,('2019-10-18', '1398-07-26', '1441-02-18', '2019-10-18', 26, 18, 7, 2, 'friday   ', 6, 0, 'NONE') ,('2019-10-19', '1398-07-27', '1441-02-19', '2019-10-19', 27, 19, 7, 2, 'saturday ', 7, 0, 'NONE') ,('2019-10-20', '1398-07-28', '1441-02-20', '2019-10-20', 28, 20, 7, 2, 'sunday   ', 1, 0, 'NONE') ,('2019-10-21', '1398-07-29', '1441-02-21', '2019-10-21', 29, 21, 7, 2, 'monday   ', 2, 0, 'NONE') ,('2019-10-22', '1398-07-30', '1441-02-22', '2019-10-22', 30, 22, 7, 2, 'tuesday  ', 3, 0, 'NONE') ,('2019-10-23', '1398-08-01', '1441-02-23', '2019-10-23', 1, 23, 8, 2, 'wednesday', 4, 0, 'NONE') ,('2019-10-24', '1398-08-02', '1441-02-24', '2019-10-24', 2, 24, 8, 2, 'thursday ', 5, 0, 'NONE') ,('2019-10-25', '1398-08-03', '1441-02-25', '2019-10-25', 3, 25, 8, 2, 'friday   ', 6, 0, 'NONE') ,('2019-10-26', '1398-08-04', '1441-02-26', '2019-10-26', 4, 26, 8, 2, 'saturday ', 7, 0, 'NONE') ,('2019-10-27', '1398-08-05', '1441-02-27', '2019-10-27', 5, 27, 8, 2, 'sunday   ', 1, 0, 'NONE') ,('2019-10-28', '1398-08-06', '1441-02-28', '2019-10-28', 6, 28, 8, 2, 'monday   ', 2, 0, 'NONE') ,('2019-10-29', '1398-08-07', '1441-02-29', '2019-10-29', 7, 29, 8, 2, 'tuesday  ', 3, 0, 'NONE') ,('2019-10-30', '1398-08-08', '1441-03-01', '2019-10-30', 8, 1, 8, 3, 'wednesday', 4, 0, 'NONE') ,('2019-10-31', '1398-08-09', '1441-03-02', '2019-10-31', 9, 2, 8, 3, 'thursday ', 5, 0, 'NONE') ,('2019-11-01', '1398-08-10', '1441-03-03', '2019-11-01', 10, 3, 8, 3, 'friday   ', 6, 0, 'NONE') ,('2019-11-02', '1398-08-11', '1441-03-04', '2019-11-02', 11, 4, 8, 3, 'saturday ', 7, 0, 'NONE') ,('2019-11-03', '1398-08-12', '1441-03-05', '2019-11-03', 12, 5, 8, 3, 'sunday   ', 1, 0, 'NONE') ,('2019-11-04', '1398-08-13', '1441-03-06', '2019-11-04', 13, 6, 8, 3, 'monday   ', 2, 0, 'NONE') ,('2019-11-05', '1398-08-14', '1441-03-07', '2019-11-05', 14, 7, 8, 3, 'tuesday  ', 3, 0, 'NONE') ,('2019-11-06', '1398-08-15', '1441-03-08', '2019-11-06', 15, 8, 8, 3, 'wednesday', 4, 0, 'NONE') ,('2019-11-07', '1398-08-16', '1441-03-09', '2019-11-07', 16, 9, 8, 3, 'thursday ', 5, 0, 'NONE') ,('2019-11-08', '1398-08-17', '1441-03-10', '2019-11-08', 17, 10, 8, 3, 'friday   ', 6, 0, 'NONE') ,('2019-11-09', '1398-08-18', '1441-03-11', '2019-11-09', 18, 11, 8, 3, 'saturday ', 7, 0, 'NONE') ,('2019-11-10', '1398-08-19', '1441-03-12', '2019-11-10', 19, 12, 8, 3, 'sunday   ', 1, 0, 'NONE') ,('2019-11-11', '1398-08-20', '1441-03-13', '2019-11-11', 20, 13, 8, 3, 'monday   ', 2, 0, 'NONE') ,('2019-11-12', '1398-08-21', '1441-03-14', '2019-11-12', 21, 14, 8, 3, 'tuesday  ', 3, 0, 'NONE') ,('2019-11-13', '1398-08-22', '1441-03-15', '2019-11-13', 22, 15, 8, 3, 'wednesday', 4, 0, 'NONE') ,('2019-11-14', '1398-08-23', '1441-03-16', '2019-11-14', 23, 16, 8, 3, 'thursday ', 5, 0, 'NONE') ,('2019-11-15', '1398-08-24', '1441-03-17', '2019-11-15', 24, 17, 8, 3, 'friday   ', 6, 0, 'NONE') ,('2019-11-16', '1398-08-25', '1441-03-18', '2019-11-16', 25, 18, 8, 3, 'saturday ', 7, 0, 'NONE') ,('2019-11-17', '1398-08-26', '1441-03-19', '2019-11-17', 26, 19, 8, 3, 'sunday   ', 1, 0, 'NONE') ,('2019-11-18', '1398-08-27', '1441-03-20', '2019-11-18', 27, 20, 8, 3, 'monday   ', 2, 0, 'NONE') ,('2019-11-19', '1398-08-28', '1441-03-21', '2019-11-19', 28, 21, 8, 3, 'tuesday  ', 3, 0, 'NONE') ,('2019-11-20', '1398-08-29', '1441-03-22', '2019-11-20', 29, 22, 8, 3, 'wednesday', 4, 0, 'NONE') ,('2019-11-21', '1398-08-30', '1441-03-23', '2019-11-21', 30, 23, 8, 3, 'thursday ', 5, 0, 'NONE') ,('2019-11-22', '1398-09-01', '1441-03-24', '2019-11-22', 1, 24, 9, 3, 'friday   ', 6, 0, 'NONE') ,('2019-11-23', '1398-09-02', '1441-03-25', '2019-11-23', 2, 25, 9, 3, 'saturday ', 7, 0, 'NONE') ,('2019-11-24', '1398-09-03', '1441-03-26', '2019-11-24', 3, 26, 9, 3, 'sunday   ', 1, 0, 'NONE') ,('2019-11-25', '1398-09-04', '1441-03-27', '2019-11-25', 4, 27, 9, 3, 'monday   ', 2, 0, 'NONE') ,('2019-11-26', '1398-09-05', '1441-03-28', '2019-11-26', 5, 28, 9, 3, 'tuesday  ', 3, 0, 'NONE') ,('2019-11-27', '1398-09-06', '1441-03-29', '2019-11-27', 6, 29, 9, 3, 'wednesday', 4, 0, 'NONE') ,('2019-11-28', '1398-09-07', '1441-03-30', '2019-11-28', 7, 30, 9, 3, 'thursday ', 5, 0, 'NONE') ,('2019-11-29', '1398-09-08', '1441-04-01', '2019-11-29', 8, 1, 9, 4, 'friday   ', 6, 0, 'NONE') ,('2019-11-30', '1398-09-09', '1441-04-02', '2019-11-30', 9, 2, 9, 4, 'saturday ', 7, 0, 'NONE') ,('2019-12-01', '1398-09-10', '1441-04-03', '2019-12-01', 10, 3, 9, 4, 'sunday   ', 1, 0, 'NONE') ,('2019-12-02', '1398-09-11', '1441-04-04', '2019-12-02', 11, 4, 9, 4, 'monday   ', 2, 0, 'NONE') ,('2019-12-03', '1398-09-12', '1441-04-05', '2019-12-03', 12, 5, 9, 4, 'tuesday  ', 3, 0, 'NONE') ,('2019-12-04', '1398-09-13', '1441-04-06', '2019-12-04', 13, 6, 9, 4, 'wednesday', 4, 0, 'NONE') ,('2019-12-05', '1398-09-14', '1441-04-07', '2019-12-05', 14, 7, 9, 4, 'thursday ', 5, 0, 'NONE') ,('2019-12-06', '1398-09-15', '1441-04-08', '2019-12-06', 15, 8, 9, 4, 'friday   ', 6, 0, 'NONE') ,('2019-12-07', '1398-09-16', '1441-04-09', '2019-12-07', 16, 9, 9, 4, 'saturday ', 7, 0, 'NONE') ,('2019-12-08', '1398-09-17', '1441-04-10', '2019-12-08', 17, 10, 9, 4, 'sunday   ', 1, 0, 'NONE') ,('2019-12-09', '1398-09-18', '1441-04-11', '2019-12-09', 18, 11, 9, 4, 'monday   ', 2, 0, 'NONE') ,('2019-12-10', '1398-09-19', '1441-04-12', '2019-12-10', 19, 12, 9, 4, 'tuesday  ', 3, 0, 'NONE') ,('2019-12-11', '1398-09-20', '1441-04-13', '2019-12-11', 20, 13, 9, 4, 'wednesday', 4, 0, 'NONE') ,('2019-12-12', '1398-09-21', '1441-04-14', '2019-12-12', 21, 14, 9, 4, 'thursday ', 5, 0, 'NONE') ,('2019-12-13', '1398-09-22', '1441-04-15', '2019-12-13', 22, 15, 9, 4, 'friday   ', 6, 0, 'NONE') ,('2019-12-14', '1398-09-23', '1441-04-16', '2019-12-14', 23, 16, 9, 4, 'saturday ', 7, 0, 'NONE') ,('2019-12-15', '1398-09-24', '1441-04-17', '2019-12-15', 24, 17, 9, 4, 'sunday   ', 1, 0, 'NONE') ,('2019-12-16', '1398-09-25', '1441-04-18', '2019-12-16', 25, 18, 9, 4, 'monday   ', 2, 0, 'NONE') ,('2019-12-17', '1398-09-26', '1441-04-19', '2019-12-17', 26, 19, 9, 4, 'tuesday  ', 3, 0, 'NONE') ,('2019-12-18', '1398-09-27', '1441-04-20', '2019-12-18', 27, 20, 9, 4, 'wednesday', 4, 0, 'NONE') ,('2019-12-19', '1398-09-28', '1441-04-21', '2019-12-19', 28, 21, 9, 4, 'thursday ', 5, 0, 'NONE') ,('2019-12-20', '1398-09-29', '1441-04-22', '2019-12-20', 29, 22, 9, 4, 'friday   ', 6, 0, 'NONE') ,('2019-12-21', '1398-09-30', '1441-04-23', '2019-12-21', 30, 23, 9, 4, 'saturday ', 7, 0, 'NONE') ,('2019-12-22', '1398-10-01', '1441-04-24', '2019-12-22', 1, 24, 10, 4, 'sunday   ', 1, 0, 'NONE') ,('2019-12-23', '1398-10-02', '1441-04-25', '2019-12-23', 2, 25, 10, 4, 'monday   ', 2, 0, 'NONE') ,('2019-12-24', '1398-10-03', '1441-04-26', '2019-12-24', 3, 26, 10, 4, 'tuesday  ', 3, 0, 'NONE') ,('2019-12-25', '1398-10-04', '1441-04-27', '2019-12-25', 4, 27, 10, 4, 'wednesday', 4, 0, 'NONE') ,('2019-12-26', '1398-10-05', '1441-04-28', '2019-12-26', 5, 28, 10, 4, 'thursday ', 5, 0, 'NONE') ,('2019-12-27', '1398-10-06', '1441-04-29', '2019-12-27', 6, 29, 10, 4, 'friday   ', 6, 0, 'NONE') ,('2019-12-28', '1398-10-07', '1441-05-01', '2019-12-28', 7, 1, 10, 5, 'saturday ', 7, 0, 'NONE') ,('2019-12-29', '1398-10-08', '1441-05-02', '2019-12-29', 8, 2, 10, 5, 'sunday   ', 1, 0, 'NONE') ,('2019-12-30', '1398-10-09', '1441-05-03', '2019-12-30', 9, 3, 10, 5, 'monday   ', 2, 0, 'NONE') ,('2019-12-31', '1398-10-10', '1441-05-04', '2019-12-31', 10, 4, 10, 5, 'tuesday  ', 3, 0, 'NONE') ,('2020-01-01', '1398-10-11', '1441-05-05', '2020-01-01', 11, 5, 10, 5, 'wednesday', 4, 0, 'NONE') ,('2020-01-02', '1398-10-12', '1441-05-06', '2020-01-02', 12, 6, 10, 5, 'thursday ', 5, 0, 'NONE') ,('2020-01-03', '1398-10-13', '1441-05-07', '2020-01-03', 13, 7, 10, 5, 'friday   ', 6, 0, 'NONE') ,('2020-01-04', '1398-10-14', '1441-05-08', '2020-01-04', 14, 8, 10, 5, 'saturday ', 7, 0, 'NONE') ,('2020-01-05', '1398-10-15', '1441-05-09', '2020-01-05', 15, 9, 10, 5, 'sunday   ', 1, 0, 'NONE') ,('2020-01-06', '1398-10-16', '1441-05-10', '2020-01-06', 16, 10, 10, 5, 'monday   ', 2, 0, 'NONE') ,('2020-01-07', '1398-10-17', '1441-05-11', '2020-01-07', 17, 11, 10, 5, 'tuesday  ', 3, 0, 'NONE') ,('2020-01-08', '1398-10-18', '1441-05-12', '2020-01-08', 18, 12, 10, 5, 'wednesday', 4, 0, 'NONE') ,('2020-01-09', '1398-10-19', '1441-05-13', '2020-01-09', 19, 13, 10, 5, 'thursday ', 5, 0, 'NONE') ,('2020-01-10', '1398-10-20', '1441-05-14', '2020-01-10', 20, 14, 10, 5, 'friday   ', 6, 0, 'NONE') ,('2020-01-11', '1398-10-21', '1441-05-15', '2020-01-11', 21, 15, 10, 5, 'saturday ', 7, 0, 'NONE') ,('2020-01-12', '1398-10-22', '1441-05-16', '2020-01-12', 22, 16, 10, 5, 'sunday   ', 1, 0, 'NONE') ,('2020-01-13', '1398-10-23', '1441-05-17', '2020-01-13', 23, 17, 10, 5, 'monday   ', 2, 0, 'NONE') ,('2020-01-14', '1398-10-24', '1441-05-18', '2020-01-14', 24, 18, 10, 5, 'tuesday  ', 3, 0, 'NONE') ,('2020-01-15', '1398-10-25', '1441-05-19', '2020-01-15', 25, 19, 10, 5, 'wednesday', 4, 0, 'NONE') ,('2020-01-16', '1398-10-26', '1441-05-20', '2020-01-16', 26, 20, 10, 5, 'thursday ', 5, 0, 'NONE') ,('2020-01-17', '1398-10-27', '1441-05-21', '2020-01-17', 27, 21, 10, 5, 'friday   ', 6, 0, 'NONE') ,('2020-01-18', '1398-10-28', '1441-05-22', '2020-01-18', 28, 22, 10, 5, 'saturday ', 7, 0, 'NONE') ,('2020-01-19', '1398-10-29', '1441-05-23', '2020-01-19', 29, 23, 10, 5, 'sunday   ', 1, 0, 'NONE') ,('2020-01-20', '1398-10-30', '1441-05-24', '2020-01-20', 30, 24, 10, 5, 'monday   ', 2, 0, 'NONE') ,('2020-01-21', '1398-11-01', '1441-05-25', '2020-01-21', 1, 25, 11, 5, 'tuesday  ', 3, 0, 'NONE') ,('2020-01-22', '1398-11-02', '1441-05-26', '2020-01-22', 2, 26, 11, 5, 'wednesday', 4, 0, 'NONE') ,('2020-01-23', '1398-11-03', '1441-05-27', '2020-01-23', 3, 27, 11, 5, 'thursday ', 5, 0, 'NONE') ,('2020-01-24', '1398-11-04', '1441-05-28', '2020-01-24', 4, 28, 11, 5, 'friday   ', 6, 0, 'NONE') ,('2020-01-25', '1398-11-05', '1441-05-29', '2020-01-25', 5, 29, 11, 5, 'saturday ', 7, 0, 'NONE') ,('2020-01-26', '1398-11-06', '1441-05-30', '2020-01-26', 6, 30, 11, 5, 'sunday   ', 1, 0, 'NONE') ,('2020-01-27', '1398-11-07', '1441-06-01', '2020-01-27', 7, 1, 11, 6, 'monday   ', 2, 0, 'NONE') ,('2020-01-28', '1398-11-08', '1441-06-02', '2020-01-28', 8, 2, 11, 6, 'tuesday  ', 3, 0, 'NONE') ,('2020-01-29', '1398-11-09', '1441-06-03', '2020-01-29', 9, 3, 11, 6, 'wednesday', 4, 0, 'NONE') ,('2020-01-30', '1398-11-10', '1441-06-04', '2020-01-30', 10, 4, 11, 6, 'thursday ', 5, 0, 'NONE') ,('2020-01-31', '1398-11-11', '1441-06-05', '2020-01-31', 11, 5, 11, 6, 'friday   ', 6, 0, 'NONE') ,('2020-02-01', '1398-11-12', '1441-06-06', '2020-02-01', 12, 6, 11, 6, 'saturday ', 7, 0, 'NONE') ,('2020-02-02', '1398-11-13', '1441-06-07', '2020-02-02', 13, 7, 11, 6, 'sunday   ', 1, 0, 'NONE') ,('2020-02-03', '1398-11-14', '1441-06-08', '2020-02-03', 14, 8, 11, 6, 'monday   ', 2, 0, 'NONE') ,('2020-02-04', '1398-11-15', '1441-06-09', '2020-02-04', 15, 9, 11, 6, 'tuesday  ', 3, 0, 'NONE') ,('2020-02-05', '1398-11-16', '1441-06-10', '2020-02-05', 16, 10, 11, 6, 'wednesday', 4, 0, 'NONE') ,('2020-02-06', '1398-11-17', '1441-06-11', '2020-02-06', 17, 11, 11, 6, 'thursday ', 5, 0, 'NONE') ,('2020-02-07', '1398-11-18', '1441-06-12', '2020-02-07', 18, 12, 11, 6, 'friday   ', 6, 0, 'NONE') ,('2020-02-08', '1398-11-19', '1441-06-13', '2020-02-08', 19, 13, 11, 6, 'saturday ', 7, 0, 'NONE') ,('2020-02-09', '1398-11-20', '1441-06-14', '2020-02-09', 20, 14, 11, 6, 'sunday   ', 1, 0, 'NONE') ,('2020-02-10', '1398-11-21', '1441-06-15', '2020-02-10', 21, 15, 11, 6, 'monday   ', 2, 0, 'NONE') ,('2020-02-11', '1398-11-22', '1441-06-16', '2020-02-11', 22, 16, 11, 6, 'tuesday  ', 3, 0, 'NONE') ,('2020-02-12', '1398-11-23', '1441-06-17', '2020-02-12', 23, 17, 11, 6, 'wednesday', 4, 0, 'NONE') ,('2020-02-13', '1398-11-24', '1441-06-18', '2020-02-13', 24, 18, 11, 6, 'thursday ', 5, 0, 'NONE') ,('2020-02-14', '1398-11-25', '1441-06-19', '2020-02-14', 25, 19, 11, 6, 'friday   ', 6, 0, 'NONE') ,('2020-02-15', '1398-11-26', '1441-06-20', '2020-02-15', 26, 20, 11, 6, 'saturday ', 7, 0, 'NONE') ,('2020-02-16', '1398-11-27', '1441-06-21', '2020-02-16', 27, 21, 11, 6, 'sunday   ', 1, 0, 'NONE') ,('2020-02-17', '1398-11-28', '1441-06-22', '2020-02-17', 28, 22, 11, 6, 'monday   ', 2, 0, 'NONE') ,('2020-02-18', '1398-11-29', '1441-06-23', '2020-02-18', 29, 23, 11, 6, 'tuesday  ', 3, 0, 'NONE') ,('2020-02-19', '1398-11-30', '1441-06-24', '2020-02-19', 30, 24, 11, 6, 'wednesday', 4, 0, 'NONE') ,('2020-02-20', '1398-12-01', '1441-06-25', '2020-02-20', 1, 25, 12, 6, 'thursday ', 5, 0, 'NONE') ,('2020-02-21', '1398-12-02', '1441-06-26', '2020-02-21', 2, 26, 12, 6, 'friday   ', 6, 0, 'NONE') ,('2020-02-22', '1398-12-03', '1441-06-27', '2020-02-22', 3, 27, 12, 6, 'saturday ', 7, 0, 'NONE') ,('2020-02-23', '1398-12-04', '1441-06-28', '2020-02-23', 4, 28, 12, 6, 'sunday   ', 1, 0, 'NONE') ,('2020-02-24', '1398-12-05', '1441-06-29', '2020-02-24', 5, 29, 12, 6, 'monday   ', 2, 0, 'NONE') ,('2020-02-25', '1398-12-06', '1441-07-01', '2020-02-25', 6, 1, 12, 7, 'tuesday  ', 3, 0, 'NONE') ,('2020-02-26', '1398-12-07', '1441-07-02', '2020-02-26', 7, 2, 12, 7, 'wednesday', 4, 0, 'NONE') ,('2020-02-27', '1398-12-08', '1441-07-03', '2020-02-27', 8, 3, 12, 7, 'thursday ', 5, 0, 'NONE') ,('2020-02-28', '1398-12-09', '1441-07-04', '2020-02-28', 9, 4, 12, 7, 'friday   ', 6, 0, 'NONE') ,('2020-02-29', '1398-12-10', '1441-07-05', '2020-02-29', 10, 5, 12, 7, 'saturday ', 7, 0, 'NONE') ,('2020-03-01', '1398-12-11', '1441-07-06', '2020-03-01', 11, 6, 12, 7, 'sunday   ', 1, 0, 'NONE') ,('2020-03-02', '1398-12-12', '1441-07-07', '2020-03-02', 12, 7, 12, 7, 'monday   ', 2, 0, 'NONE') ,('2020-03-03', '1398-12-13', '1441-07-08', '2020-03-03', 13, 8, 12, 7, 'tuesday  ', 3, 0, 'NONE') ,('2020-03-04', '1398-12-14', '1441-07-09', '2020-03-04', 14, 9, 12, 7, 'wednesday', 4, 0, 'NONE') ,('2020-03-05', '1398-12-15', '1441-07-10', '2020-03-05', 15, 10, 12, 7, 'thursday ', 5, 0, 'NONE') ,('2020-03-06', '1398-12-16', '1441-07-11', '2020-03-06', 16, 11, 12, 7, 'friday   ', 6, 0, 'NONE') ,('2020-03-07', '1398-12-17', '1441-07-12', '2020-03-07', 17, 12, 12, 7, 'saturday ', 7, 0, 'NONE') ,('2020-03-08', '1398-12-18', '1441-07-13', '2020-03-08', 18, 13, 12, 7, 'sunday   ', 1, 0, 'NONE') ,('2020-03-09', '1398-12-19', '1441-07-14', '2020-03-09', 19, 14, 12, 7, 'monday   ', 2, 0, 'NONE') ,('2020-03-10', '1398-12-20', '1441-07-15', '2020-03-10', 20, 15, 12, 7, 'tuesday  ', 3, 0, 'NONE') ,('2020-03-11', '1398-12-21', '1441-07-16', '2020-03-11', 21, 16, 12, 7, 'wednesday', 4, 0, 'NONE') ,('2020-03-12', '1398-12-22', '1441-07-17', '2020-03-12', 22, 17, 12, 7, 'thursday ', 5, 0, 'NONE') ,('2020-03-13', '1398-12-23', '1441-07-18', '2020-03-13', 23, 18, 12, 7, 'friday   ', 6, 0, 'NONE') ,('2020-03-14', '1398-12-24', '1441-07-19', '2020-03-14', 24, 19, 12, 7, 'saturday ', 7, 0, 'NONE') ,('2020-03-15', '1398-12-25', '1441-07-20', '2020-03-15', 25, 20, 12, 7, 'sunday   ', 1, 0, 'NONE') ,('2020-03-16', '1398-12-26', '1441-07-21', '2020-03-16', 26, 21, 12, 7, 'monday   ', 2, 0, 'NONE') ,('2020-03-17', '1398-12-27', '1441-07-22', '2020-03-17', 27, 22, 12, 7, 'tuesday  ', 3, 0, 'NONE') ,('2020-03-18', '1398-12-28', '1441-07-23', '2020-03-18', 28, 23, 12, 7, 'wednesday', 4, 0, 'NONE') ,('2020-03-19', '1398-12-29', '1441-07-24', '2020-03-19', 29, 24, 12, 7, 'thursday ', 5, 0, 'NONE') ,('2020-03-20', '1399-01-01', '1441-07-25', '2020-03-20', 1, 25, 1, 7, 'friday   ', 6, 0, 'NONE') ,('2020-03-21', '1399-01-02', '1441-07-26', '2020-03-21', 2, 26, 1, 7, 'saturday ', 7, 0, 'NONE') ,('2020-03-22', '1399-01-03', '1441-07-27', '2020-03-22', 3, 27, 1, 7, 'sunday   ', 1, 0, 'NONE') ,('2020-03-23', '1399-01-04', '1441-07-28', '2020-03-23', 4, 28, 1, 7, 'monday   ', 2, 0, 'NONE') ,('2020-03-24', '1399-01-05', '1441-07-29', '2020-03-24', 5, 29, 1, 7, 'tuesday  ', 3, 0, 'NONE') ,('2020-03-25', '1399-01-06', '1441-07-30', '2020-03-25', 6, 30, 1, 7, 'wednesday', 4, 0, 'NONE') ,('2020-03-26', '1399-01-07', '1441-08-01', '2020-03-26', 7, 1, 1, 8, 'thursday ', 5, 0, 'NONE') ,('2020-03-27', '1399-01-08', '1441-08-02', '2020-03-27', 8, 2, 1, 8, 'friday   ', 6, 0, 'NONE') ,('2020-03-28', '1399-01-09', '1441-08-03', '2020-03-28', 9, 3, 1, 8, 'saturday ', 7, 0, 'NONE') ,('2020-03-29', '1399-01-10', '1441-08-04', '2020-03-29', 10, 4, 1, 8, 'sunday   ', 1, 0, 'NONE') ,('2020-03-30', '1399-01-11', '1441-08-05', '2020-03-30', 11, 5, 1, 8, 'monday   ', 2, 0, 'NONE') ,('2020-03-31', '1399-01-12', '1441-08-06', '2020-03-31', 12, 6, 1, 8, 'tuesday  ', 3, 0, 'NONE') ,('2020-04-01', '1399-01-13', '1441-08-07', '2020-04-01', 13, 7, 1, 8, 'wednesday', 4, 0, 'NONE') ,('2020-04-02', '1399-01-14', '1441-08-08', '2020-04-02', 14, 8, 1, 8, 'thursday ', 5, 0, 'NONE') ,('2020-04-03', '1399-01-15', '1441-08-09', '2020-04-03', 15, 9, 1, 8, 'friday   ', 6, 0, 'NONE') ,('2020-04-04', '1399-01-16', '1441-08-10', '2020-04-04', 16, 10, 1, 8, 'saturday ', 7, 0, 'NONE') ,('2020-04-05', '1399-01-17', '1441-08-11', '2020-04-05', 17, 11, 1, 8, 'sunday   ', 1, 0, 'NONE') ,('2020-04-06', '1399-01-18', '1441-08-12', '2020-04-06', 18, 12, 1, 8, 'monday   ', 2, 0, 'NONE') ,('2020-04-07', '1399-01-19', '1441-08-13', '2020-04-07', 19, 13, 1, 8, 'tuesday  ', 3, 0, 'NONE') ,('2020-04-08', '1399-01-20', '1441-08-14', '2020-04-08', 20, 14, 1, 8, 'wednesday', 4, 0, 'NONE') ,('2020-04-09', '1399-01-21', '1441-08-15', '2020-04-09', 21, 15, 1, 8, 'thursday ', 5, 0, 'NONE') ,('2020-04-10', '1399-01-22', '1441-08-16', '2020-04-10', 22, 16, 1, 8, 'friday   ', 6, 0, 'NONE') ,('2020-04-11', '1399-01-23', '1441-08-17', '2020-04-11', 23, 17, 1, 8, 'saturday ', 7, 0, 'NONE') ,('2020-04-12', '1399-01-24', '1441-08-18', '2020-04-12', 24, 18, 1, 8, 'sunday   ', 1, 0, 'NONE') ,('2020-04-13', '1399-01-25', '1441-08-19', '2020-04-13', 25, 19, 1, 8, 'monday   ', 2, 0, 'NONE') ,('2020-04-14', '1399-01-26', '1441-08-20', '2020-04-14', 26, 20, 1, 8, 'tuesday  ', 3, 0, 'NONE') ,('2020-04-15', '1399-01-27', '1441-08-21', '2020-04-15', 27, 21, 1, 8, 'wednesday', 4, 0, 'NONE') ,('2020-04-16', '1399-01-28', '1441-08-22', '2020-04-16', 28, 22, 1, 8, 'thursday ', 5, 0, 'NONE') ,('2020-04-17', '1399-01-29', '1441-08-23', '2020-04-17', 29, 23, 1, 8, 'friday   ', 6, 0, 'NONE') ,('2020-04-18', '1399-01-30', '1441-08-24', '2020-04-18', 30, 24, 1, 8, 'saturday ', 7, 0, 'NONE') ,('2020-04-19', '1399-01-31', '1441-08-25', '2020-04-19', 31, 25, 1, 8, 'sunday   ', 1, 0, 'NONE') ,('2020-04-20', '1399-02-01', '1441-08-26', '2020-04-20', 1, 26, 2, 8, 'monday   ', 2, 0, 'NONE') ,('2020-04-21', '1399-02-02', '1441-08-27', '2020-04-21', 2, 27, 2, 8, 'tuesday  ', 3, 0, 'NONE') ,('2020-04-22', '1399-02-03', '1441-08-28', '2020-04-22', 3, 28, 2, 8, 'wednesday', 4, 0, 'NONE') ,('2020-04-23', '1399-02-04', '1441-08-29', '2020-04-23', 4, 29, 2, 8, 'thursday ', 5, 0, 'NONE') ,('2020-04-24', '1399-02-05', '1441-09-01', '2020-04-24', 5, 1, 2, 9, 'friday   ', 6, 0, 'NONE') ,('2020-04-25', '1399-02-06', '1441-09-02', '2020-04-25', 6, 2, 2, 9, 'saturday ', 7, 0, 'NONE') ,('2020-04-26', '1399-02-07', '1441-09-03', '2020-04-26', 7, 3, 2, 9, 'sunday   ', 1, 0, 'NONE') ,('2020-04-27', '1399-02-08', '1441-09-04', '2020-04-27', 8, 4, 2, 9, 'monday   ', 2, 0, 'NONE') ,('2020-04-28', '1399-02-09', '1441-09-05', '2020-04-28', 9, 5, 2, 9, 'tuesday  ', 3, 0, 'NONE') ,('2020-04-29', '1399-02-10', '1441-09-06', '2020-04-29', 10, 6, 2, 9, 'wednesday', 4, 0, 'NONE') ,('2020-04-30', '1399-02-11', '1441-09-07', '2020-04-30', 11, 7, 2, 9, 'thursday ', 5, 0, 'NONE') ,('2020-05-01', '1399-02-12', '1441-09-08', '2020-05-01', 12, 8, 2, 9, 'friday   ', 6, 0, 'NONE') ,('2020-05-02', '1399-02-13', '1441-09-09', '2020-05-02', 13, 9, 2, 9, 'saturday ', 7, 0, 'NONE') ,('2020-05-03', '1399-02-14', '1441-09-10', '2020-05-03', 14, 10, 2, 9, 'sunday   ', 1, 0, 'NONE') ,('2020-05-04', '1399-02-15', '1441-09-11', '2020-05-04', 15, 11, 2, 9, 'monday   ', 2, 0, 'NONE') ,('2020-05-05', '1399-02-16', '1441-09-12', '2020-05-05', 16, 12, 2, 9, 'tuesday  ', 3, 0, 'NONE') ,('2020-05-06', '1399-02-17', '1441-09-13', '2020-05-06', 17, 13, 2, 9, 'wednesday', 4, 0, 'NONE') ,('2020-05-07', '1399-02-18', '1441-09-14', '2020-05-07', 18, 14, 2, 9, 'thursday ', 5, 0, 'NONE') ,('2020-05-08', '1399-02-19', '1441-09-15', '2020-05-08', 19, 15, 2, 9, 'friday   ', 6, 0, 'NONE') ,('2020-05-09', '1399-02-20', '1441-09-16', '2020-05-09', 20, 16, 2, 9, 'saturday ', 7, 0, 'NONE') ,('2020-05-10', '1399-02-21', '1441-09-17', '2020-05-10', 21, 17, 2, 9, 'sunday   ', 1, 0, 'NONE') ,('2020-05-11', '1399-02-22', '1441-09-18', '2020-05-11', 22, 18, 2, 9, 'monday   ', 2, 0, 'NONE') ,('2020-05-12', '1399-02-23', '1441-09-19', '2020-05-12', 23, 19, 2, 9, 'tuesday  ', 3, 0, 'NONE') ,('2020-05-13', '1399-02-24', '1441-09-20', '2020-05-13', 24, 20, 2, 9, 'wednesday', 4, 0, 'NONE') ,('2020-05-14', '1399-02-25', '1441-09-21', '2020-05-14', 25, 21, 2, 9, 'thursday ', 5, 0, 'NONE') ,('2020-05-15', '1399-02-26', '1441-09-22', '2020-05-15', 26, 22, 2, 9, 'friday   ', 6, 0, 'NONE') ,('2020-05-16', '1399-02-27', '1441-09-23', '2020-05-16', 27, 23, 2, 9, 'saturday ', 7, 0, 'NONE') ,('2020-05-17', '1399-02-28', '1441-09-24', '2020-05-17', 28, 24, 2, 9, 'sunday   ', 1, 0, 'NONE') ,('2020-05-18', '1399-02-29', '1441-09-25', '2020-05-18', 29, 25, 2, 9, 'monday   ', 2, 0, 'NONE') ,('2020-05-19', '1399-02-30', '1441-09-26', '2020-05-19', 30, 26, 2, 9, 'tuesday  ', 3, 0, 'NONE') ,('2020-05-20', '1399-02-31', '1441-09-27', '2020-05-20', 31, 27, 2, 9, 'wednesday', 4, 0, 'NONE') ,('2020-05-21', '1399-03-01', '1441-09-28', '2020-05-21', 1, 28, 3, 9, 'thursday ', 5, 0, 'NONE') ,('2020-05-22', '1399-03-02', '1441-09-29', '2020-05-22', 2, 29, 3, 9, 'friday   ', 6, 0, 'NONE') ,('2020-05-23', '1399-03-03', '1441-09-30', '2020-05-23', 3, 30, 3, 9, 'saturday ', 7, 0, 'NONE') ,('2020-05-24', '1399-03-04', '1441-10-01', '2020-05-24', 4, 1, 3, 10, 'sunday   ', 1, 0, 'NONE') ,('2020-05-25', '1399-03-05', '1441-10-02', '2020-05-25', 5, 2, 3, 10, 'monday   ', 2, 0, 'NONE') ,('2020-05-26', '1399-03-06', '1441-10-03', '2020-05-26', 6, 3, 3, 10, 'tuesday  ', 3, 0, 'NONE') ,('2020-05-27', '1399-03-07', '1441-10-04', '2020-05-27', 7, 4, 3, 10, 'wednesday', 4, 0, 'NONE') ,('2020-05-28', '1399-03-08', '1441-10-05', '2020-05-28', 8, 5, 3, 10, 'thursday ', 5, 0, 'NONE') ,('2020-05-29', '1399-03-09', '1441-10-06', '2020-05-29', 9, 6, 3, 10, 'friday   ', 6, 0, 'NONE') ,('2020-05-30', '1399-03-10', '1441-10-07', '2020-05-30', 10, 7, 3, 10, 'saturday ', 7, 0, 'NONE') ,('2020-05-31', '1399-03-11', '1441-10-08', '2020-05-31', 11, 8, 3, 10, 'sunday   ', 1, 0, 'NONE') ,('2020-06-01', '1399-03-12', '1441-10-09', '2020-06-01', 12, 9, 3, 10, 'monday   ', 2, 0, 'NONE') ,('2020-06-02', '1399-03-13', '1441-10-10', '2020-06-02', 13, 10, 3, 10, 'tuesday  ', 3, 0, 'NONE') ,('2020-06-03', '1399-03-14', '1441-10-11', '2020-06-03', 14, 11, 3, 10, 'wednesday', 4, 0, 'NONE') ,('2020-06-04', '1399-03-15', '1441-10-12', '2020-06-04', 15, 12, 3, 10, 'thursday ', 5, 0, 'NONE') ,('2020-06-05', '1399-03-16', '1441-10-13', '2020-06-05', 16, 13, 3, 10, 'friday   ', 6, 0, 'NONE') ,('2020-06-06', '1399-03-17', '1441-10-14', '2020-06-06', 17, 14, 3, 10, 'saturday ', 7, 0, 'NONE') ,('2020-06-07', '1399-03-18', '1441-10-15', '2020-06-07', 18, 15, 3, 10, 'sunday   ', 1, 0, 'NONE') ,('2020-06-08', '1399-03-19', '1441-10-16', '2020-06-08', 19, 16, 3, 10, 'monday   ', 2, 0, 'NONE') ,('2020-06-09', '1399-03-20', '1441-10-17', '2020-06-09', 20, 17, 3, 10, 'tuesday  ', 3, 0, 'NONE') ,('2020-06-10', '1399-03-21', '1441-10-18', '2020-06-10', 21, 18, 3, 10, 'wednesday', 4, 0, 'NONE') ,('2020-06-11', '1399-03-22', '1441-10-19', '2020-06-11', 22, 19, 3, 10, 'thursday ', 5, 0, 'NONE') ,('2020-06-12', '1399-03-23', '1441-10-20', '2020-06-12', 23, 20, 3, 10, 'friday   ', 6, 0, 'NONE') ,('2020-06-13', '1399-03-24', '1441-10-21', '2020-06-13', 24, 21, 3, 10, 'saturday ', 7, 0, 'NONE') ,('2020-06-14', '1399-03-25', '1441-10-22', '2020-06-14', 25, 22, 3, 10, 'sunday   ', 1, 0, 'NONE') ,('2020-06-15', '1399-03-26', '1441-10-23', '2020-06-15', 26, 23, 3, 10, 'monday   ', 2, 0, 'NONE') ,('2020-06-16', '1399-03-27', '1441-10-24', '2020-06-16', 27, 24, 3, 10, 'tuesday  ', 3, 0, 'NONE') ,('2020-06-17', '1399-03-28', '1441-10-25', '2020-06-17', 28, 25, 3, 10, 'wednesday', 4, 0, 'NONE') ,('2020-06-18', '1399-03-29', '1441-10-26', '2020-06-18', 29, 26, 3, 10, 'thursday ', 5, 0, 'NONE') ,('2020-06-19', '1399-03-30', '1441-10-27', '2020-06-19', 30, 27, 3, 10, 'friday   ', 6, 0, 'NONE') ,('2020-06-20', '1399-03-31', '1441-10-28', '2020-06-20', 31, 28, 3, 10, 'saturday ', 7, 0, 'NONE') ,('2020-06-21', '1399-04-01', '1441-10-29', '2020-06-21', 1, 29, 4, 10, 'sunday   ', 1, 0, 'NONE') ,('2020-06-22', '1399-04-02', '1441-11-01', '2020-06-22', 2, 1, 4, 11, 'monday   ', 2, 0, 'NONE') ,('2020-06-23', '1399-04-03', '1441-11-02', '2020-06-23', 3, 2, 4, 11, 'tuesday  ', 3, 0, 'NONE') ,('2020-06-24', '1399-04-04', '1441-11-03', '2020-06-24', 4, 3, 4, 11, 'wednesday', 4, 0, 'NONE') ,('2020-06-25', '1399-04-05', '1441-11-04', '2020-06-25', 5, 4, 4, 11, 'thursday ', 5, 0, 'NONE') ,('2020-06-26', '1399-04-06', '1441-11-05', '2020-06-26', 6, 5, 4, 11, 'friday   ', 6, 0, 'NONE') ,('2020-06-27', '1399-04-07', '1441-11-06', '2020-06-27', 7, 6, 4, 11, 'saturday ', 7, 0, 'NONE') ,('2020-06-28', '1399-04-08', '1441-11-07', '2020-06-28', 8, 7, 4, 11, 'sunday   ', 1, 0, 'NONE') ,('2020-06-29', '1399-04-09', '1441-11-08', '2020-06-29', 9, 8, 4, 11, 'monday   ', 2, 0, 'NONE') ,('2020-06-30', '1399-04-10', '1441-11-09', '2020-06-30', 10, 9, 4, 11, 'tuesday  ', 3, 0, 'NONE') ,('2020-07-01', '1399-04-11', '1441-11-10', '2020-07-01', 11, 10, 4, 11, 'wednesday', 4, 0, 'NONE') ,('2020-07-02', '1399-04-12', '1441-11-11', '2020-07-02', 12, 11, 4, 11, 'thursday ', 5, 0, 'NONE') ,('2020-07-03', '1399-04-13', '1441-11-12', '2020-07-03', 13, 12, 4, 11, 'friday   ', 6, 0, 'NONE') ,('2020-07-04', '1399-04-14', '1441-11-13', '2020-07-04', 14, 13, 4, 11, 'saturday ', 7, 0, 'NONE') ,('2020-07-05', '1399-04-15', '1441-11-14', '2020-07-05', 15, 14, 4, 11, 'sunday   ', 1, 0, 'NONE') ,('2020-07-06', '1399-04-16', '1441-11-15', '2020-07-06', 16, 15, 4, 11, 'monday   ', 2, 0, 'NONE') ,('2020-07-07', '1399-04-17', '1441-11-16', '2020-07-07', 17, 16, 4, 11, 'tuesday  ', 3, 0, 'NONE') ,('2020-07-08', '1399-04-18', '1441-11-17', '2020-07-08', 18, 17, 4, 11, 'wednesday', 4, 0, 'NONE') ,('2020-07-09', '1399-04-19', '1441-11-18', '2020-07-09', 19, 18, 4, 11, 'thursday ', 5, 0, 'NONE') ,('2020-07-10', '1399-04-20', '1441-11-19', '2020-07-10', 20, 19, 4, 11, 'friday   ', 6, 0, 'NONE') ,('2020-07-11', '1399-04-21', '1441-11-20', '2020-07-11', 21, 20, 4, 11, 'saturday ', 7, 0, 'NONE') ,('2020-07-12', '1399-04-22', '1441-11-21', '2020-07-12', 22, 21, 4, 11, 'sunday   ', 1, 0, 'NONE') ,('2020-07-13', '1399-04-23', '1441-11-22', '2020-07-13', 23, 22, 4, 11, 'monday   ', 2, 0, 'NONE') ,('2020-07-14', '1399-04-24', '1441-11-23', '2020-07-14', 24, 23, 4, 11, 'tuesday  ', 3, 0, 'NONE') ,('2020-07-15', '1399-04-25', '1441-11-24', '2020-07-15', 25, 24, 4, 11, 'wednesday', 4, 0, 'NONE') ,('2020-07-16', '1399-04-26', '1441-11-25', '2020-07-16', 26, 25, 4, 11, 'thursday ', 5, 0, 'NONE') ,('2020-07-17', '1399-04-27', '1441-11-26', '2020-07-17', 27, 26, 4, 11, 'friday   ', 6, 0, 'NONE') ,('2020-07-18', '1399-04-28', '1441-11-27', '2020-07-18', 28, 27, 4, 11, 'saturday ', 7, 0, 'NONE') ,('2020-07-19', '1399-04-29', '1441-11-28', '2020-07-19', 29, 28, 4, 11, 'sunday   ', 1, 0, 'NONE') ,('2020-07-20', '1399-04-30', '1441-11-29', '2020-07-20', 30, 29, 4, 11, 'monday   ', 2, 0, 'NONE') ,('2020-07-21', '1399-04-31', '1441-11-30', '2020-07-21', 31, 30, 4, 11, 'tuesday  ', 3, 0, 'NONE') ,('2020-07-22', '1399-05-01', '1441-12-01', '2020-07-22', 1, 1, 5, 12, 'wednesday', 4, 0, 'NONE') ,('2020-07-23', '1399-05-02', '1441-12-02', '2020-07-23', 2, 2, 5, 12, 'thursday ', 5, 0, 'NONE') ,('2020-07-24', '1399-05-03', '1441-12-03', '2020-07-24', 3, 3, 5, 12, 'friday   ', 6, 0, 'NONE') ,('2020-07-25', '1399-05-04', '1441-12-04', '2020-07-25', 4, 4, 5, 12, 'saturday ', 7, 0, 'NONE') ,('2020-07-26', '1399-05-05', '1441-12-05', '2020-07-26', 5, 5, 5, 12, 'sunday   ', 1, 0, 'NONE') ,('2020-07-27', '1399-05-06', '1441-12-06', '2020-07-27', 6, 6, 5, 12, 'monday   ', 2, 0, 'NONE') ,('2020-07-28', '1399-05-07', '1441-12-07', '2020-07-28', 7, 7, 5, 12, 'tuesday  ', 3, 0, 'NONE') ,('2020-07-29', '1399-05-08', '1441-12-08', '2020-07-29', 8, 8, 5, 12, 'wednesday', 4, 0, 'NONE') ,('2020-07-30', '1399-05-09', '1441-12-09', '2020-07-30', 9, 9, 5, 12, 'thursday ', 5, 0, 'NONE') ,('2020-07-31', '1399-05-10', '1441-12-10', '2020-07-31', 10, 10, 5, 12, 'friday   ', 6, 0, 'NONE') ,('2020-08-01', '1399-05-11', '1441-12-11', '2020-08-01', 11, 11, 5, 12, 'saturday ', 7, 0, 'NONE') ,('2020-08-02', '1399-05-12', '1441-12-12', '2020-08-02', 12, 12, 5, 12, 'sunday   ', 1, 0, 'NONE') ,('2020-08-03', '1399-05-13', '1441-12-13', '2020-08-03', 13, 13, 5, 12, 'monday   ', 2, 0, 'NONE') ,('2020-08-04', '1399-05-14', '1441-12-14', '2020-08-04', 14, 14, 5, 12, 'tuesday  ', 3, 0, 'NONE') ,('2020-08-05', '1399-05-15', '1441-12-15', '2020-08-05', 15, 15, 5, 12, 'wednesday', 4, 0, 'NONE') ,('2020-08-06', '1399-05-16', '1441-12-16', '2020-08-06', 16, 16, 5, 12, 'thursday ', 5, 0, 'NONE') ,('2020-08-07', '1399-05-17', '1441-12-17', '2020-08-07', 17, 17, 5, 12, 'friday   ', 6, 0, 'NONE') ,('2020-08-08', '1399-05-18', '1441-12-18', '2020-08-08', 18, 18, 5, 12, 'saturday ', 7, 0, 'NONE') ,('2020-08-09', '1399-05-19', '1441-12-19', '2020-08-09', 19, 19, 5, 12, 'sunday   ', 1, 0, 'NONE') ,('2020-08-10', '1399-05-20', '1441-12-20', '2020-08-10', 20, 20, 5, 12, 'monday   ', 2, 0, 'NONE') ,('2020-08-11', '1399-05-21', '1441-12-21', '2020-08-11', 21, 21, 5, 12, 'tuesday  ', 3, 0, 'NONE') ,('2020-08-12', '1399-05-22', '1441-12-22', '2020-08-12', 22, 22, 5, 12, 'wednesday', 4, 0, 'NONE') ,('2020-08-13', '1399-05-23', '1441-12-23', '2020-08-13', 23, 23, 5, 12, 'thursday ', 5, 0, 'NONE') ,('2020-08-14', '1399-05-24', '1441-12-24', '2020-08-14', 24, 24, 5, 12, 'friday   ', 6, 0, 'NONE') ,('2020-08-15', '1399-05-25', '1441-12-25', '2020-08-15', 25, 25, 5, 12, 'saturday ', 7, 0, 'NONE') ,('2020-08-16', '1399-05-26', '1441-12-26', '2020-08-16', 26, 26, 5, 12, 'sunday   ', 1, 0, 'NONE') ,('2020-08-17', '1399-05-27', '1441-12-27', '2020-08-17', 27, 27, 5, 12, 'monday   ', 2, 0, 'NONE') ,('2020-08-18', '1399-05-28', '1441-12-28', '2020-08-18', 28, 28, 5, 12, 'tuesday  ', 3, 0, 'NONE') ,('2020-08-19', '1399-05-29', '1441-12-29', '2020-08-19', 29, 29, 5, 12, 'wednesday', 4, 0, 'NONE') ,('2020-08-20', '1399-05-30', '1442-01-01', '2020-08-20', 30, 1, 5, 1, 'thursday ', 5, 0, 'NONE') ,('2020-08-21', '1399-05-31', '1442-01-02', '2020-08-21', 31, 2, 5, 1, 'friday   ', 6, 0, 'NONE') ,('2020-08-22', '1399-06-01', '1442-01-03', '2020-08-22', 1, 3, 6, 1, 'saturday ', 7, 0, 'NONE') ,('2020-08-23', '1399-06-02', '1442-01-04', '2020-08-23', 2, 4, 6, 1, 'sunday   ', 1, 0, 'NONE') ,('2020-08-24', '1399-06-03', '1442-01-05', '2020-08-24', 3, 5, 6, 1, 'monday   ', 2, 0, 'NONE') ,('2020-08-25', '1399-06-04', '1442-01-06', '2020-08-25', 4, 6, 6, 1, 'tuesday  ', 3, 0, 'NONE') ,('2020-08-26', '1399-06-05', '1442-01-07', '2020-08-26', 5, 7, 6, 1, 'wednesday', 4, 0, 'NONE') ,('2020-08-27', '1399-06-06', '1442-01-08', '2020-08-27', 6, 8, 6, 1, 'thursday ', 5, 0, 'NONE') ,('2020-08-28', '1399-06-07', '1442-01-09', '2020-08-28', 7, 9, 6, 1, 'friday   ', 6, 0, 'NONE') ,('2020-08-29', '1399-06-08', '1442-01-10', '2020-08-29', 8, 10, 6, 1, 'saturday ', 7, 0, 'NONE') ,('2020-08-30', '1399-06-09', '1442-01-11', '2020-08-30', 9, 11, 6, 1, 'sunday   ', 1, 0, 'NONE') ,('2020-08-31', '1399-06-10', '1442-01-12', '2020-08-31', 10, 12, 6, 1, 'monday   ', 2, 0, 'NONE') ,('2020-09-01', '1399-06-11', '1442-01-13', '2020-09-01', 11, 13, 6, 1, 'tuesday  ', 3, 0, 'NONE') ,('2020-09-02', '1399-06-12', '1442-01-14', '2020-09-02', 12, 14, 6, 1, 'wednesday', 4, 0, 'NONE') ,('2020-09-03', '1399-06-13', '1442-01-15', '2020-09-03', 13, 15, 6, 1, 'thursday ', 5, 0, 'NONE') ,('2020-09-04', '1399-06-14', '1442-01-16', '2020-09-04', 14, 16, 6, 1, 'friday   ', 6, 0, 'NONE') ,('2020-09-05', '1399-06-15', '1442-01-17', '2020-09-05', 15, 17, 6, 1, 'saturday ', 7, 0, 'NONE') ,('2020-09-06', '1399-06-16', '1442-01-18', '2020-09-06', 16, 18, 6, 1, 'sunday   ', 1, 0, 'NONE') ,('2020-09-07', '1399-06-17', '1442-01-19', '2020-09-07', 17, 19, 6, 1, 'monday   ', 2, 0, 'NONE') ,('2020-09-08', '1399-06-18', '1442-01-20', '2020-09-08', 18, 20, 6, 1, 'tuesday  ', 3, 0, 'NONE') ,('2020-09-09', '1399-06-19', '1442-01-21', '2020-09-09', 19, 21, 6, 1, 'wednesday', 4, 0, 'NONE') ,('2020-09-10', '1399-06-20', '1442-01-22', '2020-09-10', 20, 22, 6, 1, 'thursday ', 5, 0, 'NONE') ,('2020-09-11', '1399-06-21', '1442-01-23', '2020-09-11', 21, 23, 6, 1, 'friday   ', 6, 0, 'NONE') ,('2020-09-12', '1399-06-22', '1442-01-24', '2020-09-12', 22, 24, 6, 1, 'saturday ', 7, 0, 'NONE') ,('2020-09-13', '1399-06-23', '1442-01-25', '2020-09-13', 23, 25, 6, 1, 'sunday   ', 1, 0, 'NONE') ,('2020-09-14', '1399-06-24', '1442-01-26', '2020-09-14', 24, 26, 6, 1, 'monday   ', 2, 0, 'NONE') ,('2020-09-15', '1399-06-25', '1442-01-27', '2020-09-15', 25, 27, 6, 1, 'tuesday  ', 3, 0, 'NONE') ,('2020-09-16', '1399-06-26', '1442-01-28', '2020-09-16', 26, 28, 6, 1, 'wednesday', 4, 0, 'NONE') ,('2020-09-17', '1399-06-27', '1442-01-29', '2020-09-17', 27, 29, 6, 1, 'thursday ', 5, 0, 'NONE') ,('2020-09-18', '1399-06-28', '1442-01-30', '2020-09-18', 28, 30, 6, 1, 'friday   ', 6, 0, 'NONE') ,('2020-09-19', '1399-06-29', '1442-02-01', '2020-09-19', 29, 1, 6, 2, 'saturday ', 7, 0, 'NONE') ,('2020-09-20', '1399-06-30', '1442-02-02', '2020-09-20', 30, 2, 6, 2, 'sunday   ', 1, 0, 'NONE') ,('2020-09-21', '1399-06-31', '1442-02-03', '2020-09-21', 31, 3, 6, 2, 'monday   ', 2, 0, 'NONE') ,('2020-09-22', '1399-07-01', '1442-02-04', '2020-09-22', 1, 4, 7, 2, 'tuesday  ', 3, 0, 'NONE') ,('2020-09-23', '1399-07-02', '1442-02-05', '2020-09-23', 2, 5, 7, 2, 'wednesday', 4, 0, 'NONE') ,('2020-09-24', '1399-07-03', '1442-02-06', '2020-09-24', 3, 6, 7, 2, 'thursday ', 5, 0, 'NONE') ,('2020-09-25', '1399-07-04', '1442-02-07', '2020-09-25', 4, 7, 7, 2, 'friday   ', 6, 0, 'NONE') ,('2020-09-26', '1399-07-05', '1442-02-08', '2020-09-26', 5, 8, 7, 2, 'saturday ', 7, 0, 'NONE') ,('2020-09-27', '1399-07-06', '1442-02-09', '2020-09-27', 6, 9, 7, 2, 'sunday   ', 1, 0, 'NONE') ,('2020-09-28', '1399-07-07', '1442-02-10', '2020-09-28', 7, 10, 7, 2, 'monday   ', 2, 0, 'NONE') ,('2020-09-29', '1399-07-08', '1442-02-11', '2020-09-29', 8, 11, 7, 2, 'tuesday  ', 3, 0, 'NONE') ,('2020-09-30', '1399-07-09', '1442-02-12', '2020-09-30', 9, 12, 7, 2, 'wednesday', 4, 0, 'NONE') ,('2020-10-01', '1399-07-10', '1442-02-13', '2020-10-01', 10, 13, 7, 2, 'thursday ', 5, 0, 'NONE') ,('2020-10-02', '1399-07-11', '1442-02-14', '2020-10-02', 11, 14, 7, 2, 'friday   ', 6, 0, 'NONE') ,('2020-10-03', '1399-07-12', '1442-02-15', '2020-10-03', 12, 15, 7, 2, 'saturday ', 7, 0, 'NONE') ,('2020-10-04', '1399-07-13', '1442-02-16', '2020-10-04', 13, 16, 7, 2, 'sunday   ', 1, 0, 'NONE') ,('2020-10-05', '1399-07-14', '1442-02-17', '2020-10-05', 14, 17, 7, 2, 'monday   ', 2, 0, 'NONE') ,('2020-10-06', '1399-07-15', '1442-02-18', '2020-10-06', 15, 18, 7, 2, 'tuesday  ', 3, 0, 'NONE') ,('2020-10-07', '1399-07-16', '1442-02-19', '2020-10-07', 16, 19, 7, 2, 'wednesday', 4, 0, 'NONE') ,('2020-10-08', '1399-07-17', '1442-02-20', '2020-10-08', 17, 20, 7, 2, 'thursday ', 5, 0, 'NONE') ,('2020-10-09', '1399-07-18', '1442-02-21', '2020-10-09', 18, 21, 7, 2, 'friday   ', 6, 0, 'NONE') ,('2020-10-10', '1399-07-19', '1442-02-22', '2020-10-10', 19, 22, 7, 2, 'saturday ', 7, 0, 'NONE') ,('2020-10-11', '1399-07-20', '1442-02-23', '2020-10-11', 20, 23, 7, 2, 'sunday   ', 1, 0, 'NONE') ,('2020-10-12', '1399-07-21', '1442-02-24', '2020-10-12', 21, 24, 7, 2, 'monday   ', 2, 0, 'NONE') ,('2020-10-13', '1399-07-22', '1442-02-25', '2020-10-13', 22, 25, 7, 2, 'tuesday  ', 3, 0, 'NONE') ,('2020-10-14', '1399-07-23', '1442-02-26', '2020-10-14', 23, 26, 7, 2, 'wednesday', 4, 0, 'NONE') ,('2020-10-15', '1399-07-24', '1442-02-27', '2020-10-15', 24, 27, 7, 2, 'thursday ', 5, 0, 'NONE') ,('2020-10-16', '1399-07-25', '1442-02-28', '2020-10-16', 25, 28, 7, 2, 'friday   ', 6, 0, 'NONE') ,('2020-10-17', '1399-07-26', '1442-02-29', '2020-10-17', 26, 29, 7, 2, 'saturday ', 7, 0, 'NONE') ,('2020-10-18', '1399-07-27', '1442-03-01', '2020-10-18', 27, 1, 7, 3, 'sunday   ', 1, 0, 'NONE') ,('2020-10-19', '1399-07-28', '1442-03-02', '2020-10-19', 28, 2, 7, 3, 'monday   ', 2, 0, 'NONE') ,('2020-10-20', '1399-07-29', '1442-03-03', '2020-10-20', 29, 3, 7, 3, 'tuesday  ', 3, 0, 'NONE') ,('2020-10-21', '1399-07-30', '1442-03-04', '2020-10-21', 30, 4, 7, 3, 'wednesday', 4, 0, 'NONE') ,('2020-10-22', '1399-08-01', '1442-03-05', '2020-10-22', 1, 5, 8, 3, 'thursday ', 5, 0, 'NONE') ,('2020-10-23', '1399-08-02', '1442-03-06', '2020-10-23', 2, 6, 8, 3, 'friday   ', 6, 0, 'NONE') ,('2020-10-24', '1399-08-03', '1442-03-07', '2020-10-24', 3, 7, 8, 3, 'saturday ', 7, 0, 'NONE') ,('2020-10-25', '1399-08-04', '1442-03-08', '2020-10-25', 4, 8, 8, 3, 'sunday   ', 1, 0, 'NONE') ,('2020-10-26', '1399-08-05', '1442-03-09', '2020-10-26', 5, 9, 8, 3, 'monday   ', 2, 0, 'NONE') ,('2020-10-27', '1399-08-06', '1442-03-10', '2020-10-27', 6, 10, 8, 3, 'tuesday  ', 3, 0, 'NONE') ,('2020-10-28', '1399-08-07', '1442-03-11', '2020-10-28', 7, 11, 8, 3, 'wednesday', 4, 0, 'NONE') ,('2020-10-29', '1399-08-08', '1442-03-12', '2020-10-29', 8, 12, 8, 3, 'thursday ', 5, 0, 'NONE') ,('2020-10-30', '1399-08-09', '1442-03-13', '2020-10-30', 9, 13, 8, 3, 'friday   ', 6, 0, 'NONE') ,('2020-10-31', '1399-08-10', '1442-03-14', '2020-10-31', 10, 14, 8, 3, 'saturday ', 7, 0, 'NONE') ,('2020-11-01', '1399-08-11', '1442-03-15', '2020-11-01', 11, 15, 8, 3, 'sunday   ', 1, 0, 'NONE') ,('2020-11-02', '1399-08-12', '1442-03-16', '2020-11-02', 12, 16, 8, 3, 'monday   ', 2, 0, 'NONE') ,('2020-11-03', '1399-08-13', '1442-03-17', '2020-11-03', 13, 17, 8, 3, 'tuesday  ', 3, 0, 'NONE') ,('2020-11-04', '1399-08-14', '1442-03-18', '2020-11-04', 14, 18, 8, 3, 'wednesday', 4, 0, 'NONE') ,('2020-11-05', '1399-08-15', '1442-03-19', '2020-11-05', 15, 19, 8, 3, 'thursday ', 5, 0, 'NONE') ,('2020-11-06', '1399-08-16', '1442-03-20', '2020-11-06', 16, 20, 8, 3, 'friday   ', 6, 0, 'NONE') ,('2020-11-07', '1399-08-17', '1442-03-21', '2020-11-07', 17, 21, 8, 3, 'saturday ', 7, 0, 'NONE') ,('2020-11-08', '1399-08-18', '1442-03-22', '2020-11-08', 18, 22, 8, 3, 'sunday   ', 1, 0, 'NONE') ,('2020-11-09', '1399-08-19', '1442-03-23', '2020-11-09', 19, 23, 8, 3, 'monday   ', 2, 0, 'NONE') ,('2020-11-10', '1399-08-20', '1442-03-24', '2020-11-10', 20, 24, 8, 3, 'tuesday  ', 3, 0, 'NONE') ,('2020-11-11', '1399-08-21', '1442-03-25', '2020-11-11', 21, 25, 8, 3, 'wednesday', 4, 0, 'NONE') ,('2020-11-12', '1399-08-22', '1442-03-26', '2020-11-12', 22, 26, 8, 3, 'thursday ', 5, 0, 'NONE') ,('2020-11-13', '1399-08-23', '1442-03-27', '2020-11-13', 23, 27, 8, 3, 'friday   ', 6, 0, 'NONE') ,('2020-11-14', '1399-08-24', '1442-03-28', '2020-11-14', 24, 28, 8, 3, 'saturday ', 7, 0, 'NONE') ,('2020-11-15', '1399-08-25', '1442-03-29', '2020-11-15', 25, 29, 8, 3, 'sunday   ', 1, 0, 'NONE') ,('2020-11-16', '1399-08-26', '1442-03-30', '2020-11-16', 26, 30, 8, 3, 'monday   ', 2, 0, 'NONE') ,('2020-11-17', '1399-08-27', '1442-04-01', '2020-11-17', 27, 1, 8, 4, 'tuesday  ', 3, 0, 'NONE') ,('2020-11-18', '1399-08-28', '1442-04-02', '2020-11-18', 28, 2, 8, 4, 'wednesday', 4, 0, 'NONE') ,('2020-11-19', '1399-08-29', '1442-04-03', '2020-11-19', 29, 3, 8, 4, 'thursday ', 5, 0, 'NONE') ,('2020-11-20', '1399-08-30', '1442-04-04', '2020-11-20', 30, 4, 8, 4, 'friday   ', 6, 0, 'NONE') ,('2020-11-21', '1399-09-01', '1442-04-05', '2020-11-21', 1, 5, 9, 4, 'saturday ', 7, 0, 'NONE') ,('2020-11-22', '1399-09-02', '1442-04-06', '2020-11-22', 2, 6, 9, 4, 'sunday   ', 1, 0, 'NONE') ,('2020-11-23', '1399-09-03', '1442-04-07', '2020-11-23', 3, 7, 9, 4, 'monday   ', 2, 0, 'NONE') ,('2020-11-24', '1399-09-04', '1442-04-08', '2020-11-24', 4, 8, 9, 4, 'tuesday  ', 3, 0, 'NONE') ,('2020-11-25', '1399-09-05', '1442-04-09', '2020-11-25', 5, 9, 9, 4, 'wednesday', 4, 0, 'NONE') ,('2020-11-26', '1399-09-06', '1442-04-10', '2020-11-26', 6, 10, 9, 4, 'thursday ', 5, 0, 'NONE') ,('2020-11-27', '1399-09-07', '1442-04-11', '2020-11-27', 7, 11, 9, 4, 'friday   ', 6, 0, 'NONE') ,('2020-11-28', '1399-09-08', '1442-04-12', '2020-11-28', 8, 12, 9, 4, 'saturday ', 7, 0, 'NONE') ,('2020-11-29', '1399-09-09', '1442-04-13', '2020-11-29', 9, 13, 9, 4, 'sunday   ', 1, 0, 'NONE') ,('2020-11-30', '1399-09-10', '1442-04-14', '2020-11-30', 10, 14, 9, 4, 'monday   ', 2, 0, 'NONE') ,('2020-12-01', '1399-09-11', '1442-04-15', '2020-12-01', 11, 15, 9, 4, 'tuesday  ', 3, 0, 'NONE') ,('2020-12-02', '1399-09-12', '1442-04-16', '2020-12-02', 12, 16, 9, 4, 'wednesday', 4, 0, 'NONE') ,('2020-12-03', '1399-09-13', '1442-04-17', '2020-12-03', 13, 17, 9, 4, 'thursday ', 5, 0, 'NONE') ,('2020-12-04', '1399-09-14', '1442-04-18', '2020-12-04', 14, 18, 9, 4, 'friday   ', 6, 0, 'NONE') ,('2020-12-05', '1399-09-15', '1442-04-19', '2020-12-05', 15, 19, 9, 4, 'saturday ', 7, 0, 'NONE') ,('2020-12-06', '1399-09-16', '1442-04-20', '2020-12-06', 16, 20, 9, 4, 'sunday   ', 1, 0, 'NONE') ,('2020-12-07', '1399-09-17', '1442-04-21', '2020-12-07', 17, 21, 9, 4, 'monday   ', 2, 0, 'NONE') ,('2020-12-08', '1399-09-18', '1442-04-22', '2020-12-08', 18, 22, 9, 4, 'tuesday  ', 3, 0, 'NONE') ,('2020-12-09', '1399-09-19', '1442-04-23', '2020-12-09', 19, 23, 9, 4, 'wednesday', 4, 0, 'NONE') ,('2020-12-10', '1399-09-20', '1442-04-24', '2020-12-10', 20, 24, 9, 4, 'thursday ', 5, 0, 'NONE') ,('2020-12-11', '1399-09-21', '1442-04-25', '2020-12-11', 21, 25, 9, 4, 'friday   ', 6, 0, 'NONE') ,('2020-12-12', '1399-09-22', '1442-04-26', '2020-12-12', 22, 26, 9, 4, 'saturday ', 7, 0, 'NONE') ,('2020-12-13', '1399-09-23', '1442-04-27', '2020-12-13', 23, 27, 9, 4, 'sunday   ', 1, 0, 'NONE') ,('2020-12-14', '1399-09-24', '1442-04-28', '2020-12-14', 24, 28, 9, 4, 'monday   ', 2, 0, 'NONE') ,('2020-12-15', '1399-09-25', '1442-04-29', '2020-12-15', 25, 29, 9, 4, 'tuesday  ', 3, 0, 'NONE') ,('2020-12-16', '1399-09-26', '1442-05-01', '2020-12-16', 26, 1, 9, 5, 'wednesday', 4, 0, 'NONE') ,('2020-12-17', '1399-09-27', '1442-05-02', '2020-12-17', 27, 2, 9, 5, 'thursday ', 5, 0, 'NONE') ,('2020-12-18', '1399-09-28', '1442-05-03', '2020-12-18', 28, 3, 9, 5, 'friday   ', 6, 0, 'NONE') ,('2020-12-19', '1399-09-29', '1442-05-04', '2020-12-19', 29, 4, 9, 5, 'saturday ', 7, 0, 'NONE') ,('2020-12-20', '1399-09-30', '1442-05-05', '2020-12-20', 30, 5, 9, 5, 'sunday   ', 1, 0, 'NONE') ,('2020-12-21', '1399-10-01', '1442-05-06', '2020-12-21', 1, 6, 10, 5, 'monday   ', 2, 0, 'NONE') ,('2020-12-22', '1399-10-02', '1442-05-07', '2020-12-22', 2, 7, 10, 5, 'tuesday  ', 3, 0, 'NONE') ,('2020-12-23', '1399-10-03', '1442-05-08', '2020-12-23', 3, 8, 10, 5, 'wednesday', 4, 0, 'NONE') ,('2020-12-24', '1399-10-04', '1442-05-09', '2020-12-24', 4, 9, 10, 5, 'thursday ', 5, 0, 'NONE') ,('2020-12-25', '1399-10-05', '1442-05-10', '2020-12-25', 5, 10, 10, 5, 'friday   ', 6, 0, 'NONE') ,('2020-12-26', '1399-10-06', '1442-05-11', '2020-12-26', 6, 11, 10, 5, 'saturday ', 7, 0, 'NONE') ,('2020-12-27', '1399-10-07', '1442-05-12', '2020-12-27', 7, 12, 10, 5, 'sunday   ', 1, 0, 'NONE') ,('2020-12-28', '1399-10-08', '1442-05-13', '2020-12-28', 8, 13, 10, 5, 'monday   ', 2, 0, 'NONE') ,('2020-12-29', '1399-10-09', '1442-05-14', '2020-12-29', 9, 14, 10, 5, 'tuesday  ', 3, 0, 'NONE') ,('2020-12-30', '1399-10-10', '1442-05-15', '2020-12-30', 10, 15, 10, 5, 'wednesday', 4, 0, 'NONE') ,('2020-12-31', '1399-10-11', '1442-05-16', '2020-12-31', 11, 16, 10, 5, 'thursday ', 5, 0, 'NONE') ,('2021-01-01', '1399-10-12', '1442-05-17', '2021-01-01', 12, 17, 10, 5, 'friday   ', 6, 0, 'NONE') ,('2021-01-02', '1399-10-13', '1442-05-18', '2021-01-02', 13, 18, 10, 5, 'saturday ', 7, 0, 'NONE') ,('2021-01-03', '1399-10-14', '1442-05-19', '2021-01-03', 14, 19, 10, 5, 'sunday   ', 1, 0, 'NONE') ,('2021-01-04', '1399-10-15', '1442-05-20', '2021-01-04', 15, 20, 10, 5, 'monday   ', 2, 0, 'NONE') ,('2021-01-05', '1399-10-16', '1442-05-21', '2021-01-05', 16, 21, 10, 5, 'tuesday  ', 3, 0, 'NONE') ,('2021-01-06', '1399-10-17', '1442-05-22', '2021-01-06', 17, 22, 10, 5, 'wednesday', 4, 0, 'NONE') ,('2021-01-07', '1399-10-18', '1442-05-23', '2021-01-07', 18, 23, 10, 5, 'thursday ', 5, 0, 'NONE') ,('2021-01-08', '1399-10-19', '1442-05-24', '2021-01-08', 19, 24, 10, 5, 'friday   ', 6, 0, 'NONE') ,('2021-01-09', '1399-10-20', '1442-05-25', '2021-01-09', 20, 25, 10, 5, 'saturday ', 7, 0, 'NONE') ,('2021-01-10', '1399-10-21', '1442-05-26', '2021-01-10', 21, 26, 10, 5, 'sunday   ', 1, 0, 'NONE') ,('2021-01-11', '1399-10-22', '1442-05-27', '2021-01-11', 22, 27, 10, 5, 'monday   ', 2, 0, 'NONE') ,('2021-01-12', '1399-10-23', '1442-05-28', '2021-01-12', 23, 28, 10, 5, 'tuesday  ', 3, 0, 'NONE') ,('2021-01-13', '1399-10-24', '1442-05-29', '2021-01-13', 24, 29, 10, 5, 'wednesday', 4, 0, 'NONE') ,('2021-01-14', '1399-10-25', '1442-05-30', '2021-01-14', 25, 30, 10, 5, 'thursday ', 5, 0, 'NONE') ,('2021-01-15', '1399-10-26', '1442-06-01', '2021-01-15', 26, 1, 10, 6, 'friday   ', 6, 0, 'NONE') ,('2021-01-16', '1399-10-27', '1442-06-02', '2021-01-16', 27, 2, 10, 6, 'saturday ', 7, 0, 'NONE') ,('2021-01-17', '1399-10-28', '1442-06-03', '2021-01-17', 28, 3, 10, 6, 'sunday   ', 1, 0, 'NONE') ,('2021-01-18', '1399-10-29', '1442-06-04', '2021-01-18', 29, 4, 10, 6, 'monday   ', 2, 0, 'NONE') ,('2021-01-19', '1399-10-30', '1442-06-05', '2021-01-19', 30, 5, 10, 6, 'tuesday  ', 3, 0, 'NONE') ,('2021-01-20', '1399-11-01', '1442-06-06', '2021-01-20', 1, 6, 11, 6, 'wednesday', 4, 0, 'NONE') ,('2021-01-21', '1399-11-02', '1442-06-07', '2021-01-21', 2, 7, 11, 6, 'thursday ', 5, 0, 'NONE') ,('2021-01-22', '1399-11-03', '1442-06-08', '2021-01-22', 3, 8, 11, 6, 'friday   ', 6, 0, 'NONE') ,('2021-01-23', '1399-11-04', '1442-06-09', '2021-01-23', 4, 9, 11, 6, 'saturday ', 7, 0, 'NONE') ,('2021-01-24', '1399-11-05', '1442-06-10', '2021-01-24', 5, 10, 11, 6, 'sunday   ', 1, 0, 'NONE') ,('2021-01-25', '1399-11-06', '1442-06-11', '2021-01-25', 6, 11, 11, 6, 'monday   ', 2, 0, 'NONE') ,('2021-01-26', '1399-11-07', '1442-06-12', '2021-01-26', 7, 12, 11, 6, 'tuesday  ', 3, 0, 'NONE') ,('2021-01-27', '1399-11-08', '1442-06-13', '2021-01-27', 8, 13, 11, 6, 'wednesday', 4, 0, 'NONE') ,('2021-01-28', '1399-11-09', '1442-06-14', '2021-01-28', 9, 14, 11, 6, 'thursday ', 5, 0, 'NONE') ,('2021-01-29', '1399-11-10', '1442-06-15', '2021-01-29', 10, 15, 11, 6, 'friday   ', 6, 0, 'NONE') ,('2021-01-30', '1399-11-11', '1442-06-16', '2021-01-30', 11, 16, 11, 6, 'saturday ', 7, 0, 'NONE') ,('2021-01-31', '1399-11-12', '1442-06-17', '2021-01-31', 12, 17, 11, 6, 'sunday   ', 1, 0, 'NONE') ,('2021-02-01', '1399-11-13', '1442-06-18', '2021-02-01', 13, 18, 11, 6, 'monday   ', 2, 0, 'NONE') ,('2021-02-02', '1399-11-14', '1442-06-19', '2021-02-02', 14, 19, 11, 6, 'tuesday  ', 3, 0, 'NONE') ,('2021-02-03', '1399-11-15', '1442-06-20', '2021-02-03', 15, 20, 11, 6, 'wednesday', 4, 0, 'NONE') ,('2021-02-04', '1399-11-16', '1442-06-21', '2021-02-04', 16, 21, 11, 6, 'thursday ', 5, 0, 'NONE') ,('2021-02-05', '1399-11-17', '1442-06-22', '2021-02-05', 17, 22, 11, 6, 'friday   ', 6, 0, 'NONE') ,('2021-02-06', '1399-11-18', '1442-06-23', '2021-02-06', 18, 23, 11, 6, 'saturday ', 7, 0, 'NONE') ,('2021-02-07', '1399-11-19', '1442-06-24', '2021-02-07', 19, 24, 11, 6, 'sunday   ', 1, 0, 'NONE') ,('2021-02-08', '1399-11-20', '1442-06-25', '2021-02-08', 20, 25, 11, 6, 'monday   ', 2, 0, 'NONE') ,('2021-02-09', '1399-11-21', '1442-06-26', '2021-02-09', 21, 26, 11, 6, 'tuesday  ', 3, 0, 'NONE') ,('2021-02-10', '1399-11-22', '1442-06-27', '2021-02-10', 22, 27, 11, 6, 'wednesday', 4, 0, 'NONE') ,('2021-02-11', '1399-11-23', '1442-06-28', '2021-02-11', 23, 28, 11, 6, 'thursday ', 5, 0, 'NONE') ,('2021-02-12', '1399-11-24', '1442-06-29', '2021-02-12', 24, 29, 11, 6, 'friday   ', 6, 0, 'NONE') ,('2021-02-13', '1399-11-25', '1442-07-01', '2021-02-13', 25, 1, 11, 7, 'saturday ', 7, 0, 'NONE') ,('2021-02-14', '1399-11-26', '1442-07-02', '2021-02-14', 26, 2, 11, 7, 'sunday   ', 1, 0, 'NONE') ,('2021-02-15', '1399-11-27', '1442-07-03', '2021-02-15', 27, 3, 11, 7, 'monday   ', 2, 0, 'NONE') ,('2021-02-16', '1399-11-28', '1442-07-04', '2021-02-16', 28, 4, 11, 7, 'tuesday  ', 3, 0, 'NONE') ,('2021-02-17', '1399-11-29', '1442-07-05', '2021-02-17', 29, 5, 11, 7, 'wednesday', 4, 0, 'NONE') ,('2021-02-18', '1399-11-30', '1442-07-06', '2021-02-18', 30, 6, 11, 7, 'thursday ', 5, 0, 'NONE') ,('2021-02-19', '1399-12-01', '1442-07-07', '2021-02-19', 1, 7, 12, 7, 'friday   ', 6, 0, 'NONE') ,('2021-02-20', '1399-12-02', '1442-07-08', '2021-02-20', 2, 8, 12, 7, 'saturday ', 7, 0, 'NONE') ,('2021-02-21', '1399-12-03', '1442-07-09', '2021-02-21', 3, 9, 12, 7, 'sunday   ', 1, 0, 'NONE') ,('2021-02-22', '1399-12-04', '1442-07-10', '2021-02-22', 4, 10, 12, 7, 'monday   ', 2, 0, 'NONE') ,('2021-02-23', '1399-12-05', '1442-07-11', '2021-02-23', 5, 11, 12, 7, 'tuesday  ', 3, 0, 'NONE') ,('2021-02-24', '1399-12-06', '1442-07-12', '2021-02-24', 6, 12, 12, 7, 'wednesday', 4, 0, 'NONE') ,('2021-02-25', '1399-12-07', '1442-07-13', '2021-02-25', 7, 13, 12, 7, 'thursday ', 5, 0, 'NONE') ,('2021-02-26', '1399-12-08', '1442-07-14', '2021-02-26', 8, 14, 12, 7, 'friday   ', 6, 0, 'NONE') ,('2021-02-27', '1399-12-09', '1442-07-15', '2021-02-27', 9, 15, 12, 7, 'saturday ', 7, 0, 'NONE') ,('2021-02-28', '1399-12-10', '1442-07-16', '2021-02-28', 10, 16, 12, 7, 'sunday   ', 1, 0, 'NONE') ,('2021-03-01', '1399-12-11', '1442-07-17', '2021-03-01', 11, 17, 12, 7, 'monday   ', 2, 0, 'NONE') ,('2021-03-02', '1399-12-12', '1442-07-18', '2021-03-02', 12, 18, 12, 7, 'tuesday  ', 3, 0, 'NONE') ,('2021-03-03', '1399-12-13', '1442-07-19', '2021-03-03', 13, 19, 12, 7, 'wednesday', 4, 0, 'NONE') ,('2021-03-04', '1399-12-14', '1442-07-20', '2021-03-04', 14, 20, 12, 7, 'thursday ', 5, 0, 'NONE') ,('2021-03-05', '1399-12-15', '1442-07-21', '2021-03-05', 15, 21, 12, 7, 'friday   ', 6, 0, 'NONE') ,('2021-03-06', '1399-12-16', '1442-07-22', '2021-03-06', 16, 22, 12, 7, 'saturday ', 7, 0, 'NONE') ,('2021-03-07', '1399-12-17', '1442-07-23', '2021-03-07', 17, 23, 12, 7, 'sunday   ', 1, 0, 'NONE') ,('2021-03-08', '1399-12-18', '1442-07-24', '2021-03-08', 18, 24, 12, 7, 'monday   ', 2, 0, 'NONE') ,('2021-03-09', '1399-12-19', '1442-07-25', '2021-03-09', 19, 25, 12, 7, 'tuesday  ', 3, 0, 'NONE') ,('2021-03-10', '1399-12-20', '1442-07-26', '2021-03-10', 20, 26, 12, 7, 'wednesday', 4, 0, 'NONE') ,('2021-03-11', '1399-12-21', '1442-07-27', '2021-03-11', 21, 27, 12, 7, 'thursday ', 5, 0, 'NONE') ,('2021-03-12', '1399-12-22', '1442-07-28', '2021-03-12', 22, 28, 12, 7, 'friday   ', 6, 0, 'NONE') ,('2021-03-13', '1399-12-23', '1442-07-29', '2021-03-13', 23, 29, 12, 7, 'saturday ', 7, 0, 'NONE') ,('2021-03-14', '1399-12-24', '1442-07-30', '2021-03-14', 24, 30, 12, 7, 'sunday   ', 1, 0, 'NONE') ,('2021-03-15', '1399-12-25', '1442-08-01', '2021-03-15', 25, 1, 12, 8, 'monday   ', 2, 0, 'NONE') ,('2021-03-16', '1399-12-26', '1442-08-02', '2021-03-16', 26, 2, 12, 8, 'tuesday  ', 3, 0, 'NONE') ,('2021-03-17', '1399-12-27', '1442-08-03', '2021-03-17', 27, 3, 12, 8, 'wednesday', 4, 0, 'NONE') ,('2021-03-18', '1399-12-28', '1442-08-04', '2021-03-18', 28, 4, 12, 8, 'thursday ', 5, 0, 'NONE') ,('2021-03-19', '1399-12-29', '1442-08-05', '2021-03-19', 29, 5, 12, 8, 'friday   ', 6, 0, 'NONE') ,('2021-03-20', '1399-12-30', '1442-08-06', '2021-03-20', 30, 6, 12, 8, 'saturday ', 7, 0, 'NONE') ,('2021-03-21', '1400-01-01', '1442-08-07', '2021-03-21', 1, 7, 1, 8, 'sunday   ', 1, 0, 'NONE') ,('2021-03-22', '1400-01-02', '1442-08-08', '2021-03-22', 2, 8, 1, 8, 'monday   ', 2, 0, 'NONE') ,('2021-03-23', '1400-01-03', '1442-08-09', '2021-03-23', 3, 9, 1, 8, 'tuesday  ', 3, 0, 'NONE') ,('2021-03-24', '1400-01-04', '1442-08-10', '2021-03-24', 4, 10, 1, 8, 'wednesday', 4, 0, 'NONE') ,('2021-03-25', '1400-01-05', '1442-08-11', '2021-03-25', 5, 11, 1, 8, 'thursday ', 5, 0, 'NONE') ,('2021-03-26', '1400-01-06', '1442-08-12', '2021-03-26', 6, 12, 1, 8, 'friday   ', 6, 0, 'NONE') ,('2021-03-27', '1400-01-07', '1442-08-13', '2021-03-27', 7, 13, 1, 8, 'saturday ', 7, 0, 'NONE') ,('2021-03-28', '1400-01-08', '1442-08-14', '2021-03-28', 8, 14, 1, 8, 'sunday   ', 1, 0, 'NONE') ,('2021-03-29', '1400-01-09', '1442-08-15', '2021-03-29', 9, 15, 1, 8, 'monday   ', 2, 0, 'NONE') ,('2021-03-30', '1400-01-10', '1442-08-16', '2021-03-30', 10, 16, 1, 8, 'tuesday  ', 3, 0, 'NONE') ,('2021-03-31', '1400-01-11', '1442-08-17', '2021-03-31', 11, 17, 1, 8, 'wednesday', 4, 0, 'NONE') ,('2021-04-01', '1400-01-12', '1442-08-18', '2021-04-01', 12, 18, 1, 8, 'thursday ', 5, 0, 'NONE') ,('2021-04-02', '1400-01-13', '1442-08-19', '2021-04-02', 13, 19, 1, 8, 'friday   ', 6, 0, 'NONE') ,('2021-04-03', '1400-01-14', '1442-08-20', '2021-04-03', 14, 20, 1, 8, 'saturday ', 7, 0, 'NONE') ,('2021-04-04', '1400-01-15', '1442-08-21', '2021-04-04', 15, 21, 1, 8, 'sunday   ', 1, 0, 'NONE') ,('2021-04-05', '1400-01-16', '1442-08-22', '2021-04-05', 16, 22, 1, 8, 'monday   ', 2, 0, 'NONE') ,('2021-04-06', '1400-01-17', '1442-08-23', '2021-04-06', 17, 23, 1, 8, 'tuesday  ', 3, 0, 'NONE') ,('2021-04-07', '1400-01-18', '1442-08-24', '2021-04-07', 18, 24, 1, 8, 'wednesday', 4, 0, 'NONE') ,('2021-04-08', '1400-01-19', '1442-08-25', '2021-04-08', 19, 25, 1, 8, 'thursday ', 5, 0, 'NONE') ,('2021-04-09', '1400-01-20', '1442-08-26', '2021-04-09', 20, 26, 1, 8, 'friday   ', 6, 0, 'NONE') ,('2021-04-10', '1400-01-21', '1442-08-27', '2021-04-10', 21, 27, 1, 8, 'saturday ', 7, 0, 'NONE') ,('2021-04-11', '1400-01-22', '1442-08-28', '2021-04-11', 22, 28, 1, 8, 'sunday   ', 1, 0, 'NONE') ,('2021-04-12', '1400-01-23', '1442-08-29', '2021-04-12', 23, 29, 1, 8, 'monday   ', 2, 0, 'NONE') ,('2021-04-13', '1400-01-24', '1442-09-01', '2021-04-13', 24, 1, 1, 9, 'tuesday  ', 3, 0, 'NONE') ,('2021-04-14', '1400-01-25', '1442-09-02', '2021-04-14', 25, 2, 1, 9, 'wednesday', 4, 0, 'NONE') ,('2021-04-15', '1400-01-26', '1442-09-03', '2021-04-15', 26, 3, 1, 9, 'thursday ', 5, 0, 'NONE') ,('2021-04-16', '1400-01-27', '1442-09-04', '2021-04-16', 27, 4, 1, 9, 'friday   ', 6, 0, 'NONE') ,('2021-04-17', '1400-01-28', '1442-09-05', '2021-04-17', 28, 5, 1, 9, 'saturday ', 7, 0, 'NONE') ,('2021-04-18', '1400-01-29', '1442-09-06', '2021-04-18', 29, 6, 1, 9, 'sunday   ', 1, 0, 'NONE') ,('2021-04-19', '1400-01-30', '1442-09-07', '2021-04-19', 30, 7, 1, 9, 'monday   ', 2, 0, 'NONE') ,('2021-04-20', '1400-01-31', '1442-09-08', '2021-04-20', 31, 8, 1, 9, 'tuesday  ', 3, 0, 'NONE') ,('2021-04-21', '1400-02-01', '1442-09-09', '2021-04-21', 1, 9, 2, 9, 'wednesday', 4, 0, 'NONE') ,('2021-04-22', '1400-02-02', '1442-09-10', '2021-04-22', 2, 10, 2, 9, 'thursday ', 5, 0, 'NONE') ,('2021-04-23', '1400-02-03', '1442-09-11', '2021-04-23', 3, 11, 2, 9, 'friday   ', 6, 0, 'NONE') ,('2021-04-24', '1400-02-04', '1442-09-12', '2021-04-24', 4, 12, 2, 9, 'saturday ', 7, 0, 'NONE') ,('2021-04-25', '1400-02-05', '1442-09-13', '2021-04-25', 5, 13, 2, 9, 'sunday   ', 1, 0, 'NONE') ,('2021-04-26', '1400-02-06', '1442-09-14', '2021-04-26', 6, 14, 2, 9, 'monday   ', 2, 0, 'NONE') ,('2021-04-27', '1400-02-07', '1442-09-15', '2021-04-27', 7, 15, 2, 9, 'tuesday  ', 3, 0, 'NONE') ,('2021-04-28', '1400-02-08', '1442-09-16', '2021-04-28', 8, 16, 2, 9, 'wednesday', 4, 0, 'NONE') ,('2021-04-29', '1400-02-09', '1442-09-17', '2021-04-29', 9, 17, 2, 9, 'thursday ', 5, 0, 'NONE') ,('2021-04-30', '1400-02-10', '1442-09-18', '2021-04-30', 10, 18, 2, 9, 'friday   ', 6, 0, 'NONE') ,('2021-05-01', '1400-02-11', '1442-09-19', '2021-05-01', 11, 19, 2, 9, 'saturday ', 7, 0, 'NONE') ,('2021-05-02', '1400-02-12', '1442-09-20', '2021-05-02', 12, 20, 2, 9, 'sunday   ', 1, 0, 'NONE') ,('2021-05-03', '1400-02-13', '1442-09-21', '2021-05-03', 13, 21, 2, 9, 'monday   ', 2, 0, 'NONE') ,('2021-05-04', '1400-02-14', '1442-09-22', '2021-05-04', 14, 22, 2, 9, 'tuesday  ', 3, 0, 'NONE') ,('2021-05-05', '1400-02-15', '1442-09-23', '2021-05-05', 15, 23, 2, 9, 'wednesday', 4, 0, 'NONE') ,('2021-05-06', '1400-02-16', '1442-09-24', '2021-05-06', 16, 24, 2, 9, 'thursday ', 5, 0, 'NONE') ,('2021-05-07', '1400-02-17', '1442-09-25', '2021-05-07', 17, 25, 2, 9, 'friday   ', 6, 0, 'NONE') ,('2021-05-08', '1400-02-18', '1442-09-26', '2021-05-08', 18, 26, 2, 9, 'saturday ', 7, 0, 'NONE') ,('2021-05-09', '1400-02-19', '1442-09-27', '2021-05-09', 19, 27, 2, 9, 'sunday   ', 1, 0, 'NONE') ,('2021-05-10', '1400-02-20', '1442-09-28', '2021-05-10', 20, 28, 2, 9, 'monday   ', 2, 0, 'NONE') ,('2021-05-11', '1400-02-21', '1442-09-29', '2021-05-11', 21, 29, 2, 9, 'tuesday  ', 3, 0, 'NONE') ,('2021-05-12', '1400-02-22', '1442-09-30', '2021-05-12', 22, 30, 2, 9, 'wednesday', 4, 0, 'NONE') ,('2021-05-13', '1400-02-23', '1442-10-01', '2021-05-13', 23, 1, 2, 10, 'thursday ', 5, 0, 'NONE') ,('2021-05-14', '1400-02-24', '1442-10-02', '2021-05-14', 24, 2, 2, 10, 'friday   ', 6, 0, 'NONE') ,('2021-05-15', '1400-02-25', '1442-10-03', '2021-05-15', 25, 3, 2, 10, 'saturday ', 7, 0, 'NONE') ,('2021-05-16', '1400-02-26', '1442-10-04', '2021-05-16', 26, 4, 2, 10, 'sunday   ', 1, 0, 'NONE') ,('2021-05-17', '1400-02-27', '1442-10-05', '2021-05-17', 27, 5, 2, 10, 'monday   ', 2, 0, 'NONE') ,('2021-05-18', '1400-02-28', '1442-10-06', '2021-05-18', 28, 6, 2, 10, 'tuesday  ', 3, 0, 'NONE') ,('2021-05-19', '1400-02-29', '1442-10-07', '2021-05-19', 29, 7, 2, 10, 'wednesday', 4, 0, 'NONE') ,('2021-05-20', '1400-02-30', '1442-10-08', '2021-05-20', 30, 8, 2, 10, 'thursday ', 5, 0, 'NONE') ,('2021-05-21', '1400-02-31', '1442-10-09', '2021-05-21', 31, 9, 2, 10, 'friday   ', 6, 0, 'NONE') ,('2021-05-22', '1400-03-01', '1442-10-10', '2021-05-22', 1, 10, 3, 10, 'saturday ', 7, 0, 'NONE') ,('2021-05-23', '1400-03-02', '1442-10-11', '2021-05-23', 2, 11, 3, 10, 'sunday   ', 1, 0, 'NONE') ,('2021-05-24', '1400-03-03', '1442-10-12', '2021-05-24', 3, 12, 3, 10, 'monday   ', 2, 0, 'NONE') ,('2021-05-25', '1400-03-04', '1442-10-13', '2021-05-25', 4, 13, 3, 10, 'tuesday  ', 3, 0, 'NONE') ,('2021-05-26', '1400-03-05', '1442-10-14', '2021-05-26', 5, 14, 3, 10, 'wednesday', 4, 0, 'NONE') ,('2021-05-27', '1400-03-06', '1442-10-15', '2021-05-27', 6, 15, 3, 10, 'thursday ', 5, 0, 'NONE') ,('2021-05-28', '1400-03-07', '1442-10-16', '2021-05-28', 7, 16, 3, 10, 'friday   ', 6, 0, 'NONE') ,('2021-05-29', '1400-03-08', '1442-10-17', '2021-05-29', 8, 17, 3, 10, 'saturday ', 7, 0, 'NONE') ,('2021-05-30', '1400-03-09', '1442-10-18', '2021-05-30', 9, 18, 3, 10, 'sunday   ', 1, 0, 'NONE') ,('2021-05-31', '1400-03-10', '1442-10-19', '2021-05-31', 10, 19, 3, 10, 'monday   ', 2, 0, 'NONE') ,('2021-06-01', '1400-03-11', '1442-10-20', '2021-06-01', 11, 20, 3, 10, 'tuesday  ', 3, 0, 'NONE') ,('2021-06-02', '1400-03-12', '1442-10-21', '2021-06-02', 12, 21, 3, 10, 'wednesday', 4, 0, 'NONE') ,('2021-06-03', '1400-03-13', '1442-10-22', '2021-06-03', 13, 22, 3, 10, 'thursday ', 5, 0, 'NONE') ,('2021-06-04', '1400-03-14', '1442-10-23', '2021-06-04', 14, 23, 3, 10, 'friday   ', 6, 0, 'NONE') ,('2021-06-05', '1400-03-15', '1442-10-24', '2021-06-05', 15, 24, 3, 10, 'saturday ', 7, 0, 'NONE') ,('2021-06-06', '1400-03-16', '1442-10-25', '2021-06-06', 16, 25, 3, 10, 'sunday   ', 1, 0, 'NONE') ,('2021-06-07', '1400-03-17', '1442-10-26', '2021-06-07', 17, 26, 3, 10, 'monday   ', 2, 0, 'NONE') ,('2021-06-08', '1400-03-18', '1442-10-27', '2021-06-08', 18, 27, 3, 10, 'tuesday  ', 3, 0, 'NONE') ,('2021-06-09', '1400-03-19', '1442-10-28', '2021-06-09', 19, 28, 3, 10, 'wednesday', 4, 0, 'NONE') ,('2021-06-10', '1400-03-20', '1442-10-29', '2021-06-10', 20, 29, 3, 10, 'thursday ', 5, 0, 'NONE') ,('2021-06-11', '1400-03-21', '1442-11-01', '2021-06-11', 21, 1, 3, 11, 'friday   ', 6, 0, 'NONE') ,('2021-06-12', '1400-03-22', '1442-11-02', '2021-06-12', 22, 2, 3, 11, 'saturday ', 7, 0, 'NONE') ,('2021-06-13', '1400-03-23', '1442-11-03', '2021-06-13', 23, 3, 3, 11, 'sunday   ', 1, 0, 'NONE') ,('2021-06-14', '1400-03-24', '1442-11-04', '2021-06-14', 24, 4, 3, 11, 'monday   ', 2, 0, 'NONE') ,('2021-06-15', '1400-03-25', '1442-11-05', '2021-06-15', 25, 5, 3, 11, 'tuesday  ', 3, 0, 'NONE') ,('2021-06-16', '1400-03-26', '1442-11-06', '2021-06-16', 26, 6, 3, 11, 'wednesday', 4, 0, 'NONE') ,('2021-06-17', '1400-03-27', '1442-11-07', '2021-06-17', 27, 7, 3, 11, 'thursday ', 5, 0, 'NONE') ,('2021-06-18', '1400-03-28', '1442-11-08', '2021-06-18', 28, 8, 3, 11, 'friday   ', 6, 0, 'NONE') ,('2021-06-19', '1400-03-29', '1442-11-09', '2021-06-19', 29, 9, 3, 11, 'saturday ', 7, 0, 'NONE') ,('2021-06-20', '1400-03-30', '1442-11-10', '2021-06-20', 30, 10, 3, 11, 'sunday   ', 1, 0, 'NONE') ,('2021-06-21', '1400-03-31', '1442-11-11', '2021-06-21', 31, 11, 3, 11, 'monday   ', 2, 0, 'NONE') ,('2021-06-22', '1400-04-01', '1442-11-12', '2021-06-22', 1, 12, 4, 11, 'tuesday  ', 3, 0, 'NONE') ,('2021-06-23', '1400-04-02', '1442-11-13', '2021-06-23', 2, 13, 4, 11, 'wednesday', 4, 0, 'NONE') ,('2021-06-24', '1400-04-03', '1442-11-14', '2021-06-24', 3, 14, 4, 11, 'thursday ', 5, 0, 'NONE') ,('2021-06-25', '1400-04-04', '1442-11-15', '2021-06-25', 4, 15, 4, 11, 'friday   ', 6, 0, 'NONE') ,('2021-06-26', '1400-04-05', '1442-11-16', '2021-06-26', 5, 16, 4, 11, 'saturday ', 7, 0, 'NONE') ,('2021-06-27', '1400-04-06', '1442-11-17', '2021-06-27', 6, 17, 4, 11, 'sunday   ', 1, 0, 'NONE') ,('2021-06-28', '1400-04-07', '1442-11-18', '2021-06-28', 7, 18, 4, 11, 'monday   ', 2, 0, 'NONE') ,('2021-06-29', '1400-04-08', '1442-11-19', '2021-06-29', 8, 19, 4, 11, 'tuesday  ', 3, 0, 'NONE') ,('2021-06-30', '1400-04-09', '1442-11-20', '2021-06-30', 9, 20, 4, 11, 'wednesday', 4, 0, 'NONE') ,('2021-07-01', '1400-04-10', '1442-11-21', '2021-07-01', 10, 21, 4, 11, 'thursday ', 5, 0, 'NONE') ,('2021-07-02', '1400-04-11', '1442-11-22', '2021-07-02', 11, 22, 4, 11, 'friday   ', 6, 0, 'NONE') ,('2021-07-03', '1400-04-12', '1442-11-23', '2021-07-03', 12, 23, 4, 11, 'saturday ', 7, 0, 'NONE') ,('2021-07-04', '1400-04-13', '1442-11-24', '2021-07-04', 13, 24, 4, 11, 'sunday   ', 1, 0, 'NONE') ,('2021-07-05', '1400-04-14', '1442-11-25', '2021-07-05', 14, 25, 4, 11, 'monday   ', 2, 0, 'NONE') ,('2021-07-06', '1400-04-15', '1442-11-26', '2021-07-06', 15, 26, 4, 11, 'tuesday  ', 3, 0, 'NONE') ,('2021-07-07', '1400-04-16', '1442-11-27', '2021-07-07', 16, 27, 4, 11, 'wednesday', 4, 0, 'NONE') ,('2021-07-08', '1400-04-17', '1442-11-28', '2021-07-08', 17, 28, 4, 11, 'thursday ', 5, 0, 'NONE') ,('2021-07-09', '1400-04-18', '1442-11-29', '2021-07-09', 18, 29, 4, 11, 'friday   ', 6, 0, 'NONE') ,('2021-07-10', '1400-04-19', '1442-11-30', '2021-07-10', 19, 30, 4, 11, 'saturday ', 7, 0, 'NONE') ,('2021-07-11', '1400-04-20', '1442-12-01', '2021-07-11', 20, 1, 4, 12, 'sunday   ', 1, 0, 'NONE') ,('2021-07-12', '1400-04-21', '1442-12-02', '2021-07-12', 21, 2, 4, 12, 'monday   ', 2, 0, 'NONE') ,('2021-07-13', '1400-04-22', '1442-12-03', '2021-07-13', 22, 3, 4, 12, 'tuesday  ', 3, 0, 'NONE') ,('2021-07-14', '1400-04-23', '1442-12-04', '2021-07-14', 23, 4, 4, 12, 'wednesday', 4, 0, 'NONE') ,('2021-07-15', '1400-04-24', '1442-12-05', '2021-07-15', 24, 5, 4, 12, 'thursday ', 5, 0, 'NONE') ,('2021-07-16', '1400-04-25', '1442-12-06', '2021-07-16', 25, 6, 4, 12, 'friday   ', 6, 0, 'NONE') ,('2021-07-17', '1400-04-26', '1442-12-07', '2021-07-17', 26, 7, 4, 12, 'saturday ', 7, 0, 'NONE') ,('2021-07-18', '1400-04-27', '1442-12-08', '2021-07-18', 27, 8, 4, 12, 'sunday   ', 1, 0, 'NONE') ,('2021-07-19', '1400-04-28', '1442-12-09', '2021-07-19', 28, 9, 4, 12, 'monday   ', 2, 0, 'NONE') ,('2021-07-20', '1400-04-29', '1442-12-10', '2021-07-20', 29, 10, 4, 12, 'tuesday  ', 3, 0, 'NONE') ,('2021-07-21', '1400-04-30', '1442-12-11', '2021-07-21', 30, 11, 4, 12, 'wednesday', 4, 0, 'NONE') ,('2021-07-22', '1400-04-31', '1442-12-12', '2021-07-22', 31, 12, 4, 12, 'thursday ', 5, 0, 'NONE') ,('2021-07-23', '1400-05-01', '1442-12-13', '2021-07-23', 1, 13, 5, 12, 'friday   ', 6, 0, 'NONE') ,('2021-07-24', '1400-05-02', '1442-12-14', '2021-07-24', 2, 14, 5, 12, 'saturday ', 7, 0, 'NONE') ,('2021-07-25', '1400-05-03', '1442-12-15', '2021-07-25', 3, 15, 5, 12, 'sunday   ', 1, 0, 'NONE') ,('2021-07-26', '1400-05-04', '1442-12-16', '2021-07-26', 4, 16, 5, 12, 'monday   ', 2, 0, 'NONE') ,('2021-07-27', '1400-05-05', '1442-12-17', '2021-07-27', 5, 17, 5, 12, 'tuesday  ', 3, 0, 'NONE') ,('2021-07-28', '1400-05-06', '1442-12-18', '2021-07-28', 6, 18, 5, 12, 'wednesday', 4, 0, 'NONE') ,('2021-07-29', '1400-05-07', '1442-12-19', '2021-07-29', 7, 19, 5, 12, 'thursday ', 5, 0, 'NONE') ,('2021-07-30', '1400-05-08', '1442-12-20', '2021-07-30', 8, 20, 5, 12, 'friday   ', 6, 0, 'NONE') ,('2021-07-31', '1400-05-09', '1442-12-21', '2021-07-31', 9, 21, 5, 12, 'saturday ', 7, 0, 'NONE') ,('2021-08-01', '1400-05-10', '1442-12-22', '2021-08-01', 10, 22, 5, 12, 'sunday   ', 1, 0, 'NONE') ,('2021-08-02', '1400-05-11', '1442-12-23', '2021-08-02', 11, 23, 5, 12, 'monday   ', 2, 0, 'NONE') ,('2021-08-03', '1400-05-12', '1442-12-24', '2021-08-03', 12, 24, 5, 12, 'tuesday  ', 3, 0, 'NONE') ,('2021-08-04', '1400-05-13', '1442-12-25', '2021-08-04', 13, 25, 5, 12, 'wednesday', 4, 0, 'NONE') ,('2021-08-05', '1400-05-14', '1442-12-26', '2021-08-05', 14, 26, 5, 12, 'thursday ', 5, 0, 'NONE') ,('2021-08-06', '1400-05-15', '1442-12-27', '2021-08-06', 15, 27, 5, 12, 'friday   ', 6, 0, 'NONE') ,('2021-08-07', '1400-05-16', '1442-12-28', '2021-08-07', 16, 28, 5, 12, 'saturday ', 7, 0, 'NONE') ,('2021-08-08', '1400-05-17', '1442-12-29', '2021-08-08', 17, 29, 5, 12, 'sunday   ', 1, 0, 'NONE') ,('2021-08-09', '1400-05-18', '1442-12-30', '2021-08-09', 18, 30, 5, 12, 'monday   ', 2, 0, 'NONE') ,('2021-08-10', '1400-05-19', '1443-01-01', '2021-08-10', 19, 1, 5, 1, 'tuesday  ', 3, 0, 'NONE') ,('2021-08-11', '1400-05-20', '1443-01-02', '2021-08-11', 20, 2, 5, 1, 'wednesday', 4, 0, 'NONE') ,('2021-08-12', '1400-05-21', '1443-01-03', '2021-08-12', 21, 3, 5, 1, 'thursday ', 5, 0, 'NONE') ,('2021-08-13', '1400-05-22', '1443-01-04', '2021-08-13', 22, 4, 5, 1, 'friday   ', 6, 0, 'NONE') ,('2021-08-14', '1400-05-23', '1443-01-05', '2021-08-14', 23, 5, 5, 1, 'saturday ', 7, 0, 'NONE') ,('2021-08-15', '1400-05-24', '1443-01-06', '2021-08-15', 24, 6, 5, 1, 'sunday   ', 1, 0, 'NONE') ,('2021-08-16', '1400-05-25', '1443-01-07', '2021-08-16', 25, 7, 5, 1, 'monday   ', 2, 0, 'NONE') ,('2021-08-17', '1400-05-26', '1443-01-08', '2021-08-17', 26, 8, 5, 1, 'tuesday  ', 3, 0, 'NONE') ,('2021-08-18', '1400-05-27', '1443-01-09', '2021-08-18', 27, 9, 5, 1, 'wednesday', 4, 0, 'NONE') ,('2021-08-19', '1400-05-28', '1443-01-10', '2021-08-19', 28, 10, 5, 1, 'thursday ', 5, 0, 'NONE') ,('2021-08-20', '1400-05-29', '1443-01-11', '2021-08-20', 29, 11, 5, 1, 'friday   ', 6, 0, 'NONE') ,('2021-08-21', '1400-05-30', '1443-01-12', '2021-08-21', 30, 12, 5, 1, 'saturday ', 7, 0, 'NONE') ,('2021-08-22', '1400-05-31', '1443-01-13', '2021-08-22', 31, 13, 5, 1, 'sunday   ', 1, 0, 'NONE') ,('2021-08-23', '1400-06-01', '1443-01-14', '2021-08-23', 1, 14, 6, 1, 'monday   ', 2, 0, 'NONE') ,('2021-08-24', '1400-06-02', '1443-01-15', '2021-08-24', 2, 15, 6, 1, 'tuesday  ', 3, 0, 'NONE') ,('2021-08-25', '1400-06-03', '1443-01-16', '2021-08-25', 3, 16, 6, 1, 'wednesday', 4, 0, 'NONE') ,('2021-08-26', '1400-06-04', '1443-01-17', '2021-08-26', 4, 17, 6, 1, 'thursday ', 5, 0, 'NONE') ,('2021-08-27', '1400-06-05', '1443-01-18', '2021-08-27', 5, 18, 6, 1, 'friday   ', 6, 0, 'NONE') ,('2021-08-28', '1400-06-06', '1443-01-19', '2021-08-28', 6, 19, 6, 1, 'saturday ', 7, 0, 'NONE') ,('2021-08-29', '1400-06-07', '1443-01-20', '2021-08-29', 7, 20, 6, 1, 'sunday   ', 1, 0, 'NONE') ,('2021-08-30', '1400-06-08', '1443-01-21', '2021-08-30', 8, 21, 6, 1, 'monday   ', 2, 0, 'NONE') ,('2021-08-31', '1400-06-09', '1443-01-22', '2021-08-31', 9, 22, 6, 1, 'tuesday  ', 3, 0, 'NONE') ,('2021-09-01', '1400-06-10', '1443-01-23', '2021-09-01', 10, 23, 6, 1, 'wednesday', 4, 0, 'NONE') ,('2021-09-02', '1400-06-11', '1443-01-24', '2021-09-02', 11, 24, 6, 1, 'thursday ', 5, 0, 'NONE') ,('2021-09-03', '1400-06-12', '1443-01-25', '2021-09-03', 12, 25, 6, 1, 'friday   ', 6, 0, 'NONE') ,('2021-09-04', '1400-06-13', '1443-01-26', '2021-09-04', 13, 26, 6, 1, 'saturday ', 7, 0, 'NONE') ,('2021-09-05', '1400-06-14', '1443-01-27', '2021-09-05', 14, 27, 6, 1, 'sunday   ', 1, 0, 'NONE') ,('2021-09-06', '1400-06-15', '1443-01-28', '2021-09-06', 15, 28, 6, 1, 'monday   ', 2, 0, 'NONE') ,('2021-09-07', '1400-06-16', '1443-01-29', '2021-09-07', 16, 29, 6, 1, 'tuesday  ', 3, 0, 'NONE') ,('2021-09-08', '1400-06-17', '1443-01-30', '2021-09-08', 17, 30, 6, 1, 'wednesday', 4, 0, 'NONE') ,('2021-09-09', '1400-06-18', '1443-02-01', '2021-09-09', 18, 1, 6, 2, 'thursday ', 5, 0, 'NONE') ,('2021-09-10', '1400-06-19', '1443-02-02', '2021-09-10', 19, 2, 6, 2, 'friday   ', 6, 0, 'NONE') ,('2021-09-11', '1400-06-20', '1443-02-03', '2021-09-11', 20, 3, 6, 2, 'saturday ', 7, 0, 'NONE') ,('2021-09-12', '1400-06-21', '1443-02-04', '2021-09-12', 21, 4, 6, 2, 'sunday   ', 1, 0, 'NONE') ,('2021-09-13', '1400-06-22', '1443-02-05', '2021-09-13', 22, 5, 6, 2, 'monday   ', 2, 0, 'NONE') ,('2021-09-14', '1400-06-23', '1443-02-06', '2021-09-14', 23, 6, 6, 2, 'tuesday  ', 3, 0, 'NONE') ,('2021-09-15', '1400-06-24', '1443-02-07', '2021-09-15', 24, 7, 6, 2, 'wednesday', 4, 0, 'NONE') ,('2021-09-16', '1400-06-25', '1443-02-08', '2021-09-16', 25, 8, 6, 2, 'thursday ', 5, 0, 'NONE') ,('2021-09-17', '1400-06-26', '1443-02-09', '2021-09-17', 26, 9, 6, 2, 'friday   ', 6, 0, 'NONE') ,('2021-09-18', '1400-06-27', '1443-02-10', '2021-09-18', 27, 10, 6, 2, 'saturday ', 7, 0, 'NONE') ,('2021-09-19', '1400-06-28', '1443-02-11', '2021-09-19', 28, 11, 6, 2, 'sunday   ', 1, 0, 'NONE') ,('2021-09-20', '1400-06-29', '1443-02-12', '2021-09-20', 29, 12, 6, 2, 'monday   ', 2, 0, 'NONE') ,('2021-09-21', '1400-06-30', '1443-02-13', '2021-09-21', 30, 13, 6, 2, 'tuesday  ', 3, 0, 'NONE') ,('2021-09-22', '1400-06-31', '1443-02-14', '2021-09-22', 31, 14, 6, 2, 'wednesday', 4, 0, 'NONE') ,('2021-09-23', '1400-07-01', '1443-02-15', '2021-09-23', 1, 15, 7, 2, 'thursday ', 5, 0, 'NONE') ,('2021-09-24', '1400-07-02', '1443-02-16', '2021-09-24', 2, 16, 7, 2, 'friday   ', 6, 0, 'NONE') ,('2021-09-25', '1400-07-03', '1443-02-17', '2021-09-25', 3, 17, 7, 2, 'saturday ', 7, 0, 'NONE') ,('2021-09-26', '1400-07-04', '1443-02-18', '2021-09-26', 4, 18, 7, 2, 'sunday   ', 1, 0, 'NONE') ,('2021-09-27', '1400-07-05', '1443-02-19', '2021-09-27', 5, 19, 7, 2, 'monday   ', 2, 0, 'NONE') ,('2021-09-28', '1400-07-06', '1443-02-20', '2021-09-28', 6, 20, 7, 2, 'tuesday  ', 3, 0, 'NONE') ,('2021-09-29', '1400-07-07', '1443-02-21', '2021-09-29', 7, 21, 7, 2, 'wednesday', 4, 0, 'NONE') ,('2021-09-30', '1400-07-08', '1443-02-22', '2021-09-30', 8, 22, 7, 2, 'thursday ', 5, 0, 'NONE') ,('2021-10-01', '1400-07-09', '1443-02-23', '2021-10-01', 9, 23, 7, 2, 'friday   ', 6, 0, 'NONE') ,('2021-10-02', '1400-07-10', '1443-02-24', '2021-10-02', 10, 24, 7, 2, 'saturday ', 7, 0, 'NONE') ,('2021-10-03', '1400-07-11', '1443-02-25', '2021-10-03', 11, 25, 7, 2, 'sunday   ', 1, 0, 'NONE') ,('2021-10-04', '1400-07-12', '1443-02-26', '2021-10-04', 12, 26, 7, 2, 'monday   ', 2, 0, 'NONE') ,('2021-10-05', '1400-07-13', '1443-02-27', '2021-10-05', 13, 27, 7, 2, 'tuesday  ', 3, 0, 'NONE') ,('2021-10-06', '1400-07-14', '1443-02-28', '2021-10-06', 14, 28, 7, 2, 'wednesday', 4, 0, 'NONE') ,('2021-10-07', '1400-07-15', '1443-02-29', '2021-10-07', 15, 29, 7, 2, 'thursday ', 5, 0, 'NONE') ,('2021-10-08', '1400-07-16', '1443-03-01', '2021-10-08', 16, 1, 7, 3, 'friday   ', 6, 0, 'NONE') ,('2021-10-09', '1400-07-17', '1443-03-02', '2021-10-09', 17, 2, 7, 3, 'saturday ', 7, 0, 'NONE') ,('2021-10-10', '1400-07-18', '1443-03-03', '2021-10-10', 18, 3, 7, 3, 'sunday   ', 1, 0, 'NONE') ,('2021-10-11', '1400-07-19', '1443-03-04', '2021-10-11', 19, 4, 7, 3, 'monday   ', 2, 0, 'NONE') ,('2021-10-12', '1400-07-20', '1443-03-05', '2021-10-12', 20, 5, 7, 3, 'tuesday  ', 3, 0, 'NONE') ,('2021-10-13', '1400-07-21', '1443-03-06', '2021-10-13', 21, 6, 7, 3, 'wednesday', 4, 0, 'NONE') ,('2021-10-14', '1400-07-22', '1443-03-07', '2021-10-14', 22, 7, 7, 3, 'thursday ', 5, 0, 'NONE') ,('2021-10-15', '1400-07-23', '1443-03-08', '2021-10-15', 23, 8, 7, 3, 'friday   ', 6, 0, 'NONE') ,('2021-10-16', '1400-07-24', '1443-03-09', '2021-10-16', 24, 9, 7, 3, 'saturday ', 7, 0, 'NONE') ,('2021-10-17', '1400-07-25', '1443-03-10', '2021-10-17', 25, 10, 7, 3, 'sunday   ', 1, 0, 'NONE') ,('2021-10-18', '1400-07-26', '1443-03-11', '2021-10-18', 26, 11, 7, 3, 'monday   ', 2, 0, 'NONE') ,('2021-10-19', '1400-07-27', '1443-03-12', '2021-10-19', 27, 12, 7, 3, 'tuesday  ', 3, 0, 'NONE') ,('2021-10-20', '1400-07-28', '1443-03-13', '2021-10-20', 28, 13, 7, 3, 'wednesday', 4, 0, 'NONE') ,('2021-10-21', '1400-07-29', '1443-03-14', '2021-10-21', 29, 14, 7, 3, 'thursday ', 5, 0, 'NONE') ,('2021-10-22', '1400-07-30', '1443-03-15', '2021-10-22', 30, 15, 7, 3, 'friday   ', 6, 0, 'NONE') ,('2021-10-23', '1400-08-01', '1443-03-16', '2021-10-23', 1, 16, 8, 3, 'saturday ', 7, 0, 'NONE') ,('2021-10-24', '1400-08-02', '1443-03-17', '2021-10-24', 2, 17, 8, 3, 'sunday   ', 1, 0, 'NONE') ,('2021-10-25', '1400-08-03', '1443-03-18', '2021-10-25', 3, 18, 8, 3, 'monday   ', 2, 0, 'NONE') ,('2021-10-26', '1400-08-04', '1443-03-19', '2021-10-26', 4, 19, 8, 3, 'tuesday  ', 3, 0, 'NONE') ,('2021-10-27', '1400-08-05', '1443-03-20', '2021-10-27', 5, 20, 8, 3, 'wednesday', 4, 0, 'NONE') ,('2021-10-28', '1400-08-06', '1443-03-21', '2021-10-28', 6, 21, 8, 3, 'thursday ', 5, 0, 'NONE') ,('2021-10-29', '1400-08-07', '1443-03-22', '2021-10-29', 7, 22, 8, 3, 'friday   ', 6, 0, 'NONE') ,('2021-10-30', '1400-08-08', '1443-03-23', '2021-10-30', 8, 23, 8, 3, 'saturday ', 7, 0, 'NONE') ,('2021-10-31', '1400-08-09', '1443-03-24', '2021-10-31', 9, 24, 8, 3, 'sunday   ', 1, 0, 'NONE') ,('2021-11-01', '1400-08-10', '1443-03-25', '2021-11-01', 10, 25, 8, 3, 'monday   ', 2, 0, 'NONE') ,('2021-11-02', '1400-08-11', '1443-03-26', '2021-11-02', 11, 26, 8, 3, 'tuesday  ', 3, 0, 'NONE') ,('2021-11-03', '1400-08-12', '1443-03-27', '2021-11-03', 12, 27, 8, 3, 'wednesday', 4, 0, 'NONE') ,('2021-11-04', '1400-08-13', '1443-03-28', '2021-11-04', 13, 28, 8, 3, 'thursday ', 5, 0, 'NONE') ,('2021-11-05', '1400-08-14', '1443-03-29', '2021-11-05', 14, 29, 8, 3, 'friday   ', 6, 0, 'NONE') ,('2021-11-06', '1400-08-15', '1443-03-30', '2021-11-06', 15, 30, 8, 3, 'saturday ', 7, 0, 'NONE') ,('2021-11-07', '1400-08-16', '1443-04-01', '2021-11-07', 16, 1, 8, 4, 'sunday   ', 1, 0, 'NONE') ,('2021-11-08', '1400-08-17', '1443-04-02', '2021-11-08', 17, 2, 8, 4, 'monday   ', 2, 0, 'NONE') ,('2021-11-09', '1400-08-18', '1443-04-03', '2021-11-09', 18, 3, 8, 4, 'tuesday  ', 3, 0, 'NONE') ,('2021-11-10', '1400-08-19', '1443-04-04', '2021-11-10', 19, 4, 8, 4, 'wednesday', 4, 0, 'NONE') ,('2021-11-11', '1400-08-20', '1443-04-05', '2021-11-11', 20, 5, 8, 4, 'thursday ', 5, 0, 'NONE') ,('2021-11-12', '1400-08-21', '1443-04-06', '2021-11-12', 21, 6, 8, 4, 'friday   ', 6, 0, 'NONE') ,('2021-11-13', '1400-08-22', '1443-04-07', '2021-11-13', 22, 7, 8, 4, 'saturday ', 7, 0, 'NONE') ,('2021-11-14', '1400-08-23', '1443-04-08', '2021-11-14', 23, 8, 8, 4, 'sunday   ', 1, 0, 'NONE') ,('2021-11-15', '1400-08-24', '1443-04-09', '2021-11-15', 24, 9, 8, 4, 'monday   ', 2, 0, 'NONE') ,('2021-11-16', '1400-08-25', '1443-04-10', '2021-11-16', 25, 10, 8, 4, 'tuesday  ', 3, 0, 'NONE') ,('2021-11-17', '1400-08-26', '1443-04-11', '2021-11-17', 26, 11, 8, 4, 'wednesday', 4, 0, 'NONE') ,('2021-11-18', '1400-08-27', '1443-04-12', '2021-11-18', 27, 12, 8, 4, 'thursday ', 5, 0, 'NONE') ,('2021-11-19', '1400-08-28', '1443-04-13', '2021-11-19', 28, 13, 8, 4, 'friday   ', 6, 0, 'NONE') ,('2021-11-20', '1400-08-29', '1443-04-14', '2021-11-20', 29, 14, 8, 4, 'saturday ', 7, 0, 'NONE') ,('2021-11-21', '1400-08-30', '1443-04-15', '2021-11-21', 30, 15, 8, 4, 'sunday   ', 1, 0, 'NONE') ,('2021-11-22', '1400-09-01', '1443-04-16', '2021-11-22', 1, 16, 9, 4, 'monday   ', 2, 0, 'NONE') ,('2021-11-23', '1400-09-02', '1443-04-17', '2021-11-23', 2, 17, 9, 4, 'tuesday  ', 3, 0, 'NONE') ,('2021-11-24', '1400-09-03', '1443-04-18', '2021-11-24', 3, 18, 9, 4, 'wednesday', 4, 0, 'NONE') ,('2021-11-25', '1400-09-04', '1443-04-19', '2021-11-25', 4, 19, 9, 4, 'thursday ', 5, 0, 'NONE') ,('2021-11-26', '1400-09-05', '1443-04-20', '2021-11-26', 5, 20, 9, 4, 'friday   ', 6, 0, 'NONE') ,('2021-11-27', '1400-09-06', '1443-04-21', '2021-11-27', 6, 21, 9, 4, 'saturday ', 7, 0, 'NONE') ,('2021-11-28', '1400-09-07', '1443-04-22', '2021-11-28', 7, 22, 9, 4, 'sunday   ', 1, 0, 'NONE') ,('2021-11-29', '1400-09-08', '1443-04-23', '2021-11-29', 8, 23, 9, 4, 'monday   ', 2, 0, 'NONE') ,('2021-11-30', '1400-09-09', '1443-04-24', '2021-11-30', 9, 24, 9, 4, 'tuesday  ', 3, 0, 'NONE') ,('2021-12-01', '1400-09-10', '1443-04-25', '2021-12-01', 10, 25, 9, 4, 'wednesday', 4, 0, 'NONE') ,('2021-12-02', '1400-09-11', '1443-04-26', '2021-12-02', 11, 26, 9, 4, 'thursday ', 5, 0, 'NONE') ,('2021-12-03', '1400-09-12', '1443-04-27', '2021-12-03', 12, 27, 9, 4, 'friday   ', 6, 0, 'NONE') ,('2021-12-04', '1400-09-13', '1443-04-28', '2021-12-04', 13, 28, 9, 4, 'saturday ', 7, 0, 'NONE') ,('2021-12-05', '1400-09-14', '1443-04-29', '2021-12-05', 14, 29, 9, 4, 'sunday   ', 1, 0, 'NONE') ,('2021-12-06', '1400-09-15', '1443-05-01', '2021-12-06', 15, 1, 9, 5, 'monday   ', 2, 0, 'NONE') ,('2021-12-07', '1400-09-16', '1443-05-02', '2021-12-07', 16, 2, 9, 5, 'tuesday  ', 3, 0, 'NONE') ,('2021-12-08', '1400-09-17', '1443-05-03', '2021-12-08', 17, 3, 9, 5, 'wednesday', 4, 0, 'NONE') ,('2021-12-09', '1400-09-18', '1443-05-04', '2021-12-09', 18, 4, 9, 5, 'thursday ', 5, 0, 'NONE') ,('2021-12-10', '1400-09-19', '1443-05-05', '2021-12-10', 19, 5, 9, 5, 'friday   ', 6, 0, 'NONE') ,('2021-12-11', '1400-09-20', '1443-05-06', '2021-12-11', 20, 6, 9, 5, 'saturday ', 7, 0, 'NONE') ,('2021-12-12', '1400-09-21', '1443-05-07', '2021-12-12', 21, 7, 9, 5, 'sunday   ', 1, 0, 'NONE') ,('2021-12-13', '1400-09-22', '1443-05-08', '2021-12-13', 22, 8, 9, 5, 'monday   ', 2, 0, 'NONE') ,('2021-12-14', '1400-09-23', '1443-05-09', '2021-12-14', 23, 9, 9, 5, 'tuesday  ', 3, 0, 'NONE') ,('2021-12-15', '1400-09-24', '1443-05-10', '2021-12-15', 24, 10, 9, 5, 'wednesday', 4, 0, 'NONE') ,('2021-12-16', '1400-09-25', '1443-05-11', '2021-12-16', 25, 11, 9, 5, 'thursday ', 5, 0, 'NONE') ,('2021-12-17', '1400-09-26', '1443-05-12', '2021-12-17', 26, 12, 9, 5, 'friday   ', 6, 0, 'NONE') ,('2021-12-18', '1400-09-27', '1443-05-13', '2021-12-18', 27, 13, 9, 5, 'saturday ', 7, 0, 'NONE') ,('2021-12-19', '1400-09-28', '1443-05-14', '2021-12-19', 28, 14, 9, 5, 'sunday   ', 1, 0, 'NONE') ,('2021-12-20', '1400-09-29', '1443-05-15', '2021-12-20', 29, 15, 9, 5, 'monday   ', 2, 0, 'NONE') ,('2021-12-21', '1400-09-30', '1443-05-16', '2021-12-21', 30, 16, 9, 5, 'tuesday  ', 3, 0, 'NONE') ,('2021-12-22', '1400-10-01', '1443-05-17', '2021-12-22', 1, 17, 10, 5, 'wednesday', 4, 0, 'NONE') ,('2021-12-23', '1400-10-02', '1443-05-18', '2021-12-23', 2, 18, 10, 5, 'thursday ', 5, 0, 'NONE') ,('2021-12-24', '1400-10-03', '1443-05-19', '2021-12-24', 3, 19, 10, 5, 'friday   ', 6, 0, 'NONE') ,('2021-12-25', '1400-10-04', '1443-05-20', '2021-12-25', 4, 20, 10, 5, 'saturday ', 7, 0, 'NONE') ,('2021-12-26', '1400-10-05', '1443-05-21', '2021-12-26', 5, 21, 10, 5, 'sunday   ', 1, 0, 'NONE') ,('2021-12-27', '1400-10-06', '1443-05-22', '2021-12-27', 6, 22, 10, 5, 'monday   ', 2, 0, 'NONE') ,('2021-12-28', '1400-10-07', '1443-05-23', '2021-12-28', 7, 23, 10, 5, 'tuesday  ', 3, 0, 'NONE') ,('2021-12-29', '1400-10-08', '1443-05-24', '2021-12-29', 8, 24, 10, 5, 'wednesday', 4, 0, 'NONE') ,('2021-12-30', '1400-10-09', '1443-05-25', '2021-12-30', 9, 25, 10, 5, 'thursday ', 5, 0, 'NONE') ,('2021-12-31', '1400-10-10', '1443-05-26', '2021-12-31', 10, 26, 10, 5, 'friday   ', 6, 0, 'NONE') ,('2022-01-01', '1400-10-11', '1443-05-27', '2022-01-01', 11, 27, 10, 5, 'saturday ', 7, 0, 'NONE') ,('2022-01-02', '1400-10-12', '1443-05-28', '2022-01-02', 12, 28, 10, 5, 'sunday   ', 1, 0, 'NONE') ,('2022-01-03', '1400-10-13', '1443-05-29', '2022-01-03', 13, 29, 10, 5, 'monday   ', 2, 0, 'NONE') ,('2022-01-04', '1400-10-14', '1443-05-30', '2022-01-04', 14, 30, 10, 5, 'tuesday  ', 3, 0, 'NONE') ,('2022-01-05', '1400-10-15', '1443-06-01', '2022-01-05', 15, 1, 10, 6, 'wednesday', 4, 0, 'NONE') ,('2022-01-06', '1400-10-16', '1443-06-02', '2022-01-06', 16, 2, 10, 6, 'thursday ', 5, 0, 'NONE') ,('2022-01-07', '1400-10-17', '1443-06-03', '2022-01-07', 17, 3, 10, 6, 'friday   ', 6, 0, 'NONE') ,('2022-01-08', '1400-10-18', '1443-06-04', '2022-01-08', 18, 4, 10, 6, 'saturday ', 7, 0, 'NONE') ,('2022-01-09', '1400-10-19', '1443-06-05', '2022-01-09', 19, 5, 10, 6, 'sunday   ', 1, 0, 'NONE') ,('2022-01-10', '1400-10-20', '1443-06-06', '2022-01-10', 20, 6, 10, 6, 'monday   ', 2, 0, 'NONE') ,('2022-01-11', '1400-10-21', '1443-06-07', '2022-01-11', 21, 7, 10, 6, 'tuesday  ', 3, 0, 'NONE') ,('2022-01-12', '1400-10-22', '1443-06-08', '2022-01-12', 22, 8, 10, 6, 'wednesday', 4, 0, 'NONE') ,('2022-01-13', '1400-10-23', '1443-06-09', '2022-01-13', 23, 9, 10, 6, 'thursday ', 5, 0, 'NONE') ,('2022-01-14', '1400-10-24', '1443-06-10', '2022-01-14', 24, 10, 10, 6, 'friday   ', 6, 0, 'NONE') ,('2022-01-15', '1400-10-25', '1443-06-11', '2022-01-15', 25, 11, 10, 6, 'saturday ', 7, 0, 'NONE') ,('2022-01-16', '1400-10-26', '1443-06-12', '2022-01-16', 26, 12, 10, 6, 'sunday   ', 1, 0, 'NONE') ,('2022-01-17', '1400-10-27', '1443-06-13', '2022-01-17', 27, 13, 10, 6, 'monday   ', 2, 0, 'NONE') ,('2022-01-18', '1400-10-28', '1443-06-14', '2022-01-18', 28, 14, 10, 6, 'tuesday  ', 3, 0, 'NONE') ,('2022-01-19', '1400-10-29', '1443-06-15', '2022-01-19', 29, 15, 10, 6, 'wednesday', 4, 0, 'NONE') ,('2022-01-20', '1400-10-30', '1443-06-16', '2022-01-20', 30, 16, 10, 6, 'thursday ', 5, 0, 'NONE') ,('2022-01-21', '1400-11-01', '1443-06-17', '2022-01-21', 1, 17, 11, 6, 'friday   ', 6, 0, 'NONE') ,('2022-01-22', '1400-11-02', '1443-06-18', '2022-01-22', 2, 18, 11, 6, 'saturday ', 7, 0, 'NONE') ,('2022-01-23', '1400-11-03', '1443-06-19', '2022-01-23', 3, 19, 11, 6, 'sunday   ', 1, 0, 'NONE') ,('2022-01-24', '1400-11-04', '1443-06-20', '2022-01-24', 4, 20, 11, 6, 'monday   ', 2, 0, 'NONE') ,('2022-01-25', '1400-11-05', '1443-06-21', '2022-01-25', 5, 21, 11, 6, 'tuesday  ', 3, 0, 'NONE') ,('2022-01-26', '1400-11-06', '1443-06-22', '2022-01-26', 6, 22, 11, 6, 'wednesday', 4, 0, 'NONE') ,('2022-01-27', '1400-11-07', '1443-06-23', '2022-01-27', 7, 23, 11, 6, 'thursday ', 5, 0, 'NONE') ,('2022-01-28', '1400-11-08', '1443-06-24', '2022-01-28', 8, 24, 11, 6, 'friday   ', 6, 0, 'NONE') ,('2022-01-29', '1400-11-09', '1443-06-25', '2022-01-29', 9, 25, 11, 6, 'saturday ', 7, 0, 'NONE') ,('2022-01-30', '1400-11-10', '1443-06-26', '2022-01-30', 10, 26, 11, 6, 'sunday   ', 1, 0, 'NONE') ,('2022-01-31', '1400-11-11', '1443-06-27', '2022-01-31', 11, 27, 11, 6, 'monday   ', 2, 0, 'NONE') ,('2022-02-01', '1400-11-12', '1443-06-28', '2022-02-01', 12, 28, 11, 6, 'tuesday  ', 3, 0, 'NONE') ,('2022-02-02', '1400-11-13', '1443-06-29', '2022-02-02', 13, 29, 11, 6, 'wednesday', 4, 0, 'NONE') ,('2022-02-03', '1400-11-14', '1443-07-01', '2022-02-03', 14, 1, 11, 7, 'thursday ', 5, 0, 'NONE') ,('2022-02-04', '1400-11-15', '1443-07-02', '2022-02-04', 15, 2, 11, 7, 'friday   ', 6, 0, 'NONE') ,('2022-02-05', '1400-11-16', '1443-07-03', '2022-02-05', 16, 3, 11, 7, 'saturday ', 7, 0, 'NONE') ,('2022-02-06', '1400-11-17', '1443-07-04', '2022-02-06', 17, 4, 11, 7, 'sunday   ', 1, 0, 'NONE') ,('2022-02-07', '1400-11-18', '1443-07-05', '2022-02-07', 18, 5, 11, 7, 'monday   ', 2, 0, 'NONE') ,('2022-02-08', '1400-11-19', '1443-07-06', '2022-02-08', 19, 6, 11, 7, 'tuesday  ', 3, 0, 'NONE') ,('2022-02-09', '1400-11-20', '1443-07-07', '2022-02-09', 20, 7, 11, 7, 'wednesday', 4, 0, 'NONE') ,('2022-02-10', '1400-11-21', '1443-07-08', '2022-02-10', 21, 8, 11, 7, 'thursday ', 5, 0, 'NONE') ,('2022-02-11', '1400-11-22', '1443-07-09', '2022-02-11', 22, 9, 11, 7, 'friday   ', 6, 0, 'NONE') ,('2022-02-12', '1400-11-23', '1443-07-10', '2022-02-12', 23, 10, 11, 7, 'saturday ', 7, 0, 'NONE') ,('2022-02-13', '1400-11-24', '1443-07-11', '2022-02-13', 24, 11, 11, 7, 'sunday   ', 1, 0, 'NONE') ,('2022-02-14', '1400-11-25', '1443-07-12', '2022-02-14', 25, 12, 11, 7, 'monday   ', 2, 0, 'NONE') ,('2022-02-15', '1400-11-26', '1443-07-13', '2022-02-15', 26, 13, 11, 7, 'tuesday  ', 3, 0, 'NONE') ,('2022-02-16', '1400-11-27', '1443-07-14', '2022-02-16', 27, 14, 11, 7, 'wednesday', 4, 0, 'NONE') ,('2022-02-17', '1400-11-28', '1443-07-15', '2022-02-17', 28, 15, 11, 7, 'thursday ', 5, 0, 'NONE') ,('2022-02-18', '1400-11-29', '1443-07-16', '2022-02-18', 29, 16, 11, 7, 'friday   ', 6, 0, 'NONE') ,('2022-02-19', '1400-11-30', '1443-07-17', '2022-02-19', 30, 17, 11, 7, 'saturday ', 7, 0, 'NONE') ,('2022-02-20', '1400-12-01', '1443-07-18', '2022-02-20', 1, 18, 12, 7, 'sunday   ', 1, 0, 'NONE') ,('2022-02-21', '1400-12-02', '1443-07-19', '2022-02-21', 2, 19, 12, 7, 'monday   ', 2, 0, 'NONE') ,('2022-02-22', '1400-12-03', '1443-07-20', '2022-02-22', 3, 20, 12, 7, 'tuesday  ', 3, 0, 'NONE') ,('2022-02-23', '1400-12-04', '1443-07-21', '2022-02-23', 4, 21, 12, 7, 'wednesday', 4, 0, 'NONE') ,('2022-02-24', '1400-12-05', '1443-07-22', '2022-02-24', 5, 22, 12, 7, 'thursday ', 5, 0, 'NONE') ,('2022-02-25', '1400-12-06', '1443-07-23', '2022-02-25', 6, 23, 12, 7, 'friday   ', 6, 0, 'NONE') ,('2022-02-26', '1400-12-07', '1443-07-24', '2022-02-26', 7, 24, 12, 7, 'saturday ', 7, 0, 'NONE') ,('2022-02-27', '1400-12-08', '1443-07-25', '2022-02-27', 8, 25, 12, 7, 'sunday   ', 1, 0, 'NONE') ,('2022-02-28', '1400-12-09', '1443-07-26', '2022-02-28', 9, 26, 12, 7, 'monday   ', 2, 0, 'NONE') ,('2022-03-01', '1400-12-10', '1443-07-27', '2022-03-01', 10, 27, 12, 7, 'tuesday  ', 3, 0, 'NONE') ,('2022-03-02', '1400-12-11', '1443-07-28', '2022-03-02', 11, 28, 12, 7, 'wednesday', 4, 0, 'NONE') ,('2022-03-03', '1400-12-12', '1443-07-29', '2022-03-03', 12, 29, 12, 7, 'thursday ', 5, 0, 'NONE') ,('2022-03-04', '1400-12-13', '1443-07-30', '2022-03-04', 13, 30, 12, 7, 'friday   ', 6, 0, 'NONE') ,('2022-03-05', '1400-12-14', '1443-08-01', '2022-03-05', 14, 1, 12, 8, 'saturday ', 7, 0, 'NONE') ,('2022-03-06', '1400-12-15', '1443-08-02', '2022-03-06', 15, 2, 12, 8, 'sunday   ', 1, 0, 'NONE') ,('2022-03-07', '1400-12-16', '1443-08-03', '2022-03-07', 16, 3, 12, 8, 'monday   ', 2, 0, 'NONE') ,('2022-03-08', '1400-12-17', '1443-08-04', '2022-03-08', 17, 4, 12, 8, 'tuesday  ', 3, 0, 'NONE') ,('2022-03-09', '1400-12-18', '1443-08-05', '2022-03-09', 18, 5, 12, 8, 'wednesday', 4, 0, 'NONE') ,('2022-03-10', '1400-12-19', '1443-08-06', '2022-03-10', 19, 6, 12, 8, 'thursday ', 5, 0, 'NONE') ,('2022-03-11', '1400-12-20', '1443-08-07', '2022-03-11', 20, 7, 12, 8, 'friday   ', 6, 0, 'NONE') ,('2022-03-12', '1400-12-21', '1443-08-08', '2022-03-12', 21, 8, 12, 8, 'saturday ', 7, 0, 'NONE') ,('2022-03-13', '1400-12-22', '1443-08-09', '2022-03-13', 22, 9, 12, 8, 'sunday   ', 1, 0, 'NONE') ,('2022-03-14', '1400-12-23', '1443-08-10', '2022-03-14', 23, 10, 12, 8, 'monday   ', 2, 0, 'NONE') ,('2022-03-15', '1400-12-24', '1443-08-11', '2022-03-15', 24, 11, 12, 8, 'tuesday  ', 3, 0, 'NONE') ,('2022-03-16', '1400-12-25', '1443-08-12', '2022-03-16', 25, 12, 12, 8, 'wednesday', 4, 0, 'NONE') ,('2022-03-17', '1400-12-26', '1443-08-13', '2022-03-17', 26, 13, 12, 8, 'thursday ', 5, 0, 'NONE') ,('2022-03-18', '1400-12-27', '1443-08-14', '2022-03-18', 27, 14, 12, 8, 'friday   ', 6, 0, 'NONE') ,('2022-03-19', '1400-12-28', '1443-08-15', '2022-03-19', 28, 15, 12, 8, 'saturday ', 7, 0, 'NONE') ,('2022-03-20', '1400-12-29', '1443-08-16', '2022-03-20', 29, 16, 12, 8, 'sunday   ', 1, 0, 'NONE') ,('2022-03-21', '1401-01-01', '1443-08-17', '2022-03-21', 1, 17, 1, 8, 'monday   ', 2, 0, 'NONE') ,('2022-03-22', '1401-01-02', '1443-08-18', '2022-03-22', 2, 18, 1, 8, 'tuesday  ', 3, 0, 'NONE') ,('2022-03-23', '1401-01-03', '1443-08-19', '2022-03-23', 3, 19, 1, 8, 'wednesday', 4, 0, 'NONE') ,('2022-03-24', '1401-01-04', '1443-08-20', '2022-03-24', 4, 20, 1, 8, 'thursday ', 5, 0, 'NONE') ,('2022-03-25', '1401-01-05', '1443-08-21', '2022-03-25', 5, 21, 1, 8, 'friday   ', 6, 0, 'NONE') ,('2022-03-26', '1401-01-06', '1443-08-22', '2022-03-26', 6, 22, 1, 8, 'saturday ', 7, 0, 'NONE') ,('2022-03-27', '1401-01-07', '1443-08-23', '2022-03-27', 7, 23, 1, 8, 'sunday   ', 1, 0, 'NONE') ,('2022-03-28', '1401-01-08', '1443-08-24', '2022-03-28', 8, 24, 1, 8, 'monday   ', 2, 0, 'NONE') ,('2022-03-29', '1401-01-09', '1443-08-25', '2022-03-29', 9, 25, 1, 8, 'tuesday  ', 3, 0, 'NONE') ,('2022-03-30', '1401-01-10', '1443-08-26', '2022-03-30', 10, 26, 1, 8, 'wednesday', 4, 0, 'NONE') ,('2022-03-31', '1401-01-11', '1443-08-27', '2022-03-31', 11, 27, 1, 8, 'thursday ', 5, 0, 'NONE') ,('2022-04-01', '1401-01-12', '1443-08-28', '2022-04-01', 12, 28, 1, 8, 'friday   ', 6, 0, 'NONE') ,('2022-04-02', '1401-01-13', '1443-08-29', '2022-04-02', 13, 29, 1, 8, 'saturday ', 7, 0, 'NONE') ,('2022-04-03', '1401-01-14', '1443-09-01', '2022-04-03', 14, 1, 1, 9, 'sunday   ', 1, 0, 'NONE') ,('2022-04-04', '1401-01-15', '1443-09-02', '2022-04-04', 15, 2, 1, 9, 'monday   ', 2, 0, 'NONE') ,('2022-04-05', '1401-01-16', '1443-09-03', '2022-04-05', 16, 3, 1, 9, 'tuesday  ', 3, 0, 'NONE') ,('2022-04-06', '1401-01-17', '1443-09-04', '2022-04-06', 17, 4, 1, 9, 'wednesday', 4, 0, 'NONE') ,('2022-04-07', '1401-01-18', '1443-09-05', '2022-04-07', 18, 5, 1, 9, 'thursday ', 5, 0, 'NONE') ,('2022-04-08', '1401-01-19', '1443-09-06', '2022-04-08', 19, 6, 1, 9, 'friday   ', 6, 0, 'NONE') ,('2022-04-09', '1401-01-20', '1443-09-07', '2022-04-09', 20, 7, 1, 9, 'saturday ', 7, 0, 'NONE') ,('2022-04-10', '1401-01-21', '1443-09-08', '2022-04-10', 21, 8, 1, 9, 'sunday   ', 1, 0, 'NONE') ,('2022-04-11', '1401-01-22', '1443-09-09', '2022-04-11', 22, 9, 1, 9, 'monday   ', 2, 0, 'NONE') ,('2022-04-12', '1401-01-23', '1443-09-10', '2022-04-12', 23, 10, 1, 9, 'tuesday  ', 3, 0, 'NONE') ,('2022-04-13', '1401-01-24', '1443-09-11', '2022-04-13', 24, 11, 1, 9, 'wednesday', 4, 0, 'NONE') ,('2022-04-14', '1401-01-25', '1443-09-12', '2022-04-14', 25, 12, 1, 9, 'thursday ', 5, 0, 'NONE') ,('2022-04-15', '1401-01-26', '1443-09-13', '2022-04-15', 26, 13, 1, 9, 'friday   ', 6, 0, 'NONE') ,('2022-04-16', '1401-01-27', '1443-09-14', '2022-04-16', 27, 14, 1, 9, 'saturday ', 7, 0, 'NONE') ,('2022-04-17', '1401-01-28', '1443-09-15', '2022-04-17', 28, 15, 1, 9, 'sunday   ', 1, 0, 'NONE') ,('2022-04-18', '1401-01-29', '1443-09-16', '2022-04-18', 29, 16, 1, 9, 'monday   ', 2, 0, 'NONE') ,('2022-04-19', '1401-01-30', '1443-09-17', '2022-04-19', 30, 17, 1, 9, 'tuesday  ', 3, 0, 'NONE') ,('2022-04-20', '1401-01-31', '1443-09-18', '2022-04-20', 31, 18, 1, 9, 'wednesday', 4, 0, 'NONE') ,('2022-04-21', '1401-02-01', '1443-09-19', '2022-04-21', 1, 19, 2, 9, 'thursday ', 5, 0, 'NONE') ,('2022-04-22', '1401-02-02', '1443-09-20', '2022-04-22', 2, 20, 2, 9, 'friday   ', 6, 0, 'NONE') ,('2022-04-23', '1401-02-03', '1443-09-21', '2022-04-23', 3, 21, 2, 9, 'saturday ', 7, 0, 'NONE') ,('2022-04-24', '1401-02-04', '1443-09-22', '2022-04-24', 4, 22, 2, 9, 'sunday   ', 1, 0, 'NONE') ,('2022-04-25', '1401-02-05', '1443-09-23', '2022-04-25', 5, 23, 2, 9, 'monday   ', 2, 0, 'NONE') ,('2022-04-26', '1401-02-06', '1443-09-24', '2022-04-26', 6, 24, 2, 9, 'tuesday  ', 3, 0, 'NONE') ,('2022-04-27', '1401-02-07', '1443-09-25', '2022-04-27', 7, 25, 2, 9, 'wednesday', 4, 0, 'NONE') ,('2022-04-28', '1401-02-08', '1443-09-26', '2022-04-28', 8, 26, 2, 9, 'thursday ', 5, 0, 'NONE') ,('2022-04-29', '1401-02-09', '1443-09-27', '2022-04-29', 9, 27, 2, 9, 'friday   ', 6, 0, 'NONE') ,('2022-04-30', '1401-02-10', '1443-09-28', '2022-04-30', 10, 28, 2, 9, 'saturday ', 7, 0, 'NONE') ,('2022-05-01', '1401-02-11', '1443-09-29', '2022-05-01', 11, 29, 2, 9, 'sunday   ', 1, 0, 'NONE') ,('2022-05-02', '1401-02-12', '1443-09-30', '2022-05-02', 12, 30, 2, 9, 'monday   ', 2, 0, 'NONE') ,('2022-05-03', '1401-02-13', '1443-10-01', '2022-05-03', 13, 1, 2, 10, 'tuesday  ', 3, 0, 'NONE') ,('2022-05-04', '1401-02-14', '1443-10-02', '2022-05-04', 14, 2, 2, 10, 'wednesday', 4, 0, 'NONE') ,('2022-05-05', '1401-02-15', '1443-10-03', '2022-05-05', 15, 3, 2, 10, 'thursday ', 5, 0, 'NONE') ,('2022-05-06', '1401-02-16', '1443-10-04', '2022-05-06', 16, 4, 2, 10, 'friday   ', 6, 0, 'NONE') ,('2022-05-07', '1401-02-17', '1443-10-05', '2022-05-07', 17, 5, 2, 10, 'saturday ', 7, 0, 'NONE') ,('2022-05-08', '1401-02-18', '1443-10-06', '2022-05-08', 18, 6, 2, 10, 'sunday   ', 1, 0, 'NONE') ,('2022-05-09', '1401-02-19', '1443-10-07', '2022-05-09', 19, 7, 2, 10, 'monday   ', 2, 0, 'NONE') ,('2022-05-10', '1401-02-20', '1443-10-08', '2022-05-10', 20, 8, 2, 10, 'tuesday  ', 3, 0, 'NONE') ,('2022-05-11', '1401-02-21', '1443-10-09', '2022-05-11', 21, 9, 2, 10, 'wednesday', 4, 0, 'NONE') ,('2022-05-12', '1401-02-22', '1443-10-10', '2022-05-12', 22, 10, 2, 10, 'thursday ', 5, 0, 'NONE') ,('2022-05-13', '1401-02-23', '1443-10-11', '2022-05-13', 23, 11, 2, 10, 'friday   ', 6, 0, 'NONE') ,('2022-05-14', '1401-02-24', '1443-10-12', '2022-05-14', 24, 12, 2, 10, 'saturday ', 7, 0, 'NONE') ,('2022-05-15', '1401-02-25', '1443-10-13', '2022-05-15', 25, 13, 2, 10, 'sunday   ', 1, 0, 'NONE') ,('2022-05-16', '1401-02-26', '1443-10-14', '2022-05-16', 26, 14, 2, 10, 'monday   ', 2, 0, 'NONE') ,('2022-05-17', '1401-02-27', '1443-10-15', '2022-05-17', 27, 15, 2, 10, 'tuesday  ', 3, 0, 'NONE') ,('2022-05-18', '1401-02-28', '1443-10-16', '2022-05-18', 28, 16, 2, 10, 'wednesday', 4, 0, 'NONE') ,('2022-05-19', '1401-02-29', '1443-10-17', '2022-05-19', 29, 17, 2, 10, 'thursday ', 5, 0, 'NONE') ,('2022-05-20', '1401-02-30', '1443-10-18', '2022-05-20', 30, 18, 2, 10, 'friday   ', 6, 0, 'NONE') ,('2022-05-21', '1401-02-31', '1443-10-19', '2022-05-21', 31, 19, 2, 10, 'saturday ', 7, 0, 'NONE') ,('2022-05-22', '1401-03-01', '1443-10-20', '2022-05-22', 1, 20, 3, 10, 'sunday   ', 1, 0, 'NONE') ,('2022-05-23', '1401-03-02', '1443-10-21', '2022-05-23', 2, 21, 3, 10, 'monday   ', 2, 0, 'NONE') ,('2022-05-24', '1401-03-03', '1443-10-22', '2022-05-24', 3, 22, 3, 10, 'tuesday  ', 3, 0, 'NONE') ,('2022-05-25', '1401-03-04', '1443-10-23', '2022-05-25', 4, 23, 3, 10, 'wednesday', 4, 0, 'NONE') ,('2022-05-26', '1401-03-05', '1443-10-24', '2022-05-26', 5, 24, 3, 10, 'thursday ', 5, 0, 'NONE') ,('2022-05-27', '1401-03-06', '1443-10-25', '2022-05-27', 6, 25, 3, 10, 'friday   ', 6, 0, 'NONE') ,('2022-05-28', '1401-03-07', '1443-10-26', '2022-05-28', 7, 26, 3, 10, 'saturday ', 7, 0, 'NONE') ,('2022-05-29', '1401-03-08', '1443-10-27', '2022-05-29', 8, 27, 3, 10, 'sunday   ', 1, 0, 'NONE') ,('2022-05-30', '1401-03-09', '1443-10-28', '2022-05-30', 9, 28, 3, 10, 'monday   ', 2, 0, 'NONE') ,('2022-05-31', '1401-03-10', '1443-10-29', '2022-05-31', 10, 29, 3, 10, 'tuesday  ', 3, 0, 'NONE') ,('2022-06-01', '1401-03-11', '1443-11-01', '2022-06-01', 11, 1, 3, 11, 'wednesday', 4, 0, 'NONE') ,('2022-06-02', '1401-03-12', '1443-11-02', '2022-06-02', 12, 2, 3, 11, 'thursday ', 5, 0, 'NONE') ,('2022-06-03', '1401-03-13', '1443-11-03', '2022-06-03', 13, 3, 3, 11, 'friday   ', 6, 0, 'NONE') ,('2022-06-04', '1401-03-14', '1443-11-04', '2022-06-04', 14, 4, 3, 11, 'saturday ', 7, 0, 'NONE') ,('2022-06-05', '1401-03-15', '1443-11-05', '2022-06-05', 15, 5, 3, 11, 'sunday   ', 1, 0, 'NONE') ,('2022-06-06', '1401-03-16', '1443-11-06', '2022-06-06', 16, 6, 3, 11, 'monday   ', 2, 0, 'NONE') ,('2022-06-07', '1401-03-17', '1443-11-07', '2022-06-07', 17, 7, 3, 11, 'tuesday  ', 3, 0, 'NONE') ,('2022-06-08', '1401-03-18', '1443-11-08', '2022-06-08', 18, 8, 3, 11, 'wednesday', 4, 0, 'NONE') ,('2022-06-09', '1401-03-19', '1443-11-09', '2022-06-09', 19, 9, 3, 11, 'thursday ', 5, 0, 'NONE') ,('2022-06-10', '1401-03-20', '1443-11-10', '2022-06-10', 20, 10, 3, 11, 'friday   ', 6, 0, 'NONE') ,('2022-06-11', '1401-03-21', '1443-11-11', '2022-06-11', 21, 11, 3, 11, 'saturday ', 7, 0, 'NONE') ,('2022-06-12', '1401-03-22', '1443-11-12', '2022-06-12', 22, 12, 3, 11, 'sunday   ', 1, 0, 'NONE') ,('2022-06-13', '1401-03-23', '1443-11-13', '2022-06-13', 23, 13, 3, 11, 'monday   ', 2, 0, 'NONE') ,('2022-06-14', '1401-03-24', '1443-11-14', '2022-06-14', 24, 14, 3, 11, 'tuesday  ', 3, 0, 'NONE') ,('2022-06-15', '1401-03-25', '1443-11-15', '2022-06-15', 25, 15, 3, 11, 'wednesday', 4, 0, 'NONE') ,('2022-06-16', '1401-03-26', '1443-11-16', '2022-06-16', 26, 16, 3, 11, 'thursday ', 5, 0, 'NONE') ,('2022-06-17', '1401-03-27', '1443-11-17', '2022-06-17', 27, 17, 3, 11, 'friday   ', 6, 0, 'NONE') ,('2022-06-18', '1401-03-28', '1443-11-18', '2022-06-18', 28, 18, 3, 11, 'saturday ', 7, 0, 'NONE') ,('2022-06-19', '1401-03-29', '1443-11-19', '2022-06-19', 29, 19, 3, 11, 'sunday   ', 1, 0, 'NONE') ,('2022-06-20', '1401-03-30', '1443-11-20', '2022-06-20', 30, 20, 3, 11, 'monday   ', 2, 0, 'NONE') ,('2022-06-21', '1401-03-31', '1443-11-21', '2022-06-21', 31, 21, 3, 11, 'tuesday  ', 3, 0, 'NONE') ,('2022-06-22', '1401-04-01', '1443-11-22', '2022-06-22', 1, 22, 4, 11, 'wednesday', 4, 0, 'NONE') ,('2022-06-23', '1401-04-02', '1443-11-23', '2022-06-23', 2, 23, 4, 11, 'thursday ', 5, 0, 'NONE') ,('2022-06-24', '1401-04-03', '1443-11-24', '2022-06-24', 3, 24, 4, 11, 'friday   ', 6, 0, 'NONE') ,('2022-06-25', '1401-04-04', '1443-11-25', '2022-06-25', 4, 25, 4, 11, 'saturday ', 7, 0, 'NONE') ,('2022-06-26', '1401-04-05', '1443-11-26', '2022-06-26', 5, 26, 4, 11, 'sunday   ', 1, 0, 'NONE') ,('2022-06-27', '1401-04-06', '1443-11-27', '2022-06-27', 6, 27, 4, 11, 'monday   ', 2, 0, 'NONE') ,('2022-06-28', '1401-04-07', '1443-11-28', '2022-06-28', 7, 28, 4, 11, 'tuesday  ', 3, 0, 'NONE') ,('2022-06-29', '1401-04-08', '1443-11-29', '2022-06-29', 8, 29, 4, 11, 'wednesday', 4, 0, 'NONE') ,('2022-06-30', '1401-04-09', '1443-11-30', '2022-06-30', 9, 30, 4, 11, 'thursday ', 5, 0, 'NONE') ,('2022-07-01', '1401-04-10', '1443-12-01', '2022-07-01', 10, 1, 4, 12, 'friday   ', 6, 0, 'NONE') ,('2022-07-02', '1401-04-11', '1443-12-02', '2022-07-02', 11, 2, 4, 12, 'saturday ', 7, 0, 'NONE') ,('2022-07-03', '1401-04-12', '1443-12-03', '2022-07-03', 12, 3, 4, 12, 'sunday   ', 1, 0, 'NONE') ,('2022-07-04', '1401-04-13', '1443-12-04', '2022-07-04', 13, 4, 4, 12, 'monday   ', 2, 0, 'NONE') ,('2022-07-05', '1401-04-14', '1443-12-05', '2022-07-05', 14, 5, 4, 12, 'tuesday  ', 3, 0, 'NONE') ,('2022-07-06', '1401-04-15', '1443-12-06', '2022-07-06', 15, 6, 4, 12, 'wednesday', 4, 0, 'NONE') ,('2022-07-07', '1401-04-16', '1443-12-07', '2022-07-07', 16, 7, 4, 12, 'thursday ', 5, 0, 'NONE') ,('2022-07-08', '1401-04-17', '1443-12-08', '2022-07-08', 17, 8, 4, 12, 'friday   ', 6, 0, 'NONE') ,('2022-07-09', '1401-04-18', '1443-12-09', '2022-07-09', 18, 9, 4, 12, 'saturday ', 7, 0, 'NONE') ,('2022-07-10', '1401-04-19', '1443-12-10', '2022-07-10', 19, 10, 4, 12, 'sunday   ', 1, 0, 'NONE') ,('2022-07-11', '1401-04-20', '1443-12-11', '2022-07-11', 20, 11, 4, 12, 'monday   ', 2, 0, 'NONE') ,('2022-07-12', '1401-04-21', '1443-12-12', '2022-07-12', 21, 12, 4, 12, 'tuesday  ', 3, 0, 'NONE') ,('2022-07-13', '1401-04-22', '1443-12-13', '2022-07-13', 22, 13, 4, 12, 'wednesday', 4, 0, 'NONE') ,('2022-07-14', '1401-04-23', '1443-12-14', '2022-07-14', 23, 14, 4, 12, 'thursday ', 5, 0, 'NONE') ,('2022-07-15', '1401-04-24', '1443-12-15', '2022-07-15', 24, 15, 4, 12, 'friday   ', 6, 0, 'NONE') ,('2022-07-16', '1401-04-25', '1443-12-16', '2022-07-16', 25, 16, 4, 12, 'saturday ', 7, 0, 'NONE') ,('2022-07-17', '1401-04-26', '1443-12-17', '2022-07-17', 26, 17, 4, 12, 'sunday   ', 1, 0, 'NONE') ,('2022-07-18', '1401-04-27', '1443-12-18', '2022-07-18', 27, 18, 4, 12, 'monday   ', 2, 0, 'NONE') ,('2022-07-19', '1401-04-28', '1443-12-19', '2022-07-19', 28, 19, 4, 12, 'tuesday  ', 3, 0, 'NONE') ,('2022-07-20', '1401-04-29', '1443-12-20', '2022-07-20', 29, 20, 4, 12, 'wednesday', 4, 0, 'NONE') ,('2022-07-21', '1401-04-30', '1443-12-21', '2022-07-21', 30, 21, 4, 12, 'thursday ', 5, 0, 'NONE') ,('2022-07-22', '1401-04-31', '1443-12-22', '2022-07-22', 31, 22, 4, 12, 'friday   ', 6, 0, 'NONE') ,('2022-07-23', '1401-05-01', '1443-12-23', '2022-07-23', 1, 23, 5, 12, 'saturday ', 7, 0, 'NONE') ,('2022-07-24', '1401-05-02', '1443-12-24', '2022-07-24', 2, 24, 5, 12, 'sunday   ', 1, 0, 'NONE') ,('2022-07-25', '1401-05-03', '1443-12-25', '2022-07-25', 3, 25, 5, 12, 'monday   ', 2, 0, 'NONE') ,('2022-07-26', '1401-05-04', '1443-12-26', '2022-07-26', 4, 26, 5, 12, 'tuesday  ', 3, 0, 'NONE') ,('2022-07-27', '1401-05-05', '1443-12-27', '2022-07-27', 5, 27, 5, 12, 'wednesday', 4, 0, 'NONE') ,('2022-07-28', '1401-05-06', '1443-12-28', '2022-07-28', 6, 28, 5, 12, 'thursday ', 5, 0, 'NONE') ,('2022-07-29', '1401-05-07', '1443-12-29', '2022-07-29', 7, 29, 5, 12, 'friday   ', 6, 0, 'NONE') ,('2022-07-30', '1401-05-08', '1444-01-01', '2022-07-30', 8, 1, 5, 1, 'saturday ', 7, 0, 'NONE') ,('2022-07-31', '1401-05-09', '1444-01-02', '2022-07-31', 9, 2, 5, 1, 'sunday   ', 1, 0, 'NONE') ,('2022-08-01', '1401-05-10', '1444-01-03', '2022-08-01', 10, 3, 5, 1, 'monday   ', 2, 0, 'NONE') ,('2022-08-02', '1401-05-11', '1444-01-04', '2022-08-02', 11, 4, 5, 1, 'tuesday  ', 3, 0, 'NONE') ,('2022-08-03', '1401-05-12', '1444-01-05', '2022-08-03', 12, 5, 5, 1, 'wednesday', 4, 0, 'NONE') ,('2022-08-04', '1401-05-13', '1444-01-06', '2022-08-04', 13, 6, 5, 1, 'thursday ', 5, 0, 'NONE') ,('2022-08-05', '1401-05-14', '1444-01-07', '2022-08-05', 14, 7, 5, 1, 'friday   ', 6, 0, 'NONE') ,('2022-08-06', '1401-05-15', '1444-01-08', '2022-08-06', 15, 8, 5, 1, 'saturday ', 7, 0, 'NONE') ,('2022-08-07', '1401-05-16', '1444-01-09', '2022-08-07', 16, 9, 5, 1, 'sunday   ', 1, 0, 'NONE') ,('2022-08-08', '1401-05-17', '1444-01-10', '2022-08-08', 17, 10, 5, 1, 'monday   ', 2, 0, 'NONE') ,('2022-08-09', '1401-05-18', '1444-01-11', '2022-08-09', 18, 11, 5, 1, 'tuesday  ', 3, 0, 'NONE') ,('2022-08-10', '1401-05-19', '1444-01-12', '2022-08-10', 19, 12, 5, 1, 'wednesday', 4, 0, 'NONE') ,('2022-08-11', '1401-05-20', '1444-01-13', '2022-08-11', 20, 13, 5, 1, 'thursday ', 5, 0, 'NONE') ,('2022-08-12', '1401-05-21', '1444-01-14', '2022-08-12', 21, 14, 5, 1, 'friday   ', 6, 0, 'NONE') ,('2022-08-13', '1401-05-22', '1444-01-15', '2022-08-13', 22, 15, 5, 1, 'saturday ', 7, 0, 'NONE') ,('2022-08-14', '1401-05-23', '1444-01-16', '2022-08-14', 23, 16, 5, 1, 'sunday   ', 1, 0, 'NONE') ,('2022-08-15', '1401-05-24', '1444-01-17', '2022-08-15', 24, 17, 5, 1, 'monday   ', 2, 0, 'NONE') ,('2022-08-16', '1401-05-25', '1444-01-18', '2022-08-16', 25, 18, 5, 1, 'tuesday  ', 3, 0, 'NONE') ,('2022-08-17', '1401-05-26', '1444-01-19', '2022-08-17', 26, 19, 5, 1, 'wednesday', 4, 0, 'NONE') ,('2022-08-18', '1401-05-27', '1444-01-20', '2022-08-18', 27, 20, 5, 1, 'thursday ', 5, 0, 'NONE') ,('2022-08-19', '1401-05-28', '1444-01-21', '2022-08-19', 28, 21, 5, 1, 'friday   ', 6, 0, 'NONE') ,('2022-08-20', '1401-05-29', '1444-01-22', '2022-08-20', 29, 22, 5, 1, 'saturday ', 7, 0, 'NONE') ,('2022-08-21', '1401-05-30', '1444-01-23', '2022-08-21', 30, 23, 5, 1, 'sunday   ', 1, 0, 'NONE') ,('2022-08-22', '1401-05-31', '1444-01-24', '2022-08-22', 31, 24, 5, 1, 'monday   ', 2, 0, 'NONE') ,('2022-08-23', '1401-06-01', '1444-01-25', '2022-08-23', 1, 25, 6, 1, 'tuesday  ', 3, 0, 'NONE') ,('2022-08-24', '1401-06-02', '1444-01-26', '2022-08-24', 2, 26, 6, 1, 'wednesday', 4, 0, 'NONE') ,('2022-08-25', '1401-06-03', '1444-01-27', '2022-08-25', 3, 27, 6, 1, 'thursday ', 5, 0, 'NONE') ,('2022-08-26', '1401-06-04', '1444-01-28', '2022-08-26', 4, 28, 6, 1, 'friday   ', 6, 0, 'NONE') ,('2022-08-27', '1401-06-05', '1444-01-29', '2022-08-27', 5, 29, 6, 1, 'saturday ', 7, 0, 'NONE') ,('2022-08-28', '1401-06-06', '1444-01-30', '2022-08-28', 6, 30, 6, 1, 'sunday   ', 1, 0, 'NONE') ,('2022-08-29', '1401-06-07', '1444-02-01', '2022-08-29', 7, 1, 6, 2, 'monday   ', 2, 0, 'NONE') ,('2022-08-30', '1401-06-08', '1444-02-02', '2022-08-30', 8, 2, 6, 2, 'tuesday  ', 3, 0, 'NONE') ,('2022-08-31', '1401-06-09', '1444-02-03', '2022-08-31', 9, 3, 6, 2, 'wednesday', 4, 0, 'NONE') ,('2022-09-01', '1401-06-10', '1444-02-04', '2022-09-01', 10, 4, 6, 2, 'thursday ', 5, 0, 'NONE') ,('2022-09-02', '1401-06-11', '1444-02-05', '2022-09-02', 11, 5, 6, 2, 'friday   ', 6, 0, 'NONE') ,('2022-09-03', '1401-06-12', '1444-02-06', '2022-09-03', 12, 6, 6, 2, 'saturday ', 7, 0, 'NONE') ,('2022-09-04', '1401-06-13', '1444-02-07', '2022-09-04', 13, 7, 6, 2, 'sunday   ', 1, 0, 'NONE') ,('2022-09-05', '1401-06-14', '1444-02-08', '2022-09-05', 14, 8, 6, 2, 'monday   ', 2, 0, 'NONE') ,('2022-09-06', '1401-06-15', '1444-02-09', '2022-09-06', 15, 9, 6, 2, 'tuesday  ', 3, 0, 'NONE') ,('2022-09-07', '1401-06-16', '1444-02-10', '2022-09-07', 16, 10, 6, 2, 'wednesday', 4, 0, 'NONE') ,('2022-09-08', '1401-06-17', '1444-02-11', '2022-09-08', 17, 11, 6, 2, 'thursday ', 5, 0, 'NONE') ,('2022-09-09', '1401-06-18', '1444-02-12', '2022-09-09', 18, 12, 6, 2, 'friday   ', 6, 0, 'NONE') ,('2022-09-10', '1401-06-19', '1444-02-13', '2022-09-10', 19, 13, 6, 2, 'saturday ', 7, 0, 'NONE') ,('2022-09-11', '1401-06-20', '1444-02-14', '2022-09-11', 20, 14, 6, 2, 'sunday   ', 1, 0, 'NONE') ,('2022-09-12', '1401-06-21', '1444-02-15', '2022-09-12', 21, 15, 6, 2, 'monday   ', 2, 0, 'NONE') ,('2022-09-13', '1401-06-22', '1444-02-16', '2022-09-13', 22, 16, 6, 2, 'tuesday  ', 3, 0, 'NONE') ,('2022-09-14', '1401-06-23', '1444-02-17', '2022-09-14', 23, 17, 6, 2, 'wednesday', 4, 0, 'NONE') ,('2022-09-15', '1401-06-24', '1444-02-18', '2022-09-15', 24, 18, 6, 2, 'thursday ', 5, 0, 'NONE') ,('2022-09-16', '1401-06-25', '1444-02-19', '2022-09-16', 25, 19, 6, 2, 'friday   ', 6, 0, 'NONE') ,('2022-09-17', '1401-06-26', '1444-02-20', '2022-09-17', 26, 20, 6, 2, 'saturday ', 7, 0, 'NONE') ,('2022-09-18', '1401-06-27', '1444-02-21', '2022-09-18', 27, 21, 6, 2, 'sunday   ', 1, 0, 'NONE') ,('2022-09-19', '1401-06-28', '1444-02-22', '2022-09-19', 28, 22, 6, 2, 'monday   ', 2, 0, 'NONE') ,('2022-09-20', '1401-06-29', '1444-02-23', '2022-09-20', 29, 23, 6, 2, 'tuesday  ', 3, 0, 'NONE') ,('2022-09-21', '1401-06-30', '1444-02-24', '2022-09-21', 30, 24, 6, 2, 'wednesday', 4, 0, 'NONE') ,('2022-09-22', '1401-06-31', '1444-02-25', '2022-09-22', 31, 25, 6, 2, 'thursday ', 5, 0, 'NONE') ,('2022-09-23', '1401-07-01', '1444-02-26', '2022-09-23', 1, 26, 7, 2, 'friday   ', 6, 0, 'NONE') ,('2022-09-24', '1401-07-02', '1444-02-27', '2022-09-24', 2, 27, 7, 2, 'saturday ', 7, 0, 'NONE') ,('2022-09-25', '1401-07-03', '1444-02-28', '2022-09-25', 3, 28, 7, 2, 'sunday   ', 1, 0, 'NONE') ,('2022-09-26', '1401-07-04', '1444-02-29', '2022-09-26', 4, 29, 7, 2, 'monday   ', 2, 0, 'NONE') ,('2022-09-27', '1401-07-05', '1444-03-01', '2022-09-27', 5, 1, 7, 3, 'tuesday  ', 3, 0, 'NONE') ,('2022-09-28', '1401-07-06', '1444-03-02', '2022-09-28', 6, 2, 7, 3, 'wednesday', 4, 0, 'NONE') ,('2022-09-29', '1401-07-07', '1444-03-03', '2022-09-29', 7, 3, 7, 3, 'thursday ', 5, 0, 'NONE') ,('2022-09-30', '1401-07-08', '1444-03-04', '2022-09-30', 8, 4, 7, 3, 'friday   ', 6, 0, 'NONE') ,('2022-10-01', '1401-07-09', '1444-03-05', '2022-10-01', 9, 5, 7, 3, 'saturday ', 7, 0, 'NONE') ,('2022-10-02', '1401-07-10', '1444-03-06', '2022-10-02', 10, 6, 7, 3, 'sunday   ', 1, 0, 'NONE') ,('2022-10-03', '1401-07-11', '1444-03-07', '2022-10-03', 11, 7, 7, 3, 'monday   ', 2, 0, 'NONE') ,('2022-10-04', '1401-07-12', '1444-03-08', '2022-10-04', 12, 8, 7, 3, 'tuesday  ', 3, 0, 'NONE') ,('2022-10-05', '1401-07-13', '1444-03-09', '2022-10-05', 13, 9, 7, 3, 'wednesday', 4, 0, 'NONE') ,('2022-10-06', '1401-07-14', '1444-03-10', '2022-10-06', 14, 10, 7, 3, 'thursday ', 5, 0, 'NONE') ,('2022-10-07', '1401-07-15', '1444-03-11', '2022-10-07', 15, 11, 7, 3, 'friday   ', 6, 0, 'NONE') ,('2022-10-08', '1401-07-16', '1444-03-12', '2022-10-08', 16, 12, 7, 3, 'saturday ', 7, 0, 'NONE') ,('2022-10-09', '1401-07-17', '1444-03-13', '2022-10-09', 17, 13, 7, 3, 'sunday   ', 1, 0, 'NONE') ,('2022-10-10', '1401-07-18', '1444-03-14', '2022-10-10', 18, 14, 7, 3, 'monday   ', 2, 0, 'NONE') ,('2022-10-11', '1401-07-19', '1444-03-15', '2022-10-11', 19, 15, 7, 3, 'tuesday  ', 3, 0, 'NONE') ,('2022-10-12', '1401-07-20', '1444-03-16', '2022-10-12', 20, 16, 7, 3, 'wednesday', 4, 0, 'NONE') ,('2022-10-13', '1401-07-21', '1444-03-17', '2022-10-13', 21, 17, 7, 3, 'thursday ', 5, 0, 'NONE') ,('2022-10-14', '1401-07-22', '1444-03-18', '2022-10-14', 22, 18, 7, 3, 'friday   ', 6, 0, 'NONE') ,('2022-10-15', '1401-07-23', '1444-03-19', '2022-10-15', 23, 19, 7, 3, 'saturday ', 7, 0, 'NONE') ,('2022-10-16', '1401-07-24', '1444-03-20', '2022-10-16', 24, 20, 7, 3, 'sunday   ', 1, 0, 'NONE') ,('2022-10-17', '1401-07-25', '1444-03-21', '2022-10-17', 25, 21, 7, 3, 'monday   ', 2, 0, 'NONE') ,('2022-10-18', '1401-07-26', '1444-03-22', '2022-10-18', 26, 22, 7, 3, 'tuesday  ', 3, 0, 'NONE') ,('2022-10-19', '1401-07-27', '1444-03-23', '2022-10-19', 27, 23, 7, 3, 'wednesday', 4, 0, 'NONE') ,('2022-10-20', '1401-07-28', '1444-03-24', '2022-10-20', 28, 24, 7, 3, 'thursday ', 5, 0, 'NONE') ,('2022-10-21', '1401-07-29', '1444-03-25', '2022-10-21', 29, 25, 7, 3, 'friday   ', 6, 0, 'NONE') ,('2022-10-22', '1401-07-30', '1444-03-26', '2022-10-22', 30, 26, 7, 3, 'saturday ', 7, 0, 'NONE') ,('2022-10-23', '1401-08-01', '1444-03-27', '2022-10-23', 1, 27, 8, 3, 'sunday   ', 1, 0, 'NONE') ,('2022-10-24', '1401-08-02', '1444-03-28', '2022-10-24', 2, 28, 8, 3, 'monday   ', 2, 0, 'NONE') ,('2022-10-25', '1401-08-03', '1444-03-29', '2022-10-25', 3, 29, 8, 3, 'tuesday  ', 3, 0, 'NONE') ,('2022-10-26', '1401-08-04', '1444-03-30', '2022-10-26', 4, 30, 8, 3, 'wednesday', 4, 0, 'NONE') ,('2022-10-27', '1401-08-05', '1444-04-01', '2022-10-27', 5, 1, 8, 4, 'thursday ', 5, 0, 'NONE') ,('2022-10-28', '1401-08-06', '1444-04-02', '2022-10-28', 6, 2, 8, 4, 'friday   ', 6, 0, 'NONE') ,('2022-10-29', '1401-08-07', '1444-04-03', '2022-10-29', 7, 3, 8, 4, 'saturday ', 7, 0, 'NONE') ,('2022-10-30', '1401-08-08', '1444-04-04', '2022-10-30', 8, 4, 8, 4, 'sunday   ', 1, 0, 'NONE') ,('2022-10-31', '1401-08-09', '1444-04-05', '2022-10-31', 9, 5, 8, 4, 'monday   ', 2, 0, 'NONE') ,('2022-11-01', '1401-08-10', '1444-04-06', '2022-11-01', 10, 6, 8, 4, 'tuesday  ', 3, 0, 'NONE') ,('2022-11-02', '1401-08-11', '1444-04-07', '2022-11-02', 11, 7, 8, 4, 'wednesday', 4, 0, 'NONE') ,('2022-11-03', '1401-08-12', '1444-04-08', '2022-11-03', 12, 8, 8, 4, 'thursday ', 5, 0, 'NONE') ,('2022-11-04', '1401-08-13', '1444-04-09', '2022-11-04', 13, 9, 8, 4, 'friday   ', 6, 0, 'NONE') ,('2022-11-05', '1401-08-14', '1444-04-10', '2022-11-05', 14, 10, 8, 4, 'saturday ', 7, 0, 'NONE') ,('2022-11-06', '1401-08-15', '1444-04-11', '2022-11-06', 15, 11, 8, 4, 'sunday   ', 1, 0, 'NONE') ,('2022-11-07', '1401-08-16', '1444-04-12', '2022-11-07', 16, 12, 8, 4, 'monday   ', 2, 0, 'NONE') ,('2022-11-08', '1401-08-17', '1444-04-13', '2022-11-08', 17, 13, 8, 4, 'tuesday  ', 3, 0, 'NONE') ,('2022-11-09', '1401-08-18', '1444-04-14', '2022-11-09', 18, 14, 8, 4, 'wednesday', 4, 0, 'NONE') ,('2022-11-10', '1401-08-19', '1444-04-15', '2022-11-10', 19, 15, 8, 4, 'thursday ', 5, 0, 'NONE') ,('2022-11-11', '1401-08-20', '1444-04-16', '2022-11-11', 20, 16, 8, 4, 'friday   ', 6, 0, 'NONE') ,('2022-11-12', '1401-08-21', '1444-04-17', '2022-11-12', 21, 17, 8, 4, 'saturday ', 7, 0, 'NONE') ,('2022-11-13', '1401-08-22', '1444-04-18', '2022-11-13', 22, 18, 8, 4, 'sunday   ', 1, 0, 'NONE') ,('2022-11-14', '1401-08-23', '1444-04-19', '2022-11-14', 23, 19, 8, 4, 'monday   ', 2, 0, 'NONE') ,('2022-11-15', '1401-08-24', '1444-04-20', '2022-11-15', 24, 20, 8, 4, 'tuesday  ', 3, 0, 'NONE') ,('2022-11-16', '1401-08-25', '1444-04-21', '2022-11-16', 25, 21, 8, 4, 'wednesday', 4, 0, 'NONE') ,('2022-11-17', '1401-08-26', '1444-04-22', '2022-11-17', 26, 22, 8, 4, 'thursday ', 5, 0, 'NONE') ,('2022-11-18', '1401-08-27', '1444-04-23', '2022-11-18', 27, 23, 8, 4, 'friday   ', 6, 0, 'NONE') ,('2022-11-19', '1401-08-28', '1444-04-24', '2022-11-19', 28, 24, 8, 4, 'saturday ', 7, 0, 'NONE') ,('2022-11-20', '1401-08-29', '1444-04-25', '2022-11-20', 29, 25, 8, 4, 'sunday   ', 1, 0, 'NONE') ,('2022-11-21', '1401-08-30', '1444-04-26', '2022-11-21', 30, 26, 8, 4, 'monday   ', 2, 0, 'NONE') ,('2022-11-22', '1401-09-01', '1444-04-27', '2022-11-22', 1, 27, 9, 4, 'tuesday  ', 3, 0, 'NONE') ,('2022-11-23', '1401-09-02', '1444-04-28', '2022-11-23', 2, 28, 9, 4, 'wednesday', 4, 0, 'NONE') ,('2022-11-24', '1401-09-03', '1444-04-29', '2022-11-24', 3, 29, 9, 4, 'thursday ', 5, 0, 'NONE') ,('2022-11-25', '1401-09-04', '1444-05-01', '2022-11-25', 4, 1, 9, 5, 'friday   ', 6, 0, 'NONE') ,('2022-11-26', '1401-09-05', '1444-05-02', '2022-11-26', 5, 2, 9, 5, 'saturday ', 7, 0, 'NONE') ,('2022-11-27', '1401-09-06', '1444-05-03', '2022-11-27', 6, 3, 9, 5, 'sunday   ', 1, 0, 'NONE') ,('2022-11-28', '1401-09-07', '1444-05-04', '2022-11-28', 7, 4, 9, 5, 'monday   ', 2, 0, 'NONE') ,('2022-11-29', '1401-09-08', '1444-05-05', '2022-11-29', 8, 5, 9, 5, 'tuesday  ', 3, 0, 'NONE') ,('2022-11-30', '1401-09-09', '1444-05-06', '2022-11-30', 9, 6, 9, 5, 'wednesday', 4, 0, 'NONE') ,('2022-12-01', '1401-09-10', '1444-05-07', '2022-12-01', 10, 7, 9, 5, 'thursday ', 5, 0, 'NONE') ,('2022-12-02', '1401-09-11', '1444-05-08', '2022-12-02', 11, 8, 9, 5, 'friday   ', 6, 0, 'NONE') ,('2022-12-03', '1401-09-12', '1444-05-09', '2022-12-03', 12, 9, 9, 5, 'saturday ', 7, 0, 'NONE') ,('2022-12-04', '1401-09-13', '1444-05-10', '2022-12-04', 13, 10, 9, 5, 'sunday   ', 1, 0, 'NONE') ,('2022-12-05', '1401-09-14', '1444-05-11', '2022-12-05', 14, 11, 9, 5, 'monday   ', 2, 0, 'NONE') ,('2022-12-06', '1401-09-15', '1444-05-12', '2022-12-06', 15, 12, 9, 5, 'tuesday  ', 3, 0, 'NONE') ,('2022-12-07', '1401-09-16', '1444-05-13', '2022-12-07', 16, 13, 9, 5, 'wednesday', 4, 0, 'NONE') ,('2022-12-08', '1401-09-17', '1444-05-14', '2022-12-08', 17, 14, 9, 5, 'thursday ', 5, 0, 'NONE') ,('2022-12-09', '1401-09-18', '1444-05-15', '2022-12-09', 18, 15, 9, 5, 'friday   ', 6, 0, 'NONE') ,('2022-12-10', '1401-09-19', '1444-05-16', '2022-12-10', 19, 16, 9, 5, 'saturday ', 7, 0, 'NONE') ,('2022-12-11', '1401-09-20', '1444-05-17', '2022-12-11', 20, 17, 9, 5, 'sunday   ', 1, 0, 'NONE') ,('2022-12-12', '1401-09-21', '1444-05-18', '2022-12-12', 21, 18, 9, 5, 'monday   ', 2, 0, 'NONE') ,('2022-12-13', '1401-09-22', '1444-05-19', '2022-12-13', 22, 19, 9, 5, 'tuesday  ', 3, 0, 'NONE') ,('2022-12-14', '1401-09-23', '1444-05-20', '2022-12-14', 23, 20, 9, 5, 'wednesday', 4, 0, 'NONE') ,('2022-12-15', '1401-09-24', '1444-05-21', '2022-12-15', 24, 21, 9, 5, 'thursday ', 5, 0, 'NONE') ,('2022-12-16', '1401-09-25', '1444-05-22', '2022-12-16', 25, 22, 9, 5, 'friday   ', 6, 0, 'NONE') ,('2022-12-17', '1401-09-26', '1444-05-23', '2022-12-17', 26, 23, 9, 5, 'saturday ', 7, 0, 'NONE') ,('2022-12-18', '1401-09-27', '1444-05-24', '2022-12-18', 27, 24, 9, 5, 'sunday   ', 1, 0, 'NONE') ,('2022-12-19', '1401-09-28', '1444-05-25', '2022-12-19', 28, 25, 9, 5, 'monday   ', 2, 0, 'NONE') ,('2022-12-20', '1401-09-29', '1444-05-26', '2022-12-20', 29, 26, 9, 5, 'tuesday  ', 3, 0, 'NONE') ,('2022-12-21', '1401-09-30', '1444-05-27', '2022-12-21', 30, 27, 9, 5, 'wednesday', 4, 0, 'NONE') ,('2022-12-22', '1401-10-01', '1444-05-28', '2022-12-22', 1, 28, 10, 5, 'thursday ', 5, 0, 'NONE') ,('2022-12-23', '1401-10-02', '1444-05-29', '2022-12-23', 2, 29, 10, 5, 'friday   ', 6, 0, 'NONE') ,('2022-12-24', '1401-10-03', '1444-05-30', '2022-12-24', 3, 30, 10, 5, 'saturday ', 7, 0, 'NONE') ,('2022-12-25', '1401-10-04', '1444-06-01', '2022-12-25', 4, 1, 10, 6, 'sunday   ', 1, 0, 'NONE') ,('2022-12-26', '1401-10-05', '1444-06-02', '2022-12-26', 5, 2, 10, 6, 'monday   ', 2, 0, 'NONE') ,('2022-12-27', '1401-10-06', '1444-06-03', '2022-12-27', 6, 3, 10, 6, 'tuesday  ', 3, 0, 'NONE') ,('2022-12-28', '1401-10-07', '1444-06-04', '2022-12-28', 7, 4, 10, 6, 'wednesday', 4, 0, 'NONE') ,('2022-12-29', '1401-10-08', '1444-06-05', '2022-12-29', 8, 5, 10, 6, 'thursday ', 5, 0, 'NONE') ,('2022-12-30', '1401-10-09', '1444-06-06', '2022-12-30', 9, 6, 10, 6, 'friday   ', 6, 0, 'NONE') ,('2022-12-31', '1401-10-10', '1444-06-07', '2022-12-31', 10, 7, 10, 6, 'saturday ', 7, 0, 'NONE') ,('2023-01-01', '1401-10-11', '1444-06-08', '2023-01-01', 11, 8, 10, 6, 'sunday   ', 1, 0, 'NONE') ,('2023-01-02', '1401-10-12', '1444-06-09', '2023-01-02', 12, 9, 10, 6, 'monday   ', 2, 0, 'NONE') ,('2023-01-03', '1401-10-13', '1444-06-10', '2023-01-03', 13, 10, 10, 6, 'tuesday  ', 3, 0, 'NONE') ,('2023-01-04', '1401-10-14', '1444-06-11', '2023-01-04', 14, 11, 10, 6, 'wednesday', 4, 0, 'NONE') ,('2023-01-05', '1401-10-15', '1444-06-12', '2023-01-05', 15, 12, 10, 6, 'thursday ', 5, 0, 'NONE') ,('2023-01-06', '1401-10-16', '1444-06-13', '2023-01-06', 16, 13, 10, 6, 'friday   ', 6, 0, 'NONE') ,('2023-01-07', '1401-10-17', '1444-06-14', '2023-01-07', 17, 14, 10, 6, 'saturday ', 7, 0, 'NONE') ,('2023-01-08', '1401-10-18', '1444-06-15', '2023-01-08', 18, 15, 10, 6, 'sunday   ', 1, 0, 'NONE') ,('2023-01-09', '1401-10-19', '1444-06-16', '2023-01-09', 19, 16, 10, 6, 'monday   ', 2, 0, 'NONE') ,('2023-01-10', '1401-10-20', '1444-06-17', '2023-01-10', 20, 17, 10, 6, 'tuesday  ', 3, 0, 'NONE') ,('2023-01-11', '1401-10-21', '1444-06-18', '2023-01-11', 21, 18, 10, 6, 'wednesday', 4, 0, 'NONE') ,('2023-01-12', '1401-10-22', '1444-06-19', '2023-01-12', 22, 19, 10, 6, 'thursday ', 5, 0, 'NONE') ,('2023-01-13', '1401-10-23', '1444-06-20', '2023-01-13', 23, 20, 10, 6, 'friday   ', 6, 0, 'NONE') ,('2023-01-14', '1401-10-24', '1444-06-21', '2023-01-14', 24, 21, 10, 6, 'saturday ', 7, 0, 'NONE') ,('2023-01-15', '1401-10-25', '1444-06-22', '2023-01-15', 25, 22, 10, 6, 'sunday   ', 1, 0, 'NONE') ,('2023-01-16', '1401-10-26', '1444-06-23', '2023-01-16', 26, 23, 10, 6, 'monday   ', 2, 0, 'NONE') ,('2023-01-17', '1401-10-27', '1444-06-24', '2023-01-17', 27, 24, 10, 6, 'tuesday  ', 3, 0, 'NONE') ,('2023-01-18', '1401-10-28', '1444-06-25', '2023-01-18', 28, 25, 10, 6, 'wednesday', 4, 0, 'NONE') ,('2023-01-19', '1401-10-29', '1444-06-26', '2023-01-19', 29, 26, 10, 6, 'thursday ', 5, 0, 'NONE') ,('2023-01-20', '1401-10-30', '1444-06-27', '2023-01-20', 30, 27, 10, 6, 'friday   ', 6, 0, 'NONE') ,('2023-01-21', '1401-11-01', '1444-06-28', '2023-01-21', 1, 28, 11, 6, 'saturday ', 7, 0, 'NONE') ,('2023-01-22', '1401-11-02', '1444-06-29', '2023-01-22', 2, 29, 11, 6, 'sunday   ', 1, 0, 'NONE') ,('2023-01-23', '1401-11-03', '1444-07-01', '2023-01-23', 3, 1, 11, 7, 'monday   ', 2, 0, 'NONE') ,('2023-01-24', '1401-11-04', '1444-07-02', '2023-01-24', 4, 2, 11, 7, 'tuesday  ', 3, 0, 'NONE') ,('2023-01-25', '1401-11-05', '1444-07-03', '2023-01-25', 5, 3, 11, 7, 'wednesday', 4, 0, 'NONE') ,('2023-01-26', '1401-11-06', '1444-07-04', '2023-01-26', 6, 4, 11, 7, 'thursday ', 5, 0, 'NONE') ,('2023-01-27', '1401-11-07', '1444-07-05', '2023-01-27', 7, 5, 11, 7, 'friday   ', 6, 0, 'NONE') ,('2023-01-28', '1401-11-08', '1444-07-06', '2023-01-28', 8, 6, 11, 7, 'saturday ', 7, 0, 'NONE') ,('2023-01-29', '1401-11-09', '1444-07-07', '2023-01-29', 9, 7, 11, 7, 'sunday   ', 1, 0, 'NONE') ,('2023-01-30', '1401-11-10', '1444-07-08', '2023-01-30', 10, 8, 11, 7, 'monday   ', 2, 0, 'NONE') ,('2023-01-31', '1401-11-11', '1444-07-09', '2023-01-31', 11, 9, 11, 7, 'tuesday  ', 3, 0, 'NONE') ,('2023-02-01', '1401-11-12', '1444-07-10', '2023-02-01', 12, 10, 11, 7, 'wednesday', 4, 0, 'NONE') ,('2023-02-02', '1401-11-13', '1444-07-11', '2023-02-02', 13, 11, 11, 7, 'thursday ', 5, 0, 'NONE') ,('2023-02-03', '1401-11-14', '1444-07-12', '2023-02-03', 14, 12, 11, 7, 'friday   ', 6, 0, 'NONE') ,('2023-02-04', '1401-11-15', '1444-07-13', '2023-02-04', 15, 13, 11, 7, 'saturday ', 7, 0, 'NONE') ,('2023-02-05', '1401-11-16', '1444-07-14', '2023-02-05', 16, 14, 11, 7, 'sunday   ', 1, 0, 'NONE') ,('2023-02-06', '1401-11-17', '1444-07-15', '2023-02-06', 17, 15, 11, 7, 'monday   ', 2, 0, 'NONE') ,('2023-02-07', '1401-11-18', '1444-07-16', '2023-02-07', 18, 16, 11, 7, 'tuesday  ', 3, 0, 'NONE') ,('2023-02-08', '1401-11-19', '1444-07-17', '2023-02-08', 19, 17, 11, 7, 'wednesday', 4, 0, 'NONE') ,('2023-02-09', '1401-11-20', '1444-07-18', '2023-02-09', 20, 18, 11, 7, 'thursday ', 5, 0, 'NONE') ,('2023-02-10', '1401-11-21', '1444-07-19', '2023-02-10', 21, 19, 11, 7, 'friday   ', 6, 0, 'NONE') ,('2023-02-11', '1401-11-22', '1444-07-20', '2023-02-11', 22, 20, 11, 7, 'saturday ', 7, 0, 'NONE') ,('2023-02-12', '1401-11-23', '1444-07-21', '2023-02-12', 23, 21, 11, 7, 'sunday   ', 1, 0, 'NONE') ,('2023-02-13', '1401-11-24', '1444-07-22', '2023-02-13', 24, 22, 11, 7, 'monday   ', 2, 0, 'NONE') ,('2023-02-14', '1401-11-25', '1444-07-23', '2023-02-14', 25, 23, 11, 7, 'tuesday  ', 3, 0, 'NONE') ,('2023-02-15', '1401-11-26', '1444-07-24', '2023-02-15', 26, 24, 11, 7, 'wednesday', 4, 0, 'NONE') ,('2023-02-16', '1401-11-27', '1444-07-25', '2023-02-16', 27, 25, 11, 7, 'thursday ', 5, 0, 'NONE') ,('2023-02-17', '1401-11-28', '1444-07-26', '2023-02-17', 28, 26, 11, 7, 'friday   ', 6, 0, 'NONE') ,('2023-02-18', '1401-11-29', '1444-07-27', '2023-02-18', 29, 27, 11, 7, 'saturday ', 7, 0, 'NONE') ,('2023-02-19', '1401-11-30', '1444-07-28', '2023-02-19', 30, 28, 11, 7, 'sunday   ', 1, 0, 'NONE') ,('2023-02-20', '1401-12-01', '1444-07-29', '2023-02-20', 1, 29, 12, 7, 'monday   ', 2, 0, 'NONE') ,('2023-02-21', '1401-12-02', '1444-07-30', '2023-02-21', 2, 30, 12, 7, 'tuesday  ', 3, 0, 'NONE') ,('2023-02-22', '1401-12-03', '1444-08-01', '2023-02-22', 3, 1, 12, 8, 'wednesday', 4, 0, 'NONE') ,('2023-02-23', '1401-12-04', '1444-08-02', '2023-02-23', 4, 2, 12, 8, 'thursday ', 5, 0, 'NONE') ,('2023-02-24', '1401-12-05', '1444-08-03', '2023-02-24', 5, 3, 12, 8, 'friday   ', 6, 0, 'NONE') ,('2023-02-25', '1401-12-06', '1444-08-04', '2023-02-25', 6, 4, 12, 8, 'saturday ', 7, 0, 'NONE') ,('2023-02-26', '1401-12-07', '1444-08-05', '2023-02-26', 7, 5, 12, 8, 'sunday   ', 1, 0, 'NONE') ,('2023-02-27', '1401-12-08', '1444-08-06', '2023-02-27', 8, 6, 12, 8, 'monday   ', 2, 0, 'NONE') ,('2023-02-28', '1401-12-09', '1444-08-07', '2023-02-28', 9, 7, 12, 8, 'tuesday  ', 3, 0, 'NONE') ,('2023-03-01', '1401-12-10', '1444-08-08', '2023-03-01', 10, 8, 12, 8, 'wednesday', 4, 0, 'NONE') ,('2023-03-02', '1401-12-11', '1444-08-09', '2023-03-02', 11, 9, 12, 8, 'thursday ', 5, 0, 'NONE') ,('2023-03-03', '1401-12-12', '1444-08-10', '2023-03-03', 12, 10, 12, 8, 'friday   ', 6, 0, 'NONE') ,('2023-03-04', '1401-12-13', '1444-08-11', '2023-03-04', 13, 11, 12, 8, 'saturday ', 7, 0, 'NONE') ,('2023-03-05', '1401-12-14', '1444-08-12', '2023-03-05', 14, 12, 12, 8, 'sunday   ', 1, 0, 'NONE') ,('2023-03-06', '1401-12-15', '1444-08-13', '2023-03-06', 15, 13, 12, 8, 'monday   ', 2, 0, 'NONE') ,('2023-03-07', '1401-12-16', '1444-08-14', '2023-03-07', 16, 14, 12, 8, 'tuesday  ', 3, 0, 'NONE') ,('2023-03-08', '1401-12-17', '1444-08-15', '2023-03-08', 17, 15, 12, 8, 'wednesday', 4, 0, 'NONE') ,('2023-03-09', '1401-12-18', '1444-08-16', '2023-03-09', 18, 16, 12, 8, 'thursday ', 5, 0, 'NONE') ,('2023-03-10', '1401-12-19', '1444-08-17', '2023-03-10', 19, 17, 12, 8, 'friday   ', 6, 0, 'NONE') ,('2023-03-11', '1401-12-20', '1444-08-18', '2023-03-11', 20, 18, 12, 8, 'saturday ', 7, 0, 'NONE') ,('2023-03-12', '1401-12-21', '1444-08-19', '2023-03-12', 21, 19, 12, 8, 'sunday   ', 1, 0, 'NONE') ,('2023-03-13', '1401-12-22', '1444-08-20', '2023-03-13', 22, 20, 12, 8, 'monday   ', 2, 0, 'NONE') ,('2023-03-14', '1401-12-23', '1444-08-21', '2023-03-14', 23, 21, 12, 8, 'tuesday  ', 3, 0, 'NONE') ,('2023-03-15', '1401-12-24', '1444-08-22', '2023-03-15', 24, 22, 12, 8, 'wednesday', 4, 0, 'NONE') ,('2023-03-16', '1401-12-25', '1444-08-23', '2023-03-16', 25, 23, 12, 8, 'thursday ', 5, 0, 'NONE') ,('2023-03-17', '1401-12-26', '1444-08-24', '2023-03-17', 26, 24, 12, 8, 'friday   ', 6, 0, 'NONE') ,('2023-03-18', '1401-12-27', '1444-08-25', '2023-03-18', 27, 25, 12, 8, 'saturday ', 7, 0, 'NONE') ,('2023-03-19', '1401-12-28', '1444-08-26', '2023-03-19', 28, 26, 12, 8, 'sunday   ', 1, 0, 'NONE') ,('2023-03-20', '1401-12-29', '1444-08-27', '2023-03-20', 29, 27, 12, 8, 'monday   ', 2, 0, 'NONE') ,('2023-03-21', '1402-01-01', '1444-08-28', '2023-03-21', 1, 28, 1, 8, 'tuesday  ', 3, 0, 'NONE') ,('2023-03-22', '1402-01-02', '1444-08-29', '2023-03-22', 2, 29, 1, 8, 'wednesday', 4, 0, 'NONE') ,('2023-03-23', '1402-01-03', '1444-09-01', '2023-03-23', 3, 1, 1, 9, 'thursday ', 5, 0, 'NONE') ,('2023-03-24', '1402-01-04', '1444-09-02', '2023-03-24', 4, 2, 1, 9, 'friday   ', 6, 0, 'NONE') ,('2023-03-25', '1402-01-05', '1444-09-03', '2023-03-25', 5, 3, 1, 9, 'saturday ', 7, 0, 'NONE') ,('2023-03-26', '1402-01-06', '1444-09-04', '2023-03-26', 6, 4, 1, 9, 'sunday   ', 1, 0, 'NONE') ,('2023-03-27', '1402-01-07', '1444-09-05', '2023-03-27', 7, 5, 1, 9, 'monday   ', 2, 0, 'NONE') ,('2023-03-28', '1402-01-08', '1444-09-06', '2023-03-28', 8, 6, 1, 9, 'tuesday  ', 3, 0, 'NONE') ,('2023-03-29', '1402-01-09', '1444-09-07', '2023-03-29', 9, 7, 1, 9, 'wednesday', 4, 0, 'NONE') ,('2023-03-30', '1402-01-10', '1444-09-08', '2023-03-30', 10, 8, 1, 9, 'thursday ', 5, 0, 'NONE') ,('2023-03-31', '1402-01-11', '1444-09-09', '2023-03-31', 11, 9, 1, 9, 'friday   ', 6, 0, 'NONE') ,('2023-04-01', '1402-01-12', '1444-09-10', '2023-04-01', 12, 10, 1, 9, 'saturday ', 7, 0, 'NONE') ,('2023-04-02', '1402-01-13', '1444-09-11', '2023-04-02', 13, 11, 1, 9, 'sunday   ', 1, 0, 'NONE') ,('2023-04-03', '1402-01-14', '1444-09-12', '2023-04-03', 14, 12, 1, 9, 'monday   ', 2, 0, 'NONE') ,('2023-04-04', '1402-01-15', '1444-09-13', '2023-04-04', 15, 13, 1, 9, 'tuesday  ', 3, 0, 'NONE') ,('2023-04-05', '1402-01-16', '1444-09-14', '2023-04-05', 16, 14, 1, 9, 'wednesday', 4, 0, 'NONE') ,('2023-04-06', '1402-01-17', '1444-09-15', '2023-04-06', 17, 15, 1, 9, 'thursday ', 5, 0, 'NONE') ,('2023-04-07', '1402-01-18', '1444-09-16', '2023-04-07', 18, 16, 1, 9, 'friday   ', 6, 0, 'NONE') ,('2023-04-08', '1402-01-19', '1444-09-17', '2023-04-08', 19, 17, 1, 9, 'saturday ', 7, 0, 'NONE') ,('2023-04-09', '1402-01-20', '1444-09-18', '2023-04-09', 20, 18, 1, 9, 'sunday   ', 1, 0, 'NONE') ,('2023-04-10', '1402-01-21', '1444-09-19', '2023-04-10', 21, 19, 1, 9, 'monday   ', 2, 0, 'NONE') ,('2023-04-11', '1402-01-22', '1444-09-20', '2023-04-11', 22, 20, 1, 9, 'tuesday  ', 3, 0, 'NONE') ,('2023-04-12', '1402-01-23', '1444-09-21', '2023-04-12', 23, 21, 1, 9, 'wednesday', 4, 0, 'NONE') ,('2023-04-13', '1402-01-24', '1444-09-22', '2023-04-13', 24, 22, 1, 9, 'thursday ', 5, 0, 'NONE') ,('2023-04-14', '1402-01-25', '1444-09-23', '2023-04-14', 25, 23, 1, 9, 'friday   ', 6, 0, 'NONE') ,('2023-04-15', '1402-01-26', '1444-09-24', '2023-04-15', 26, 24, 1, 9, 'saturday ', 7, 0, 'NONE') ,('2023-04-16', '1402-01-27', '1444-09-25', '2023-04-16', 27, 25, 1, 9, 'sunday   ', 1, 0, 'NONE') ,('2023-04-17', '1402-01-28', '1444-09-26', '2023-04-17', 28, 26, 1, 9, 'monday   ', 2, 0, 'NONE') ,('2023-04-18', '1402-01-29', '1444-09-27', '2023-04-18', 29, 27, 1, 9, 'tuesday  ', 3, 0, 'NONE') ,('2023-04-19', '1402-01-30', '1444-09-28', '2023-04-19', 30, 28, 1, 9, 'wednesday', 4, 0, 'NONE') ,('2023-04-20', '1402-01-31', '1444-09-29', '2023-04-20', 31, 29, 1, 9, 'thursday ', 5, 0, 'NONE') ,('2023-04-21', '1402-02-01', '1444-09-30', '2023-04-21', 1, 30, 2, 9, 'friday   ', 6, 0, 'NONE') ,('2023-04-22', '1402-02-02', '1444-10-01', '2023-04-22', 2, 1, 2, 10, 'saturday ', 7, 0, 'NONE') ,('2023-04-23', '1402-02-03', '1444-10-02', '2023-04-23', 3, 2, 2, 10, 'sunday   ', 1, 0, 'NONE') ,('2023-04-24', '1402-02-04', '1444-10-03', '2023-04-24', 4, 3, 2, 10, 'monday   ', 2, 0, 'NONE') ,('2023-04-25', '1402-02-05', '1444-10-04', '2023-04-25', 5, 4, 2, 10, 'tuesday  ', 3, 0, 'NONE') ,('2023-04-26', '1402-02-06', '1444-10-05', '2023-04-26', 6, 5, 2, 10, 'wednesday', 4, 0, 'NONE') ,('2023-04-27', '1402-02-07', '1444-10-06', '2023-04-27', 7, 6, 2, 10, 'thursday ', 5, 0, 'NONE') ,('2023-04-28', '1402-02-08', '1444-10-07', '2023-04-28', 8, 7, 2, 10, 'friday   ', 6, 0, 'NONE') ,('2023-04-29', '1402-02-09', '1444-10-08', '2023-04-29', 9, 8, 2, 10, 'saturday ', 7, 0, 'NONE') ,('2023-04-30', '1402-02-10', '1444-10-09', '2023-04-30', 10, 9, 2, 10, 'sunday   ', 1, 0, 'NONE') ,('2023-05-01', '1402-02-11', '1444-10-10', '2023-05-01', 11, 10, 2, 10, 'monday   ', 2, 0, 'NONE') ,('2023-05-02', '1402-02-12', '1444-10-11', '2023-05-02', 12, 11, 2, 10, 'tuesday  ', 3, 0, 'NONE') ,('2023-05-03', '1402-02-13', '1444-10-12', '2023-05-03', 13, 12, 2, 10, 'wednesday', 4, 0, 'NONE') ,('2023-05-04', '1402-02-14', '1444-10-13', '2023-05-04', 14, 13, 2, 10, 'thursday ', 5, 0, 'NONE') ,('2023-05-05', '1402-02-15', '1444-10-14', '2023-05-05', 15, 14, 2, 10, 'friday   ', 6, 0, 'NONE') ,('2023-05-06', '1402-02-16', '1444-10-15', '2023-05-06', 16, 15, 2, 10, 'saturday ', 7, 0, 'NONE') ,('2023-05-07', '1402-02-17', '1444-10-16', '2023-05-07', 17, 16, 2, 10, 'sunday   ', 1, 0, 'NONE') ,('2023-05-08', '1402-02-18', '1444-10-17', '2023-05-08', 18, 17, 2, 10, 'monday   ', 2, 0, 'NONE') ,('2023-05-09', '1402-02-19', '1444-10-18', '2023-05-09', 19, 18, 2, 10, 'tuesday  ', 3, 0, 'NONE') ,('2023-05-10', '1402-02-20', '1444-10-19', '2023-05-10', 20, 19, 2, 10, 'wednesday', 4, 0, 'NONE') ,('2023-05-11', '1402-02-21', '1444-10-20', '2023-05-11', 21, 20, 2, 10, 'thursday ', 5, 0, 'NONE') ,('2023-05-12', '1402-02-22', '1444-10-21', '2023-05-12', 22, 21, 2, 10, 'friday   ', 6, 0, 'NONE') ,('2023-05-13', '1402-02-23', '1444-10-22', '2023-05-13', 23, 22, 2, 10, 'saturday ', 7, 0, 'NONE') ,('2023-05-14', '1402-02-24', '1444-10-23', '2023-05-14', 24, 23, 2, 10, 'sunday   ', 1, 0, 'NONE') ,('2023-05-15', '1402-02-25', '1444-10-24', '2023-05-15', 25, 24, 2, 10, 'monday   ', 2, 0, 'NONE') ,('2023-05-16', '1402-02-26', '1444-10-25', '2023-05-16', 26, 25, 2, 10, 'tuesday  ', 3, 0, 'NONE') ,('2023-05-17', '1402-02-27', '1444-10-26', '2023-05-17', 27, 26, 2, 10, 'wednesday', 4, 0, 'NONE') ,('2023-05-18', '1402-02-28', '1444-10-27', '2023-05-18', 28, 27, 2, 10, 'thursday ', 5, 0, 'NONE') ,('2023-05-19', '1402-02-29', '1444-10-28', '2023-05-19', 29, 28, 2, 10, 'friday   ', 6, 0, 'NONE') ,('2023-05-20', '1402-02-30', '1444-10-29', '2023-05-20', 30, 29, 2, 10, 'saturday ', 7, 0, 'NONE') ,('2023-05-21', '1402-02-31', '1444-11-01', '2023-05-21', 31, 1, 2, 11, 'sunday   ', 1, 0, 'NONE') ,('2023-05-22', '1402-03-01', '1444-11-02', '2023-05-22', 1, 2, 3, 11, 'monday   ', 2, 0, 'NONE') ,('2023-05-23', '1402-03-02', '1444-11-03', '2023-05-23', 2, 3, 3, 11, 'tuesday  ', 3, 0, 'NONE') ,('2023-05-24', '1402-03-03', '1444-11-04', '2023-05-24', 3, 4, 3, 11, 'wednesday', 4, 0, 'NONE') ,('2023-05-25', '1402-03-04', '1444-11-05', '2023-05-25', 4, 5, 3, 11, 'thursday ', 5, 0, 'NONE') ,('2023-05-26', '1402-03-05', '1444-11-06', '2023-05-26', 5, 6, 3, 11, 'friday   ', 6, 0, 'NONE') ,('2023-05-27', '1402-03-06', '1444-11-07', '2023-05-27', 6, 7, 3, 11, 'saturday ', 7, 0, 'NONE') ,('2023-05-28', '1402-03-07', '1444-11-08', '2023-05-28', 7, 8, 3, 11, 'sunday   ', 1, 0, 'NONE') ,('2023-05-29', '1402-03-08', '1444-11-09', '2023-05-29', 8, 9, 3, 11, 'monday   ', 2, 0, 'NONE') ,('2023-05-30', '1402-03-09', '1444-11-10', '2023-05-30', 9, 10, 3, 11, 'tuesday  ', 3, 0, 'NONE') ,('2023-05-31', '1402-03-10', '1444-11-11', '2023-05-31', 10, 11, 3, 11, 'wednesday', 4, 0, 'NONE') ,('2023-06-01', '1402-03-11', '1444-11-12', '2023-06-01', 11, 12, 3, 11, 'thursday ', 5, 0, 'NONE') ,('2023-06-02', '1402-03-12', '1444-11-13', '2023-06-02', 12, 13, 3, 11, 'friday   ', 6, 0, 'NONE') ,('2023-06-03', '1402-03-13', '1444-11-14', '2023-06-03', 13, 14, 3, 11, 'saturday ', 7, 0, 'NONE') ,('2023-06-04', '1402-03-14', '1444-11-15', '2023-06-04', 14, 15, 3, 11, 'sunday   ', 1, 0, 'NONE') ,('2023-06-05', '1402-03-15', '1444-11-16', '2023-06-05', 15, 16, 3, 11, 'monday   ', 2, 0, 'NONE') ,('2023-06-06', '1402-03-16', '1444-11-17', '2023-06-06', 16, 17, 3, 11, 'tuesday  ', 3, 0, 'NONE') ,('2023-06-07', '1402-03-17', '1444-11-18', '2023-06-07', 17, 18, 3, 11, 'wednesday', 4, 0, 'NONE') ,('2023-06-08', '1402-03-18', '1444-11-19', '2023-06-08', 18, 19, 3, 11, 'thursday ', 5, 0, 'NONE') ,('2023-06-09', '1402-03-19', '1444-11-20', '2023-06-09', 19, 20, 3, 11, 'friday   ', 6, 0, 'NONE') ,('2023-06-10', '1402-03-20', '1444-11-21', '2023-06-10', 20, 21, 3, 11, 'saturday ', 7, 0, 'NONE') ,('2023-06-11', '1402-03-21', '1444-11-22', '2023-06-11', 21, 22, 3, 11, 'sunday   ', 1, 0, 'NONE') ,('2023-06-12', '1402-03-22', '1444-11-23', '2023-06-12', 22, 23, 3, 11, 'monday   ', 2, 0, 'NONE') ,('2023-06-13', '1402-03-23', '1444-11-24', '2023-06-13', 23, 24, 3, 11, 'tuesday  ', 3, 0, 'NONE') ,('2023-06-14', '1402-03-24', '1444-11-25', '2023-06-14', 24, 25, 3, 11, 'wednesday', 4, 0, 'NONE') ,('2023-06-15', '1402-03-25', '1444-11-26', '2023-06-15', 25, 26, 3, 11, 'thursday ', 5, 0, 'NONE') ,('2023-06-16', '1402-03-26', '1444-11-27', '2023-06-16', 26, 27, 3, 11, 'friday   ', 6, 0, 'NONE') ,('2023-06-17', '1402-03-27', '1444-11-28', '2023-06-17', 27, 28, 3, 11, 'saturday ', 7, 0, 'NONE') ,('2023-06-18', '1402-03-28', '1444-11-29', '2023-06-18', 28, 29, 3, 11, 'sunday   ', 1, 0, 'NONE') ,('2023-06-19', '1402-03-29', '1444-11-30', '2023-06-19', 29, 30, 3, 11, 'monday   ', 2, 0, 'NONE') ,('2023-06-20', '1402-03-30', '1444-12-01', '2023-06-20', 30, 1, 3, 12, 'tuesday  ', 3, 0, 'NONE') ,('2023-06-21', '1402-03-31', '1444-12-02', '2023-06-21', 31, 2, 3, 12, 'wednesday', 4, 0, 'NONE') ,('2023-06-22', '1402-04-01', '1444-12-03', '2023-06-22', 1, 3, 4, 12, 'thursday ', 5, 0, 'NONE') ,('2023-06-23', '1402-04-02', '1444-12-04', '2023-06-23', 2, 4, 4, 12, 'friday   ', 6, 0, 'NONE') ,('2023-06-24', '1402-04-03', '1444-12-05', '2023-06-24', 3, 5, 4, 12, 'saturday ', 7, 0, 'NONE') ,('2023-06-25', '1402-04-04', '1444-12-06', '2023-06-25', 4, 6, 4, 12, 'sunday   ', 1, 0, 'NONE') ,('2023-06-26', '1402-04-05', '1444-12-07', '2023-06-26', 5, 7, 4, 12, 'monday   ', 2, 0, 'NONE') ,('2023-06-27', '1402-04-06', '1444-12-08', '2023-06-27', 6, 8, 4, 12, 'tuesday  ', 3, 0, 'NONE') ,('2023-06-28', '1402-04-07', '1444-12-09', '2023-06-28', 7, 9, 4, 12, 'wednesday', 4, 0, 'NONE') ,('2023-06-29', '1402-04-08', '1444-12-10', '2023-06-29', 8, 10, 4, 12, 'thursday ', 5, 0, 'NONE') ,('2023-06-30', '1402-04-09', '1444-12-11', '2023-06-30', 9, 11, 4, 12, 'friday   ', 6, 0, 'NONE') ,('2023-07-01', '1402-04-10', '1444-12-12', '2023-07-01', 10, 12, 4, 12, 'saturday ', 7, 0, 'NONE') ,('2023-07-02', '1402-04-11', '1444-12-13', '2023-07-02', 11, 13, 4, 12, 'sunday   ', 1, 0, 'NONE') ,('2023-07-03', '1402-04-12', '1444-12-14', '2023-07-03', 12, 14, 4, 12, 'monday   ', 2, 0, 'NONE') ,('2023-07-04', '1402-04-13', '1444-12-15', '2023-07-04', 13, 15, 4, 12, 'tuesday  ', 3, 0, 'NONE') ,('2023-07-05', '1402-04-14', '1444-12-16', '2023-07-05', 14, 16, 4, 12, 'wednesday', 4, 0, 'NONE') ,('2023-07-06', '1402-04-15', '1444-12-17', '2023-07-06', 15, 17, 4, 12, 'thursday ', 5, 0, 'NONE') ,('2023-07-07', '1402-04-16', '1444-12-18', '2023-07-07', 16, 18, 4, 12, 'friday   ', 6, 0, 'NONE') ,('2023-07-08', '1402-04-17', '1444-12-19', '2023-07-08', 17, 19, 4, 12, 'saturday ', 7, 0, 'NONE') ,('2023-07-09', '1402-04-18', '1444-12-20', '2023-07-09', 18, 20, 4, 12, 'sunday   ', 1, 0, 'NONE') ,('2023-07-10', '1402-04-19', '1444-12-21', '2023-07-10', 19, 21, 4, 12, 'monday   ', 2, 0, 'NONE') ,('2023-07-11', '1402-04-20', '1444-12-22', '2023-07-11', 20, 22, 4, 12, 'tuesday  ', 3, 0, 'NONE') ,('2023-07-12', '1402-04-21', '1444-12-23', '2023-07-12', 21, 23, 4, 12, 'wednesday', 4, 0, 'NONE') ,('2023-07-13', '1402-04-22', '1444-12-24', '2023-07-13', 22, 24, 4, 12, 'thursday ', 5, 0, 'NONE') ,('2023-07-14', '1402-04-23', '1444-12-25', '2023-07-14', 23, 25, 4, 12, 'friday   ', 6, 0, 'NONE') ,('2023-07-15', '1402-04-24', '1444-12-26', '2023-07-15', 24, 26, 4, 12, 'saturday ', 7, 0, 'NONE') ,('2023-07-16', '1402-04-25', '1444-12-27', '2023-07-16', 25, 27, 4, 12, 'sunday   ', 1, 0, 'NONE') ,('2023-07-17', '1402-04-26', '1444-12-28', '2023-07-17', 26, 28, 4, 12, 'monday   ', 2, 0, 'NONE') ,('2023-07-18', '1402-04-27', '1444-12-29', '2023-07-18', 27, 29, 4, 12, 'tuesday  ', 3, 0, 'NONE') ,('2023-07-19', '1402-04-28', '1445-01-01', '2023-07-19', 28, 1, 4, 1, 'wednesday', 4, 0, 'NONE') ,('2023-07-20', '1402-04-29', '1445-01-02', '2023-07-20', 29, 2, 4, 1, 'thursday ', 5, 0, 'NONE') ,('2023-07-21', '1402-04-30', '1445-01-03', '2023-07-21', 30, 3, 4, 1, 'friday   ', 6, 0, 'NONE') ,('2023-07-22', '1402-04-31', '1445-01-04', '2023-07-22', 31, 4, 4, 1, 'saturday ', 7, 0, 'NONE') ,('2023-07-23', '1402-05-01', '1445-01-05', '2023-07-23', 1, 5, 5, 1, 'sunday   ', 1, 0, 'NONE') ,('2023-07-24', '1402-05-02', '1445-01-06', '2023-07-24', 2, 6, 5, 1, 'monday   ', 2, 0, 'NONE') ,('2023-07-25', '1402-05-03', '1445-01-07', '2023-07-25', 3, 7, 5, 1, 'tuesday  ', 3, 0, 'NONE') ,('2023-07-26', '1402-05-04', '1445-01-08', '2023-07-26', 4, 8, 5, 1, 'wednesday', 4, 0, 'NONE') ,('2023-07-27', '1402-05-05', '1445-01-09', '2023-07-27', 5, 9, 5, 1, 'thursday ', 5, 0, 'NONE') ,('2023-07-28', '1402-05-06', '1445-01-10', '2023-07-28', 6, 10, 5, 1, 'friday   ', 6, 0, 'NONE') ,('2023-07-29', '1402-05-07', '1445-01-11', '2023-07-29', 7, 11, 5, 1, 'saturday ', 7, 0, 'NONE') ,('2023-07-30', '1402-05-08', '1445-01-12', '2023-07-30', 8, 12, 5, 1, 'sunday   ', 1, 0, 'NONE') ,('2023-07-31', '1402-05-09', '1445-01-13', '2023-07-31', 9, 13, 5, 1, 'monday   ', 2, 0, 'NONE') ,('2023-08-01', '1402-05-10', '1445-01-14', '2023-08-01', 10, 14, 5, 1, 'tuesday  ', 3, 0, 'NONE') ,('2023-08-02', '1402-05-11', '1445-01-15', '2023-08-02', 11, 15, 5, 1, 'wednesday', 4, 0, 'NONE') ,('2023-08-03', '1402-05-12', '1445-01-16', '2023-08-03', 12, 16, 5, 1, 'thursday ', 5, 0, 'NONE') ,('2023-08-04', '1402-05-13', '1445-01-17', '2023-08-04', 13, 17, 5, 1, 'friday   ', 6, 0, 'NONE') ,('2023-08-05', '1402-05-14', '1445-01-18', '2023-08-05', 14, 18, 5, 1, 'saturday ', 7, 0, 'NONE') ,('2023-08-06', '1402-05-15', '1445-01-19', '2023-08-06', 15, 19, 5, 1, 'sunday   ', 1, 0, 'NONE') ,('2023-08-07', '1402-05-16', '1445-01-20', '2023-08-07', 16, 20, 5, 1, 'monday   ', 2, 0, 'NONE') ,('2023-08-08', '1402-05-17', '1445-01-21', '2023-08-08', 17, 21, 5, 1, 'tuesday  ', 3, 0, 'NONE') ,('2023-08-09', '1402-05-18', '1445-01-22', '2023-08-09', 18, 22, 5, 1, 'wednesday', 4, 0, 'NONE') ,('2023-08-10', '1402-05-19', '1445-01-23', '2023-08-10', 19, 23, 5, 1, 'thursday ', 5, 0, 'NONE') ,('2023-08-11', '1402-05-20', '1445-01-24', '2023-08-11', 20, 24, 5, 1, 'friday   ', 6, 0, 'NONE') ,('2023-08-12', '1402-05-21', '1445-01-25', '2023-08-12', 21, 25, 5, 1, 'saturday ', 7, 0, 'NONE') ,('2023-08-13', '1402-05-22', '1445-01-26', '2023-08-13', 22, 26, 5, 1, 'sunday   ', 1, 0, 'NONE') ,('2023-08-14', '1402-05-23', '1445-01-27', '2023-08-14', 23, 27, 5, 1, 'monday   ', 2, 0, 'NONE') ,('2023-08-15', '1402-05-24', '1445-01-28', '2023-08-15', 24, 28, 5, 1, 'tuesday  ', 3, 0, 'NONE') ,('2023-08-16', '1402-05-25', '1445-01-29', '2023-08-16', 25, 29, 5, 1, 'wednesday', 4, 0, 'NONE') ,('2023-08-17', '1402-05-26', '1445-01-30', '2023-08-17', 26, 30, 5, 1, 'thursday ', 5, 0, 'NONE') ,('2023-08-18', '1402-05-27', '1445-02-01', '2023-08-18', 27, 1, 5, 2, 'friday   ', 6, 0, 'NONE') ,('2023-08-19', '1402-05-28', '1445-02-02', '2023-08-19', 28, 2, 5, 2, 'saturday ', 7, 0, 'NONE') ,('2023-08-20', '1402-05-29', '1445-02-03', '2023-08-20', 29, 3, 5, 2, 'sunday   ', 1, 0, 'NONE') ,('2023-08-21', '1402-05-30', '1445-02-04', '2023-08-21', 30, 4, 5, 2, 'monday   ', 2, 0, 'NONE') ,('2023-08-22', '1402-05-31', '1445-02-05', '2023-08-22', 31, 5, 5, 2, 'tuesday  ', 3, 0, 'NONE') ,('2023-08-23', '1402-06-01', '1445-02-06', '2023-08-23', 1, 6, 6, 2, 'wednesday', 4, 0, 'NONE') ,('2023-08-24', '1402-06-02', '1445-02-07', '2023-08-24', 2, 7, 6, 2, 'thursday ', 5, 0, 'NONE') ,('2023-08-25', '1402-06-03', '1445-02-08', '2023-08-25', 3, 8, 6, 2, 'friday   ', 6, 0, 'NONE') ,('2023-08-26', '1402-06-04', '1445-02-09', '2023-08-26', 4, 9, 6, 2, 'saturday ', 7, 0, 'NONE') ,('2023-08-27', '1402-06-05', '1445-02-10', '2023-08-27', 5, 10, 6, 2, 'sunday   ', 1, 0, 'NONE') ,('2023-08-28', '1402-06-06', '1445-02-11', '2023-08-28', 6, 11, 6, 2, 'monday   ', 2, 0, 'NONE') ,('2023-08-29', '1402-06-07', '1445-02-12', '2023-08-29', 7, 12, 6, 2, 'tuesday  ', 3, 0, 'NONE') ,('2023-08-30', '1402-06-08', '1445-02-13', '2023-08-30', 8, 13, 6, 2, 'wednesday', 4, 0, 'NONE') ,('2023-08-31', '1402-06-09', '1445-02-14', '2023-08-31', 9, 14, 6, 2, 'thursday ', 5, 0, 'NONE') ,('2023-09-01', '1402-06-10', '1445-02-15', '2023-09-01', 10, 15, 6, 2, 'friday   ', 6, 0, 'NONE') ,('2023-09-02', '1402-06-11', '1445-02-16', '2023-09-02', 11, 16, 6, 2, 'saturday ', 7, 0, 'NONE') ,('2023-09-03', '1402-06-12', '1445-02-17', '2023-09-03', 12, 17, 6, 2, 'sunday   ', 1, 0, 'NONE') ,('2023-09-04', '1402-06-13', '1445-02-18', '2023-09-04', 13, 18, 6, 2, 'monday   ', 2, 0, 'NONE') ,('2023-09-05', '1402-06-14', '1445-02-19', '2023-09-05', 14, 19, 6, 2, 'tuesday  ', 3, 0, 'NONE') ,('2023-09-06', '1402-06-15', '1445-02-20', '2023-09-06', 15, 20, 6, 2, 'wednesday', 4, 0, 'NONE') ,('2023-09-07', '1402-06-16', '1445-02-21', '2023-09-07', 16, 21, 6, 2, 'thursday ', 5, 0, 'NONE') ,('2023-09-08', '1402-06-17', '1445-02-22', '2023-09-08', 17, 22, 6, 2, 'friday   ', 6, 0, 'NONE') ,('2023-09-09', '1402-06-18', '1445-02-23', '2023-09-09', 18, 23, 6, 2, 'saturday ', 7, 0, 'NONE') ,('2023-09-10', '1402-06-19', '1445-02-24', '2023-09-10', 19, 24, 6, 2, 'sunday   ', 1, 0, 'NONE') ,('2023-09-11', '1402-06-20', '1445-02-25', '2023-09-11', 20, 25, 6, 2, 'monday   ', 2, 0, 'NONE') ,('2023-09-12', '1402-06-21', '1445-02-26', '2023-09-12', 21, 26, 6, 2, 'tuesday  ', 3, 0, 'NONE') ,('2023-09-13', '1402-06-22', '1445-02-27', '2023-09-13', 22, 27, 6, 2, 'wednesday', 4, 0, 'NONE') ,('2023-09-14', '1402-06-23', '1445-02-28', '2023-09-14', 23, 28, 6, 2, 'thursday ', 5, 0, 'NONE') ,('2023-09-15', '1402-06-24', '1445-02-29', '2023-09-15', 24, 29, 6, 2, 'friday   ', 6, 0, 'NONE') ,('2023-09-16', '1402-06-25', '1445-03-01', '2023-09-16', 25, 1, 6, 3, 'saturday ', 7, 0, 'NONE') ,('2023-09-17', '1402-06-26', '1445-03-02', '2023-09-17', 26, 2, 6, 3, 'sunday   ', 1, 0, 'NONE') ,('2023-09-18', '1402-06-27', '1445-03-03', '2023-09-18', 27, 3, 6, 3, 'monday   ', 2, 0, 'NONE') ,('2023-09-19', '1402-06-28', '1445-03-04', '2023-09-19', 28, 4, 6, 3, 'tuesday  ', 3, 0, 'NONE') ,('2023-09-20', '1402-06-29', '1445-03-05', '2023-09-20', 29, 5, 6, 3, 'wednesday', 4, 0, 'NONE') ,('2023-09-21', '1402-06-30', '1445-03-06', '2023-09-21', 30, 6, 6, 3, 'thursday ', 5, 0, 'NONE') ,('2023-09-22', '1402-06-31', '1445-03-07', '2023-09-22', 31, 7, 6, 3, 'friday   ', 6, 0, 'NONE') ,('2023-09-23', '1402-07-01', '1445-03-08', '2023-09-23', 1, 8, 7, 3, 'saturday ', 7, 0, 'NONE') ,('2023-09-24', '1402-07-02', '1445-03-09', '2023-09-24', 2, 9, 7, 3, 'sunday   ', 1, 0, 'NONE') ,('2023-09-25', '1402-07-03', '1445-03-10', '2023-09-25', 3, 10, 7, 3, 'monday   ', 2, 0, 'NONE') ,('2023-09-26', '1402-07-04', '1445-03-11', '2023-09-26', 4, 11, 7, 3, 'tuesday  ', 3, 0, 'NONE') ,('2023-09-27', '1402-07-05', '1445-03-12', '2023-09-27', 5, 12, 7, 3, 'wednesday', 4, 0, 'NONE') ,('2023-09-28', '1402-07-06', '1445-03-13', '2023-09-28', 6, 13, 7, 3, 'thursday ', 5, 0, 'NONE') ,('2023-09-29', '1402-07-07', '1445-03-14', '2023-09-29', 7, 14, 7, 3, 'friday   ', 6, 0, 'NONE') ,('2023-09-30', '1402-07-08', '1445-03-15', '2023-09-30', 8, 15, 7, 3, 'saturday ', 7, 0, 'NONE') ,('2023-10-01', '1402-07-09', '1445-03-16', '2023-10-01', 9, 16, 7, 3, 'sunday   ', 1, 0, 'NONE') ,('2023-10-02', '1402-07-10', '1445-03-17', '2023-10-02', 10, 17, 7, 3, 'monday   ', 2, 0, 'NONE') ,('2023-10-03', '1402-07-11', '1445-03-18', '2023-10-03', 11, 18, 7, 3, 'tuesday  ', 3, 0, 'NONE') ,('2023-10-04', '1402-07-12', '1445-03-19', '2023-10-04', 12, 19, 7, 3, 'wednesday', 4, 0, 'NONE') ,('2023-10-05', '1402-07-13', '1445-03-20', '2023-10-05', 13, 20, 7, 3, 'thursday ', 5, 0, 'NONE') ,('2023-10-06', '1402-07-14', '1445-03-21', '2023-10-06', 14, 21, 7, 3, 'friday   ', 6, 0, 'NONE') ,('2023-10-07', '1402-07-15', '1445-03-22', '2023-10-07', 15, 22, 7, 3, 'saturday ', 7, 0, 'NONE') ,('2023-10-08', '1402-07-16', '1445-03-23', '2023-10-08', 16, 23, 7, 3, 'sunday   ', 1, 0, 'NONE') ,('2023-10-09', '1402-07-17', '1445-03-24', '2023-10-09', 17, 24, 7, 3, 'monday   ', 2, 0, 'NONE') ,('2023-10-10', '1402-07-18', '1445-03-25', '2023-10-10', 18, 25, 7, 3, 'tuesday  ', 3, 0, 'NONE') ,('2023-10-11', '1402-07-19', '1445-03-26', '2023-10-11', 19, 26, 7, 3, 'wednesday', 4, 0, 'NONE') ,('2023-10-12', '1402-07-20', '1445-03-27', '2023-10-12', 20, 27, 7, 3, 'thursday ', 5, 0, 'NONE') ,('2023-10-13', '1402-07-21', '1445-03-28', '2023-10-13', 21, 28, 7, 3, 'friday   ', 6, 0, 'NONE') ,('2023-10-14', '1402-07-22', '1445-03-29', '2023-10-14', 22, 29, 7, 3, 'saturday ', 7, 0, 'NONE') ,('2023-10-15', '1402-07-23', '1445-03-30', '2023-10-15', 23, 30, 7, 3, 'sunday   ', 1, 0, 'NONE') ,('2023-10-16', '1402-07-24', '1445-04-01', '2023-10-16', 24, 1, 7, 4, 'monday   ', 2, 0, 'NONE') ,('2023-10-17', '1402-07-25', '1445-04-02', '2023-10-17', 25, 2, 7, 4, 'tuesday  ', 3, 0, 'NONE') ,('2023-10-18', '1402-07-26', '1445-04-03', '2023-10-18', 26, 3, 7, 4, 'wednesday', 4, 0, 'NONE') ,('2023-10-19', '1402-07-27', '1445-04-04', '2023-10-19', 27, 4, 7, 4, 'thursday ', 5, 0, 'NONE') ,('2023-10-20', '1402-07-28', '1445-04-05', '2023-10-20', 28, 5, 7, 4, 'friday   ', 6, 0, 'NONE') ,('2023-10-21', '1402-07-29', '1445-04-06', '2023-10-21', 29, 6, 7, 4, 'saturday ', 7, 0, 'NONE') ,('2023-10-22', '1402-07-30', '1445-04-07', '2023-10-22', 30, 7, 7, 4, 'sunday   ', 1, 0, 'NONE') ,('2023-10-23', '1402-08-01', '1445-04-08', '2023-10-23', 1, 8, 8, 4, 'monday   ', 2, 0, 'NONE') ,('2023-10-24', '1402-08-02', '1445-04-09', '2023-10-24', 2, 9, 8, 4, 'tuesday  ', 3, 0, 'NONE') ,('2023-10-25', '1402-08-03', '1445-04-10', '2023-10-25', 3, 10, 8, 4, 'wednesday', 4, 0, 'NONE') ,('2023-10-26', '1402-08-04', '1445-04-11', '2023-10-26', 4, 11, 8, 4, 'thursday ', 5, 0, 'NONE') ,('2023-10-27', '1402-08-05', '1445-04-12', '2023-10-27', 5, 12, 8, 4, 'friday   ', 6, 0, 'NONE') ,('2023-10-28', '1402-08-06', '1445-04-13', '2023-10-28', 6, 13, 8, 4, 'saturday ', 7, 0, 'NONE') ,('2023-10-29', '1402-08-07', '1445-04-14', '2023-10-29', 7, 14, 8, 4, 'sunday   ', 1, 0, 'NONE') ,('2023-10-30', '1402-08-08', '1445-04-15', '2023-10-30', 8, 15, 8, 4, 'monday   ', 2, 0, 'NONE') ,('2023-10-31', '1402-08-09', '1445-04-16', '2023-10-31', 9, 16, 8, 4, 'tuesday  ', 3, 0, 'NONE') ,('2023-11-01', '1402-08-10', '1445-04-17', '2023-11-01', 10, 17, 8, 4, 'wednesday', 4, 0, 'NONE') ,('2023-11-02', '1402-08-11', '1445-04-18', '2023-11-02', 11, 18, 8, 4, 'thursday ', 5, 0, 'NONE') ,('2023-11-03', '1402-08-12', '1445-04-19', '2023-11-03', 12, 19, 8, 4, 'friday   ', 6, 0, 'NONE') ,('2023-11-04', '1402-08-13', '1445-04-20', '2023-11-04', 13, 20, 8, 4, 'saturday ', 7, 0, 'NONE') ,('2023-11-05', '1402-08-14', '1445-04-21', '2023-11-05', 14, 21, 8, 4, 'sunday   ', 1, 0, 'NONE') ,('2023-11-06', '1402-08-15', '1445-04-22', '2023-11-06', 15, 22, 8, 4, 'monday   ', 2, 0, 'NONE') ,('2023-11-07', '1402-08-16', '1445-04-23', '2023-11-07', 16, 23, 8, 4, 'tuesday  ', 3, 0, 'NONE') ,('2023-11-08', '1402-08-17', '1445-04-24', '2023-11-08', 17, 24, 8, 4, 'wednesday', 4, 0, 'NONE') ,('2023-11-09', '1402-08-18', '1445-04-25', '2023-11-09', 18, 25, 8, 4, 'thursday ', 5, 0, 'NONE') ,('2023-11-10', '1402-08-19', '1445-04-26', '2023-11-10', 19, 26, 8, 4, 'friday   ', 6, 0, 'NONE') ,('2023-11-11', '1402-08-20', '1445-04-27', '2023-11-11', 20, 27, 8, 4, 'saturday ', 7, 0, 'NONE') ,('2023-11-12', '1402-08-21', '1445-04-28', '2023-11-12', 21, 28, 8, 4, 'sunday   ', 1, 0, 'NONE') ,('2023-11-13', '1402-08-22', '1445-04-29', '2023-11-13', 22, 29, 8, 4, 'monday   ', 2, 0, 'NONE') ,('2023-11-14', '1402-08-23', '1445-05-01', '2023-11-14', 23, 1, 8, 5, 'tuesday  ', 3, 0, 'NONE') ,('2023-11-15', '1402-08-24', '1445-05-02', '2023-11-15', 24, 2, 8, 5, 'wednesday', 4, 0, 'NONE') ,('2023-11-16', '1402-08-25', '1445-05-03', '2023-11-16', 25, 3, 8, 5, 'thursday ', 5, 0, 'NONE') ,('2023-11-17', '1402-08-26', '1445-05-04', '2023-11-17', 26, 4, 8, 5, 'friday   ', 6, 0, 'NONE') ,('2023-11-18', '1402-08-27', '1445-05-05', '2023-11-18', 27, 5, 8, 5, 'saturday ', 7, 0, 'NONE') ,('2023-11-19', '1402-08-28', '1445-05-06', '2023-11-19', 28, 6, 8, 5, 'sunday   ', 1, 0, 'NONE') ,('2023-11-20', '1402-08-29', '1445-05-07', '2023-11-20', 29, 7, 8, 5, 'monday   ', 2, 0, 'NONE') ,('2023-11-21', '1402-08-30', '1445-05-08', '2023-11-21', 30, 8, 8, 5, 'tuesday  ', 3, 0, 'NONE') ,('2023-11-22', '1402-09-01', '1445-05-09', '2023-11-22', 1, 9, 9, 5, 'wednesday', 4, 0, 'NONE') ,('2023-11-23', '1402-09-02', '1445-05-10', '2023-11-23', 2, 10, 9, 5, 'thursday ', 5, 0, 'NONE') ,('2023-11-24', '1402-09-03', '1445-05-11', '2023-11-24', 3, 11, 9, 5, 'friday   ', 6, 0, 'NONE') ,('2023-11-25', '1402-09-04', '1445-05-12', '2023-11-25', 4, 12, 9, 5, 'saturday ', 7, 0, 'NONE') ,('2023-11-26', '1402-09-05', '1445-05-13', '2023-11-26', 5, 13, 9, 5, 'sunday   ', 1, 0, 'NONE') ,('2023-11-27', '1402-09-06', '1445-05-14', '2023-11-27', 6, 14, 9, 5, 'monday   ', 2, 0, 'NONE') ,('2023-11-28', '1402-09-07', '1445-05-15', '2023-11-28', 7, 15, 9, 5, 'tuesday  ', 3, 0, 'NONE') ,('2023-11-29', '1402-09-08', '1445-05-16', '2023-11-29', 8, 16, 9, 5, 'wednesday', 4, 0, 'NONE') ,('2023-11-30', '1402-09-09', '1445-05-17', '2023-11-30', 9, 17, 9, 5, 'thursday ', 5, 0, 'NONE') ,('2023-12-01', '1402-09-10', '1445-05-18', '2023-12-01', 10, 18, 9, 5, 'friday   ', 6, 0, 'NONE') ,('2023-12-02', '1402-09-11', '1445-05-19', '2023-12-02', 11, 19, 9, 5, 'saturday ', 7, 0, 'NONE') ,('2023-12-03', '1402-09-12', '1445-05-20', '2023-12-03', 12, 20, 9, 5, 'sunday   ', 1, 0, 'NONE') ,('2023-12-04', '1402-09-13', '1445-05-21', '2023-12-04', 13, 21, 9, 5, 'monday   ', 2, 0, 'NONE') ,('2023-12-05', '1402-09-14', '1445-05-22', '2023-12-05', 14, 22, 9, 5, 'tuesday  ', 3, 0, 'NONE') ,('2023-12-06', '1402-09-15', '1445-05-23', '2023-12-06', 15, 23, 9, 5, 'wednesday', 4, 0, 'NONE') ,('2023-12-07', '1402-09-16', '1445-05-24', '2023-12-07', 16, 24, 9, 5, 'thursday ', 5, 0, 'NONE') ,('2023-12-08', '1402-09-17', '1445-05-25', '2023-12-08', 17, 25, 9, 5, 'friday   ', 6, 0, 'NONE') ,('2023-12-09', '1402-09-18', '1445-05-26', '2023-12-09', 18, 26, 9, 5, 'saturday ', 7, 0, 'NONE') ,('2023-12-10', '1402-09-19', '1445-05-27', '2023-12-10', 19, 27, 9, 5, 'sunday   ', 1, 0, 'NONE') ,('2023-12-11', '1402-09-20', '1445-05-28', '2023-12-11', 20, 28, 9, 5, 'monday   ', 2, 0, 'NONE') ,('2023-12-12', '1402-09-21', '1445-05-29', '2023-12-12', 21, 29, 9, 5, 'tuesday  ', 3, 0, 'NONE') ,('2023-12-13', '1402-09-22', '1445-05-30', '2023-12-13', 22, 30, 9, 5, 'wednesday', 4, 0, 'NONE') ,('2023-12-14', '1402-09-23', '1445-06-01', '2023-12-14', 23, 1, 9, 6, 'thursday ', 5, 0, 'NONE') ,('2023-12-15', '1402-09-24', '1445-06-02', '2023-12-15', 24, 2, 9, 6, 'friday   ', 6, 0, 'NONE') ,('2023-12-16', '1402-09-25', '1445-06-03', '2023-12-16', 25, 3, 9, 6, 'saturday ', 7, 0, 'NONE') ,('2023-12-17', '1402-09-26', '1445-06-04', '2023-12-17', 26, 4, 9, 6, 'sunday   ', 1, 0, 'NONE') ,('2023-12-18', '1402-09-27', '1445-06-05', '2023-12-18', 27, 5, 9, 6, 'monday   ', 2, 0, 'NONE') ,('2023-12-19', '1402-09-28', '1445-06-06', '2023-12-19', 28, 6, 9, 6, 'tuesday  ', 3, 0, 'NONE') ,('2023-12-20', '1402-09-29', '1445-06-07', '2023-12-20', 29, 7, 9, 6, 'wednesday', 4, 0, 'NONE') ,('2023-12-21', '1402-09-30', '1445-06-08', '2023-12-21', 30, 8, 9, 6, 'thursday ', 5, 0, 'NONE') ,('2023-12-22', '1402-10-01', '1445-06-09', '2023-12-22', 1, 9, 10, 6, 'friday   ', 6, 0, 'NONE') ,('2023-12-23', '1402-10-02', '1445-06-10', '2023-12-23', 2, 10, 10, 6, 'saturday ', 7, 0, 'NONE') ,('2023-12-24', '1402-10-03', '1445-06-11', '2023-12-24', 3, 11, 10, 6, 'sunday   ', 1, 0, 'NONE') ,('2023-12-25', '1402-10-04', '1445-06-12', '2023-12-25', 4, 12, 10, 6, 'monday   ', 2, 0, 'NONE') ,('2023-12-26', '1402-10-05', '1445-06-13', '2023-12-26', 5, 13, 10, 6, 'tuesday  ', 3, 0, 'NONE') ,('2023-12-27', '1402-10-06', '1445-06-14', '2023-12-27', 6, 14, 10, 6, 'wednesday', 4, 0, 'NONE') ,('2023-12-28', '1402-10-07', '1445-06-15', '2023-12-28', 7, 15, 10, 6, 'thursday ', 5, 0, 'NONE') ,('2023-12-29', '1402-10-08', '1445-06-16', '2023-12-29', 8, 16, 10, 6, 'friday   ', 6, 0, 'NONE') ,('2023-12-30', '1402-10-09', '1445-06-17', '2023-12-30', 9, 17, 10, 6, 'saturday ', 7, 0, 'NONE') ,('2023-12-31', '1402-10-10', '1445-06-18', '2023-12-31', 10, 18, 10, 6, 'sunday   ', 1, 0, 'NONE') ,('2024-01-01', '1402-10-11', '1445-06-19', '2024-01-01', 11, 19, 10, 6, 'monday   ', 2, 0, 'NONE') ,('2024-01-02', '1402-10-12', '1445-06-20', '2024-01-02', 12, 20, 10, 6, 'tuesday  ', 3, 0, 'NONE') ,('2024-01-03', '1402-10-13', '1445-06-21', '2024-01-03', 13, 21, 10, 6, 'wednesday', 4, 0, 'NONE') ,('2024-01-04', '1402-10-14', '1445-06-22', '2024-01-04', 14, 22, 10, 6, 'thursday ', 5, 0, 'NONE') ,('2024-01-05', '1402-10-15', '1445-06-23', '2024-01-05', 15, 23, 10, 6, 'friday   ', 6, 0, 'NONE') ,('2024-01-06', '1402-10-16', '1445-06-24', '2024-01-06', 16, 24, 10, 6, 'saturday ', 7, 0, 'NONE') ,('2024-01-07', '1402-10-17', '1445-06-25', '2024-01-07', 17, 25, 10, 6, 'sunday   ', 1, 0, 'NONE') ,('2024-01-08', '1402-10-18', '1445-06-26', '2024-01-08', 18, 26, 10, 6, 'monday   ', 2, 0, 'NONE') ,('2024-01-09', '1402-10-19', '1445-06-27', '2024-01-09', 19, 27, 10, 6, 'tuesday  ', 3, 0, 'NONE') ,('2024-01-10', '1402-10-20', '1445-06-28', '2024-01-10', 20, 28, 10, 6, 'wednesday', 4, 0, 'NONE') ,('2024-01-11', '1402-10-21', '1445-06-29', '2024-01-11', 21, 29, 10, 6, 'thursday ', 5, 0, 'NONE') ,('2024-01-12', '1402-10-22', '1445-07-01', '2024-01-12', 22, 1, 10, 7, 'friday   ', 6, 0, 'NONE') ,('2024-01-13', '1402-10-23', '1445-07-02', '2024-01-13', 23, 2, 10, 7, 'saturday ', 7, 0, 'NONE') ,('2024-01-14', '1402-10-24', '1445-07-03', '2024-01-14', 24, 3, 10, 7, 'sunday   ', 1, 0, 'NONE') ,('2024-01-15', '1402-10-25', '1445-07-04', '2024-01-15', 25, 4, 10, 7, 'monday   ', 2, 0, 'NONE') ,('2024-01-16', '1402-10-26', '1445-07-05', '2024-01-16', 26, 5, 10, 7, 'tuesday  ', 3, 0, 'NONE') ,('2024-01-17', '1402-10-27', '1445-07-06', '2024-01-17', 27, 6, 10, 7, 'wednesday', 4, 0, 'NONE') ,('2024-01-18', '1402-10-28', '1445-07-07', '2024-01-18', 28, 7, 10, 7, 'thursday ', 5, 0, 'NONE') ,('2024-01-19', '1402-10-29', '1445-07-08', '2024-01-19', 29, 8, 10, 7, 'friday   ', 6, 0, 'NONE') ,('2024-01-20', '1402-10-30', '1445-07-09', '2024-01-20', 30, 9, 10, 7, 'saturday ', 7, 0, 'NONE') ,('2024-01-21', '1402-11-01', '1445-07-10', '2024-01-21', 1, 10, 11, 7, 'sunday   ', 1, 0, 'NONE') ,('2024-01-22', '1402-11-02', '1445-07-11', '2024-01-22', 2, 11, 11, 7, 'monday   ', 2, 0, 'NONE') ,('2024-01-23', '1402-11-03', '1445-07-12', '2024-01-23', 3, 12, 11, 7, 'tuesday  ', 3, 0, 'NONE') ,('2024-01-24', '1402-11-04', '1445-07-13', '2024-01-24', 4, 13, 11, 7, 'wednesday', 4, 0, 'NONE') ,('2024-01-25', '1402-11-05', '1445-07-14', '2024-01-25', 5, 14, 11, 7, 'thursday ', 5, 0, 'NONE') ,('2024-01-26', '1402-11-06', '1445-07-15', '2024-01-26', 6, 15, 11, 7, 'friday   ', 6, 0, 'NONE') ,('2024-01-27', '1402-11-07', '1445-07-16', '2024-01-27', 7, 16, 11, 7, 'saturday ', 7, 0, 'NONE') ,('2024-01-28', '1402-11-08', '1445-07-17', '2024-01-28', 8, 17, 11, 7, 'sunday   ', 1, 0, 'NONE') ,('2024-01-29', '1402-11-09', '1445-07-18', '2024-01-29', 9, 18, 11, 7, 'monday   ', 2, 0, 'NONE') ,('2024-01-30', '1402-11-10', '1445-07-19', '2024-01-30', 10, 19, 11, 7, 'tuesday  ', 3, 0, 'NONE') ,('2024-01-31', '1402-11-11', '1445-07-20', '2024-01-31', 11, 20, 11, 7, 'wednesday', 4, 0, 'NONE') ,('2024-02-01', '1402-11-12', '1445-07-21', '2024-02-01', 12, 21, 11, 7, 'thursday ', 5, 0, 'NONE') ,('2024-02-02', '1402-11-13', '1445-07-22', '2024-02-02', 13, 22, 11, 7, 'friday   ', 6, 0, 'NONE') ,('2024-02-03', '1402-11-14', '1445-07-23', '2024-02-03', 14, 23, 11, 7, 'saturday ', 7, 0, 'NONE') ,('2024-02-04', '1402-11-15', '1445-07-24', '2024-02-04', 15, 24, 11, 7, 'sunday   ', 1, 0, 'NONE') ,('2024-02-05', '1402-11-16', '1445-07-25', '2024-02-05', 16, 25, 11, 7, 'monday   ', 2, 0, 'NONE') ,('2024-02-06', '1402-11-17', '1445-07-26', '2024-02-06', 17, 26, 11, 7, 'tuesday  ', 3, 0, 'NONE') ,('2024-02-07', '1402-11-18', '1445-07-27', '2024-02-07', 18, 27, 11, 7, 'wednesday', 4, 0, 'NONE') ,('2024-02-08', '1402-11-19', '1445-07-28', '2024-02-08', 19, 28, 11, 7, 'thursday ', 5, 0, 'NONE') ,('2024-02-09', '1402-11-20', '1445-07-29', '2024-02-09', 20, 29, 11, 7, 'friday   ', 6, 0, 'NONE') ,('2024-02-10', '1402-11-21', '1445-07-30', '2024-02-10', 21, 30, 11, 7, 'saturday ', 7, 0, 'NONE') ,('2024-02-11', '1402-11-22', '1445-08-01', '2024-02-11', 22, 1, 11, 8, 'sunday   ', 1, 0, 'NONE') ,('2024-02-12', '1402-11-23', '1445-08-02', '2024-02-12', 23, 2, 11, 8, 'monday   ', 2, 0, 'NONE') ,('2024-02-13', '1402-11-24', '1445-08-03', '2024-02-13', 24, 3, 11, 8, 'tuesday  ', 3, 0, 'NONE') ,('2024-02-14', '1402-11-25', '1445-08-04', '2024-02-14', 25, 4, 11, 8, 'wednesday', 4, 0, 'NONE') ,('2024-02-15', '1402-11-26', '1445-08-05', '2024-02-15', 26, 5, 11, 8, 'thursday ', 5, 0, 'NONE') ,('2024-02-16', '1402-11-27', '1445-08-06', '2024-02-16', 27, 6, 11, 8, 'friday   ', 6, 0, 'NONE') ,('2024-02-17', '1402-11-28', '1445-08-07', '2024-02-17', 28, 7, 11, 8, 'saturday ', 7, 0, 'NONE') ,('2024-02-18', '1402-11-29', '1445-08-08', '2024-02-18', 29, 8, 11, 8, 'sunday   ', 1, 0, 'NONE') ,('2024-02-19', '1402-11-30', '1445-08-09', '2024-02-19', 30, 9, 11, 8, 'monday   ', 2, 0, 'NONE') ,('2024-02-20', '1402-12-01', '1445-08-10', '2024-02-20', 1, 10, 12, 8, 'tuesday  ', 3, 0, 'NONE') ,('2024-02-21', '1402-12-02', '1445-08-11', '2024-02-21', 2, 11, 12, 8, 'wednesday', 4, 0, 'NONE') ,('2024-02-22', '1402-12-03', '1445-08-12', '2024-02-22', 3, 12, 12, 8, 'thursday ', 5, 0, 'NONE') ,('2024-02-23', '1402-12-04', '1445-08-13', '2024-02-23', 4, 13, 12, 8, 'friday   ', 6, 0, 'NONE') ,('2024-02-24', '1402-12-05', '1445-08-14', '2024-02-24', 5, 14, 12, 8, 'saturday ', 7, 0, 'NONE') ,('2024-02-25', '1402-12-06', '1445-08-15', '2024-02-25', 6, 15, 12, 8, 'sunday   ', 1, 0, 'NONE') ,('2024-02-26', '1402-12-07', '1445-08-16', '2024-02-26', 7, 16, 12, 8, 'monday   ', 2, 0, 'NONE') ,('2024-02-27', '1402-12-08', '1445-08-17', '2024-02-27', 8, 17, 12, 8, 'tuesday  ', 3, 0, 'NONE') ,('2024-02-28', '1402-12-09', '1445-08-18', '2024-02-28', 9, 18, 12, 8, 'wednesday', 4, 0, 'NONE') ,('2024-02-29', '1402-12-10', '1445-08-19', '2024-02-29', 10, 19, 12, 8, 'thursday ', 5, 0, 'NONE') ,('2024-03-01', '1402-12-11', '1445-08-20', '2024-03-01', 11, 20, 12, 8, 'friday   ', 6, 0, 'NONE') ,('2024-03-02', '1402-12-12', '1445-08-21', '2024-03-02', 12, 21, 12, 8, 'saturday ', 7, 0, 'NONE') ,('2024-03-03', '1402-12-13', '1445-08-22', '2024-03-03', 13, 22, 12, 8, 'sunday   ', 1, 0, 'NONE') ,('2024-03-04', '1402-12-14', '1445-08-23', '2024-03-04', 14, 23, 12, 8, 'monday   ', 2, 0, 'NONE') ,('2024-03-05', '1402-12-15', '1445-08-24', '2024-03-05', 15, 24, 12, 8, 'tuesday  ', 3, 0, 'NONE') ,('2024-03-06', '1402-12-16', '1445-08-25', '2024-03-06', 16, 25, 12, 8, 'wednesday', 4, 0, 'NONE') ,('2024-03-07', '1402-12-17', '1445-08-26', '2024-03-07', 17, 26, 12, 8, 'thursday ', 5, 0, 'NONE') ,('2024-03-08', '1402-12-18', '1445-08-27', '2024-03-08', 18, 27, 12, 8, 'friday   ', 6, 0, 'NONE') ,('2024-03-09', '1402-12-19', '1445-08-28', '2024-03-09', 19, 28, 12, 8, 'saturday ', 7, 0, 'NONE') ,('2024-03-10', '1402-12-20', '1445-08-29', '2024-03-10', 20, 29, 12, 8, 'sunday   ', 1, 0, 'NONE') ,('2024-03-11', '1402-12-21', '1445-09-01', '2024-03-11', 21, 1, 12, 9, 'monday   ', 2, 0, 'NONE') ,('2024-03-12', '1402-12-22', '1445-09-02', '2024-03-12', 22, 2, 12, 9, 'tuesday  ', 3, 0, 'NONE') ,('2024-03-13', '1402-12-23', '1445-09-03', '2024-03-13', 23, 3, 12, 9, 'wednesday', 4, 0, 'NONE') ,('2024-03-14', '1402-12-24', '1445-09-04', '2024-03-14', 24, 4, 12, 9, 'thursday ', 5, 0, 'NONE') ,('2024-03-15', '1402-12-25', '1445-09-05', '2024-03-15', 25, 5, 12, 9, 'friday   ', 6, 0, 'NONE') ,('2024-03-16', '1402-12-26', '1445-09-06', '2024-03-16', 26, 6, 12, 9, 'saturday ', 7, 0, 'NONE') ,('2024-03-17', '1402-12-27', '1445-09-07', '2024-03-17', 27, 7, 12, 9, 'sunday   ', 1, 0, 'NONE') ,('2024-03-18', '1402-12-28', '1445-09-08', '2024-03-18', 28, 8, 12, 9, 'monday   ', 2, 0, 'NONE') ,('2024-03-19', '1402-12-29', '1445-09-09', '2024-03-19', 29, 9, 12, 9, 'tuesday  ', 3, 0, 'NONE') ,('2024-03-20', '1403-01-01', '1445-09-10', '2024-03-20', 1, 10, 1, 9, 'wednesday', 4, 0, 'NONE') ,('2024-03-21', '1403-01-02', '1445-09-11', '2024-03-21', 2, 11, 1, 9, 'thursday ', 5, 0, 'NONE') ,('2024-03-22', '1403-01-03', '1445-09-12', '2024-03-22', 3, 12, 1, 9, 'friday   ', 6, 0, 'NONE') ,('2024-03-23', '1403-01-04', '1445-09-13', '2024-03-23', 4, 13, 1, 9, 'saturday ', 7, 0, 'NONE') ,('2024-03-24', '1403-01-05', '1445-09-14', '2024-03-24', 5, 14, 1, 9, 'sunday   ', 1, 0, 'NONE') ,('2024-03-25', '1403-01-06', '1445-09-15', '2024-03-25', 6, 15, 1, 9, 'monday   ', 2, 0, 'NONE') ,('2024-03-26', '1403-01-07', '1445-09-16', '2024-03-26', 7, 16, 1, 9, 'tuesday  ', 3, 0, 'NONE') ,('2024-03-27', '1403-01-08', '1445-09-17', '2024-03-27', 8, 17, 1, 9, 'wednesday', 4, 0, 'NONE') ,('2024-03-28', '1403-01-09', '1445-09-18', '2024-03-28', 9, 18, 1, 9, 'thursday ', 5, 0, 'NONE') ,('2024-03-29', '1403-01-10', '1445-09-19', '2024-03-29', 10, 19, 1, 9, 'friday   ', 6, 0, 'NONE') ,('2024-03-30', '1403-01-11', '1445-09-20', '2024-03-30', 11, 20, 1, 9, 'saturday ', 7, 0, 'NONE') ,('2024-03-31', '1403-01-12', '1445-09-21', '2024-03-31', 12, 21, 1, 9, 'sunday   ', 1, 0, 'NONE') ,('2024-04-01', '1403-01-13', '1445-09-22', '2024-04-01', 13, 22, 1, 9, 'monday   ', 2, 0, 'NONE') ,('2024-04-02', '1403-01-14', '1445-09-23', '2024-04-02', 14, 23, 1, 9, 'tuesday  ', 3, 0, 'NONE') ,('2024-04-03', '1403-01-15', '1445-09-24', '2024-04-03', 15, 24, 1, 9, 'wednesday', 4, 0, 'NONE') ,('2024-04-04', '1403-01-16', '1445-09-25', '2024-04-04', 16, 25, 1, 9, 'thursday ', 5, 0, 'NONE') ,('2024-04-05', '1403-01-17', '1445-09-26', '2024-04-05', 17, 26, 1, 9, 'friday   ', 6, 0, 'NONE') ,('2024-04-06', '1403-01-18', '1445-09-27', '2024-04-06', 18, 27, 1, 9, 'saturday ', 7, 0, 'NONE') ,('2024-04-07', '1403-01-19', '1445-09-28', '2024-04-07', 19, 28, 1, 9, 'sunday   ', 1, 0, 'NONE') ,('2024-04-08', '1403-01-20', '1445-09-29', '2024-04-08', 20, 29, 1, 9, 'monday   ', 2, 0, 'NONE') ,('2024-04-09', '1403-01-21', '1445-09-30', '2024-04-09', 21, 30, 1, 9, 'tuesday  ', 3, 0, 'NONE') ,('2024-04-10', '1403-01-22', '1445-10-01', '2024-04-10', 22, 1, 1, 10, 'wednesday', 4, 0, 'NONE') ,('2024-04-11', '1403-01-23', '1445-10-02', '2024-04-11', 23, 2, 1, 10, 'thursday ', 5, 0, 'NONE') ,('2024-04-12', '1403-01-24', '1445-10-03', '2024-04-12', 24, 3, 1, 10, 'friday   ', 6, 0, 'NONE') ,('2024-04-13', '1403-01-25', '1445-10-04', '2024-04-13', 25, 4, 1, 10, 'saturday ', 7, 0, 'NONE') ,('2024-04-14', '1403-01-26', '1445-10-05', '2024-04-14', 26, 5, 1, 10, 'sunday   ', 1, 0, 'NONE') ,('2024-04-15', '1403-01-27', '1445-10-06', '2024-04-15', 27, 6, 1, 10, 'monday   ', 2, 0, 'NONE') ,('2024-04-16', '1403-01-28', '1445-10-07', '2024-04-16', 28, 7, 1, 10, 'tuesday  ', 3, 0, 'NONE') ,('2024-04-17', '1403-01-29', '1445-10-08', '2024-04-17', 29, 8, 1, 10, 'wednesday', 4, 0, 'NONE') ,('2024-04-18', '1403-01-30', '1445-10-09', '2024-04-18', 30, 9, 1, 10, 'thursday ', 5, 0, 'NONE') ,('2024-04-19', '1403-01-31', '1445-10-10', '2024-04-19', 31, 10, 1, 10, 'friday   ', 6, 0, 'NONE') ,('2024-04-20', '1403-02-01', '1445-10-11', '2024-04-20', 1, 11, 2, 10, 'saturday ', 7, 0, 'NONE') ,('2024-04-21', '1403-02-02', '1445-10-12', '2024-04-21', 2, 12, 2, 10, 'sunday   ', 1, 0, 'NONE') ,('2024-04-22', '1403-02-03', '1445-10-13', '2024-04-22', 3, 13, 2, 10, 'monday   ', 2, 0, 'NONE') ,('2024-04-23', '1403-02-04', '1445-10-14', '2024-04-23', 4, 14, 2, 10, 'tuesday  ', 3, 0, 'NONE') ,('2024-04-24', '1403-02-05', '1445-10-15', '2024-04-24', 5, 15, 2, 10, 'wednesday', 4, 0, 'NONE') ,('2024-04-25', '1403-02-06', '1445-10-16', '2024-04-25', 6, 16, 2, 10, 'thursday ', 5, 0, 'NONE') ,('2024-04-26', '1403-02-07', '1445-10-17', '2024-04-26', 7, 17, 2, 10, 'friday   ', 6, 0, 'NONE') ,('2024-04-27', '1403-02-08', '1445-10-18', '2024-04-27', 8, 18, 2, 10, 'saturday ', 7, 0, 'NONE') ,('2024-04-28', '1403-02-09', '1445-10-19', '2024-04-28', 9, 19, 2, 10, 'sunday   ', 1, 0, 'NONE') ,('2024-04-29', '1403-02-10', '1445-10-20', '2024-04-29', 10, 20, 2, 10, 'monday   ', 2, 0, 'NONE') ,('2024-04-30', '1403-02-11', '1445-10-21', '2024-04-30', 11, 21, 2, 10, 'tuesday  ', 3, 0, 'NONE') ,('2024-05-01', '1403-02-12', '1445-10-22', '2024-05-01', 12, 22, 2, 10, 'wednesday', 4, 0, 'NONE') ,('2024-05-02', '1403-02-13', '1445-10-23', '2024-05-02', 13, 23, 2, 10, 'thursday ', 5, 0, 'NONE') ,('2024-05-03', '1403-02-14', '1445-10-24', '2024-05-03', 14, 24, 2, 10, 'friday   ', 6, 0, 'NONE') ,('2024-05-04', '1403-02-15', '1445-10-25', '2024-05-04', 15, 25, 2, 10, 'saturday ', 7, 0, 'NONE') ,('2024-05-05', '1403-02-16', '1445-10-26', '2024-05-05', 16, 26, 2, 10, 'sunday   ', 1, 0, 'NONE') ,('2024-05-06', '1403-02-17', '1445-10-27', '2024-05-06', 17, 27, 2, 10, 'monday   ', 2, 0, 'NONE') ,('2024-05-07', '1403-02-18', '1445-10-28', '2024-05-07', 18, 28, 2, 10, 'tuesday  ', 3, 0, 'NONE') ,('2024-05-08', '1403-02-19', '1445-10-29', '2024-05-08', 19, 29, 2, 10, 'wednesday', 4, 0, 'NONE') ,('2024-05-09', '1403-02-20', '1445-11-01', '2024-05-09', 20, 1, 2, 11, 'thursday ', 5, 0, 'NONE') ,('2024-05-10', '1403-02-21', '1445-11-02', '2024-05-10', 21, 2, 2, 11, 'friday   ', 6, 0, 'NONE') ,('2024-05-11', '1403-02-22', '1445-11-03', '2024-05-11', 22, 3, 2, 11, 'saturday ', 7, 0, 'NONE') ,('2024-05-12', '1403-02-23', '1445-11-04', '2024-05-12', 23, 4, 2, 11, 'sunday   ', 1, 0, 'NONE') ,('2024-05-13', '1403-02-24', '1445-11-05', '2024-05-13', 24, 5, 2, 11, 'monday   ', 2, 0, 'NONE') ,('2024-05-14', '1403-02-25', '1445-11-06', '2024-05-14', 25, 6, 2, 11, 'tuesday  ', 3, 0, 'NONE') ,('2024-05-15', '1403-02-26', '1445-11-07', '2024-05-15', 26, 7, 2, 11, 'wednesday', 4, 0, 'NONE') ,('2024-05-16', '1403-02-27', '1445-11-08', '2024-05-16', 27, 8, 2, 11, 'thursday ', 5, 0, 'NONE') ,('2024-05-17', '1403-02-28', '1445-11-09', '2024-05-17', 28, 9, 2, 11, 'friday   ', 6, 0, 'NONE') ,('2024-05-18', '1403-02-29', '1445-11-10', '2024-05-18', 29, 10, 2, 11, 'saturday ', 7, 0, 'NONE') ,('2024-05-19', '1403-02-30', '1445-11-11', '2024-05-19', 30, 11, 2, 11, 'sunday   ', 1, 0, 'NONE') ,('2024-05-20', '1403-02-31', '1445-11-12', '2024-05-20', 31, 12, 2, 11, 'monday   ', 2, 0, 'NONE') ,('2024-05-21', '1403-03-01', '1445-11-13', '2024-05-21', 1, 13, 3, 11, 'tuesday  ', 3, 0, 'NONE') ,('2024-05-22', '1403-03-02', '1445-11-14', '2024-05-22', 2, 14, 3, 11, 'wednesday', 4, 0, 'NONE') ,('2024-05-23', '1403-03-03', '1445-11-15', '2024-05-23', 3, 15, 3, 11, 'thursday ', 5, 0, 'NONE') ,('2024-05-24', '1403-03-04', '1445-11-16', '2024-05-24', 4, 16, 3, 11, 'friday   ', 6, 0, 'NONE') ,('2024-05-25', '1403-03-05', '1445-11-17', '2024-05-25', 5, 17, 3, 11, 'saturday ', 7, 0, 'NONE') ,('2024-05-26', '1403-03-06', '1445-11-18', '2024-05-26', 6, 18, 3, 11, 'sunday   ', 1, 0, 'NONE') ,('2024-05-27', '1403-03-07', '1445-11-19', '2024-05-27', 7, 19, 3, 11, 'monday   ', 2, 0, 'NONE') ,('2024-05-28', '1403-03-08', '1445-11-20', '2024-05-28', 8, 20, 3, 11, 'tuesday  ', 3, 0, 'NONE') ,('2024-05-29', '1403-03-09', '1445-11-21', '2024-05-29', 9, 21, 3, 11, 'wednesday', 4, 0, 'NONE') ,('2024-05-30', '1403-03-10', '1445-11-22', '2024-05-30', 10, 22, 3, 11, 'thursday ', 5, 0, 'NONE') ,('2024-05-31', '1403-03-11', '1445-11-23', '2024-05-31', 11, 23, 3, 11, 'friday   ', 6, 0, 'NONE') ,('2024-06-01', '1403-03-12', '1445-11-24', '2024-06-01', 12, 24, 3, 11, 'saturday ', 7, 0, 'NONE') ,('2024-06-02', '1403-03-13', '1445-11-25', '2024-06-02', 13, 25, 3, 11, 'sunday   ', 1, 0, 'NONE') ,('2024-06-03', '1403-03-14', '1445-11-26', '2024-06-03', 14, 26, 3, 11, 'monday   ', 2, 0, 'NONE') ,('2024-06-04', '1403-03-15', '1445-11-27', '2024-06-04', 15, 27, 3, 11, 'tuesday  ', 3, 0, 'NONE') ,('2024-06-05', '1403-03-16', '1445-11-28', '2024-06-05', 16, 28, 3, 11, 'wednesday', 4, 0, 'NONE') ,('2024-06-06', '1403-03-17', '1445-11-29', '2024-06-06', 17, 29, 3, 11, 'thursday ', 5, 0, 'NONE') ,('2024-06-07', '1403-03-18', '1445-11-30', '2024-06-07', 18, 30, 3, 11, 'friday   ', 6, 0, 'NONE') ,('2024-06-08', '1403-03-19', '1445-12-01', '2024-06-08', 19, 1, 3, 12, 'saturday ', 7, 0, 'NONE') ,('2024-06-09', '1403-03-20', '1445-12-02', '2024-06-09', 20, 2, 3, 12, 'sunday   ', 1, 0, 'NONE') ,('2024-06-10', '1403-03-21', '1445-12-03', '2024-06-10', 21, 3, 3, 12, 'monday   ', 2, 0, 'NONE') ,('2024-06-11', '1403-03-22', '1445-12-04', '2024-06-11', 22, 4, 3, 12, 'tuesday  ', 3, 0, 'NONE') ,('2024-06-12', '1403-03-23', '1445-12-05', '2024-06-12', 23, 5, 3, 12, 'wednesday', 4, 0, 'NONE') ,('2024-06-13', '1403-03-24', '1445-12-06', '2024-06-13', 24, 6, 3, 12, 'thursday ', 5, 0, 'NONE') ,('2024-06-14', '1403-03-25', '1445-12-07', '2024-06-14', 25, 7, 3, 12, 'friday   ', 6, 0, 'NONE') ,('2024-06-15', '1403-03-26', '1445-12-08', '2024-06-15', 26, 8, 3, 12, 'saturday ', 7, 0, 'NONE') ,('2024-06-16', '1403-03-27', '1445-12-09', '2024-06-16', 27, 9, 3, 12, 'sunday   ', 1, 0, 'NONE') ,('2024-06-17', '1403-03-28', '1445-12-10', '2024-06-17', 28, 10, 3, 12, 'monday   ', 2, 0, 'NONE') ,('2024-06-18', '1403-03-29', '1445-12-11', '2024-06-18', 29, 11, 3, 12, 'tuesday  ', 3, 0, 'NONE') ,('2024-06-19', '1403-03-30', '1445-12-12', '2024-06-19', 30, 12, 3, 12, 'wednesday', 4, 0, 'NONE') ,('2024-06-20', '1403-03-31', '1445-12-13', '2024-06-20', 31, 13, 3, 12, 'thursday ', 5, 0, 'NONE') ,('2024-06-21', '1403-04-01', '1445-12-14', '2024-06-21', 1, 14, 4, 12, 'friday   ', 6, 0, 'NONE') ,('2024-06-22', '1403-04-02', '1445-12-15', '2024-06-22', 2, 15, 4, 12, 'saturday ', 7, 0, 'NONE') ,('2024-06-23', '1403-04-03', '1445-12-16', '2024-06-23', 3, 16, 4, 12, 'sunday   ', 1, 0, 'NONE') ,('2024-06-24', '1403-04-04', '1445-12-17', '2024-06-24', 4, 17, 4, 12, 'monday   ', 2, 0, 'NONE') ,('2024-06-25', '1403-04-05', '1445-12-18', '2024-06-25', 5, 18, 4, 12, 'tuesday  ', 3, 0, 'NONE') ,('2024-06-26', '1403-04-06', '1445-12-19', '2024-06-26', 6, 19, 4, 12, 'wednesday', 4, 0, 'NONE') ,('2024-06-27', '1403-04-07', '1445-12-20', '2024-06-27', 7, 20, 4, 12, 'thursday ', 5, 0, 'NONE') ,('2024-06-28', '1403-04-08', '1445-12-21', '2024-06-28', 8, 21, 4, 12, 'friday   ', 6, 0, 'NONE') ,('2024-06-29', '1403-04-09', '1445-12-22', '2024-06-29', 9, 22, 4, 12, 'saturday ', 7, 0, 'NONE') ,('2024-06-30', '1403-04-10', '1445-12-23', '2024-06-30', 10, 23, 4, 12, 'sunday   ', 1, 0, 'NONE') ,('2024-07-01', '1403-04-11', '1445-12-24', '2024-07-01', 11, 24, 4, 12, 'monday   ', 2, 0, 'NONE') ,('2024-07-02', '1403-04-12', '1445-12-25', '2024-07-02', 12, 25, 4, 12, 'tuesday  ', 3, 0, 'NONE') ,('2024-07-03', '1403-04-13', '1445-12-26', '2024-07-03', 13, 26, 4, 12, 'wednesday', 4, 0, 'NONE') ,('2024-07-04', '1403-04-14', '1445-12-27', '2024-07-04', 14, 27, 4, 12, 'thursday ', 5, 0, 'NONE') ,('2024-07-05', '1403-04-15', '1445-12-28', '2024-07-05', 15, 28, 4, 12, 'friday   ', 6, 0, 'NONE') ,('2024-07-06', '1403-04-16', '1445-12-29', '2024-07-06', 16, 29, 4, 12, 'saturday ', 7, 0, 'NONE') ,('2024-07-07', '1403-04-17', '1445-12-30', '2024-07-07', 17, 30, 4, 12, 'sunday   ', 1, 0, 'NONE') ,('2024-07-08', '1403-04-18', '1446-01-01', '2024-07-08', 18, 1, 4, 1, 'monday   ', 2, 0, 'NONE') ,('2024-07-09', '1403-04-19', '1446-01-02', '2024-07-09', 19, 2, 4, 1, 'tuesday  ', 3, 0, 'NONE') ,('2024-07-10', '1403-04-20', '1446-01-03', '2024-07-10', 20, 3, 4, 1, 'wednesday', 4, 0, 'NONE') ,('2024-07-11', '1403-04-21', '1446-01-04', '2024-07-11', 21, 4, 4, 1, 'thursday ', 5, 0, 'NONE') ,('2024-07-12', '1403-04-22', '1446-01-05', '2024-07-12', 22, 5, 4, 1, 'friday   ', 6, 0, 'NONE') ,('2024-07-13', '1403-04-23', '1446-01-06', '2024-07-13', 23, 6, 4, 1, 'saturday ', 7, 0, 'NONE') ,('2024-07-14', '1403-04-24', '1446-01-07', '2024-07-14', 24, 7, 4, 1, 'sunday   ', 1, 0, 'NONE') ,('2024-07-15', '1403-04-25', '1446-01-08', '2024-07-15', 25, 8, 4, 1, 'monday   ', 2, 0, 'NONE') ,('2024-07-16', '1403-04-26', '1446-01-09', '2024-07-16', 26, 9, 4, 1, 'tuesday  ', 3, 0, 'NONE') ,('2024-07-17', '1403-04-27', '1446-01-10', '2024-07-17', 27, 10, 4, 1, 'wednesday', 4, 0, 'NONE') ,('2024-07-18', '1403-04-28', '1446-01-11', '2024-07-18', 28, 11, 4, 1, 'thursday ', 5, 0, 'NONE') ,('2024-07-19', '1403-04-29', '1446-01-12', '2024-07-19', 29, 12, 4, 1, 'friday   ', 6, 0, 'NONE') ,('2024-07-20', '1403-04-30', '1446-01-13', '2024-07-20', 30, 13, 4, 1, 'saturday ', 7, 0, 'NONE') ,('2024-07-21', '1403-04-31', '1446-01-14', '2024-07-21', 31, 14, 4, 1, 'sunday   ', 1, 0, 'NONE') ,('2024-07-22', '1403-05-01', '1446-01-15', '2024-07-22', 1, 15, 5, 1, 'monday   ', 2, 0, 'NONE') ,('2024-07-23', '1403-05-02', '1446-01-16', '2024-07-23', 2, 16, 5, 1, 'tuesday  ', 3, 0, 'NONE') ,('2024-07-24', '1403-05-03', '1446-01-17', '2024-07-24', 3, 17, 5, 1, 'wednesday', 4, 0, 'NONE') ,('2024-07-25', '1403-05-04', '1446-01-18', '2024-07-25', 4, 18, 5, 1, 'thursday ', 5, 0, 'NONE') ,('2024-07-26', '1403-05-05', '1446-01-19', '2024-07-26', 5, 19, 5, 1, 'friday   ', 6, 0, 'NONE') ,('2024-07-27', '1403-05-06', '1446-01-20', '2024-07-27', 6, 20, 5, 1, 'saturday ', 7, 0, 'NONE') ,('2024-07-28', '1403-05-07', '1446-01-21', '2024-07-28', 7, 21, 5, 1, 'sunday   ', 1, 0, 'NONE') ,('2024-07-29', '1403-05-08', '1446-01-22', '2024-07-29', 8, 22, 5, 1, 'monday   ', 2, 0, 'NONE') ,('2024-07-30', '1403-05-09', '1446-01-23', '2024-07-30', 9, 23, 5, 1, 'tuesday  ', 3, 0, 'NONE') ,('2024-07-31', '1403-05-10', '1446-01-24', '2024-07-31', 10, 24, 5, 1, 'wednesday', 4, 0, 'NONE') ,('2024-08-01', '1403-05-11', '1446-01-25', '2024-08-01', 11, 25, 5, 1, 'thursday ', 5, 0, 'NONE') ,('2024-08-02', '1403-05-12', '1446-01-26', '2024-08-02', 12, 26, 5, 1, 'friday   ', 6, 0, 'NONE') ,('2024-08-03', '1403-05-13', '1446-01-27', '2024-08-03', 13, 27, 5, 1, 'saturday ', 7, 0, 'NONE') ,('2024-08-04', '1403-05-14', '1446-01-28', '2024-08-04', 14, 28, 5, 1, 'sunday   ', 1, 0, 'NONE') ,('2024-08-05', '1403-05-15', '1446-01-29', '2024-08-05', 15, 29, 5, 1, 'monday   ', 2, 0, 'NONE') ,('2024-08-06', '1403-05-16', '1446-01-30', '2024-08-06', 16, 30, 5, 1, 'tuesday  ', 3, 0, 'NONE') ,('2024-08-07', '1403-05-17', '1446-02-01', '2024-08-07', 17, 1, 5, 2, 'wednesday', 4, 0, 'NONE') ,('2024-08-08', '1403-05-18', '1446-02-02', '2024-08-08', 18, 2, 5, 2, 'thursday ', 5, 0, 'NONE') ,('2024-08-09', '1403-05-19', '1446-02-03', '2024-08-09', 19, 3, 5, 2, 'friday   ', 6, 0, 'NONE') ,('2024-08-10', '1403-05-20', '1446-02-04', '2024-08-10', 20, 4, 5, 2, 'saturday ', 7, 0, 'NONE') ,('2024-08-11', '1403-05-21', '1446-02-05', '2024-08-11', 21, 5, 5, 2, 'sunday   ', 1, 0, 'NONE') ,('2024-08-12', '1403-05-22', '1446-02-06', '2024-08-12', 22, 6, 5, 2, 'monday   ', 2, 0, 'NONE') ,('2024-08-13', '1403-05-23', '1446-02-07', '2024-08-13', 23, 7, 5, 2, 'tuesday  ', 3, 0, 'NONE') ,('2024-08-14', '1403-05-24', '1446-02-08', '2024-08-14', 24, 8, 5, 2, 'wednesday', 4, 0, 'NONE') ,('2024-08-15', '1403-05-25', '1446-02-09', '2024-08-15', 25, 9, 5, 2, 'thursday ', 5, 0, 'NONE') ,('2024-08-16', '1403-05-26', '1446-02-10', '2024-08-16', 26, 10, 5, 2, 'friday   ', 6, 0, 'NONE') ,('2024-08-17', '1403-05-27', '1446-02-11', '2024-08-17', 27, 11, 5, 2, 'saturday ', 7, 0, 'NONE') ,('2024-08-18', '1403-05-28', '1446-02-12', '2024-08-18', 28, 12, 5, 2, 'sunday   ', 1, 0, 'NONE') ,('2024-08-19', '1403-05-29', '1446-02-13', '2024-08-19', 29, 13, 5, 2, 'monday   ', 2, 0, 'NONE') ,('2024-08-20', '1403-05-30', '1446-02-14', '2024-08-20', 30, 14, 5, 2, 'tuesday  ', 3, 0, 'NONE') ,('2024-08-21', '1403-05-31', '1446-02-15', '2024-08-21', 31, 15, 5, 2, 'wednesday', 4, 0, 'NONE') ,('2024-08-22', '1403-06-01', '1446-02-16', '2024-08-22', 1, 16, 6, 2, 'thursday ', 5, 0, 'NONE') ,('2024-08-23', '1403-06-02', '1446-02-17', '2024-08-23', 2, 17, 6, 2, 'friday   ', 6, 0, 'NONE') ,('2024-08-24', '1403-06-03', '1446-02-18', '2024-08-24', 3, 18, 6, 2, 'saturday ', 7, 0, 'NONE') ,('2024-08-25', '1403-06-04', '1446-02-19', '2024-08-25', 4, 19, 6, 2, 'sunday   ', 1, 0, 'NONE') ,('2024-08-26', '1403-06-05', '1446-02-20', '2024-08-26', 5, 20, 6, 2, 'monday   ', 2, 0, 'NONE') ,('2024-08-27', '1403-06-06', '1446-02-21', '2024-08-27', 6, 21, 6, 2, 'tuesday  ', 3, 0, 'NONE') ,('2024-08-28', '1403-06-07', '1446-02-22', '2024-08-28', 7, 22, 6, 2, 'wednesday', 4, 0, 'NONE') ,('2024-08-29', '1403-06-08', '1446-02-23', '2024-08-29', 8, 23, 6, 2, 'thursday ', 5, 0, 'NONE') ,('2024-08-30', '1403-06-09', '1446-02-24', '2024-08-30', 9, 24, 6, 2, 'friday   ', 6, 0, 'NONE') ,('2024-08-31', '1403-06-10', '1446-02-25', '2024-08-31', 10, 25, 6, 2, 'saturday ', 7, 0, 'NONE') ,('2024-09-01', '1403-06-11', '1446-02-26', '2024-09-01', 11, 26, 6, 2, 'sunday   ', 1, 0, 'NONE') ,('2024-09-02', '1403-06-12', '1446-02-27', '2024-09-02', 12, 27, 6, 2, 'monday   ', 2, 0, 'NONE') ,('2024-09-03', '1403-06-13', '1446-02-28', '2024-09-03', 13, 28, 6, 2, 'tuesday  ', 3, 0, 'NONE') ,('2024-09-04', '1403-06-14', '1446-02-29', '2024-09-04', 14, 29, 6, 2, 'wednesday', 4, 0, 'NONE') ,('2024-09-05', '1403-06-15', '1446-03-01', '2024-09-05', 15, 1, 6, 3, 'thursday ', 5, 0, 'NONE') ,('2024-09-06', '1403-06-16', '1446-03-02', '2024-09-06', 16, 2, 6, 3, 'friday   ', 6, 0, 'NONE') ,('2024-09-07', '1403-06-17', '1446-03-03', '2024-09-07', 17, 3, 6, 3, 'saturday ', 7, 0, 'NONE') ,('2024-09-08', '1403-06-18', '1446-03-04', '2024-09-08', 18, 4, 6, 3, 'sunday   ', 1, 0, 'NONE') ,('2024-09-09', '1403-06-19', '1446-03-05', '2024-09-09', 19, 5, 6, 3, 'monday   ', 2, 0, 'NONE') ,('2024-09-10', '1403-06-20', '1446-03-06', '2024-09-10', 20, 6, 6, 3, 'tuesday  ', 3, 0, 'NONE') ,('2024-09-11', '1403-06-21', '1446-03-07', '2024-09-11', 21, 7, 6, 3, 'wednesday', 4, 0, 'NONE') ,('2024-09-12', '1403-06-22', '1446-03-08', '2024-09-12', 22, 8, 6, 3, 'thursday ', 5, 0, 'NONE') ,('2024-09-13', '1403-06-23', '1446-03-09', '2024-09-13', 23, 9, 6, 3, 'friday   ', 6, 0, 'NONE') ,('2024-09-14', '1403-06-24', '1446-03-10', '2024-09-14', 24, 10, 6, 3, 'saturday ', 7, 0, 'NONE') ,('2024-09-15', '1403-06-25', '1446-03-11', '2024-09-15', 25, 11, 6, 3, 'sunday   ', 1, 0, 'NONE') ,('2024-09-16', '1403-06-26', '1446-03-12', '2024-09-16', 26, 12, 6, 3, 'monday   ', 2, 0, 'NONE') ,('2024-09-17', '1403-06-27', '1446-03-13', '2024-09-17', 27, 13, 6, 3, 'tuesday  ', 3, 0, 'NONE') ,('2024-09-18', '1403-06-28', '1446-03-14', '2024-09-18', 28, 14, 6, 3, 'wednesday', 4, 0, 'NONE') ,('2024-09-19', '1403-06-29', '1446-03-15', '2024-09-19', 29, 15, 6, 3, 'thursday ', 5, 0, 'NONE') ,('2024-09-20', '1403-06-30', '1446-03-16', '2024-09-20', 30, 16, 6, 3, 'friday   ', 6, 0, 'NONE') ,('2024-09-21', '1403-06-31', '1446-03-17', '2024-09-21', 31, 17, 6, 3, 'saturday ', 7, 0, 'NONE') ,('2024-09-22', '1403-07-01', '1446-03-18', '2024-09-22', 1, 18, 7, 3, 'sunday   ', 1, 0, 'NONE') ,('2024-09-23', '1403-07-02', '1446-03-19', '2024-09-23', 2, 19, 7, 3, 'monday   ', 2, 0, 'NONE') ,('2024-09-24', '1403-07-03', '1446-03-20', '2024-09-24', 3, 20, 7, 3, 'tuesday  ', 3, 0, 'NONE') ,('2024-09-25', '1403-07-04', '1446-03-21', '2024-09-25', 4, 21, 7, 3, 'wednesday', 4, 0, 'NONE') ,('2024-09-26', '1403-07-05', '1446-03-22', '2024-09-26', 5, 22, 7, 3, 'thursday ', 5, 0, 'NONE') ,('2024-09-27', '1403-07-06', '1446-03-23', '2024-09-27', 6, 23, 7, 3, 'friday   ', 6, 0, 'NONE') ,('2024-09-28', '1403-07-07', '1446-03-24', '2024-09-28', 7, 24, 7, 3, 'saturday ', 7, 0, 'NONE') ,('2024-09-29', '1403-07-08', '1446-03-25', '2024-09-29', 8, 25, 7, 3, 'sunday   ', 1, 0, 'NONE') ,('2024-09-30', '1403-07-09', '1446-03-26', '2024-09-30', 9, 26, 7, 3, 'monday   ', 2, 0, 'NONE') ,('2024-10-01', '1403-07-10', '1446-03-27', '2024-10-01', 10, 27, 7, 3, 'tuesday  ', 3, 0, 'NONE') ,('2024-10-02', '1403-07-11', '1446-03-28', '2024-10-02', 11, 28, 7, 3, 'wednesday', 4, 0, 'NONE') ,('2024-10-03', '1403-07-12', '1446-03-29', '2024-10-03', 12, 29, 7, 3, 'thursday ', 5, 0, 'NONE') ,('2024-10-04', '1403-07-13', '1446-03-30', '2024-10-04', 13, 30, 7, 3, 'friday   ', 6, 0, 'NONE') ,('2024-10-05', '1403-07-14', '1446-04-01', '2024-10-05', 14, 1, 7, 4, 'saturday ', 7, 0, 'NONE') ,('2024-10-06', '1403-07-15', '1446-04-02', '2024-10-06', 15, 2, 7, 4, 'sunday   ', 1, 0, 'NONE') ,('2024-10-07', '1403-07-16', '1446-04-03', '2024-10-07', 16, 3, 7, 4, 'monday   ', 2, 0, 'NONE') ,('2024-10-08', '1403-07-17', '1446-04-04', '2024-10-08', 17, 4, 7, 4, 'tuesday  ', 3, 0, 'NONE') ,('2024-10-09', '1403-07-18', '1446-04-05', '2024-10-09', 18, 5, 7, 4, 'wednesday', 4, 0, 'NONE') ,('2024-10-10', '1403-07-19', '1446-04-06', '2024-10-10', 19, 6, 7, 4, 'thursday ', 5, 0, 'NONE') ,('2024-10-11', '1403-07-20', '1446-04-07', '2024-10-11', 20, 7, 7, 4, 'friday   ', 6, 0, 'NONE') ,('2024-10-12', '1403-07-21', '1446-04-08', '2024-10-12', 21, 8, 7, 4, 'saturday ', 7, 0, 'NONE') ,('2024-10-13', '1403-07-22', '1446-04-09', '2024-10-13', 22, 9, 7, 4, 'sunday   ', 1, 0, 'NONE') ,('2024-10-14', '1403-07-23', '1446-04-10', '2024-10-14', 23, 10, 7, 4, 'monday   ', 2, 0, 'NONE') ,('2024-10-15', '1403-07-24', '1446-04-11', '2024-10-15', 24, 11, 7, 4, 'tuesday  ', 3, 0, 'NONE') ,('2024-10-16', '1403-07-25', '1446-04-12', '2024-10-16', 25, 12, 7, 4, 'wednesday', 4, 0, 'NONE') ,('2024-10-17', '1403-07-26', '1446-04-13', '2024-10-17', 26, 13, 7, 4, 'thursday ', 5, 0, 'NONE') ,('2024-10-18', '1403-07-27', '1446-04-14', '2024-10-18', 27, 14, 7, 4, 'friday   ', 6, 0, 'NONE') ,('2024-10-19', '1403-07-28', '1446-04-15', '2024-10-19', 28, 15, 7, 4, 'saturday ', 7, 0, 'NONE') ,('2024-10-20', '1403-07-29', '1446-04-16', '2024-10-20', 29, 16, 7, 4, 'sunday   ', 1, 0, 'NONE') ,('2024-10-21', '1403-07-30', '1446-04-17', '2024-10-21', 30, 17, 7, 4, 'monday   ', 2, 0, 'NONE') ,('2024-10-22', '1403-08-01', '1446-04-18', '2024-10-22', 1, 18, 8, 4, 'tuesday  ', 3, 0, 'NONE') ,('2024-10-23', '1403-08-02', '1446-04-19', '2024-10-23', 2, 19, 8, 4, 'wednesday', 4, 0, 'NONE') ,('2024-10-24', '1403-08-03', '1446-04-20', '2024-10-24', 3, 20, 8, 4, 'thursday ', 5, 0, 'NONE') ,('2024-10-25', '1403-08-04', '1446-04-21', '2024-10-25', 4, 21, 8, 4, 'friday   ', 6, 0, 'NONE') ,('2024-10-26', '1403-08-05', '1446-04-22', '2024-10-26', 5, 22, 8, 4, 'saturday ', 7, 0, 'NONE') ,('2024-10-27', '1403-08-06', '1446-04-23', '2024-10-27', 6, 23, 8, 4, 'sunday   ', 1, 0, 'NONE') ,('2024-10-28', '1403-08-07', '1446-04-24', '2024-10-28', 7, 24, 8, 4, 'monday   ', 2, 0, 'NONE') ,('2024-10-29', '1403-08-08', '1446-04-25', '2024-10-29', 8, 25, 8, 4, 'tuesday  ', 3, 0, 'NONE') ,('2024-10-30', '1403-08-09', '1446-04-26', '2024-10-30', 9, 26, 8, 4, 'wednesday', 4, 0, 'NONE') ,('2024-10-31', '1403-08-10', '1446-04-27', '2024-10-31', 10, 27, 8, 4, 'thursday ', 5, 0, 'NONE') ,('2024-11-01', '1403-08-11', '1446-04-28', '2024-11-01', 11, 28, 8, 4, 'friday   ', 6, 0, 'NONE') ,('2024-11-02', '1403-08-12', '1446-04-29', '2024-11-02', 12, 29, 8, 4, 'saturday ', 7, 0, 'NONE') ,('2024-11-03', '1403-08-13', '1446-05-01', '2024-11-03', 13, 1, 8, 5, 'sunday   ', 1, 0, 'NONE') ,('2024-11-04', '1403-08-14', '1446-05-02', '2024-11-04', 14, 2, 8, 5, 'monday   ', 2, 0, 'NONE') ,('2024-11-05', '1403-08-15', '1446-05-03', '2024-11-05', 15, 3, 8, 5, 'tuesday  ', 3, 0, 'NONE') ,('2024-11-06', '1403-08-16', '1446-05-04', '2024-11-06', 16, 4, 8, 5, 'wednesday', 4, 0, 'NONE') ,('2024-11-07', '1403-08-17', '1446-05-05', '2024-11-07', 17, 5, 8, 5, 'thursday ', 5, 0, 'NONE') ,('2024-11-08', '1403-08-18', '1446-05-06', '2024-11-08', 18, 6, 8, 5, 'friday   ', 6, 0, 'NONE') ,('2024-11-09', '1403-08-19', '1446-05-07', '2024-11-09', 19, 7, 8, 5, 'saturday ', 7, 0, 'NONE') ,('2024-11-10', '1403-08-20', '1446-05-08', '2024-11-10', 20, 8, 8, 5, 'sunday   ', 1, 0, 'NONE') ,('2024-11-11', '1403-08-21', '1446-05-09', '2024-11-11', 21, 9, 8, 5, 'monday   ', 2, 0, 'NONE') ,('2024-11-12', '1403-08-22', '1446-05-10', '2024-11-12', 22, 10, 8, 5, 'tuesday  ', 3, 0, 'NONE') ,('2024-11-13', '1403-08-23', '1446-05-11', '2024-11-13', 23, 11, 8, 5, 'wednesday', 4, 0, 'NONE') ,('2024-11-14', '1403-08-24', '1446-05-12', '2024-11-14', 24, 12, 8, 5, 'thursday ', 5, 0, 'NONE') ,('2024-11-15', '1403-08-25', '1446-05-13', '2024-11-15', 25, 13, 8, 5, 'friday   ', 6, 0, 'NONE') ,('2024-11-16', '1403-08-26', '1446-05-14', '2024-11-16', 26, 14, 8, 5, 'saturday ', 7, 0, 'NONE') ,('2024-11-17', '1403-08-27', '1446-05-15', '2024-11-17', 27, 15, 8, 5, 'sunday   ', 1, 0, 'NONE') ,('2024-11-18', '1403-08-28', '1446-05-16', '2024-11-18', 28, 16, 8, 5, 'monday   ', 2, 0, 'NONE') ,('2024-11-19', '1403-08-29', '1446-05-17', '2024-11-19', 29, 17, 8, 5, 'tuesday  ', 3, 0, 'NONE') ,('2024-11-20', '1403-08-30', '1446-05-18', '2024-11-20', 30, 18, 8, 5, 'wednesday', 4, 0, 'NONE') ,('2024-11-21', '1403-09-01', '1446-05-19', '2024-11-21', 1, 19, 9, 5, 'thursday ', 5, 0, 'NONE') ,('2024-11-22', '1403-09-02', '1446-05-20', '2024-11-22', 2, 20, 9, 5, 'friday   ', 6, 0, 'NONE') ,('2024-11-23', '1403-09-03', '1446-05-21', '2024-11-23', 3, 21, 9, 5, 'saturday ', 7, 0, 'NONE') ,('2024-11-24', '1403-09-04', '1446-05-22', '2024-11-24', 4, 22, 9, 5, 'sunday   ', 1, 0, 'NONE') ,('2024-11-25', '1403-09-05', '1446-05-23', '2024-11-25', 5, 23, 9, 5, 'monday   ', 2, 0, 'NONE') ,('2024-11-26', '1403-09-06', '1446-05-24', '2024-11-26', 6, 24, 9, 5, 'tuesday  ', 3, 0, 'NONE') ,('2024-11-27', '1403-09-07', '1446-05-25', '2024-11-27', 7, 25, 9, 5, 'wednesday', 4, 0, 'NONE') ,('2024-11-28', '1403-09-08', '1446-05-26', '2024-11-28', 8, 26, 9, 5, 'thursday ', 5, 0, 'NONE') ,('2024-11-29', '1403-09-09', '1446-05-27', '2024-11-29', 9, 27, 9, 5, 'friday   ', 6, 0, 'NONE') ,('2024-11-30', '1403-09-10', '1446-05-28', '2024-11-30', 10, 28, 9, 5, 'saturday ', 7, 0, 'NONE') ,('2024-12-01', '1403-09-11', '1446-05-29', '2024-12-01', 11, 29, 9, 5, 'sunday   ', 1, 0, 'NONE') ,('2024-12-02', '1403-09-12', '1446-05-30', '2024-12-02', 12, 30, 9, 5, 'monday   ', 2, 0, 'NONE') ,('2024-12-03', '1403-09-13', '1446-06-01', '2024-12-03', 13, 1, 9, 6, 'tuesday  ', 3, 0, 'NONE') ,('2024-12-04', '1403-09-14', '1446-06-02', '2024-12-04', 14, 2, 9, 6, 'wednesday', 4, 0, 'NONE') ,('2024-12-05', '1403-09-15', '1446-06-03', '2024-12-05', 15, 3, 9, 6, 'thursday ', 5, 0, 'NONE') ,('2024-12-06', '1403-09-16', '1446-06-04', '2024-12-06', 16, 4, 9, 6, 'friday   ', 6, 0, 'NONE') ,('2024-12-07', '1403-09-17', '1446-06-05', '2024-12-07', 17, 5, 9, 6, 'saturday ', 7, 0, 'NONE') ,('2024-12-08', '1403-09-18', '1446-06-06', '2024-12-08', 18, 6, 9, 6, 'sunday   ', 1, 0, 'NONE') ,('2024-12-09', '1403-09-19', '1446-06-07', '2024-12-09', 19, 7, 9, 6, 'monday   ', 2, 0, 'NONE') ,('2024-12-10', '1403-09-20', '1446-06-08', '2024-12-10', 20, 8, 9, 6, 'tuesday  ', 3, 0, 'NONE') ,('2024-12-11', '1403-09-21', '1446-06-09', '2024-12-11', 21, 9, 9, 6, 'wednesday', 4, 0, 'NONE') ,('2024-12-12', '1403-09-22', '1446-06-10', '2024-12-12', 22, 10, 9, 6, 'thursday ', 5, 0, 'NONE') ,('2024-12-13', '1403-09-23', '1446-06-11', '2024-12-13', 23, 11, 9, 6, 'friday   ', 6, 0, 'NONE') ,('2024-12-14', '1403-09-24', '1446-06-12', '2024-12-14', 24, 12, 9, 6, 'saturday ', 7, 0, 'NONE') ,('2024-12-15', '1403-09-25', '1446-06-13', '2024-12-15', 25, 13, 9, 6, 'sunday   ', 1, 0, 'NONE') ,('2024-12-16', '1403-09-26', '1446-06-14', '2024-12-16', 26, 14, 9, 6, 'monday   ', 2, 0, 'NONE') ,('2024-12-17', '1403-09-27', '1446-06-15', '2024-12-17', 27, 15, 9, 6, 'tuesday  ', 3, 0, 'NONE') ,('2024-12-18', '1403-09-28', '1446-06-16', '2024-12-18', 28, 16, 9, 6, 'wednesday', 4, 0, 'NONE') ,('2024-12-19', '1403-09-29', '1446-06-17', '2024-12-19', 29, 17, 9, 6, 'thursday ', 5, 0, 'NONE') ,('2024-12-20', '1403-09-30', '1446-06-18', '2024-12-20', 30, 18, 9, 6, 'friday   ', 6, 0, 'NONE') ,('2024-12-21', '1403-10-01', '1446-06-19', '2024-12-21', 1, 19, 10, 6, 'saturday ', 7, 0, 'NONE') ,('2024-12-22', '1403-10-02', '1446-06-20', '2024-12-22', 2, 20, 10, 6, 'sunday   ', 1, 0, 'NONE') ,('2024-12-23', '1403-10-03', '1446-06-21', '2024-12-23', 3, 21, 10, 6, 'monday   ', 2, 0, 'NONE') ,('2024-12-24', '1403-10-04', '1446-06-22', '2024-12-24', 4, 22, 10, 6, 'tuesday  ', 3, 0, 'NONE') ,('2024-12-25', '1403-10-05', '1446-06-23', '2024-12-25', 5, 23, 10, 6, 'wednesday', 4, 0, 'NONE') ,('2024-12-26', '1403-10-06', '1446-06-24', '2024-12-26', 6, 24, 10, 6, 'thursday ', 5, 0, 'NONE') ,('2024-12-27', '1403-10-07', '1446-06-25', '2024-12-27', 7, 25, 10, 6, 'friday   ', 6, 0, 'NONE') ,('2024-12-28', '1403-10-08', '1446-06-26', '2024-12-28', 8, 26, 10, 6, 'saturday ', 7, 0, 'NONE') ,('2024-12-29', '1403-10-09', '1446-06-27', '2024-12-29', 9, 27, 10, 6, 'sunday   ', 1, 0, 'NONE') ,('2024-12-30', '1403-10-10', '1446-06-28', '2024-12-30', 10, 28, 10, 6, 'monday   ', 2, 0, 'NONE') ,('2024-12-31', '1403-10-11', '1446-06-29', '2024-12-31', 11, 29, 10, 6, 'tuesday  ', 3, 0, 'NONE') ,('2025-01-01', '1403-10-12', '1446-07-01', '2025-01-01', 12, 1, 10, 7, 'wednesday', 4, 0, 'NONE') ,('2025-01-02', '1403-10-13', '1446-07-02', '2025-01-02', 13, 2, 10, 7, 'thursday ', 5, 0, 'NONE') ,('2025-01-03', '1403-10-14', '1446-07-03', '2025-01-03', 14, 3, 10, 7, 'friday   ', 6, 0, 'NONE') ,('2025-01-04', '1403-10-15', '1446-07-04', '2025-01-04', 15, 4, 10, 7, 'saturday ', 7, 0, 'NONE') ,('2025-01-05', '1403-10-16', '1446-07-05', '2025-01-05', 16, 5, 10, 7, 'sunday   ', 1, 0, 'NONE') ,('2025-01-06', '1403-10-17', '1446-07-06', '2025-01-06', 17, 6, 10, 7, 'monday   ', 2, 0, 'NONE') ,('2025-01-07', '1403-10-18', '1446-07-07', '2025-01-07', 18, 7, 10, 7, 'tuesday  ', 3, 0, 'NONE') ,('2025-01-08', '1403-10-19', '1446-07-08', '2025-01-08', 19, 8, 10, 7, 'wednesday', 4, 0, 'NONE') ,('2025-01-09', '1403-10-20', '1446-07-09', '2025-01-09', 20, 9, 10, 7, 'thursday ', 5, 0, 'NONE') ,('2025-01-10', '1403-10-21', '1446-07-10', '2025-01-10', 21, 10, 10, 7, 'friday   ', 6, 0, 'NONE') ,('2025-01-11', '1403-10-22', '1446-07-11', '2025-01-11', 22, 11, 10, 7, 'saturday ', 7, 0, 'NONE') ,('2025-01-12', '1403-10-23', '1446-07-12', '2025-01-12', 23, 12, 10, 7, 'sunday   ', 1, 0, 'NONE') ,('2025-01-13', '1403-10-24', '1446-07-13', '2025-01-13', 24, 13, 10, 7, 'monday   ', 2, 0, 'NONE') ,('2025-01-14', '1403-10-25', '1446-07-14', '2025-01-14', 25, 14, 10, 7, 'tuesday  ', 3, 0, 'NONE') ,('2025-01-15', '1403-10-26', '1446-07-15', '2025-01-15', 26, 15, 10, 7, 'wednesday', 4, 0, 'NONE') ,('2025-01-16', '1403-10-27', '1446-07-16', '2025-01-16', 27, 16, 10, 7, 'thursday ', 5, 0, 'NONE') ,('2025-01-17', '1403-10-28', '1446-07-17', '2025-01-17', 28, 17, 10, 7, 'friday   ', 6, 0, 'NONE') ,('2025-01-18', '1403-10-29', '1446-07-18', '2025-01-18', 29, 18, 10, 7, 'saturday ', 7, 0, 'NONE') ,('2025-01-19', '1403-10-30', '1446-07-19', '2025-01-19', 30, 19, 10, 7, 'sunday   ', 1, 0, 'NONE') ,('2025-01-20', '1403-11-01', '1446-07-20', '2025-01-20', 1, 20, 11, 7, 'monday   ', 2, 0, 'NONE') ,('2025-01-21', '1403-11-02', '1446-07-21', '2025-01-21', 2, 21, 11, 7, 'tuesday  ', 3, 0, 'NONE') ,('2025-01-22', '1403-11-03', '1446-07-22', '2025-01-22', 3, 22, 11, 7, 'wednesday', 4, 0, 'NONE') ,('2025-01-23', '1403-11-04', '1446-07-23', '2025-01-23', 4, 23, 11, 7, 'thursday ', 5, 0, 'NONE') ,('2025-01-24', '1403-11-05', '1446-07-24', '2025-01-24', 5, 24, 11, 7, 'friday   ', 6, 0, 'NONE') ,('2025-01-25', '1403-11-06', '1446-07-25', '2025-01-25', 6, 25, 11, 7, 'saturday ', 7, 0, 'NONE') ,('2025-01-26', '1403-11-07', '1446-07-26', '2025-01-26', 7, 26, 11, 7, 'sunday   ', 1, 0, 'NONE') ,('2025-01-27', '1403-11-08', '1446-07-27', '2025-01-27', 8, 27, 11, 7, 'monday   ', 2, 0, 'NONE') ,('2025-01-28', '1403-11-09', '1446-07-28', '2025-01-28', 9, 28, 11, 7, 'tuesday  ', 3, 0, 'NONE') ,('2025-01-29', '1403-11-10', '1446-07-29', '2025-01-29', 10, 29, 11, 7, 'wednesday', 4, 0, 'NONE') ,('2025-01-30', '1403-11-11', '1446-07-30', '2025-01-30', 11, 30, 11, 7, 'thursday ', 5, 0, 'NONE') ,('2025-01-31', '1403-11-12', '1446-08-01', '2025-01-31', 12, 1, 11, 8, 'friday   ', 6, 0, 'NONE') ,('2025-02-01', '1403-11-13', '1446-08-02', '2025-02-01', 13, 2, 11, 8, 'saturday ', 7, 0, 'NONE') ,('2025-02-02', '1403-11-14', '1446-08-03', '2025-02-02', 14, 3, 11, 8, 'sunday   ', 1, 0, 'NONE') ,('2025-02-03', '1403-11-15', '1446-08-04', '2025-02-03', 15, 4, 11, 8, 'monday   ', 2, 0, 'NONE') ,('2025-02-04', '1403-11-16', '1446-08-05', '2025-02-04', 16, 5, 11, 8, 'tuesday  ', 3, 0, 'NONE') ,('2025-02-05', '1403-11-17', '1446-08-06', '2025-02-05', 17, 6, 11, 8, 'wednesday', 4, 0, 'NONE') ,('2025-02-06', '1403-11-18', '1446-08-07', '2025-02-06', 18, 7, 11, 8, 'thursday ', 5, 0, 'NONE') ,('2025-02-07', '1403-11-19', '1446-08-08', '2025-02-07', 19, 8, 11, 8, 'friday   ', 6, 0, 'NONE') ,('2025-02-08', '1403-11-20', '1446-08-09', '2025-02-08', 20, 9, 11, 8, 'saturday ', 7, 0, 'NONE') ,('2025-02-09', '1403-11-21', '1446-08-10', '2025-02-09', 21, 10, 11, 8, 'sunday   ', 1, 0, 'NONE') ,('2025-02-10', '1403-11-22', '1446-08-11', '2025-02-10', 22, 11, 11, 8, 'monday   ', 2, 0, 'NONE') ,('2025-02-11', '1403-11-23', '1446-08-12', '2025-02-11', 23, 12, 11, 8, 'tuesday  ', 3, 0, 'NONE') ,('2025-02-12', '1403-11-24', '1446-08-13', '2025-02-12', 24, 13, 11, 8, 'wednesday', 4, 0, 'NONE') ,('2025-02-13', '1403-11-25', '1446-08-14', '2025-02-13', 25, 14, 11, 8, 'thursday ', 5, 0, 'NONE') ,('2025-02-14', '1403-11-26', '1446-08-15', '2025-02-14', 26, 15, 11, 8, 'friday   ', 6, 0, 'NONE') ,('2025-02-15', '1403-11-27', '1446-08-16', '2025-02-15', 27, 16, 11, 8, 'saturday ', 7, 0, 'NONE') ,('2025-02-16', '1403-11-28', '1446-08-17', '2025-02-16', 28, 17, 11, 8, 'sunday   ', 1, 0, 'NONE') ,('2025-02-17', '1403-11-29', '1446-08-18', '2025-02-17', 29, 18, 11, 8, 'monday   ', 2, 0, 'NONE') ,('2025-02-18', '1403-11-30', '1446-08-19', '2025-02-18', 30, 19, 11, 8, 'tuesday  ', 3, 0, 'NONE') ,('2025-02-19', '1403-12-01', '1446-08-20', '2025-02-19', 1, 20, 12, 8, 'wednesday', 4, 0, 'NONE') ,('2025-02-20', '1403-12-02', '1446-08-21', '2025-02-20', 2, 21, 12, 8, 'thursday ', 5, 0, 'NONE') ,('2025-02-21', '1403-12-03', '1446-08-22', '2025-02-21', 3, 22, 12, 8, 'friday   ', 6, 0, 'NONE') ,('2025-02-22', '1403-12-04', '1446-08-23', '2025-02-22', 4, 23, 12, 8, 'saturday ', 7, 0, 'NONE') ,('2025-02-23', '1403-12-05', '1446-08-24', '2025-02-23', 5, 24, 12, 8, 'sunday   ', 1, 0, 'NONE') ,('2025-02-24', '1403-12-06', '1446-08-25', '2025-02-24', 6, 25, 12, 8, 'monday   ', 2, 0, 'NONE') ,('2025-02-25', '1403-12-07', '1446-08-26', '2025-02-25', 7, 26, 12, 8, 'tuesday  ', 3, 0, 'NONE') ,('2025-02-26', '1403-12-08', '1446-08-27', '2025-02-26', 8, 27, 12, 8, 'wednesday', 4, 0, 'NONE') ,('2025-02-27', '1403-12-09', '1446-08-28', '2025-02-27', 9, 28, 12, 8, 'thursday ', 5, 0, 'NONE') ,('2025-02-28', '1403-12-10', '1446-08-29', '2025-02-28', 10, 29, 12, 8, 'friday   ', 6, 0, 'NONE') ,('2025-03-01', '1403-12-11', '1446-09-01', '2025-03-01', 11, 1, 12, 9, 'saturday ', 7, 0, 'NONE') ,('2025-03-02', '1403-12-12', '1446-09-02', '2025-03-02', 12, 2, 12, 9, 'sunday   ', 1, 0, 'NONE') ,('2025-03-03', '1403-12-13', '1446-09-03', '2025-03-03', 13, 3, 12, 9, 'monday   ', 2, 0, 'NONE') ,('2025-03-04', '1403-12-14', '1446-09-04', '2025-03-04', 14, 4, 12, 9, 'tuesday  ', 3, 0, 'NONE') ,('2025-03-05', '1403-12-15', '1446-09-05', '2025-03-05', 15, 5, 12, 9, 'wednesday', 4, 0, 'NONE') ,('2025-03-06', '1403-12-16', '1446-09-06', '2025-03-06', 16, 6, 12, 9, 'thursday ', 5, 0, 'NONE') ,('2025-03-07', '1403-12-17', '1446-09-07', '2025-03-07', 17, 7, 12, 9, 'friday   ', 6, 0, 'NONE') ,('2025-03-08', '1403-12-18', '1446-09-08', '2025-03-08', 18, 8, 12, 9, 'saturday ', 7, 0, 'NONE') ,('2025-03-09', '1403-12-19', '1446-09-09', '2025-03-09', 19, 9, 12, 9, 'sunday   ', 1, 0, 'NONE') ,('2025-03-10', '1403-12-20', '1446-09-10', '2025-03-10', 20, 10, 12, 9, 'monday   ', 2, 0, 'NONE') ,('2025-03-11', '1403-12-21', '1446-09-11', '2025-03-11', 21, 11, 12, 9, 'tuesday  ', 3, 0, 'NONE') ,('2025-03-12', '1403-12-22', '1446-09-12', '2025-03-12', 22, 12, 12, 9, 'wednesday', 4, 0, 'NONE') ,('2025-03-13', '1403-12-23', '1446-09-13', '2025-03-13', 23, 13, 12, 9, 'thursday ', 5, 0, 'NONE') ,('2025-03-14', '1403-12-24', '1446-09-14', '2025-03-14', 24, 14, 12, 9, 'friday   ', 6, 0, 'NONE') ,('2025-03-15', '1403-12-25', '1446-09-15', '2025-03-15', 25, 15, 12, 9, 'saturday ', 7, 0, 'NONE') ,('2025-03-16', '1403-12-26', '1446-09-16', '2025-03-16', 26, 16, 12, 9, 'sunday   ', 1, 0, 'NONE') ,('2025-03-17', '1403-12-27', '1446-09-17', '2025-03-17', 27, 17, 12, 9, 'monday   ', 2, 0, 'NONE') ,('2025-03-18', '1403-12-28', '1446-09-18', '2025-03-18', 28, 18, 12, 9, 'tuesday  ', 3, 0, 'NONE') ,('2025-03-19', '1403-12-29', '1446-09-19', '2025-03-19', 29, 19, 12, 9, 'wednesday', 4, 0, 'NONE') ,('2025-03-20', '1403-12-30', '1446-09-20', '2025-03-20', 30, 20, 12, 9, 'thursday ', 5, 0, 'NONE') ,('2025-03-21', '1404-01-01', '1446-09-21', '2025-03-21', 1, 21, 1, 9, 'friday   ', 6, 0, 'NONE') ,('2025-03-22', '1404-01-02', '1446-09-22', '2025-03-22', 2, 22, 1, 9, 'saturday ', 7, 0, 'NONE') ,('2025-03-23', '1404-01-03', '1446-09-23', '2025-03-23', 3, 23, 1, 9, 'sunday   ', 1, 0, 'NONE') ,('2025-03-24', '1404-01-04', '1446-09-24', '2025-03-24', 4, 24, 1, 9, 'monday   ', 2, 0, 'NONE') ,('2025-03-25', '1404-01-05', '1446-09-25', '2025-03-25', 5, 25, 1, 9, 'tuesday  ', 3, 0, 'NONE') ,('2025-03-26', '1404-01-06', '1446-09-26', '2025-03-26', 6, 26, 1, 9, 'wednesday', 4, 0, 'NONE') ,('2025-03-27', '1404-01-07', '1446-09-27', '2025-03-27', 7, 27, 1, 9, 'thursday ', 5, 0, 'NONE') ,('2025-03-28', '1404-01-08', '1446-09-28', '2025-03-28', 8, 28, 1, 9, 'friday   ', 6, 0, 'NONE') ,('2025-03-29', '1404-01-09', '1446-09-29', '2025-03-29', 9, 29, 1, 9, 'saturday ', 7, 0, 'NONE') ,('2025-03-30', '1404-01-10', '1446-09-30', '2025-03-30', 10, 30, 1, 9, 'sunday   ', 1, 0, 'NONE') ,('2025-03-31', '1404-01-11', '1446-10-01', '2025-03-31', 11, 1, 1, 10, 'monday   ', 2, 0, 'NONE') ,('2025-04-01', '1404-01-12', '1446-10-02', '2025-04-01', 12, 2, 1, 10, 'tuesday  ', 3, 0, 'NONE') ,('2025-04-02', '1404-01-13', '1446-10-03', '2025-04-02', 13, 3, 1, 10, 'wednesday', 4, 0, 'NONE') ,('2025-04-03', '1404-01-14', '1446-10-04', '2025-04-03', 14, 4, 1, 10, 'thursday ', 5, 0, 'NONE') ,('2025-04-04', '1404-01-15', '1446-10-05', '2025-04-04', 15, 5, 1, 10, 'friday   ', 6, 0, 'NONE') ,('2025-04-05', '1404-01-16', '1446-10-06', '2025-04-05', 16, 6, 1, 10, 'saturday ', 7, 0, 'NONE') ,('2025-04-06', '1404-01-17', '1446-10-07', '2025-04-06', 17, 7, 1, 10, 'sunday   ', 1, 0, 'NONE') ,('2025-04-07', '1404-01-18', '1446-10-08', '2025-04-07', 18, 8, 1, 10, 'monday   ', 2, 0, 'NONE') ,('2025-04-08', '1404-01-19', '1446-10-09', '2025-04-08', 19, 9, 1, 10, 'tuesday  ', 3, 0, 'NONE') ,('2025-04-09', '1404-01-20', '1446-10-10', '2025-04-09', 20, 10, 1, 10, 'wednesday', 4, 0, 'NONE') ,('2025-04-10', '1404-01-21', '1446-10-11', '2025-04-10', 21, 11, 1, 10, 'thursday ', 5, 0, 'NONE') ,('2025-04-11', '1404-01-22', '1446-10-12', '2025-04-11', 22, 12, 1, 10, 'friday   ', 6, 0, 'NONE') ,('2025-04-12', '1404-01-23', '1446-10-13', '2025-04-12', 23, 13, 1, 10, 'saturday ', 7, 0, 'NONE') ,('2025-04-13', '1404-01-24', '1446-10-14', '2025-04-13', 24, 14, 1, 10, 'sunday   ', 1, 0, 'NONE') ,('2025-04-14', '1404-01-25', '1446-10-15', '2025-04-14', 25, 15, 1, 10, 'monday   ', 2, 0, 'NONE') ,('2025-04-15', '1404-01-26', '1446-10-16', '2025-04-15', 26, 16, 1, 10, 'tuesday  ', 3, 0, 'NONE') ,('2025-04-16', '1404-01-27', '1446-10-17', '2025-04-16', 27, 17, 1, 10, 'wednesday', 4, 0, 'NONE') ,('2025-04-17', '1404-01-28', '1446-10-18', '2025-04-17', 28, 18, 1, 10, 'thursday ', 5, 0, 'NONE') ,('2025-04-18', '1404-01-29', '1446-10-19', '2025-04-18', 29, 19, 1, 10, 'friday   ', 6, 0, 'NONE') ,('2025-04-19', '1404-01-30', '1446-10-20', '2025-04-19', 30, 20, 1, 10, 'saturday ', 7, 0, 'NONE') ,('2025-04-20', '1404-01-31', '1446-10-21', '2025-04-20', 31, 21, 1, 10, 'sunday   ', 1, 0, 'NONE') ,('2025-04-21', '1404-02-01', '1446-10-22', '2025-04-21', 1, 22, 2, 10, 'monday   ', 2, 0, 'NONE') ,('2025-04-22', '1404-02-02', '1446-10-23', '2025-04-22', 2, 23, 2, 10, 'tuesday  ', 3, 0, 'NONE') ,('2025-04-23', '1404-02-03', '1446-10-24', '2025-04-23', 3, 24, 2, 10, 'wednesday', 4, 0, 'NONE') ,('2025-04-24', '1404-02-04', '1446-10-25', '2025-04-24', 4, 25, 2, 10, 'thursday ', 5, 0, 'NONE') ,('2025-04-25', '1404-02-05', '1446-10-26', '2025-04-25', 5, 26, 2, 10, 'friday   ', 6, 0, 'NONE') ,('2025-04-26', '1404-02-06', '1446-10-27', '2025-04-26', 6, 27, 2, 10, 'saturday ', 7, 0, 'NONE') ,('2025-04-27', '1404-02-07', '1446-10-28', '2025-04-27', 7, 28, 2, 10, 'sunday   ', 1, 0, 'NONE') ,('2025-04-28', '1404-02-08', '1446-10-29', '2025-04-28', 8, 29, 2, 10, 'monday   ', 2, 0, 'NONE') ,('2025-04-29', '1404-02-09', '1446-11-01', '2025-04-29', 9, 1, 2, 11, 'tuesday  ', 3, 0, 'NONE') ,('2025-04-30', '1404-02-10', '1446-11-02', '2025-04-30', 10, 2, 2, 11, 'wednesday', 4, 0, 'NONE') ,('2025-05-01', '1404-02-11', '1446-11-03', '2025-05-01', 11, 3, 2, 11, 'thursday ', 5, 0, 'NONE') ,('2025-05-02', '1404-02-12', '1446-11-04', '2025-05-02', 12, 4, 2, 11, 'friday   ', 6, 0, 'NONE') ,('2025-05-03', '1404-02-13', '1446-11-05', '2025-05-03', 13, 5, 2, 11, 'saturday ', 7, 0, 'NONE') ,('2025-05-04', '1404-02-14', '1446-11-06', '2025-05-04', 14, 6, 2, 11, 'sunday   ', 1, 0, 'NONE') ,('2025-05-05', '1404-02-15', '1446-11-07', '2025-05-05', 15, 7, 2, 11, 'monday   ', 2, 0, 'NONE') ,('2025-05-06', '1404-02-16', '1446-11-08', '2025-05-06', 16, 8, 2, 11, 'tuesday  ', 3, 0, 'NONE') ,('2025-05-07', '1404-02-17', '1446-11-09', '2025-05-07', 17, 9, 2, 11, 'wednesday', 4, 0, 'NONE') ,('2025-05-08', '1404-02-18', '1446-11-10', '2025-05-08', 18, 10, 2, 11, 'thursday ', 5, 0, 'NONE') ,('2025-05-09', '1404-02-19', '1446-11-11', '2025-05-09', 19, 11, 2, 11, 'friday   ', 6, 0, 'NONE') ,('2025-05-10', '1404-02-20', '1446-11-12', '2025-05-10', 20, 12, 2, 11, 'saturday ', 7, 0, 'NONE') ,('2025-05-11', '1404-02-21', '1446-11-13', '2025-05-11', 21, 13, 2, 11, 'sunday   ', 1, 0, 'NONE') ,('2025-05-12', '1404-02-22', '1446-11-14', '2025-05-12', 22, 14, 2, 11, 'monday   ', 2, 0, 'NONE') ,('2025-05-13', '1404-02-23', '1446-11-15', '2025-05-13', 23, 15, 2, 11, 'tuesday  ', 3, 0, 'NONE') ,('2025-05-14', '1404-02-24', '1446-11-16', '2025-05-14', 24, 16, 2, 11, 'wednesday', 4, 0, 'NONE') ,('2025-05-15', '1404-02-25', '1446-11-17', '2025-05-15', 25, 17, 2, 11, 'thursday ', 5, 0, 'NONE') ,('2025-05-16', '1404-02-26', '1446-11-18', '2025-05-16', 26, 18, 2, 11, 'friday   ', 6, 0, 'NONE') ,('2025-05-17', '1404-02-27', '1446-11-19', '2025-05-17', 27, 19, 2, 11, 'saturday ', 7, 0, 'NONE') ,('2025-05-18', '1404-02-28', '1446-11-20', '2025-05-18', 28, 20, 2, 11, 'sunday   ', 1, 0, 'NONE') ,('2025-05-19', '1404-02-29', '1446-11-21', '2025-05-19', 29, 21, 2, 11, 'monday   ', 2, 0, 'NONE') ,('2025-05-20', '1404-02-30', '1446-11-22', '2025-05-20', 30, 22, 2, 11, 'tuesday  ', 3, 0, 'NONE') ,('2025-05-21', '1404-02-31', '1446-11-23', '2025-05-21', 31, 23, 2, 11, 'wednesday', 4, 0, 'NONE') ,('2025-05-22', '1404-03-01', '1446-11-24', '2025-05-22', 1, 24, 3, 11, 'thursday ', 5, 0, 'NONE') ,('2025-05-23', '1404-03-02', '1446-11-25', '2025-05-23', 2, 25, 3, 11, 'friday   ', 6, 0, 'NONE') ,('2025-05-24', '1404-03-03', '1446-11-26', '2025-05-24', 3, 26, 3, 11, 'saturday ', 7, 0, 'NONE') ,('2025-05-25', '1404-03-04', '1446-11-27', '2025-05-25', 4, 27, 3, 11, 'sunday   ', 1, 0, 'NONE') ,('2025-05-26', '1404-03-05', '1446-11-28', '2025-05-26', 5, 28, 3, 11, 'monday   ', 2, 0, 'NONE') ,('2025-05-27', '1404-03-06', '1446-11-29', '2025-05-27', 6, 29, 3, 11, 'tuesday  ', 3, 0, 'NONE') ,('2025-05-28', '1404-03-07', '1446-11-30', '2025-05-28', 7, 30, 3, 11, 'wednesday', 4, 0, 'NONE') ,('2025-05-29', '1404-03-08', '1446-12-01', '2025-05-29', 8, 1, 3, 12, 'thursday ', 5, 0, 'NONE') ,('2025-05-30', '1404-03-09', '1446-12-02', '2025-05-30', 9, 2, 3, 12, 'friday   ', 6, 0, 'NONE') ,('2025-05-31', '1404-03-10', '1446-12-03', '2025-05-31', 10, 3, 3, 12, 'saturday ', 7, 0, 'NONE') ,('2025-06-01', '1404-03-11', '1446-12-04', '2025-06-01', 11, 4, 3, 12, 'sunday   ', 1, 0, 'NONE') ,('2025-06-02', '1404-03-12', '1446-12-05', '2025-06-02', 12, 5, 3, 12, 'monday   ', 2, 0, 'NONE') ,('2025-06-03', '1404-03-13', '1446-12-06', '2025-06-03', 13, 6, 3, 12, 'tuesday  ', 3, 0, 'NONE') ,('2025-06-04', '1404-03-14', '1446-12-07', '2025-06-04', 14, 7, 3, 12, 'wednesday', 4, 0, 'NONE') ,('2025-06-05', '1404-03-15', '1446-12-08', '2025-06-05', 15, 8, 3, 12, 'thursday ', 5, 0, 'NONE') ,('2025-06-06', '1404-03-16', '1446-12-09', '2025-06-06', 16, 9, 3, 12, 'friday   ', 6, 0, 'NONE') ,('2025-06-07', '1404-03-17', '1446-12-10', '2025-06-07', 17, 10, 3, 12, 'saturday ', 7, 0, 'NONE') ,('2025-06-08', '1404-03-18', '1446-12-11', '2025-06-08', 18, 11, 3, 12, 'sunday   ', 1, 0, 'NONE') ,('2025-06-09', '1404-03-19', '1446-12-12', '2025-06-09', 19, 12, 3, 12, 'monday   ', 2, 0, 'NONE') ,('2025-06-10', '1404-03-20', '1446-12-13', '2025-06-10', 20, 13, 3, 12, 'tuesday  ', 3, 0, 'NONE') ,('2025-06-11', '1404-03-21', '1446-12-14', '2025-06-11', 21, 14, 3, 12, 'wednesday', 4, 0, 'NONE') ,('2025-06-12', '1404-03-22', '1446-12-15', '2025-06-12', 22, 15, 3, 12, 'thursday ', 5, 0, 'NONE') ,('2025-06-13', '1404-03-23', '1446-12-16', '2025-06-13', 23, 16, 3, 12, 'friday   ', 6, 0, 'NONE') ,('2025-06-14', '1404-03-24', '1446-12-17', '2025-06-14', 24, 17, 3, 12, 'saturday ', 7, 0, 'NONE') ,('2025-06-15', '1404-03-25', '1446-12-18', '2025-06-15', 25, 18, 3, 12, 'sunday   ', 1, 0, 'NONE') ,('2025-06-16', '1404-03-26', '1446-12-19', '2025-06-16', 26, 19, 3, 12, 'monday   ', 2, 0, 'NONE') ,('2025-06-17', '1404-03-27', '1446-12-20', '2025-06-17', 27, 20, 3, 12, 'tuesday  ', 3, 0, 'NONE') ,('2025-06-18', '1404-03-28', '1446-12-21', '2025-06-18', 28, 21, 3, 12, 'wednesday', 4, 0, 'NONE') ,('2025-06-19', '1404-03-29', '1446-12-22', '2025-06-19', 29, 22, 3, 12, 'thursday ', 5, 0, 'NONE') ,('2025-06-20', '1404-03-30', '1446-12-23', '2025-06-20', 30, 23, 3, 12, 'friday   ', 6, 0, 'NONE') ,('2025-06-21', '1404-03-31', '1446-12-24', '2025-06-21', 31, 24, 3, 12, 'saturday ', 7, 0, 'NONE') ,('2025-06-22', '1404-04-01', '1446-12-25', '2025-06-22', 1, 25, 4, 12, 'sunday   ', 1, 0, 'NONE') ,('2025-06-23', '1404-04-02', '1446-12-26', '2025-06-23', 2, 26, 4, 12, 'monday   ', 2, 0, 'NONE') ,('2025-06-24', '1404-04-03', '1446-12-27', '2025-06-24', 3, 27, 4, 12, 'tuesday  ', 3, 0, 'NONE') ,('2025-06-25', '1404-04-04', '1446-12-28', '2025-06-25', 4, 28, 4, 12, 'wednesday', 4, 0, 'NONE') ,('2025-06-26', '1404-04-05', '1446-12-29', '2025-06-26', 5, 29, 4, 12, 'thursday ', 5, 0, 'NONE') ,('2025-06-27', '1404-04-06', '1447-01-01', '2025-06-27', 6, 1, 4, 1, 'friday   ', 6, 0, 'NONE') ,('2025-06-28', '1404-04-07', '1447-01-02', '2025-06-28', 7, 2, 4, 1, 'saturday ', 7, 0, 'NONE') ,('2025-06-29', '1404-04-08', '1447-01-03', '2025-06-29', 8, 3, 4, 1, 'sunday   ', 1, 0, 'NONE') ,('2025-06-30', '1404-04-09', '1447-01-04', '2025-06-30', 9, 4, 4, 1, 'monday   ', 2, 0, 'NONE') ,('2025-07-01', '1404-04-10', '1447-01-05', '2025-07-01', 10, 5, 4, 1, 'tuesday  ', 3, 0, 'NONE') ,('2025-07-02', '1404-04-11', '1447-01-06', '2025-07-02', 11, 6, 4, 1, 'wednesday', 4, 0, 'NONE') ,('2025-07-03', '1404-04-12', '1447-01-07', '2025-07-03', 12, 7, 4, 1, 'thursday ', 5, 0, 'NONE') ,('2025-07-04', '1404-04-13', '1447-01-08', '2025-07-04', 13, 8, 4, 1, 'friday   ', 6, 0, 'NONE') ,('2025-07-05', '1404-04-14', '1447-01-09', '2025-07-05', 14, 9, 4, 1, 'saturday ', 7, 0, 'NONE') ,('2025-07-06', '1404-04-15', '1447-01-10', '2025-07-06', 15, 10, 4, 1, 'sunday   ', 1, 0, 'NONE') ,('2025-07-07', '1404-04-16', '1447-01-11', '2025-07-07', 16, 11, 4, 1, 'monday   ', 2, 0, 'NONE') ,('2025-07-08', '1404-04-17', '1447-01-12', '2025-07-08', 17, 12, 4, 1, 'tuesday  ', 3, 0, 'NONE') ,('2025-07-09', '1404-04-18', '1447-01-13', '2025-07-09', 18, 13, 4, 1, 'wednesday', 4, 0, 'NONE') ,('2025-07-10', '1404-04-19', '1447-01-14', '2025-07-10', 19, 14, 4, 1, 'thursday ', 5, 0, 'NONE') ,('2025-07-11', '1404-04-20', '1447-01-15', '2025-07-11', 20, 15, 4, 1, 'friday   ', 6, 0, 'NONE') ,('2025-07-12', '1404-04-21', '1447-01-16', '2025-07-12', 21, 16, 4, 1, 'saturday ', 7, 0, 'NONE') ,('2025-07-13', '1404-04-22', '1447-01-17', '2025-07-13', 22, 17, 4, 1, 'sunday   ', 1, 0, 'NONE') ,('2025-07-14', '1404-04-23', '1447-01-18', '2025-07-14', 23, 18, 4, 1, 'monday   ', 2, 0, 'NONE') ,('2025-07-15', '1404-04-24', '1447-01-19', '2025-07-15', 24, 19, 4, 1, 'tuesday  ', 3, 0, 'NONE') ,('2025-07-16', '1404-04-25', '1447-01-20', '2025-07-16', 25, 20, 4, 1, 'wednesday', 4, 0, 'NONE') ,('2025-07-17', '1404-04-26', '1447-01-21', '2025-07-17', 26, 21, 4, 1, 'thursday ', 5, 0, 'NONE') ,('2025-07-18', '1404-04-27', '1447-01-22', '2025-07-18', 27, 22, 4, 1, 'friday   ', 6, 0, 'NONE') ,('2025-07-19', '1404-04-28', '1447-01-23', '2025-07-19', 28, 23, 4, 1, 'saturday ', 7, 0, 'NONE') ,('2025-07-20', '1404-04-29', '1447-01-24', '2025-07-20', 29, 24, 4, 1, 'sunday   ', 1, 0, 'NONE') ,('2025-07-21', '1404-04-30', '1447-01-25', '2025-07-21', 30, 25, 4, 1, 'monday   ', 2, 0, 'NONE') ,('2025-07-22', '1404-04-31', '1447-01-26', '2025-07-22', 31, 26, 4, 1, 'tuesday  ', 3, 0, 'NONE') ,('2025-07-23', '1404-05-01', '1447-01-27', '2025-07-23', 1, 27, 5, 1, 'wednesday', 4, 0, 'NONE') ,('2025-07-24', '1404-05-02', '1447-01-28', '2025-07-24', 2, 28, 5, 1, 'thursday ', 5, 0, 'NONE') ,('2025-07-25', '1404-05-03', '1447-01-29', '2025-07-25', 3, 29, 5, 1, 'friday   ', 6, 0, 'NONE') ,('2025-07-26', '1404-05-04', '1447-01-30', '2025-07-26', 4, 30, 5, 1, 'saturday ', 7, 0, 'NONE') ,('2025-07-27', '1404-05-05', '1447-02-01', '2025-07-27', 5, 1, 5, 2, 'sunday   ', 1, 0, 'NONE') ,('2025-07-28', '1404-05-06', '1447-02-02', '2025-07-28', 6, 2, 5, 2, 'monday   ', 2, 0, 'NONE') ,('2025-07-29', '1404-05-07', '1447-02-03', '2025-07-29', 7, 3, 5, 2, 'tuesday  ', 3, 0, 'NONE') ,('2025-07-30', '1404-05-08', '1447-02-04', '2025-07-30', 8, 4, 5, 2, 'wednesday', 4, 0, 'NONE') ,('2025-07-31', '1404-05-09', '1447-02-05', '2025-07-31', 9, 5, 5, 2, 'thursday ', 5, 0, 'NONE') ,('2025-08-01', '1404-05-10', '1447-02-06', '2025-08-01', 10, 6, 5, 2, 'friday   ', 6, 0, 'NONE') ,('2025-08-02', '1404-05-11', '1447-02-07', '2025-08-02', 11, 7, 5, 2, 'saturday ', 7, 0, 'NONE') ,('2025-08-03', '1404-05-12', '1447-02-08', '2025-08-03', 12, 8, 5, 2, 'sunday   ', 1, 0, 'NONE') ,('2025-08-04', '1404-05-13', '1447-02-09', '2025-08-04', 13, 9, 5, 2, 'monday   ', 2, 0, 'NONE') ,('2025-08-05', '1404-05-14', '1447-02-10', '2025-08-05', 14, 10, 5, 2, 'tuesday  ', 3, 0, 'NONE') ,('2025-08-06', '1404-05-15', '1447-02-11', '2025-08-06', 15, 11, 5, 2, 'wednesday', 4, 0, 'NONE') ,('2025-08-07', '1404-05-16', '1447-02-12', '2025-08-07', 16, 12, 5, 2, 'thursday ', 5, 0, 'NONE') ,('2025-08-08', '1404-05-17', '1447-02-13', '2025-08-08', 17, 13, 5, 2, 'friday   ', 6, 0, 'NONE') ,('2025-08-09', '1404-05-18', '1447-02-14', '2025-08-09', 18, 14, 5, 2, 'saturday ', 7, 0, 'NONE') ,('2025-08-10', '1404-05-19', '1447-02-15', '2025-08-10', 19, 15, 5, 2, 'sunday   ', 1, 0, 'NONE') ,('2025-08-11', '1404-05-20', '1447-02-16', '2025-08-11', 20, 16, 5, 2, 'monday   ', 2, 0, 'NONE') ,('2025-08-12', '1404-05-21', '1447-02-17', '2025-08-12', 21, 17, 5, 2, 'tuesday  ', 3, 0, 'NONE') ,('2025-08-13', '1404-05-22', '1447-02-18', '2025-08-13', 22, 18, 5, 2, 'wednesday', 4, 0, 'NONE') ,('2025-08-14', '1404-05-23', '1447-02-19', '2025-08-14', 23, 19, 5, 2, 'thursday ', 5, 0, 'NONE') ,('2025-08-15', '1404-05-24', '1447-02-20', '2025-08-15', 24, 20, 5, 2, 'friday   ', 6, 0, 'NONE') ,('2025-08-16', '1404-05-25', '1447-02-21', '2025-08-16', 25, 21, 5, 2, 'saturday ', 7, 0, 'NONE') ,('2025-08-17', '1404-05-26', '1447-02-22', '2025-08-17', 26, 22, 5, 2, 'sunday   ', 1, 0, 'NONE') ,('2025-08-18', '1404-05-27', '1447-02-23', '2025-08-18', 27, 23, 5, 2, 'monday   ', 2, 0, 'NONE') ,('2025-08-19', '1404-05-28', '1447-02-24', '2025-08-19', 28, 24, 5, 2, 'tuesday  ', 3, 0, 'NONE') ,('2025-08-20', '1404-05-29', '1447-02-25', '2025-08-20', 29, 25, 5, 2, 'wednesday', 4, 0, 'NONE') ,('2025-08-21', '1404-05-30', '1447-02-26', '2025-08-21', 30, 26, 5, 2, 'thursday ', 5, 0, 'NONE') ,('2025-08-22', '1404-05-31', '1447-02-27', '2025-08-22', 31, 27, 5, 2, 'friday   ', 6, 0, 'NONE') ,('2025-08-23', '1404-06-01', '1447-02-28', '2025-08-23', 1, 28, 6, 2, 'saturday ', 7, 0, 'NONE') ,('2025-08-24', '1404-06-02', '1447-02-29', '2025-08-24', 2, 29, 6, 2, 'sunday   ', 1, 0, 'NONE') ,('2025-08-25', '1404-06-03', '1447-03-01', '2025-08-25', 3, 1, 6, 3, 'monday   ', 2, 0, 'NONE') ,('2025-08-26', '1404-06-04', '1447-03-02', '2025-08-26', 4, 2, 6, 3, 'tuesday  ', 3, 0, 'NONE') ,('2025-08-27', '1404-06-05', '1447-03-03', '2025-08-27', 5, 3, 6, 3, 'wednesday', 4, 0, 'NONE') ,('2025-08-28', '1404-06-06', '1447-03-04', '2025-08-28', 6, 4, 6, 3, 'thursday ', 5, 0, 'NONE') ,('2025-08-29', '1404-06-07', '1447-03-05', '2025-08-29', 7, 5, 6, 3, 'friday   ', 6, 0, 'NONE') ,('2025-08-30', '1404-06-08', '1447-03-06', '2025-08-30', 8, 6, 6, 3, 'saturday ', 7, 0, 'NONE') ,('2025-08-31', '1404-06-09', '1447-03-07', '2025-08-31', 9, 7, 6, 3, 'sunday   ', 1, 0, 'NONE') ,('2025-09-01', '1404-06-10', '1447-03-08', '2025-09-01', 10, 8, 6, 3, 'monday   ', 2, 0, 'NONE') ,('2025-09-02', '1404-06-11', '1447-03-09', '2025-09-02', 11, 9, 6, 3, 'tuesday  ', 3, 0, 'NONE') ,('2025-09-03', '1404-06-12', '1447-03-10', '2025-09-03', 12, 10, 6, 3, 'wednesday', 4, 0, 'NONE') ,('2025-09-04', '1404-06-13', '1447-03-11', '2025-09-04', 13, 11, 6, 3, 'thursday ', 5, 0, 'NONE') ,('2025-09-05', '1404-06-14', '1447-03-12', '2025-09-05', 14, 12, 6, 3, 'friday   ', 6, 0, 'NONE') ,('2025-09-06', '1404-06-15', '1447-03-13', '2025-09-06', 15, 13, 6, 3, 'saturday ', 7, 0, 'NONE') ,('2025-09-07', '1404-06-16', '1447-03-14', '2025-09-07', 16, 14, 6, 3, 'sunday   ', 1, 0, 'NONE') ,('2025-09-08', '1404-06-17', '1447-03-15', '2025-09-08', 17, 15, 6, 3, 'monday   ', 2, 0, 'NONE') ,('2025-09-09', '1404-06-18', '1447-03-16', '2025-09-09', 18, 16, 6, 3, 'tuesday  ', 3, 0, 'NONE') ,('2025-09-10', '1404-06-19', '1447-03-17', '2025-09-10', 19, 17, 6, 3, 'wednesday', 4, 0, 'NONE') ,('2025-09-11', '1404-06-20', '1447-03-18', '2025-09-11', 20, 18, 6, 3, 'thursday ', 5, 0, 'NONE') ,('2025-09-12', '1404-06-21', '1447-03-19', '2025-09-12', 21, 19, 6, 3, 'friday   ', 6, 0, 'NONE') ,('2025-09-13', '1404-06-22', '1447-03-20', '2025-09-13', 22, 20, 6, 3, 'saturday ', 7, 0, 'NONE') ,('2025-09-14', '1404-06-23', '1447-03-21', '2025-09-14', 23, 21, 6, 3, 'sunday   ', 1, 0, 'NONE') ,('2025-09-15', '1404-06-24', '1447-03-22', '2025-09-15', 24, 22, 6, 3, 'monday   ', 2, 0, 'NONE') ,('2025-09-16', '1404-06-25', '1447-03-23', '2025-09-16', 25, 23, 6, 3, 'tuesday  ', 3, 0, 'NONE') ,('2025-09-17', '1404-06-26', '1447-03-24', '2025-09-17', 26, 24, 6, 3, 'wednesday', 4, 0, 'NONE') ,('2025-09-18', '1404-06-27', '1447-03-25', '2025-09-18', 27, 25, 6, 3, 'thursday ', 5, 0, 'NONE') ,('2025-09-19', '1404-06-28', '1447-03-26', '2025-09-19', 28, 26, 6, 3, 'friday   ', 6, 0, 'NONE') ,('2025-09-20', '1404-06-29', '1447-03-27', '2025-09-20', 29, 27, 6, 3, 'saturday ', 7, 0, 'NONE') ,('2025-09-21', '1404-06-30', '1447-03-28', '2025-09-21', 30, 28, 6, 3, 'sunday   ', 1, 0, 'NONE') ,('2025-09-22', '1404-06-31', '1447-03-29', '2025-09-22', 31, 29, 6, 3, 'monday   ', 2, 0, 'NONE') ,('2025-09-23', '1404-07-01', '1447-03-30', '2025-09-23', 1, 30, 7, 3, 'tuesday  ', 3, 0, 'NONE') ,('2025-09-24', '1404-07-02', '1447-04-01', '2025-09-24', 2, 1, 7, 4, 'wednesday', 4, 0, 'NONE') ,('2025-09-25', '1404-07-03', '1447-04-02', '2025-09-25', 3, 2, 7, 4, 'thursday ', 5, 0, 'NONE') ,('2025-09-26', '1404-07-04', '1447-04-03', '2025-09-26', 4, 3, 7, 4, 'friday   ', 6, 0, 'NONE') ,('2025-09-27', '1404-07-05', '1447-04-04', '2025-09-27', 5, 4, 7, 4, 'saturday ', 7, 0, 'NONE') ,('2025-09-28', '1404-07-06', '1447-04-05', '2025-09-28', 6, 5, 7, 4, 'sunday   ', 1, 0, 'NONE') ,('2025-09-29', '1404-07-07', '1447-04-06', '2025-09-29', 7, 6, 7, 4, 'monday   ', 2, 0, 'NONE') ,('2025-09-30', '1404-07-08', '1447-04-07', '2025-09-30', 8, 7, 7, 4, 'tuesday  ', 3, 0, 'NONE') ,('2025-10-01', '1404-07-09', '1447-04-08', '2025-10-01', 9, 8, 7, 4, 'wednesday', 4, 0, 'NONE') ,('2025-10-02', '1404-07-10', '1447-04-09', '2025-10-02', 10, 9, 7, 4, 'thursday ', 5, 0, 'NONE') ,('2025-10-03', '1404-07-11', '1447-04-10', '2025-10-03', 11, 10, 7, 4, 'friday   ', 6, 0, 'NONE') ,('2025-10-04', '1404-07-12', '1447-04-11', '2025-10-04', 12, 11, 7, 4, 'saturday ', 7, 0, 'NONE') ,('2025-10-05', '1404-07-13', '1447-04-12', '2025-10-05', 13, 12, 7, 4, 'sunday   ', 1, 0, 'NONE') ,('2025-10-06', '1404-07-14', '1447-04-13', '2025-10-06', 14, 13, 7, 4, 'monday   ', 2, 0, 'NONE') ,('2025-10-07', '1404-07-15', '1447-04-14', '2025-10-07', 15, 14, 7, 4, 'tuesday  ', 3, 0, 'NONE') ,('2025-10-08', '1404-07-16', '1447-04-15', '2025-10-08', 16, 15, 7, 4, 'wednesday', 4, 0, 'NONE') ,('2025-10-09', '1404-07-17', '1447-04-16', '2025-10-09', 17, 16, 7, 4, 'thursday ', 5, 0, 'NONE') ,('2025-10-10', '1404-07-18', '1447-04-17', '2025-10-10', 18, 17, 7, 4, 'friday   ', 6, 0, 'NONE') ,('2025-10-11', '1404-07-19', '1447-04-18', '2025-10-11', 19, 18, 7, 4, 'saturday ', 7, 0, 'NONE') ,('2025-10-12', '1404-07-20', '1447-04-19', '2025-10-12', 20, 19, 7, 4, 'sunday   ', 1, 0, 'NONE') ,('2025-10-13', '1404-07-21', '1447-04-20', '2025-10-13', 21, 20, 7, 4, 'monday   ', 2, 0, 'NONE') ,('2025-10-14', '1404-07-22', '1447-04-21', '2025-10-14', 22, 21, 7, 4, 'tuesday  ', 3, 0, 'NONE') ,('2025-10-15', '1404-07-23', '1447-04-22', '2025-10-15', 23, 22, 7, 4, 'wednesday', 4, 0, 'NONE') ,('2025-10-16', '1404-07-24', '1447-04-23', '2025-10-16', 24, 23, 7, 4, 'thursday ', 5, 0, 'NONE') ,('2025-10-17', '1404-07-25', '1447-04-24', '2025-10-17', 25, 24, 7, 4, 'friday   ', 6, 0, 'NONE') ,('2025-10-18', '1404-07-26', '1447-04-25', '2025-10-18', 26, 25, 7, 4, 'saturday ', 7, 0, 'NONE') ,('2025-10-19', '1404-07-27', '1447-04-26', '2025-10-19', 27, 26, 7, 4, 'sunday   ', 1, 0, 'NONE') ,('2025-10-20', '1404-07-28', '1447-04-27', '2025-10-20', 28, 27, 7, 4, 'monday   ', 2, 0, 'NONE') ,('2025-10-21', '1404-07-29', '1447-04-28', '2025-10-21', 29, 28, 7, 4, 'tuesday  ', 3, 0, 'NONE') ,('2025-10-22', '1404-07-30', '1447-04-29', '2025-10-22', 30, 29, 7, 4, 'wednesday', 4, 0, 'NONE') ,('2025-10-23', '1404-08-01', '1447-05-01', '2025-10-23', 1, 1, 8, 5, 'thursday ', 5, 0, 'NONE') ,('2025-10-24', '1404-08-02', '1447-05-02', '2025-10-24', 2, 2, 8, 5, 'friday   ', 6, 0, 'NONE') ,('2025-10-25', '1404-08-03', '1447-05-03', '2025-10-25', 3, 3, 8, 5, 'saturday ', 7, 0, 'NONE') ,('2025-10-26', '1404-08-04', '1447-05-04', '2025-10-26', 4, 4, 8, 5, 'sunday   ', 1, 0, 'NONE') ,('2025-10-27', '1404-08-05', '1447-05-05', '2025-10-27', 5, 5, 8, 5, 'monday   ', 2, 0, 'NONE') ,('2025-10-28', '1404-08-06', '1447-05-06', '2025-10-28', 6, 6, 8, 5, 'tuesday  ', 3, 0, 'NONE') ,('2025-10-29', '1404-08-07', '1447-05-07', '2025-10-29', 7, 7, 8, 5, 'wednesday', 4, 0, 'NONE') ,('2025-10-30', '1404-08-08', '1447-05-08', '2025-10-30', 8, 8, 8, 5, 'thursday ', 5, 0, 'NONE') ,('2025-10-31', '1404-08-09', '1447-05-09', '2025-10-31', 9, 9, 8, 5, 'friday   ', 6, 0, 'NONE') ,('2025-11-01', '1404-08-10', '1447-05-10', '2025-11-01', 10, 10, 8, 5, 'saturday ', 7, 0, 'NONE') ,('2025-11-02', '1404-08-11', '1447-05-11', '2025-11-02', 11, 11, 8, 5, 'sunday   ', 1, 0, 'NONE') ,('2025-11-03', '1404-08-12', '1447-05-12', '2025-11-03', 12, 12, 8, 5, 'monday   ', 2, 0, 'NONE') ,('2025-11-04', '1404-08-13', '1447-05-13', '2025-11-04', 13, 13, 8, 5, 'tuesday  ', 3, 0, 'NONE') ,('2025-11-05', '1404-08-14', '1447-05-14', '2025-11-05', 14, 14, 8, 5, 'wednesday', 4, 0, 'NONE') ,('2025-11-06', '1404-08-15', '1447-05-15', '2025-11-06', 15, 15, 8, 5, 'thursday ', 5, 0, 'NONE') ,('2025-11-07', '1404-08-16', '1447-05-16', '2025-11-07', 16, 16, 8, 5, 'friday   ', 6, 0, 'NONE') ,('2025-11-08', '1404-08-17', '1447-05-17', '2025-11-08', 17, 17, 8, 5, 'saturday ', 7, 0, 'NONE') ,('2025-11-09', '1404-08-18', '1447-05-18', '2025-11-09', 18, 18, 8, 5, 'sunday   ', 1, 0, 'NONE') ,('2025-11-10', '1404-08-19', '1447-05-19', '2025-11-10', 19, 19, 8, 5, 'monday   ', 2, 0, 'NONE') ,('2025-11-11', '1404-08-20', '1447-05-20', '2025-11-11', 20, 20, 8, 5, 'tuesday  ', 3, 0, 'NONE') ,('2025-11-12', '1404-08-21', '1447-05-21', '2025-11-12', 21, 21, 8, 5, 'wednesday', 4, 0, 'NONE') ,('2025-11-13', '1404-08-22', '1447-05-22', '2025-11-13', 22, 22, 8, 5, 'thursday ', 5, 0, 'NONE') ,('2025-11-14', '1404-08-23', '1447-05-23', '2025-11-14', 23, 23, 8, 5, 'friday   ', 6, 0, 'NONE') ,('2025-11-15', '1404-08-24', '1447-05-24', '2025-11-15', 24, 24, 8, 5, 'saturday ', 7, 0, 'NONE') ,('2025-11-16', '1404-08-25', '1447-05-25', '2025-11-16', 25, 25, 8, 5, 'sunday   ', 1, 0, 'NONE') ,('2025-11-17', '1404-08-26', '1447-05-26', '2025-11-17', 26, 26, 8, 5, 'monday   ', 2, 0, 'NONE') ,('2025-11-18', '1404-08-27', '1447-05-27', '2025-11-18', 27, 27, 8, 5, 'tuesday  ', 3, 0, 'NONE') ,('2025-11-19', '1404-08-28', '1447-05-28', '2025-11-19', 28, 28, 8, 5, 'wednesday', 4, 0, 'NONE') ,('2025-11-20', '1404-08-29', '1447-05-29', '2025-11-20', 29, 29, 8, 5, 'thursday ', 5, 0, 'NONE') ,('2025-11-21', '1404-08-30', '1447-05-30', '2025-11-21', 30, 30, 8, 5, 'friday   ', 6, 0, 'NONE') ,('2025-11-22', '1404-09-01', '1447-06-01', '2025-11-22', 1, 1, 9, 6, 'saturday ', 7, 0, 'NONE') ,('2025-11-23', '1404-09-02', '1447-06-02', '2025-11-23', 2, 2, 9, 6, 'sunday   ', 1, 0, 'NONE') ,('2025-11-24', '1404-09-03', '1447-06-03', '2025-11-24', 3, 3, 9, 6, 'monday   ', 2, 0, 'NONE') ,('2025-11-25', '1404-09-04', '1447-06-04', '2025-11-25', 4, 4, 9, 6, 'tuesday  ', 3, 0, 'NONE') ,('2025-11-26', '1404-09-05', '1447-06-05', '2025-11-26', 5, 5, 9, 6, 'wednesday', 4, 0, 'NONE') ,('2025-11-27', '1404-09-06', '1447-06-06', '2025-11-27', 6, 6, 9, 6, 'thursday ', 5, 0, 'NONE') ,('2025-11-28', '1404-09-07', '1447-06-07', '2025-11-28', 7, 7, 9, 6, 'friday   ', 6, 0, 'NONE') ,('2025-11-29', '1404-09-08', '1447-06-08', '2025-11-29', 8, 8, 9, 6, 'saturday ', 7, 0, 'NONE') ,('2025-11-30', '1404-09-09', '1447-06-09', '2025-11-30', 9, 9, 9, 6, 'sunday   ', 1, 0, 'NONE') ,('2025-12-01', '1404-09-10', '1447-06-10', '2025-12-01', 10, 10, 9, 6, 'monday   ', 2, 0, 'NONE') ,('2025-12-02', '1404-09-11', '1447-06-11', '2025-12-02', 11, 11, 9, 6, 'tuesday  ', 3, 0, 'NONE') ,('2025-12-03', '1404-09-12', '1447-06-12', '2025-12-03', 12, 12, 9, 6, 'wednesday', 4, 0, 'NONE') ,('2025-12-04', '1404-09-13', '1447-06-13', '2025-12-04', 13, 13, 9, 6, 'thursday ', 5, 0, 'NONE') ,('2025-12-05', '1404-09-14', '1447-06-14', '2025-12-05', 14, 14, 9, 6, 'friday   ', 6, 0, 'NONE') ,('2025-12-06', '1404-09-15', '1447-06-15', '2025-12-06', 15, 15, 9, 6, 'saturday ', 7, 0, 'NONE') ,('2025-12-07', '1404-09-16', '1447-06-16', '2025-12-07', 16, 16, 9, 6, 'sunday   ', 1, 0, 'NONE') ,('2025-12-08', '1404-09-17', '1447-06-17', '2025-12-08', 17, 17, 9, 6, 'monday   ', 2, 0, 'NONE') ,('2025-12-09', '1404-09-18', '1447-06-18', '2025-12-09', 18, 18, 9, 6, 'tuesday  ', 3, 0, 'NONE') ,('2025-12-10', '1404-09-19', '1447-06-19', '2025-12-10', 19, 19, 9, 6, 'wednesday', 4, 0, 'NONE') ,('2025-12-11', '1404-09-20', '1447-06-20', '2025-12-11', 20, 20, 9, 6, 'thursday ', 5, 0, 'NONE') ,('2025-12-12', '1404-09-21', '1447-06-21', '2025-12-12', 21, 21, 9, 6, 'friday   ', 6, 0, 'NONE') ,('2025-12-13', '1404-09-22', '1447-06-22', '2025-12-13', 22, 22, 9, 6, 'saturday ', 7, 0, 'NONE') ,('2025-12-14', '1404-09-23', '1447-06-23', '2025-12-14', 23, 23, 9, 6, 'sunday   ', 1, 0, 'NONE') ,('2025-12-15', '1404-09-24', '1447-06-24', '2025-12-15', 24, 24, 9, 6, 'monday   ', 2, 0, 'NONE') ,('2025-12-16', '1404-09-25', '1447-06-25', '2025-12-16', 25, 25, 9, 6, 'tuesday  ', 3, 0, 'NONE') ,('2025-12-17', '1404-09-26', '1447-06-26', '2025-12-17', 26, 26, 9, 6, 'wednesday', 4, 0, 'NONE') ,('2025-12-18', '1404-09-27', '1447-06-27', '2025-12-18', 27, 27, 9, 6, 'thursday ', 5, 0, 'NONE') ,('2025-12-19', '1404-09-28', '1447-06-28', '2025-12-19', 28, 28, 9, 6, 'friday   ', 6, 0, 'NONE') ,('2025-12-20', '1404-09-29', '1447-06-29', '2025-12-20', 29, 29, 9, 6, 'saturday ', 7, 0, 'NONE') ,('2025-12-21', '1404-09-30', '1447-07-01', '2025-12-21', 30, 1, 9, 7, 'sunday   ', 1, 0, 'NONE') ,('2025-12-22', '1404-10-01', '1447-07-02', '2025-12-22', 1, 2, 10, 7, 'monday   ', 2, 0, 'NONE') ,('2025-12-23', '1404-10-02', '1447-07-03', '2025-12-23', 2, 3, 10, 7, 'tuesday  ', 3, 0, 'NONE') ,('2025-12-24', '1404-10-03', '1447-07-04', '2025-12-24', 3, 4, 10, 7, 'wednesday', 4, 0, 'NONE') ,('2025-12-25', '1404-10-04', '1447-07-05', '2025-12-25', 4, 5, 10, 7, 'thursday ', 5, 0, 'NONE') ,('2025-12-26', '1404-10-05', '1447-07-06', '2025-12-26', 5, 6, 10, 7, 'friday   ', 6, 0, 'NONE') ,('2025-12-27', '1404-10-06', '1447-07-07', '2025-12-27', 6, 7, 10, 7, 'saturday ', 7, 0, 'NONE') ,('2025-12-28', '1404-10-07', '1447-07-08', '2025-12-28', 7, 8, 10, 7, 'sunday   ', 1, 0, 'NONE') ,('2025-12-29', '1404-10-08', '1447-07-09', '2025-12-29', 8, 9, 10, 7, 'monday   ', 2, 0, 'NONE') ,('2025-12-30', '1404-10-09', '1447-07-10', '2025-12-30', 9, 10, 10, 7, 'tuesday  ', 3, 0, 'NONE') ,('2025-12-31', '1404-10-10', '1447-07-11', '2025-12-31', 10, 11, 10, 7, 'wednesday', 4, 0, 'NONE') ,('2026-01-01', '1404-10-11', '1447-07-12', '2026-01-01', 11, 12, 10, 7, 'thursday ', 5, 0, 'NONE') ,('2026-01-02', '1404-10-12', '1447-07-13', '2026-01-02', 12, 13, 10, 7, 'friday   ', 6, 0, 'NONE') ,('2026-01-03', '1404-10-13', '1447-07-14', '2026-01-03', 13, 14, 10, 7, 'saturday ', 7, 0, 'NONE') ,('2026-01-04', '1404-10-14', '1447-07-15', '2026-01-04', 14, 15, 10, 7, 'sunday   ', 1, 0, 'NONE') ,('2026-01-05', '1404-10-15', '1447-07-16', '2026-01-05', 15, 16, 10, 7, 'monday   ', 2, 0, 'NONE') ,('2026-01-06', '1404-10-16', '1447-07-17', '2026-01-06', 16, 17, 10, 7, 'tuesday  ', 3, 0, 'NONE') ,('2026-01-07', '1404-10-17', '1447-07-18', '2026-01-07', 17, 18, 10, 7, 'wednesday', 4, 0, 'NONE') ,('2026-01-08', '1404-10-18', '1447-07-19', '2026-01-08', 18, 19, 10, 7, 'thursday ', 5, 0, 'NONE') ,('2026-01-09', '1404-10-19', '1447-07-20', '2026-01-09', 19, 20, 10, 7, 'friday   ', 6, 0, 'NONE') ,('2026-01-10', '1404-10-20', '1447-07-21', '2026-01-10', 20, 21, 10, 7, 'saturday ', 7, 0, 'NONE') ,('2026-01-11', '1404-10-21', '1447-07-22', '2026-01-11', 21, 22, 10, 7, 'sunday   ', 1, 0, 'NONE') ,('2026-01-12', '1404-10-22', '1447-07-23', '2026-01-12', 22, 23, 10, 7, 'monday   ', 2, 0, 'NONE') ,('2026-01-13', '1404-10-23', '1447-07-24', '2026-01-13', 23, 24, 10, 7, 'tuesday  ', 3, 0, 'NONE') ,('2026-01-14', '1404-10-24', '1447-07-25', '2026-01-14', 24, 25, 10, 7, 'wednesday', 4, 0, 'NONE') ,('2026-01-15', '1404-10-25', '1447-07-26', '2026-01-15', 25, 26, 10, 7, 'thursday ', 5, 0, 'NONE') ,('2026-01-16', '1404-10-26', '1447-07-27', '2026-01-16', 26, 27, 10, 7, 'friday   ', 6, 0, 'NONE') ,('2026-01-17', '1404-10-27', '1447-07-28', '2026-01-17', 27, 28, 10, 7, 'saturday ', 7, 0, 'NONE') ,('2026-01-18', '1404-10-28', '1447-07-29', '2026-01-18', 28, 29, 10, 7, 'sunday   ', 1, 0, 'NONE') ,('2026-01-19', '1404-10-29', '1447-07-30', '2026-01-19', 29, 30, 10, 7, 'monday   ', 2, 0, 'NONE') ,('2026-01-20', '1404-10-30', '1447-08-01', '2026-01-20', 30, 1, 10, 8, 'tuesday  ', 3, 0, 'NONE') ,('2026-01-21', '1404-11-01', '1447-08-02', '2026-01-21', 1, 2, 11, 8, 'wednesday', 4, 0, 'NONE') ,('2026-01-22', '1404-11-02', '1447-08-03', '2026-01-22', 2, 3, 11, 8, 'thursday ', 5, 0, 'NONE') ,('2026-01-23', '1404-11-03', '1447-08-04', '2026-01-23', 3, 4, 11, 8, 'friday   ', 6, 0, 'NONE') ,('2026-01-24', '1404-11-04', '1447-08-05', '2026-01-24', 4, 5, 11, 8, 'saturday ', 7, 0, 'NONE') ,('2026-01-25', '1404-11-05', '1447-08-06', '2026-01-25', 5, 6, 11, 8, 'sunday   ', 1, 0, 'NONE') ,('2026-01-26', '1404-11-06', '1447-08-07', '2026-01-26', 6, 7, 11, 8, 'monday   ', 2, 0, 'NONE') ,('2026-01-27', '1404-11-07', '1447-08-08', '2026-01-27', 7, 8, 11, 8, 'tuesday  ', 3, 0, 'NONE') ,('2026-01-28', '1404-11-08', '1447-08-09', '2026-01-28', 8, 9, 11, 8, 'wednesday', 4, 0, 'NONE') ,('2026-01-29', '1404-11-09', '1447-08-10', '2026-01-29', 9, 10, 11, 8, 'thursday ', 5, 0, 'NONE') ,('2026-01-30', '1404-11-10', '1447-08-11', '2026-01-30', 10, 11, 11, 8, 'friday   ', 6, 0, 'NONE') ,('2026-01-31', '1404-11-11', '1447-08-12', '2026-01-31', 11, 12, 11, 8, 'saturday ', 7, 0, 'NONE') ,('2026-02-01', '1404-11-12', '1447-08-13', '2026-02-01', 12, 13, 11, 8, 'sunday   ', 1, 0, 'NONE') ,('2026-02-02', '1404-11-13', '1447-08-14', '2026-02-02', 13, 14, 11, 8, 'monday   ', 2, 0, 'NONE') ,('2026-02-03', '1404-11-14', '1447-08-15', '2026-02-03', 14, 15, 11, 8, 'tuesday  ', 3, 0, 'NONE') ,('2026-02-04', '1404-11-15', '1447-08-16', '2026-02-04', 15, 16, 11, 8, 'wednesday', 4, 0, 'NONE') ,('2026-02-05', '1404-11-16', '1447-08-17', '2026-02-05', 16, 17, 11, 8, 'thursday ', 5, 0, 'NONE') ,('2026-02-06', '1404-11-17', '1447-08-18', '2026-02-06', 17, 18, 11, 8, 'friday   ', 6, 0, 'NONE') ,('2026-02-07', '1404-11-18', '1447-08-19', '2026-02-07', 18, 19, 11, 8, 'saturday ', 7, 0, 'NONE') ,('2026-02-08', '1404-11-19', '1447-08-20', '2026-02-08', 19, 20, 11, 8, 'sunday   ', 1, 0, 'NONE') ,('2026-02-09', '1404-11-20', '1447-08-21', '2026-02-09', 20, 21, 11, 8, 'monday   ', 2, 0, 'NONE') ,('2026-02-10', '1404-11-21', '1447-08-22', '2026-02-10', 21, 22, 11, 8, 'tuesday  ', 3, 0, 'NONE') ,('2026-02-11', '1404-11-22', '1447-08-23', '2026-02-11', 22, 23, 11, 8, 'wednesday', 4, 0, 'NONE') ,('2026-02-12', '1404-11-23', '1447-08-24', '2026-02-12', 23, 24, 11, 8, 'thursday ', 5, 0, 'NONE') ,('2026-02-13', '1404-11-24', '1447-08-25', '2026-02-13', 24, 25, 11, 8, 'friday   ', 6, 0, 'NONE') ,('2026-02-14', '1404-11-25', '1447-08-26', '2026-02-14', 25, 26, 11, 8, 'saturday ', 7, 0, 'NONE') ,('2026-02-15', '1404-11-26', '1447-08-27', '2026-02-15', 26, 27, 11, 8, 'sunday   ', 1, 0, 'NONE') ,('2026-02-16', '1404-11-27', '1447-08-28', '2026-02-16', 27, 28, 11, 8, 'monday   ', 2, 0, 'NONE') ,('2026-02-17', '1404-11-28', '1447-08-29', '2026-02-17', 28, 29, 11, 8, 'tuesday  ', 3, 0, 'NONE') ,('2026-02-18', '1404-11-29', '1447-09-01', '2026-02-18', 29, 1, 11, 9, 'wednesday', 4, 0, 'NONE') ,('2026-02-19', '1404-11-30', '1447-09-02', '2026-02-19', 30, 2, 11, 9, 'thursday ', 5, 0, 'NONE') ,('2026-02-20', '1404-12-01', '1447-09-03', '2026-02-20', 1, 3, 12, 9, 'friday   ', 6, 0, 'NONE') ,('2026-02-21', '1404-12-02', '1447-09-04', '2026-02-21', 2, 4, 12, 9, 'saturday ', 7, 0, 'NONE') ,('2026-02-22', '1404-12-03', '1447-09-05', '2026-02-22', 3, 5, 12, 9, 'sunday   ', 1, 0, 'NONE') ,('2026-02-23', '1404-12-04', '1447-09-06', '2026-02-23', 4, 6, 12, 9, 'monday   ', 2, 0, 'NONE') ,('2026-02-24', '1404-12-05', '1447-09-07', '2026-02-24', 5, 7, 12, 9, 'tuesday  ', 3, 0, 'NONE') ,('2026-02-25', '1404-12-06', '1447-09-08', '2026-02-25', 6, 8, 12, 9, 'wednesday', 4, 0, 'NONE') ,('2026-02-26', '1404-12-07', '1447-09-09', '2026-02-26', 7, 9, 12, 9, 'thursday ', 5, 0, 'NONE') ,('2026-02-27', '1404-12-08', '1447-09-10', '2026-02-27', 8, 10, 12, 9, 'friday   ', 6, 0, 'NONE') ,('2026-02-28', '1404-12-09', '1447-09-11', '2026-02-28', 9, 11, 12, 9, 'saturday ', 7, 0, 'NONE') ,('2026-03-01', '1404-12-10', '1447-09-12', '2026-03-01', 10, 12, 12, 9, 'sunday   ', 1, 0, 'NONE') ,('2026-03-02', '1404-12-11', '1447-09-13', '2026-03-02', 11, 13, 12, 9, 'monday   ', 2, 0, 'NONE') ,('2026-03-03', '1404-12-12', '1447-09-14', '2026-03-03', 12, 14, 12, 9, 'tuesday  ', 3, 0, 'NONE') ,('2026-03-04', '1404-12-13', '1447-09-15', '2026-03-04', 13, 15, 12, 9, 'wednesday', 4, 0, 'NONE') ,('2026-03-05', '1404-12-14', '1447-09-16', '2026-03-05', 14, 16, 12, 9, 'thursday ', 5, 0, 'NONE') ,('2026-03-06', '1404-12-15', '1447-09-17', '2026-03-06', 15, 17, 12, 9, 'friday   ', 6, 0, 'NONE') ,('2026-03-07', '1404-12-16', '1447-09-18', '2026-03-07', 16, 18, 12, 9, 'saturday ', 7, 0, 'NONE') ,('2026-03-08', '1404-12-17', '1447-09-19', '2026-03-08', 17, 19, 12, 9, 'sunday   ', 1, 0, 'NONE') ,('2026-03-09', '1404-12-18', '1447-09-20', '2026-03-09', 18, 20, 12, 9, 'monday   ', 2, 0, 'NONE') ,('2026-03-10', '1404-12-19', '1447-09-21', '2026-03-10', 19, 21, 12, 9, 'tuesday  ', 3, 0, 'NONE') ,('2026-03-11', '1404-12-20', '1447-09-22', '2026-03-11', 20, 22, 12, 9, 'wednesday', 4, 0, 'NONE') ,('2026-03-12', '1404-12-21', '1447-09-23', '2026-03-12', 21, 23, 12, 9, 'thursday ', 5, 0, 'NONE') ,('2026-03-13', '1404-12-22', '1447-09-24', '2026-03-13', 22, 24, 12, 9, 'friday   ', 6, 0, 'NONE') ,('2026-03-14', '1404-12-23', '1447-09-25', '2026-03-14', 23, 25, 12, 9, 'saturday ', 7, 0, 'NONE') ,('2026-03-15', '1404-12-24', '1447-09-26', '2026-03-15', 24, 26, 12, 9, 'sunday   ', 1, 0, 'NONE') ,('2026-03-16', '1404-12-25', '1447-09-27', '2026-03-16', 25, 27, 12, 9, 'monday   ', 2, 0, 'NONE') ,('2026-03-17', '1404-12-26', '1447-09-28', '2026-03-17', 26, 28, 12, 9, 'tuesday  ', 3, 0, 'NONE') ,('2026-03-18', '1404-12-27', '1447-09-29', '2026-03-18', 27, 29, 12, 9, 'wednesday', 4, 0, 'NONE') ,('2026-03-19', '1404-12-28', '1447-09-30', '2026-03-19', 28, 30, 12, 9, 'thursday ', 5, 0, 'NONE') ,('2026-03-20', '1404-12-29', '1447-10-01', '2026-03-20', 29, 1, 12, 10, 'friday   ', 6, 0, 'NONE') ,('2026-03-21', '1405-01-01', '1447-10-02', '2026-03-21', 1, 2, 1, 10, 'saturday ', 7, 0, 'NONE') ,('2026-03-22', '1405-01-02', '1447-10-03', '2026-03-22', 2, 3, 1, 10, 'sunday   ', 1, 0, 'NONE') ,('2026-03-23', '1405-01-03', '1447-10-04', '2026-03-23', 3, 4, 1, 10, 'monday   ', 2, 0, 'NONE') ,('2026-03-24', '1405-01-04', '1447-10-05', '2026-03-24', 4, 5, 1, 10, 'tuesday  ', 3, 0, 'NONE') ,('2026-03-25', '1405-01-05', '1447-10-06', '2026-03-25', 5, 6, 1, 10, 'wednesday', 4, 0, 'NONE') ,('2026-03-26', '1405-01-06', '1447-10-07', '2026-03-26', 6, 7, 1, 10, 'thursday ', 5, 0, 'NONE') ,('2026-03-27', '1405-01-07', '1447-10-08', '2026-03-27', 7, 8, 1, 10, 'friday   ', 6, 0, 'NONE') ,('2026-03-28', '1405-01-08', '1447-10-09', '2026-03-28', 8, 9, 1, 10, 'saturday ', 7, 0, 'NONE') ,('2026-03-29', '1405-01-09', '1447-10-10', '2026-03-29', 9, 10, 1, 10, 'sunday   ', 1, 0, 'NONE') ,('2026-03-30', '1405-01-10', '1447-10-11', '2026-03-30', 10, 11, 1, 10, 'monday   ', 2, 0, 'NONE') ,('2026-03-31', '1405-01-11', '1447-10-12', '2026-03-31', 11, 12, 1, 10, 'tuesday  ', 3, 0, 'NONE') ,('2026-04-01', '1405-01-12', '1447-10-13', '2026-04-01', 12, 13, 1, 10, 'wednesday', 4, 0, 'NONE') ,('2026-04-02', '1405-01-13', '1447-10-14', '2026-04-02', 13, 14, 1, 10, 'thursday ', 5, 0, 'NONE') ,('2026-04-03', '1405-01-14', '1447-10-15', '2026-04-03', 14, 15, 1, 10, 'friday   ', 6, 0, 'NONE') ,('2026-04-04', '1405-01-15', '1447-10-16', '2026-04-04', 15, 16, 1, 10, 'saturday ', 7, 0, 'NONE') ,('2026-04-05', '1405-01-16', '1447-10-17', '2026-04-05', 16, 17, 1, 10, 'sunday   ', 1, 0, 'NONE') ,('2026-04-06', '1405-01-17', '1447-10-18', '2026-04-06', 17, 18, 1, 10, 'monday   ', 2, 0, 'NONE') ,('2026-04-07', '1405-01-18', '1447-10-19', '2026-04-07', 18, 19, 1, 10, 'tuesday  ', 3, 0, 'NONE') ,('2026-04-08', '1405-01-19', '1447-10-20', '2026-04-08', 19, 20, 1, 10, 'wednesday', 4, 0, 'NONE') ,('2026-04-09', '1405-01-20', '1447-10-21', '2026-04-09', 20, 21, 1, 10, 'thursday ', 5, 0, 'NONE') ,('2026-04-10', '1405-01-21', '1447-10-22', '2026-04-10', 21, 22, 1, 10, 'friday   ', 6, 0, 'NONE') ,('2026-04-11', '1405-01-22', '1447-10-23', '2026-04-11', 22, 23, 1, 10, 'saturday ', 7, 0, 'NONE') ,('2026-04-12', '1405-01-23', '1447-10-24', '2026-04-12', 23, 24, 1, 10, 'sunday   ', 1, 0, 'NONE') ,('2026-04-13', '1405-01-24', '1447-10-25', '2026-04-13', 24, 25, 1, 10, 'monday   ', 2, 0, 'NONE') ,('2026-04-14', '1405-01-25', '1447-10-26', '2026-04-14', 25, 26, 1, 10, 'tuesday  ', 3, 0, 'NONE') ,('2026-04-15', '1405-01-26', '1447-10-27', '2026-04-15', 26, 27, 1, 10, 'wednesday', 4, 0, 'NONE') ,('2026-04-16', '1405-01-27', '1447-10-28', '2026-04-16', 27, 28, 1, 10, 'thursday ', 5, 0, 'NONE') ,('2026-04-17', '1405-01-28', '1447-10-29', '2026-04-17', 28, 29, 1, 10, 'friday   ', 6, 0, 'NONE') ,('2026-04-18', '1405-01-29', '1447-11-01', '2026-04-18', 29, 1, 1, 11, 'saturday ', 7, 0, 'NONE') ,('2026-04-19', '1405-01-30', '1447-11-02', '2026-04-19', 30, 2, 1, 11, 'sunday   ', 1, 0, 'NONE') ,('2026-04-20', '1405-01-31', '1447-11-03', '2026-04-20', 31, 3, 1, 11, 'monday   ', 2, 0, 'NONE') ,('2026-04-21', '1405-02-01', '1447-11-04', '2026-04-21', 1, 4, 2, 11, 'tuesday  ', 3, 0, 'NONE') ,('2026-04-22', '1405-02-02', '1447-11-05', '2026-04-22', 2, 5, 2, 11, 'wednesday', 4, 0, 'NONE') ,('2026-04-23', '1405-02-03', '1447-11-06', '2026-04-23', 3, 6, 2, 11, 'thursday ', 5, 0, 'NONE') ,('2026-04-24', '1405-02-04', '1447-11-07', '2026-04-24', 4, 7, 2, 11, 'friday   ', 6, 0, 'NONE') ,('2026-04-25', '1405-02-05', '1447-11-08', '2026-04-25', 5, 8, 2, 11, 'saturday ', 7, 0, 'NONE') ,('2026-04-26', '1405-02-06', '1447-11-09', '2026-04-26', 6, 9, 2, 11, 'sunday   ', 1, 0, 'NONE') ,('2026-04-27', '1405-02-07', '1447-11-10', '2026-04-27', 7, 10, 2, 11, 'monday   ', 2, 0, 'NONE') ,('2026-04-28', '1405-02-08', '1447-11-11', '2026-04-28', 8, 11, 2, 11, 'tuesday  ', 3, 0, 'NONE') ,('2026-04-29', '1405-02-09', '1447-11-12', '2026-04-29', 9, 12, 2, 11, 'wednesday', 4, 0, 'NONE') ,('2026-04-30', '1405-02-10', '1447-11-13', '2026-04-30', 10, 13, 2, 11, 'thursday ', 5, 0, 'NONE') ,('2026-05-01', '1405-02-11', '1447-11-14', '2026-05-01', 11, 14, 2, 11, 'friday   ', 6, 0, 'NONE') ,('2026-05-02', '1405-02-12', '1447-11-15', '2026-05-02', 12, 15, 2, 11, 'saturday ', 7, 0, 'NONE') ,('2026-05-03', '1405-02-13', '1447-11-16', '2026-05-03', 13, 16, 2, 11, 'sunday   ', 1, 0, 'NONE') ,('2026-05-04', '1405-02-14', '1447-11-17', '2026-05-04', 14, 17, 2, 11, 'monday   ', 2, 0, 'NONE') ,('2026-05-05', '1405-02-15', '1447-11-18', '2026-05-05', 15, 18, 2, 11, 'tuesday  ', 3, 0, 'NONE') ,('2026-05-06', '1405-02-16', '1447-11-19', '2026-05-06', 16, 19, 2, 11, 'wednesday', 4, 0, 'NONE') ,('2026-05-07', '1405-02-17', '1447-11-20', '2026-05-07', 17, 20, 2, 11, 'thursday ', 5, 0, 'NONE') ,('2026-05-08', '1405-02-18', '1447-11-21', '2026-05-08', 18, 21, 2, 11, 'friday   ', 6, 0, 'NONE') ,('2026-05-09', '1405-02-19', '1447-11-22', '2026-05-09', 19, 22, 2, 11, 'saturday ', 7, 0, 'NONE') ,('2026-05-10', '1405-02-20', '1447-11-23', '2026-05-10', 20, 23, 2, 11, 'sunday   ', 1, 0, 'NONE') ,('2026-05-11', '1405-02-21', '1447-11-24', '2026-05-11', 21, 24, 2, 11, 'monday   ', 2, 0, 'NONE') ,('2026-05-12', '1405-02-22', '1447-11-25', '2026-05-12', 22, 25, 2, 11, 'tuesday  ', 3, 0, 'NONE') ,('2026-05-13', '1405-02-23', '1447-11-26', '2026-05-13', 23, 26, 2, 11, 'wednesday', 4, 0, 'NONE') ,('2026-05-14', '1405-02-24', '1447-11-27', '2026-05-14', 24, 27, 2, 11, 'thursday ', 5, 0, 'NONE') ,('2026-05-15', '1405-02-25', '1447-11-28', '2026-05-15', 25, 28, 2, 11, 'friday   ', 6, 0, 'NONE') ,('2026-05-16', '1405-02-26', '1447-11-29', '2026-05-16', 26, 29, 2, 11, 'saturday ', 7, 0, 'NONE') ,('2026-05-17', '1405-02-27', '1447-11-30', '2026-05-17', 27, 30, 2, 11, 'sunday   ', 1, 0, 'NONE') ,('2026-05-18', '1405-02-28', '1447-12-01', '2026-05-18', 28, 1, 2, 12, 'monday   ', 2, 0, 'NONE') ,('2026-05-19', '1405-02-29', '1447-12-02', '2026-05-19', 29, 2, 2, 12, 'tuesday  ', 3, 0, 'NONE') ,('2026-05-20', '1405-02-30', '1447-12-03', '2026-05-20', 30, 3, 2, 12, 'wednesday', 4, 0, 'NONE') ,('2026-05-21', '1405-02-31', '1447-12-04', '2026-05-21', 31, 4, 2, 12, 'thursday ', 5, 0, 'NONE') ,('2026-05-22', '1405-03-01', '1447-12-05', '2026-05-22', 1, 5, 3, 12, 'friday   ', 6, 0, 'NONE') ,('2026-05-23', '1405-03-02', '1447-12-06', '2026-05-23', 2, 6, 3, 12, 'saturday ', 7, 0, 'NONE') ,('2026-05-24', '1405-03-03', '1447-12-07', '2026-05-24', 3, 7, 3, 12, 'sunday   ', 1, 0, 'NONE') ,('2026-05-25', '1405-03-04', '1447-12-08', '2026-05-25', 4, 8, 3, 12, 'monday   ', 2, 0, 'NONE') ,('2026-05-26', '1405-03-05', '1447-12-09', '2026-05-26', 5, 9, 3, 12, 'tuesday  ', 3, 0, 'NONE') ,('2026-05-27', '1405-03-06', '1447-12-10', '2026-05-27', 6, 10, 3, 12, 'wednesday', 4, 0, 'NONE') ,('2026-05-28', '1405-03-07', '1447-12-11', '2026-05-28', 7, 11, 3, 12, 'thursday ', 5, 0, 'NONE') ,('2026-05-29', '1405-03-08', '1447-12-12', '2026-05-29', 8, 12, 3, 12, 'friday   ', 6, 0, 'NONE') ,('2026-05-30', '1405-03-09', '1447-12-13', '2026-05-30', 9, 13, 3, 12, 'saturday ', 7, 0, 'NONE') ,('2026-05-31', '1405-03-10', '1447-12-14', '2026-05-31', 10, 14, 3, 12, 'sunday   ', 1, 0, 'NONE') ,('2026-06-01', '1405-03-11', '1447-12-15', '2026-06-01', 11, 15, 3, 12, 'monday   ', 2, 0, 'NONE') ,('2026-06-02', '1405-03-12', '1447-12-16', '2026-06-02', 12, 16, 3, 12, 'tuesday  ', 3, 0, 'NONE') ,('2026-06-03', '1405-03-13', '1447-12-17', '2026-06-03', 13, 17, 3, 12, 'wednesday', 4, 0, 'NONE') ,('2026-06-04', '1405-03-14', '1447-12-18', '2026-06-04', 14, 18, 3, 12, 'thursday ', 5, 0, 'NONE') ,('2026-06-05', '1405-03-15', '1447-12-19', '2026-06-05', 15, 19, 3, 12, 'friday   ', 6, 0, 'NONE') ,('2026-06-06', '1405-03-16', '1447-12-20', '2026-06-06', 16, 20, 3, 12, 'saturday ', 7, 0, 'NONE') ,('2026-06-07', '1405-03-17', '1447-12-21', '2026-06-07', 17, 21, 3, 12, 'sunday   ', 1, 0, 'NONE') ,('2026-06-08', '1405-03-18', '1447-12-22', '2026-06-08', 18, 22, 3, 12, 'monday   ', 2, 0, 'NONE') ,('2026-06-09', '1405-03-19', '1447-12-23', '2026-06-09', 19, 23, 3, 12, 'tuesday  ', 3, 0, 'NONE') ,('2026-06-10', '1405-03-20', '1447-12-24', '2026-06-10', 20, 24, 3, 12, 'wednesday', 4, 0, 'NONE') ,('2026-06-11', '1405-03-21', '1447-12-25', '2026-06-11', 21, 25, 3, 12, 'thursday ', 5, 0, 'NONE') ,('2026-06-12', '1405-03-22', '1447-12-26', '2026-06-12', 22, 26, 3, 12, 'friday   ', 6, 0, 'NONE') ,('2026-06-13', '1405-03-23', '1447-12-27', '2026-06-13', 23, 27, 3, 12, 'saturday ', 7, 0, 'NONE') ,('2026-06-14', '1405-03-24', '1447-12-28', '2026-06-14', 24, 28, 3, 12, 'sunday   ', 1, 0, 'NONE') ,('2026-06-15', '1405-03-25', '1447-12-29', '2026-06-15', 25, 29, 3, 12, 'monday   ', 2, 0, 'NONE') ,('2026-06-16', '1405-03-26', '1447-12-30', '2026-06-16', 26, 30, 3, 12, 'tuesday  ', 3, 0, 'NONE') ,('2026-06-17', '1405-03-27', '1448-01-01', '2026-06-17', 27, 1, 3, 1, 'wednesday', 4, 0, 'NONE') ,('2026-06-18', '1405-03-28', '1448-01-02', '2026-06-18', 28, 2, 3, 1, 'thursday ', 5, 0, 'NONE') ,('2026-06-19', '1405-03-29', '1448-01-03', '2026-06-19', 29, 3, 3, 1, 'friday   ', 6, 0, 'NONE') ,('2026-06-20', '1405-03-30', '1448-01-04', '2026-06-20', 30, 4, 3, 1, 'saturday ', 7, 0, 'NONE') ,('2026-06-21', '1405-03-31', '1448-01-05', '2026-06-21', 31, 5, 3, 1, 'sunday   ', 1, 0, 'NONE') ,('2026-06-22', '1405-04-01', '1448-01-06', '2026-06-22', 1, 6, 4, 1, 'monday   ', 2, 0, 'NONE') ,('2026-06-23', '1405-04-02', '1448-01-07', '2026-06-23', 2, 7, 4, 1, 'tuesday  ', 3, 0, 'NONE') ,('2026-06-24', '1405-04-03', '1448-01-08', '2026-06-24', 3, 8, 4, 1, 'wednesday', 4, 0, 'NONE') ,('2026-06-25', '1405-04-04', '1448-01-09', '2026-06-25', 4, 9, 4, 1, 'thursday ', 5, 0, 'NONE') ,('2026-06-26', '1405-04-05', '1448-01-10', '2026-06-26', 5, 10, 4, 1, 'friday   ', 6, 0, 'NONE') ,('2026-06-27', '1405-04-06', '1448-01-11', '2026-06-27', 6, 11, 4, 1, 'saturday ', 7, 0, 'NONE') ,('2026-06-28', '1405-04-07', '1448-01-12', '2026-06-28', 7, 12, 4, 1, 'sunday   ', 1, 0, 'NONE') ,('2026-06-29', '1405-04-08', '1448-01-13', '2026-06-29', 8, 13, 4, 1, 'monday   ', 2, 0, 'NONE') ,('2026-06-30', '1405-04-09', '1448-01-14', '2026-06-30', 9, 14, 4, 1, 'tuesday  ', 3, 0, 'NONE') ,('2026-07-01', '1405-04-10', '1448-01-15', '2026-07-01', 10, 15, 4, 1, 'wednesday', 4, 0, 'NONE') ,('2026-07-02', '1405-04-11', '1448-01-16', '2026-07-02', 11, 16, 4, 1, 'thursday ', 5, 0, 'NONE') ,('2026-07-03', '1405-04-12', '1448-01-17', '2026-07-03', 12, 17, 4, 1, 'friday   ', 6, 0, 'NONE') ,('2026-07-04', '1405-04-13', '1448-01-18', '2026-07-04', 13, 18, 4, 1, 'saturday ', 7, 0, 'NONE') ,('2026-07-05', '1405-04-14', '1448-01-19', '2026-07-05', 14, 19, 4, 1, 'sunday   ', 1, 0, 'NONE') ,('2026-07-06', '1405-04-15', '1448-01-20', '2026-07-06', 15, 20, 4, 1, 'monday   ', 2, 0, 'NONE') ,('2026-07-07', '1405-04-16', '1448-01-21', '2026-07-07', 16, 21, 4, 1, 'tuesday  ', 3, 0, 'NONE') ,('2026-07-08', '1405-04-17', '1448-01-22', '2026-07-08', 17, 22, 4, 1, 'wednesday', 4, 0, 'NONE') ,('2026-07-09', '1405-04-18', '1448-01-23', '2026-07-09', 18, 23, 4, 1, 'thursday ', 5, 0, 'NONE') ,('2026-07-10', '1405-04-19', '1448-01-24', '2026-07-10', 19, 24, 4, 1, 'friday   ', 6, 0, 'NONE') ,('2026-07-11', '1405-04-20', '1448-01-25', '2026-07-11', 20, 25, 4, 1, 'saturday ', 7, 0, 'NONE') ,('2026-07-12', '1405-04-21', '1448-01-26', '2026-07-12', 21, 26, 4, 1, 'sunday   ', 1, 0, 'NONE') ,('2026-07-13', '1405-04-22', '1448-01-27', '2026-07-13', 22, 27, 4, 1, 'monday   ', 2, 0, 'NONE') ,('2026-07-14', '1405-04-23', '1448-01-28', '2026-07-14', 23, 28, 4, 1, 'tuesday  ', 3, 0, 'NONE') ,('2026-07-15', '1405-04-24', '1448-01-29', '2026-07-15', 24, 29, 4, 1, 'wednesday', 4, 0, 'NONE') ,('2026-07-16', '1405-04-25', '1448-01-30', '2026-07-16', 25, 30, 4, 1, 'thursday ', 5, 0, 'NONE') ,('2026-07-17', '1405-04-26', '1448-02-01', '2026-07-17', 26, 1, 4, 2, 'friday   ', 6, 0, 'NONE') ,('2026-07-18', '1405-04-27', '1448-02-02', '2026-07-18', 27, 2, 4, 2, 'saturday ', 7, 0, 'NONE') ,('2026-07-19', '1405-04-28', '1448-02-03', '2026-07-19', 28, 3, 4, 2, 'sunday   ', 1, 0, 'NONE') ,('2026-07-20', '1405-04-29', '1448-02-04', '2026-07-20', 29, 4, 4, 2, 'monday   ', 2, 0, 'NONE') ,('2026-07-21', '1405-04-30', '1448-02-05', '2026-07-21', 30, 5, 4, 2, 'tuesday  ', 3, 0, 'NONE') ,('2026-07-22', '1405-04-31', '1448-02-06', '2026-07-22', 31, 6, 4, 2, 'wednesday', 4, 0, 'NONE') ,('2026-07-23', '1405-05-01', '1448-02-07', '2026-07-23', 1, 7, 5, 2, 'thursday ', 5, 0, 'NONE') ,('2026-07-24', '1405-05-02', '1448-02-08', '2026-07-24', 2, 8, 5, 2, 'friday   ', 6, 0, 'NONE') ,('2026-07-25', '1405-05-03', '1448-02-09', '2026-07-25', 3, 9, 5, 2, 'saturday ', 7, 0, 'NONE') ,('2026-07-26', '1405-05-04', '1448-02-10', '2026-07-26', 4, 10, 5, 2, 'sunday   ', 1, 0, 'NONE') ,('2026-07-27', '1405-05-05', '1448-02-11', '2026-07-27', 5, 11, 5, 2, 'monday   ', 2, 0, 'NONE') ,('2026-07-28', '1405-05-06', '1448-02-12', '2026-07-28', 6, 12, 5, 2, 'tuesday  ', 3, 0, 'NONE') ,('2026-07-29', '1405-05-07', '1448-02-13', '2026-07-29', 7, 13, 5, 2, 'wednesday', 4, 0, 'NONE') ,('2026-07-30', '1405-05-08', '1448-02-14', '2026-07-30', 8, 14, 5, 2, 'thursday ', 5, 0, 'NONE') ,('2026-07-31', '1405-05-09', '1448-02-15', '2026-07-31', 9, 15, 5, 2, 'friday   ', 6, 0, 'NONE') ,('2026-08-01', '1405-05-10', '1448-02-16', '2026-08-01', 10, 16, 5, 2, 'saturday ', 7, 0, 'NONE') ,('2026-08-02', '1405-05-11', '1448-02-17', '2026-08-02', 11, 17, 5, 2, 'sunday   ', 1, 0, 'NONE') ,('2026-08-03', '1405-05-12', '1448-02-18', '2026-08-03', 12, 18, 5, 2, 'monday   ', 2, 0, 'NONE') ,('2026-08-04', '1405-05-13', '1448-02-19', '2026-08-04', 13, 19, 5, 2, 'tuesday  ', 3, 0, 'NONE') ,('2026-08-05', '1405-05-14', '1448-02-20', '2026-08-05', 14, 20, 5, 2, 'wednesday', 4, 0, 'NONE') ,('2026-08-06', '1405-05-15', '1448-02-21', '2026-08-06', 15, 21, 5, 2, 'thursday ', 5, 0, 'NONE') ,('2026-08-07', '1405-05-16', '1448-02-22', '2026-08-07', 16, 22, 5, 2, 'friday   ', 6, 0, 'NONE') ,('2026-08-08', '1405-05-17', '1448-02-23', '2026-08-08', 17, 23, 5, 2, 'saturday ', 7, 0, 'NONE') ,('2026-08-09', '1405-05-18', '1448-02-24', '2026-08-09', 18, 24, 5, 2, 'sunday   ', 1, 0, 'NONE') ,('2026-08-10', '1405-05-19', '1448-02-25', '2026-08-10', 19, 25, 5, 2, 'monday   ', 2, 0, 'NONE') ,('2026-08-11', '1405-05-20', '1448-02-26', '2026-08-11', 20, 26, 5, 2, 'tuesday  ', 3, 0, 'NONE') ,('2026-08-12', '1405-05-21', '1448-02-27', '2026-08-12', 21, 27, 5, 2, 'wednesday', 4, 0, 'NONE') ,('2026-08-13', '1405-05-22', '1448-02-28', '2026-08-13', 22, 28, 5, 2, 'thursday ', 5, 0, 'NONE') ,('2026-08-14', '1405-05-23', '1448-02-29', '2026-08-14', 23, 29, 5, 2, 'friday   ', 6, 0, 'NONE') ,('2026-08-15', '1405-05-24', '1448-03-01', '2026-08-15', 24, 1, 5, 3, 'saturday ', 7, 0, 'NONE') ,('2026-08-16', '1405-05-25', '1448-03-02', '2026-08-16', 25, 2, 5, 3, 'sunday   ', 1, 0, 'NONE') ,('2026-08-17', '1405-05-26', '1448-03-03', '2026-08-17', 26, 3, 5, 3, 'monday   ', 2, 0, 'NONE') ,('2026-08-18', '1405-05-27', '1448-03-04', '2026-08-18', 27, 4, 5, 3, 'tuesday  ', 3, 0, 'NONE') ,('2026-08-19', '1405-05-28', '1448-03-05', '2026-08-19', 28, 5, 5, 3, 'wednesday', 4, 0, 'NONE') ,('2026-08-20', '1405-05-29', '1448-03-06', '2026-08-20', 29, 6, 5, 3, 'thursday ', 5, 0, 'NONE') ,('2026-08-21', '1405-05-30', '1448-03-07', '2026-08-21', 30, 7, 5, 3, 'friday   ', 6, 0, 'NONE') ,('2026-08-22', '1405-05-31', '1448-03-08', '2026-08-22', 31, 8, 5, 3, 'saturday ', 7, 0, 'NONE') ,('2026-08-23', '1405-06-01', '1448-03-09', '2026-08-23', 1, 9, 6, 3, 'sunday   ', 1, 0, 'NONE') ,('2026-08-24', '1405-06-02', '1448-03-10', '2026-08-24', 2, 10, 6, 3, 'monday   ', 2, 0, 'NONE') ,('2026-08-25', '1405-06-03', '1448-03-11', '2026-08-25', 3, 11, 6, 3, 'tuesday  ', 3, 0, 'NONE') ,('2026-08-26', '1405-06-04', '1448-03-12', '2026-08-26', 4, 12, 6, 3, 'wednesday', 4, 0, 'NONE') ,('2026-08-27', '1405-06-05', '1448-03-13', '2026-08-27', 5, 13, 6, 3, 'thursday ', 5, 0, 'NONE') ,('2026-08-28', '1405-06-06', '1448-03-14', '2026-08-28', 6, 14, 6, 3, 'friday   ', 6, 0, 'NONE') ,('2026-08-29', '1405-06-07', '1448-03-15', '2026-08-29', 7, 15, 6, 3, 'saturday ', 7, 0, 'NONE') ,('2026-08-30', '1405-06-08', '1448-03-16', '2026-08-30', 8, 16, 6, 3, 'sunday   ', 1, 0, 'NONE') ,('2026-08-31', '1405-06-09', '1448-03-17', '2026-08-31', 9, 17, 6, 3, 'monday   ', 2, 0, 'NONE') ,('2026-09-01', '1405-06-10', '1448-03-18', '2026-09-01', 10, 18, 6, 3, 'tuesday  ', 3, 0, 'NONE') ,('2026-09-02', '1405-06-11', '1448-03-19', '2026-09-02', 11, 19, 6, 3, 'wednesday', 4, 0, 'NONE') ,('2026-09-03', '1405-06-12', '1448-03-20', '2026-09-03', 12, 20, 6, 3, 'thursday ', 5, 0, 'NONE') ,('2026-09-04', '1405-06-13', '1448-03-21', '2026-09-04', 13, 21, 6, 3, 'friday   ', 6, 0, 'NONE') ,('2026-09-05', '1405-06-14', '1448-03-22', '2026-09-05', 14, 22, 6, 3, 'saturday ', 7, 0, 'NONE') ,('2026-09-06', '1405-06-15', '1448-03-23', '2026-09-06', 15, 23, 6, 3, 'sunday   ', 1, 0, 'NONE') ,('2026-09-07', '1405-06-16', '1448-03-24', '2026-09-07', 16, 24, 6, 3, 'monday   ', 2, 0, 'NONE') ,('2026-09-08', '1405-06-17', '1448-03-25', '2026-09-08', 17, 25, 6, 3, 'tuesday  ', 3, 0, 'NONE') ,('2026-09-09', '1405-06-18', '1448-03-26', '2026-09-09', 18, 26, 6, 3, 'wednesday', 4, 0, 'NONE') ,('2026-09-10', '1405-06-19', '1448-03-27', '2026-09-10', 19, 27, 6, 3, 'thursday ', 5, 0, 'NONE') ,('2026-09-11', '1405-06-20', '1448-03-28', '2026-09-11', 20, 28, 6, 3, 'friday   ', 6, 0, 'NONE') ,('2026-09-12', '1405-06-21', '1448-03-29', '2026-09-12', 21, 29, 6, 3, 'saturday ', 7, 0, 'NONE') ,('2026-09-13', '1405-06-22', '1448-03-30', '2026-09-13', 22, 30, 6, 3, 'sunday   ', 1, 0, 'NONE') ,('2026-09-14', '1405-06-23', '1448-04-01', '2026-09-14', 23, 1, 6, 4, 'monday   ', 2, 0, 'NONE') ,('2026-09-15', '1405-06-24', '1448-04-02', '2026-09-15', 24, 2, 6, 4, 'tuesday  ', 3, 0, 'NONE') ,('2026-09-16', '1405-06-25', '1448-04-03', '2026-09-16', 25, 3, 6, 4, 'wednesday', 4, 0, 'NONE') ,('2026-09-17', '1405-06-26', '1448-04-04', '2026-09-17', 26, 4, 6, 4, 'thursday ', 5, 0, 'NONE') ,('2026-09-18', '1405-06-27', '1448-04-05', '2026-09-18', 27, 5, 6, 4, 'friday   ', 6, 0, 'NONE') ,('2026-09-19', '1405-06-28', '1448-04-06', '2026-09-19', 28, 6, 6, 4, 'saturday ', 7, 0, 'NONE') ,('2026-09-20', '1405-06-29', '1448-04-07', '2026-09-20', 29, 7, 6, 4, 'sunday   ', 1, 0, 'NONE') ,('2026-09-21', '1405-06-30', '1448-04-08', '2026-09-21', 30, 8, 6, 4, 'monday   ', 2, 0, 'NONE') ,('2026-09-22', '1405-06-31', '1448-04-09', '2026-09-22', 31, 9, 6, 4, 'tuesday  ', 3, 0, 'NONE') ,('2026-09-23', '1405-07-01', '1448-04-10', '2026-09-23', 1, 10, 7, 4, 'wednesday', 4, 0, 'NONE') ,('2026-09-24', '1405-07-02', '1448-04-11', '2026-09-24', 2, 11, 7, 4, 'thursday ', 5, 0, 'NONE') ,('2026-09-25', '1405-07-03', '1448-04-12', '2026-09-25', 3, 12, 7, 4, 'friday   ', 6, 0, 'NONE') ,('2026-09-26', '1405-07-04', '1448-04-13', '2026-09-26', 4, 13, 7, 4, 'saturday ', 7, 0, 'NONE') ,('2026-09-27', '1405-07-05', '1448-04-14', '2026-09-27', 5, 14, 7, 4, 'sunday   ', 1, 0, 'NONE') ,('2026-09-28', '1405-07-06', '1448-04-15', '2026-09-28', 6, 15, 7, 4, 'monday   ', 2, 0, 'NONE') ,('2026-09-29', '1405-07-07', '1448-04-16', '2026-09-29', 7, 16, 7, 4, 'tuesday  ', 3, 0, 'NONE') ,('2026-09-30', '1405-07-08', '1448-04-17', '2026-09-30', 8, 17, 7, 4, 'wednesday', 4, 0, 'NONE') ,('2026-10-01', '1405-07-09', '1448-04-18', '2026-10-01', 9, 18, 7, 4, 'thursday ', 5, 0, 'NONE') ,('2026-10-02', '1405-07-10', '1448-04-19', '2026-10-02', 10, 19, 7, 4, 'friday   ', 6, 0, 'NONE') ,('2026-10-03', '1405-07-11', '1448-04-20', '2026-10-03', 11, 20, 7, 4, 'saturday ', 7, 0, 'NONE') ,('2026-10-04', '1405-07-12', '1448-04-21', '2026-10-04', 12, 21, 7, 4, 'sunday   ', 1, 0, 'NONE') ,('2026-10-05', '1405-07-13', '1448-04-22', '2026-10-05', 13, 22, 7, 4, 'monday   ', 2, 0, 'NONE') ,('2026-10-06', '1405-07-14', '1448-04-23', '2026-10-06', 14, 23, 7, 4, 'tuesday  ', 3, 0, 'NONE') ,('2026-10-07', '1405-07-15', '1448-04-24', '2026-10-07', 15, 24, 7, 4, 'wednesday', 4, 0, 'NONE') ,('2026-10-08', '1405-07-16', '1448-04-25', '2026-10-08', 16, 25, 7, 4, 'thursday ', 5, 0, 'NONE') ,('2026-10-09', '1405-07-17', '1448-04-26', '2026-10-09', 17, 26, 7, 4, 'friday   ', 6, 0, 'NONE') ,('2026-10-10', '1405-07-18', '1448-04-27', '2026-10-10', 18, 27, 7, 4, 'saturday ', 7, 0, 'NONE') ,('2026-10-11', '1405-07-19', '1448-04-28', '2026-10-11', 19, 28, 7, 4, 'sunday   ', 1, 0, 'NONE') ,('2026-10-12', '1405-07-20', '1448-04-29', '2026-10-12', 20, 29, 7, 4, 'monday   ', 2, 0, 'NONE') ,('2026-10-13', '1405-07-21', '1448-05-01', '2026-10-13', 21, 1, 7, 5, 'tuesday  ', 3, 0, 'NONE') ,('2026-10-14', '1405-07-22', '1448-05-02', '2026-10-14', 22, 2, 7, 5, 'wednesday', 4, 0, 'NONE') ,('2026-10-15', '1405-07-23', '1448-05-03', '2026-10-15', 23, 3, 7, 5, 'thursday ', 5, 0, 'NONE') ,('2026-10-16', '1405-07-24', '1448-05-04', '2026-10-16', 24, 4, 7, 5, 'friday   ', 6, 0, 'NONE') ,('2026-10-17', '1405-07-25', '1448-05-05', '2026-10-17', 25, 5, 7, 5, 'saturday ', 7, 0, 'NONE') ,('2026-10-18', '1405-07-26', '1448-05-06', '2026-10-18', 26, 6, 7, 5, 'sunday   ', 1, 0, 'NONE') ,('2026-10-19', '1405-07-27', '1448-05-07', '2026-10-19', 27, 7, 7, 5, 'monday   ', 2, 0, 'NONE') ,('2026-10-20', '1405-07-28', '1448-05-08', '2026-10-20', 28, 8, 7, 5, 'tuesday  ', 3, 0, 'NONE') ,('2026-10-21', '1405-07-29', '1448-05-09', '2026-10-21', 29, 9, 7, 5, 'wednesday', 4, 0, 'NONE') ,('2026-10-22', '1405-07-30', '1448-05-10', '2026-10-22', 30, 10, 7, 5, 'thursday ', 5, 0, 'NONE') ,('2026-10-23', '1405-08-01', '1448-05-11', '2026-10-23', 1, 11, 8, 5, 'friday   ', 6, 0, 'NONE') ,('2026-10-24', '1405-08-02', '1448-05-12', '2026-10-24', 2, 12, 8, 5, 'saturday ', 7, 0, 'NONE') ,('2026-10-25', '1405-08-03', '1448-05-13', '2026-10-25', 3, 13, 8, 5, 'sunday   ', 1, 0, 'NONE') ,('2026-10-26', '1405-08-04', '1448-05-14', '2026-10-26', 4, 14, 8, 5, 'monday   ', 2, 0, 'NONE') ,('2026-10-27', '1405-08-05', '1448-05-15', '2026-10-27', 5, 15, 8, 5, 'tuesday  ', 3, 0, 'NONE') ,('2026-10-28', '1405-08-06', '1448-05-16', '2026-10-28', 6, 16, 8, 5, 'wednesday', 4, 0, 'NONE') ,('2026-10-29', '1405-08-07', '1448-05-17', '2026-10-29', 7, 17, 8, 5, 'thursday ', 5, 0, 'NONE') ,('2026-10-30', '1405-08-08', '1448-05-18', '2026-10-30', 8, 18, 8, 5, 'friday   ', 6, 0, 'NONE');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3281', () => {
    const query = `INSERT INTO t VALUES ('2017-01-01', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3282', () => {
    const query = `INSERT INTO t_01906 SELECT number,
toDateTime('2020-01-01 00:00:00'),
1
FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3283', () => {
    const query = `insert into tab values ('a'), ('bb'), ('a'), ('cc');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3284', () => {
    const query = `insert into test select intDiv(number,100) from numbers(10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3285', () => {
    const query = `INSERT INTO h3_geo VALUES (-173.6412167681162, -14.130272474941535, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3286', () => {
    const query = `INSERT INTO h3_geo VALUES (59.48137613600854, 58.020407687755686, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3287', () => {
    const query = `INSERT INTO h3_geo VALUES (172.68095885060296, -83.6576608516349, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3288', () => {
    const query = `INSERT INTO h3_geo VALUES (-94.46556851304558, -69.1999982492279, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3289', () => {
    const query = `INSERT INTO h3_geo VALUES (-8.188263637093279, -55.856179102736284, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3290', () => {
    const query = `INSERT INTO h3_geo VALUES (77.25594891852249, 47.39278564360122, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3291', () => {
    const query = `INSERT INTO h3_geo VALUES (135.11348004704536, 36.60778126579667, 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3292', () => {
    const query = `INSERT INTO h3_geo VALUES (39.28534828967223, 49.07710003066973, 7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3293', () => {
    const query = `INSERT INTO h3_geo VALUES (124.71163478198051, -27.481172161567258, 8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3294', () => {
    const query = `INSERT INTO h3_geo VALUES (-147.4887686066785, 76.73237945824442, 9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3295', () => {
    const query = `INSERT INTO h3_geo VALUES (86.63291906118863, -25.52526285188784, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3296', () => {
    const query = `INSERT INTO h3_geo VALUES (23.27751790712118, 13.126101362212724, 11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3297', () => {
    const query = `INSERT INTO h3_geo VALUES (-70.40163237204142, -63.12562536833242, 12);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3298', () => {
    const query = `INSERT INTO h3_geo VALUES (15.642428355535966, 40.285813505163574, 13);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3299', () => {
    const query = `INSERT INTO h3_geo VALUES (-76.53411447979884, 54.5560449693637, 14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3300', () => {
    const query = `INSERT INTO h3_geo VALUES (8.19906334981474, 67.69370966550179, 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3301', () => {
    const query = `INSERT INTO dictionary_nullable_source_table VALUES (0, 0), (1, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3302', () => {
    const query = `INSERT INTO dictionary_nullable_default_source_table VALUES (2, 2), (3, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3303', () => {
    const query = `INSERT INTO polygon_dictionary_nullable_source_table VALUES ([[[(0, 0), (0, 1), (1, 1), (1, 0)]]], 0), ([[[(0, 0), (0, 1.5), (1.5, 1.5), (1.5, 0)]]], NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3304', () => {
    const query = `INSERT INTO polygon_dictionary_nullable_default_source_table VALUES ((2.0, 2.0), 2), ((4, 4), NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3305', () => {
    const query = `INSERT INTO range_dictionary_nullable_default_source_table VALUES (2, 2), (3, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3306', () => {
    const query = `INSERT INTO 01902_db.t   SELECT * FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3307', () => {
    const query = `INSERT INTO 01902_db1.t1 SELECT * FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3308', () => {
    const query = `INSERT INTO 01902_db2.t2 SELECT * FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3309', () => {
    const query = `INSERT INTO 01902_db3.t3 SELECT * FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3310', () => {
    const query = `INSERT INTO 01902_db.t4   SELECT * FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3311', () => {
    const query = `INSERT INTO 01902_db_params.t SELECT * FROM numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3312', () => {
    const query = `INSERT INTO dictionary_array_source_table VALUES (0, [0, 1, 2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3313', () => {
    const query = `INSERT INTO ip_trie_dictionary_array_source_table VALUES ('127.0.0.0', [0, 1, 2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3314', () => {
    const query = `INSERT INTO polygon_dictionary_array_source_table VALUES ([[[(0, 0), (0, 1), (1, 1), (1, 0)]]], [0, 1, 2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3315', () => {
    const query = `INSERT INTO range_dictionary_array_source_table VALUES(1, toDate('2019-05-05'), toDate('2019-05-20'), [0, 1, 2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3316', () => {
    const query = `INSERT INTO test_alter_attach_01901S VALUES (1, '2020-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3317', () => {
    const query = `insert into d values (1), (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3318', () => {
    const query = `INSERT INTO test_table_unsigned_values SELECT number % 3, number, number, number, number, number % 3 FROM system.numbers LIMIT 120;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3319', () => {
    const query = `INSERT INTO test_table_signed_values SELECT number % 3, number, number, number, number, number % 3 FROM system.numbers LIMIT 120;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3320', () => {
    const query = `INSERT INTO test_table_float_values SELECT number % 3, number, number, number % 3 FROM system.numbers LIMIT 120;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3321', () => {
    const query = `INSERT INTO test_table_nullable_unsigned_values SELECT number % 3, number, number, number, number, number % 3 FROM system.numbers LIMIT 120;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3322', () => {
    const query = `INSERT INTO test_table_nullable_signed_values SELECT number % 3, number, number, number, number, number % 3 FROM system.numbers LIMIT 120;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3323', () => {
    const query = `INSERT INTO test_table_nullable_float_values SELECT number % 3, number, number, number % 3 FROM system.numbers LIMIT 120;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3324', () => {
    const query = `INSERT INTO test_table_null_specifics VALUES (0, 1, 1, NULL, 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3325', () => {
    const query = `INSERT INTO test_table_null_specifics VALUES (0, 2, NULL, NULL, 2, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3326', () => {
    const query = `INSERT INTO test_table_null_specifics VALUES (0, 3, 3, NULL, 3, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3327', () => {
    const query = `INSERT INTO test_table_unsigned_values SELECT number % 3, number, number, number, number, if(number % 2 == 0, 1, 0) FROM system.numbers LIMIT 120;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3328', () => {
    const query = `INSERT INTO test_table_signed_values SELECT number % 3, number, number, number, number, if(number % 2 == 0, 1, 0) FROM system.numbers LIMIT 120;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3329', () => {
    const query = `INSERT INTO test_table_float_values SELECT number % 3, number, number, if(number % 2 == 0, 1, 0) FROM system.numbers LIMIT 120;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3330', () => {
    const query = `INSERT INTO test_table_nullable_unsigned_values SELECT number % 3, number, number, number, number, if(number % 2 == 0, 1, 0)  FROM system.numbers LIMIT 120;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3331', () => {
    const query = `INSERT INTO test_table_nullable_signed_values SELECT number % 3, number, number, number, number, if(number % 2 == 0, 1, 0) FROM system.numbers LIMIT 120;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3332', () => {
    const query = `INSERT INTO test_table_nullable_float_values SELECT number % 3, number, number, if(number % 2 == 0, 1, 0) FROM system.numbers LIMIT 120;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3333', () => {
    const query = `INSERT INTO test_table_null_specifics VALUES (0, 1, 1, NULL, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3334', () => {
    const query = `INSERT INTO test_table_null_specifics VALUES (0, 2, NULL, NULL, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3335', () => {
    const query = `INSERT INTO test_table_null_specifics VALUES (0, 3, 3, NULL, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3336', () => {
    const query = `INSERT INTO test_table_null_specifics VALUES (0, 2, NULL, NULL, 1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3337', () => {
    const query = `INSERT INTO test_table_null_specifics VALUES (0, 3, 3, NULL, 1, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3338', () => {
    const query = `INSERT INTO test_table_unsigned_values SELECT number % 3, number, number, number, number FROM system.numbers LIMIT 120;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3339', () => {
    const query = `INSERT INTO test_table_signed_values SELECT number % 3, number, number, number, number FROM system.numbers LIMIT 120;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3340', () => {
    const query = `INSERT INTO test_table_float_values SELECT number % 3, number, number FROM system.numbers LIMIT 120;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3341', () => {
    const query = `INSERT INTO test_table_nullable_unsigned_values SELECT number % 3, number, number, number, number FROM system.numbers LIMIT 120;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3342', () => {
    const query = `INSERT INTO test_table_nullable_signed_values SELECT number % 3, number, number, number, number FROM system.numbers LIMIT 120;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3343', () => {
    const query = `INSERT INTO test_table_nullable_float_values SELECT number % 3, number, number FROM system.numbers LIMIT 120;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3344', () => {
    const query = `INSERT INTO test_table_null_specifics VALUES (0, 1, 1, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3345', () => {
    const query = `INSERT INTO test_table_null_specifics VALUES (0, 2, NULL, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3346', () => {
    const query = `INSERT INTO test_table_null_specifics VALUES (0, 3, 3, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3347', () => {
    const query = `insert into tab values (-1, -1, -1, -1, -1, -1, -1, -1, '61f0c404-5cb3-11e7-907b-a6006ad3dba0', 'a', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', [1, 2, 3], (-1, -2), '2020-01-01', '2020-01-01 01:01:01', '2020-01-01 01:01:01', '123.456', 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3348', () => {
    const query = `INSERT INTO tab VALUES (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, '61f0c404-5cb3-11e7-907b-a6006ad3dba0', 'a', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', [1, 2, 3], (-1, -2), '2020-01-01', '2020-01-01 01:01:01', '2020-01-01 01:01:01', '123.456', '78.9101', 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3349', () => {
    const query = `INSERT INTO tab VALUES (123, 12345, 1234567890, 1234567890000000000, 123456789000000000000000000000000000000, 123456789000000000000000000000000000000000000000000000000000000000000000000000, 123, 12345, 1234567890, 1234567890000000000, 123456789000000000000000000000000000000, 123456789000000000000000000000000000000000000000000000000000000000000000000000, '61f0c404-5cb3-11e7-907b-a6006ad3dba0', 'a', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', [1, 2, 3], (-1, -2), '2020-01-01', '2020-01-01 01:01:01', '2020-01-01 01:01:01', '123.456', '78.9101', 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3350', () => {
    const query = `insert into tab values ('61f0c404-5cb3-11e7-907b-a6006ad3dba0', 1), ('61f0c404-5cb3-11e7-907b-a6006ad3dba0', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3351', () => {
    const query = `insert into test values('1'), ('1.1'), ('1.2'), ('1.12');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3352', () => {
    const query = `insert into test1 select number, number + 100 from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3353', () => {
    const query = `insert into t1(a, b) values (1, 'one'), (2, 'two');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3354', () => {
    const query = `insert into t2(a, b) values (2, 'two'), (3, 'three');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3355', () => {
    const query = `INSERT INTO 01889_sql_json(id, json) VALUES(0, '{"name":"Ivan","surname":"Ivanov","friends":["Vasily","Kostya","Artyom"]}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3356', () => {
    const query = `INSERT INTO 01889_sql_json(id, json) VALUES(1, '{"name":"Katya","surname":"Baltica","friends":["Tihon","Ernest","Innokentiy"]}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3357', () => {
    const query = `INSERT INTO 01889_sql_json(id, json) VALUES(2, '{"name":"Vitali","surname":"Brown","friends":["Katya","Anatoliy","Ivan","Oleg"]}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3358', () => {
    const query = `insert into tab values ('2020-02-02 01:01:01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3359', () => {
    const query = `insert into tab values (1, 1), (2, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3360', () => {
    const query = `INSERT INTO grouping_sets SELECT
number % 2 + 1 AS fact_1_id,
number % 5 + 1 AS fact_2_id,
number % 10 + 1 AS fact_3_id,
number % 10 + 1 AS fact_4_id,
number % 100 AS sales_value
FROM system.numbers limit 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3361', () => {
    const query = `INSERT INTO t_subcolumns_local VALUES ([1, 2, 3], 'aaa', ('bbb', 'ccc'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3362', () => {
    const query = `insert into nums_in_mem select * from system.numbers limit 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3363', () => {
    const query = `INSERT INTO limited_merge_table SELECT number FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3364', () => {
    const query = `INSERT INTO test_buffer_table SELECT number FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3365', () => {
    const query = `insert into test_tbl values('1', '2020-11-11'), ('1', '2021-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3366', () => {
    const query = `INSERT INTO test_input SELECT toInt32(number % 1000) AS id FROM numbers(100,3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3367', () => {
    const query = `INSERT INTO t_func_to_subcolumns VALUES (1, [1, 2, 3], 'abc', map('foo', 1, 'bar', 2)) (2, [], NULL, map());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3368', () => {
    const query = `INSERT INTO t_tuple_null VALUES ((10)), ((20));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3369', () => {
    const query = `INSERT INTO table1 SELECT number-205, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3370', () => {
    const query = `INSERT INTO table1 SELECT number-205, number FROM numbers(400, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3371', () => {
    const query = `INSERT INTO table2 SELECT number-205, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3372', () => {
    const query = `INSERT INTO table2 SELECT number-205, number FROM numbers(400, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3373', () => {
    const query = `INSERT INTO table3 SELECT number-205, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3374', () => {
    const query = `INSERT INTO table3 SELECT number-205, number FROM numbers(400, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3375', () => {
    const query = `INSERT INTO table4 SELECT number, number, toString(number) FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3376', () => {
    const query = `insert into db_01870.z_buffer_01870 select * from system.numbers limit 5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3377', () => {
    const query = `insert into replacing values (1,'1970-01-01 08:25:46.300800000','a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3378', () => {
    const query = `insert into replacing values (2,'1970-01-01 08:25:46.300800002','b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3379', () => {
    const query = `insert into replacing values (1,'1970-01-01 08:25:46.300800003','a1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3380', () => {
    const query = `insert into replacing values (1,'1970-01-01 08:25:46.300800002','a2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3381', () => {
    const query = `insert into replacing values (2,'1970-01-01 08:25:46.300800004','b1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3382', () => {
    const query = `insert into replacing values (3,'1970-01-01 08:25:46.300800005','c1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3383', () => {
    const query = `insert into replacing values (2,'1970-01-01 08:25:46.300800005','a1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3384', () => {
    const query = `INSERT INTO mem_test SELECT number,
number
FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3385', () => {
    const query = `INSERT INTO dt64test (\`dt64_column\`) VALUES ('2020-01-13 13:37:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3386', () => {
    const query = `INSERT INTO interval VALUES ('a', 1, 3), ('a', 1, 3), ('a', 2, 4), ('a', 1, 1), ('a', 5, 6), ('a', 5, 7), ('b', 10, 12), ('b', 13, 19), ('b', 14, 16), ('c', -1, 1), ('c', -2, -1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3387', () => {
    const query = `INSERT INTO fl_interval VALUES ('a', 1.1, 3.2), ('a', 1.5, 3.6), ('a', 4.0, 5.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3388', () => {
    const query = `INSERT INTO dt_interval VALUES ('a', '2020-01-01 02:11:22', '2020-01-01 03:12:31'), ('a', '2020-01-01 01:12:30', '2020-01-01 02:50:11');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3389', () => {
    const query = `INSERT INTO date_interval VALUES ('a', '2020-01-01', '2020-01-04'), ('a', '2020-01-03', '2020-01-08 02:50:11');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3390', () => {
    const query = `INSERT INTO test select number, number from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3391', () => {
    const query = `INSERT INTO test select number, number from numbers(5,2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3392', () => {
    const query = `INSERT INTO v1 ( id ) VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3393', () => {
    const query = `INSERT INTO v2 ( value ) VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3394', () => {
    const query = `INSERT INTO map_comb VALUES (1, map(1, 10, 2, 10, 3, 10)),(1, map(3, 10, 4, 10, 5, 10)),(2, map(4, 10, 5, 10, 6, 10)),(2, map(6, 10, 7, 10, 8, 10)),(3, map(1, 10, 2, 10, 3, 10)),(4, map(3, 10, 4, 10, 5, 10)),(5, map(4, 10, 5, 10, 6, 10)),(5, map(6, 10, 7, 10, 8, 10));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3395', () => {
    const query = `INSERT INTO sum_map_decimal VALUES (map(1,'1.0',2,'2.0',3,'3.0')), (map(3,'3.0',4,'4.0',5,'5.0')), (map(4,'4.0',5,'5.0',6,'6.0')), (map(6,'6.0',7,'7.0',8,'8.0'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3396', () => {
    const query = `INSERT INTO test_jit_nonnull VALUES (0), (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3397', () => {
    const query = `INSERT INTO test_jit_nullable VALUES (0), (1), (NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3398', () => {
    const query = `INSERT INTO simple_key_source_table_01862 VALUES (1, 'First');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3399', () => {
    const query = `INSERT INTO complex_key_source_table_01862 VALUES (1, 'FirstKey', 'First');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3400', () => {
    const query = `INSERT INTO range_key_source_table_01862 VALUES (1, 'First', today(), today());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3401', () => {
    const query = `INSERT INTO ip_trie_source_table_01862 VALUES ('127.0.0.0/8', 'First');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3402', () => {
    const query = `INSERT INTO polygons_01862 VALUES ([[[(3, 1), (0, 1), (0, -1), (3, -1)]]], 'Click East');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3403', () => {
    const query = `INSERT INTO polygons_01862 VALUES ([[[(-1, 1), (1, 1), (1, 3), (-1, 3)]]], 'Click North');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3404', () => {
    const query = `INSERT INTO polygons_01862 VALUES ([[[(-3, 1), (-3, -1), (0, -1), (0, 1)]]], 'Click South');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3405', () => {
    const query = `INSERT INTO polygons_01862 VALUES ([[[(-1, -1), (1, -1), (1, -3), (-1, -3)]]], 'Click West');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3406', () => {
    const query = `INSERT INTO points_01862 VALUES ( 0.1,  0.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3407', () => {
    const query = `INSERT INTO points_01862 VALUES (-0.1,  0.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3408', () => {
    const query = `INSERT INTO points_01862 VALUES ( 0.0,  1.1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3409', () => {
    const query = `INSERT INTO points_01862 VALUES ( 0.0, -1.1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3410', () => {
    const query = `INSERT INTO points_01862 VALUES ( 3.0,  3.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3411', () => {
    const query = `insert into dist_01850 values (1); -- { serverError UNKNOWN_TABLE } drop table if exists dist_01850;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3412', () => {
    const query = `INSERT INTO s2_indexes VALUES (3814912406305146967, 125.938503, 25.519362);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3413', () => {
    const query = `INSERT INTO s2_indexes VALUES (10654167528317613967, -64.364998, -13.206226);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3414', () => {
    const query = `INSERT INTO s2_indexes VALUES (1913723177026859705, 8.774109, -3.271374);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3415', () => {
    const query = `INSERT INTO s2_indexes VALUES (13606307743304496111, -89.810962, -57.013984);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3416', () => {
    const query = `INSERT INTO s2_indexes VALUES (8094352344009072761,-170.423649, -10.102188);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3417', () => {
    const query = `INSERT INTO s2_indexes VALUES (2414200527355011659, 54.724353, -19.210608);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3418', () => {
    const query = `INSERT INTO s2_indexes VALUES (4590287096029015693, 51.390374, 29.368252);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3419', () => {
    const query = `INSERT INTO s2_indexes VALUES (10173921221664598133, 5.161979, -46.718242);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3420', () => {
    const query = `INSERT INTO s2_indexes VALUES (525948609053546189, -41.564128, -16.777073);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3421', () => {
    const query = `INSERT INTO s2_indexes VALUES (2446780491369950853, 49.94229, -18.633856);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3422', () => {
    const query = `INSERT INTO s2_indexes VALUES (1723620528513492581, 40.768274, 2.853563);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3423', () => {
    const query = `INSERT INTO s2_indexes VALUES (8295275405228383207, -168.258979, -38.271170);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3424', () => {
    const query = `INSERT INTO s2_indexes VALUES (7280210779810727639, 170.145748, 7.606449);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3425', () => {
    const query = `INSERT INTO s2_indexes VALUES (10670400906708524495, -61.761938, -24.969589);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3426', () => {
    const query = `INSERT INTO s2_indexes VALUES (10868726821406046149, -79.245460, -22.940849);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3427', () => {
    const query = `INSERT INTO s2_indexes VALUES (13202270384266773545, 10.610774, -64.184103);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3428', () => {
    const query = `INSERT INTO s2_indexes VALUES (145638248314527629, -19.826140, -41.192912);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3429', () => {
    const query = `INSERT INTO s2_indexes VALUES (12793606480989360601, 74.006104, -68.321240);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3430', () => {
    const query = `INSERT INTO s2_indexes VALUES (6317132534461540391, -165.907973, 54.205178);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3431', () => {
    const query = `INSERT INTO s2_indexes VALUES (6944470717485986643, 140.428834, 28.399755);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3432', () => {
    const query = `insert into tbl values ('2021-04-01 00:01:02', 1, '123', 4), ('2021-04-01 01:01:02', 1, '12', 4), ('2021-04-01 02:11:02', 2, '345', 4), ('2021-04-01 04:31:02', 2, '2', 4), ('2021-04-02 00:01:02', 1, '1234', 4), ('2021-04-02 00:01:02', 2, '123', 4), ('2021-04-02 00:01:02', 3, '12', 4), ('2021-04-02 00:01:02', 4, '1', 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3433', () => {
    const query = `insert into tbl2 values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3434', () => {
    const query = `INSERT INTO test_null_as_default SELECT 'HELLO' UNION ALL SELECT NULL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3435', () => {
    const query = `INSERT INTO test_null_as_default SELECT NULL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3436', () => {
    const query = `INSERT INTO test_null_as_default(a) SELECT 'HELLO' UNION ALL SELECT NULL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3437', () => {
    const query = `INSERT INTO test_null_as_default SELECT 1, NULL UNION ALL SELECT 2, NULL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3438', () => {
    const query = `INSERT INTO test_null_as_default(a, c) SELECT 1, NULL UNION ALL SELECT 2, NULL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3439', () => {
    const query = `INSERT INTO 01837_db.simple_key_dictionary_source VALUES (1, 'First');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3440', () => {
    const query = `INSERT INTO 01837_db.simple_key_dictionary_source VALUES (2, 'Second');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3441', () => {
    const query = `INSERT INTO 01837_db.simple_key_dictionary_source VALUES (3, 'Third');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3442', () => {
    const query = `insert into tt_null values('x');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3443', () => {
    const query = `insert into tb values ('2017-12-15', 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3444', () => {
    const query = `insert into test_collation values ('A', 'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3445', () => {
    const query = `insert into test_collation values ('B', 'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3446', () => {
    const query = `insert into test_collation values ('C', 'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3447', () => {
    const query = `insert into data_01832 values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3448', () => {
    const query = `INSERT INTO t_json_wide_parts VALUES ('{"k1": 1}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3449', () => {
    const query = `INSERT INTO t_json_wide_parts VALUES ('{"k2": 2}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3450', () => {
    const query = `INSERT INTO t_json_sparse VALUES ('{"k1": 1, "k2": {"k3": 4}}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3451', () => {
    const query = `INSERT INTO t_json_sparse SELECT '{"k1": 2}' FROM numbers(200000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3452', () => {
    const query = `INSERT INTO t_json_partitions FORMAT JSONEachRow {"id": 1, "obj": {"k1": "v1"}} {"id": 2, "obj": {"k2": "v2"}};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3453', () => {
    const query = `INSERT INTO t_json_parallel SELECT materialize('{"k1":1, "k2": "some"}') FROM numbers_mt(500000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3454', () => {
    const query = `INSERT INTO t_json_null FORMAT JSONEachRow {"id": 1, "data": {"k1": 1, "k2" : 2}} {"id": 2, "data": {"k2": 3, "k3" : 4}};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3455', () => {
    const query = `INSERT INTO t_json_null FORMAT JSONEachRow {"id": 3, "data": {"k3" : 10}} {"id": 4, "data": {"k2": 5, "k3" : "str"}};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3456', () => {
    const query = `INSERT INTO TABLE t_json_null FORMAT JSONEachRow {"id": 1, "data": {"k1" : [{"k2" : 11}, {"k3" : 22}]}} {"id": 2, "data": {"k1" : [{"k3" : 33}, {"k4" : 44}, {"k3" : 55, "k4" : 66}]}};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3457', () => {
    const query = `INSERT INTO t_json_mutations VALUES (1, 'q', '{"k1": 1, "k2": 2, "k3": [{"k4": "aaa"}, {"k4": "bbb"}]}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3458', () => {
    const query = `INSERT INTO t_json_mutations VALUES (2, 'w', '{"k1": 3, "k2": 4, "k3": [{"k4": "ccc"}]}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3459', () => {
    const query = `INSERT INTO t_json_mutations VALUES (3, 'e', '{"k1": 5, "k2": 6}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3460', () => {
    const query = `INSERT INTO t_json SELECT number, '{"k1": 1, "k2": 2}' FROM numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3461', () => {
    const query = `INSERT INTO t_json VALUES (1000001, '{"foo": 1}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3462', () => {
    const query = `INSERT INTO type_json_src VALUES (1, '{"k1": 1, "k2": "foo"}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3463', () => {
    const query = `INSERT INTO type_json_dst SELECT * FROM type_json_src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3464', () => {
    const query = `INSERT INTO type_json_src VALUES (2, '{"k1": 2, "k2": "bar"}') (3, '{"k1": 3, "k3": "aaa"}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3465', () => {
    const query = `INSERT INTO type_json_dst SELECT * FROM type_json_src WHERE id > 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3466', () => {
    const query = `INSERT INTO type_json_dst VALUES (4, '{"arr": [{"k11": 5, "k22": 6}, {"k11": 7, "k33": 8}]}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3467', () => {
    const query = `INSERT INTO type_json_src VALUES (5, '{"arr": "not array"}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3468', () => {
    const query = `INSERT INTO type_json_dst SELECT * FROM type_json_src WHERE id = 5; -- { serverError INCOMPATIBLE_COLUMNS } TRUNCATE TABLE type_json_src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3469', () => {
    const query = `INSERT INTO type_json_src VALUES (5, '{"arr": [{"k22": "str1"}]}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3470', () => {
    const query = `INSERT INTO type_json_dst SELECT * FROM type_json_src WHERE id = 5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3471', () => {
    const query = `INSERT INTO type_json_src FORMAT JSONAsString {"k1": 1, "k10": [{"a": "1", "b": "2"}, {"a": "2", "b": "3"}]};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3472', () => {
    const query = `INSERT INTO type_json_src FORMAT JSONAsString  {"k1": 2, "k10": [{"a": "1", "b": "2", "c": {"k11": "haha"}}]};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3473', () => {
    const query = `INSERT INTO type_json_dst SELECT data FROM type_json_src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3474', () => {
    const query = `INSERT INTO t_json_array FORMAT JSONEachRow {"id": 1, "arr": [{"k1": 1, "k2": {"k3": 2, "k4": 3}}, {"k1": 2, "k2": {"k5": "foo"}}]} INSERT INTO t_json_array FORMAT JSONEachRow {"id": 2, "arr": [{"k1": 3, "k2": {"k3": 4, "k4": 5}}]}
SET output_format_json_named_tuples_as_objects = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3475', () => {
    const query = `INSERT INTO t_json_array FORMAT JSONEachRow {"id": 1, "arr": [{"k1": [{"k2": "aaa", "k3": "bbb"}, {"k2": "ccc"}]}]} INSERT INTO t_json_array FORMAT JSONEachRow {"id": 2, "arr": [{"k1": [{"k3": "ddd", "k4": 10}, {"k4": 20}], "k5": {"k6": "foo"}}]}
SELECT * FROM t_json_array ORDER BY id FORMAT JSONEachRow;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3476', () => {
    const query = `INSERT INTO t_map SELECT
number,
(
arrayMap(x -> 'col' || toString(x), range(number % 10)),
range(number % 10)
)::Map(String, UInt64)
FROM numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3477', () => {
    const query = `INSERT INTO t_json SELECT id, m FROM t_map;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3478', () => {
    const query = `INSERT INTO t_json SELECT
number,
(
arrayMap(x -> 'col' || toString(x), range(number % 10)),
range(number % 10)
)::Map(FixedString(4), UInt64)
FROM numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3479', () => {
    const query = `INSERT INTO t_json SELECT number, (range(number % 10), range(number % 10))::Map(UInt64, UInt64)
FROM numbers(1000000); -- { serverError TYPE_MISMATCH }
DROP TABLE IF EXISTS t_json;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3480', () => {
    const query = `INSERT INTO t_json_field VALUES (1, (10, 'a')::Tuple(a UInt32, s String));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3481', () => {
    const query = `INSERT INTO t_json_field VALUES (2, ('sss', 300, 'b')::Tuple(a String, b UInt64, s String)), (3, (20, 'c')::Tuple(a UInt32, s String));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3482', () => {
    const query = `INSERT INTO t_json_field VALUES (4, map('a', 30, 'b', 400)), (5, map('s', 'qqq', 't', 'foo'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3483', () => {
    const query = `INSERT INTO t_json_field VALUES (6, map(1, 2, 3, 4)); -- { clientError TYPE_MISMATCH } INSERT INTO t_json_field VALUES (6, (1, 2, 3)); -- { clientError TYPE_MISMATCH }
DROP TABLE t_json_field;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3484', () => {
    const query = `INSERT INTO t_github_json (message_raw) FORMAT JSONEachRow {"message_raw": "{\\"type\\":\\"PushEvent\\", \\"created_at\\": \\"2022-01-04 07:00:00\\", \\"actor\\":{\\"avatar_url\\":\\"https://avatars.githubusercontent.com/u/123213213?\\",\\"display_login\\":\\"github-actions\\",\\"gravatar_id\\":\\"\\",\\"id\\":123123123,\\"login\\":\\"github-actions[bot]\\",\\"url\\":\\"https://api.github.com/users/github-actions[bot]\\"},\\"repo\\":{\\"id\\":1001001010101,\\"name\\":\\"some-repo\\",\\"url\\":\\"https://api.github.com/repos/some-repo\\"}}"} SELECT * FROM t_github_json ORDER BY event_type, repo_name;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3485', () => {
    const query = `INSERT INTO t_json_empty_str VALUES (1, ''), (2, '{"k1": 1, "k2": "v1"}'), (3, '{}'), (4, '{"k1": 2}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3486', () => {
    const query = `INSERT INTO t_json_local FORMAT JSONAsObject {"k1": 2, "k2": {"k3": "qqq", "k4": [44, 55]}} ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3487', () => {
    const query = `INSERT INTO t_json_desc FORMAT JSONAsObject {"k1": 10} ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3488', () => {
    const query = `INSERT INTO t_json_desc FORMAT JSONAsObject {"k1": "q", "k2": [1, 2, 3]} ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3489', () => {
    const query = `INSERT INTO t_json_bools VALUES ('{"k1": true, "k2": false}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3490', () => {
    const query = `INSERT INTO t_json format JSONEachRow {"id": 1, "obj": {"foo": 1, "k1": 2}};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3491', () => {
    const query = `INSERT INTO t_json format JSONEachRow {"id": 2, "obj": {"foo": 1, "k2": 2}};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3492', () => {
    const query = `INSERT INTO t_json_str_5 FORMAT JSONAsString {"k1": 1, "k2": {"k4": [22, 33]}}, {"k1": 2, "k2": {"k3": "qqq", "k4": [44]}} ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3493', () => {
    const query = `INSERT INTO t_json_5 SELECT data FROM t_json_str_5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3494', () => {
    const query = `INSERT INTO t_json_2 FORMAT JSONEachRow {"id": 1, "data": {"k1": 1, "k2" : 2}} {"id": 2, "data": {"k2": 3, "k3" : 4}};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3495', () => {
    const query = `INSERT INTO t_json_2 FORMAT JSONEachRow {"id": 3, "data": {"k3" : 10}} {"id": 4, "data": {"k2": 5, "k3" : "str"}};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3496', () => {
    const query = `INSERT INTO TABLE t_json_2 FORMAT JSONEachRow {"id": 1, "data": {"k1" : [1, 2, 3.3]}};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3497', () => {
    const query = `INSERT INTO TABLE t_json_2 FORMAT JSONEachRow {"id": 2, "data": {"k1" : ["a", 4, "b"]}};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3498', () => {
    const query = `INSERT INTO TABLE t_json_2 FORMAT JSONEachRow {"id": 1, "data": {"k1" : [{"k2" : 11}, {"k3" : 22}]}} {"id": 2, "data": {"k1" : [{"k3" : 33}, {"k4" : 44}, {"k3" : 55, "k4" : 66}]}};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3499', () => {
    const query = `INSERT INTO t_json_2 FORMAT JSONEachRow {"id": 1, "data" : {"k1": 1}};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3500', () => {
    const query = `INSERT INTO t_json_2 FORMAT JSONEachRow {"id": 1, "data" : {"k1": [1, 2]}};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3501', () => {
    const query = `INSERT INTO t_json_17 FORMAT JSONAsObject {"id": 1, "arr": [{"k1": [{"k2": "aaa", "k3": "bbb"}, {"k2": "ccc"}]}]} INSERT INTO t_json_17 FORMAT JSONAsObject {"id": 2, "arr": [{"k1": [{"k3": "ddd", "k4": 10}, {"k4": 20}], "k5": {"k6": "foo"}}]}
SELECT toTypeName(obj) FROM t_json_17 LIMIT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3502', () => {
    const query = `INSERT INTO t_json_17 FORMAT JSONAsObject {"id": 1, "arr": [{"k1": [{"k2": "aaa"}]}]} INSERT INTO t_json_17 FORMAT JSONAsObject {"id": 2, "arr": [{"k1": [{"k2": "bbb", "k3": [{"k4": 10}]}, {"k2": "ccc", "k3": [{"k4": 20}]}]}]}
SELECT toTypeName(obj) FROM t_json_17 LIMIT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3503', () => {
    const query = `INSERT INTO t_json_17 FORMAT JSONAsObject {"id": 1, "arr": [{"k3": "qqq"}, {"k3": "www"}]} INSERT INTO t_json_17 FORMAT JSONAsObject {"id": 2, "arr": [{"k1": [{"k2": "aaa"}], "k3": "eee"}]}
INSERT INTO t_json_17 FORMAT JSONAsObject {"id": 3, "arr": [{"k1": [{"k2": "bbb", "k4": [{"k5": 10}]}, {"k2": "ccc", "k4": [{"k5": 20}]}], "k3": "rrr"}]}
SELECT toTypeName(obj) FROM t_json_17 LIMIT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3504', () => {
    const query = `INSERT INTO t_json_14 VALUES (1, '{"key_10":65536,"key_11":"anve","key_0":{"key_1":{"key_2":1025,"key_3":1},"key_4":1,"key_5":256}}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3505', () => {
    const query = `INSERT INTO t_json_14 VALUES (2, '{"key_0":[{"key_12":"buwvq","key_11":0.0000000255}]}'); -- { serverError INCOMPATIBLE_COLUMNS } SELECT * FROM t_json_14 ORDER BY id FORMAT JSONEachRow;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3506', () => {
    const query = `INSERT INTO t_json_10 FORMAT JSONAsObject {"a": {"b": 1, "c": [{"d": 10, "e": [31]}, {"d": 20, "e": [63, 127]}]}} {"a": {"b": 2, "c": []}} INSERT INTO t_json_10 FORMAT JSONAsObject {"a": {"b": 3, "c": [{"f": 20, "e": [32]}, {"f": 30, "e": [64, 128]}]}} {"a": {"b": 4, "c": []}}
SELECT DISTINCT toTypeName(o) FROM t_json_10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3507', () => {
    const query = `INSERT INTO t_json FORMAT JSONEachRow {"id": 1, "data": {"k1": "aa", "k2": {"k3": "bb", "k4": "c"}}} {"id": 2, "data": {"k1": "ee", "k5": "ff"}};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3508', () => {
    const query = `INSERT INTO t_json FORMAT JSONEachRow {"id": 3, "data": {"k5":"foo"}};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3509', () => {
    const query = `INSERT INTO t_json FORMAT JSONEachRow {"id": 1, "data": {"k1":[{"k2":"aaa","k3":[{"k4":"bbb"},{"k4":"ccc"}]},{"k2":"ddd","k3":[{"k4":"eee"},{"k4":"fff"}]}]}};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3510', () => {
    const query = `INSERT INTO t_json FORMAT JSONEachRow {"id": 1, "data": {"name": "a", "value": 42 }}, {"id": 2, "data": {"name": "b", "value": 4200 }};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3511', () => {
    const query = `INSERT INTO t_json FORMAT JSONEachRow {"id": 3, "data": {"name": "a", "value": 42.123 }};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3512', () => {
    const query = `INSERT INTO t_json FORMAT JSONEachRow {"id": 4, "data": {"name": "a", "value": "some" }};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3513', () => {
    const query = `INSERT INTO replacing_table SELECT number, number, number from numbers(16);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3514', () => {
    const query = `INSERT INTO replacing_table SELECT 100, number, number from numbers(16);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3515', () => {
    const query = `INSERT INTO replacing_table SELECT if(number == 8192, 8191, number), 1 FROM numbers(8193);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3516', () => {
    const query = `INSERT INTO type_json_src VALUES (6, '{"arr": [{"k22": "str1"}]}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3517', () => {
    const query = `INSERT INTO t_json_array FORMAT JSONEachRow {"id": 1, "arr": [{"k1": 1, "k2": {"k3": 2, "k4": 3}}, {"k1": 2, "k2": {"k5": "foo"}}]} INSERT INTO t_json_array FORMAT JSONEachRow {"id": 2, "arr": [{"k1": 3, "k2": {"k3": 4, "k4": 5}}]}
SELECT * FROM t_json_array ORDER BY id FORMAT JSONEachRow;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3518', () => {
    const query = `INSERT INTO t_json_10 FORMAT JSONAsObject {"a": {"b": 1, "c": [{"d": 10, "e": [31]}, {"d": 20, "e": [63, 127]}]}} {"a": {"b": 2, "c": []}} INSERT INTO t_json_10 FORMAT JSONAsObject {"a": {"b": 3, "c": [{"f": 20, "e": [32]}, {"f": 30, "e": [64, 128]}]}} {"a": {"b": 4, "c": []}}
SELECT DISTINCT arrayJoin(JSONAllPathsWithTypes(o)) as path FROM t_json_10 order by path;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3519', () => {
    const query = `insert into t1_shard values (42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3520', () => {
    const query = `insert into t2_shard values (42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3521', () => {
    const query = `INSERT INTO t_move_to_prewhere SELECT 1, number % 2 = 0, number % 3 = 0, number % 5 = 0, repeat('a', 1000) FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3522', () => {
    const query = `INSERT INTO t_move_to_prewhere SELECT 2, number % 2 = 0, number % 3 = 0, number % 5 = 0, repeat('a', 1000) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3523', () => {
    const query = `insert into test(arr) values ([['a'], ['b', 'c']]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3524', () => {
    const query = `INSERT INTO join_table_mutation select number, toString(number) from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3525', () => {
    const query = `INSERT INTO join_table_mutation VALUES (10, 'm10');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3526', () => {
    const query = `INSERT INTO dictionary_primary_key_source_table VALUES (20, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3527', () => {
    const query = `INSERT INTO main_table_01818 SELECT 1 as \`id\`, 'ClickHouse' as \`advertiser_id\`, * EXCEPT (\`id\`, \`advertiser_id\`) FROM generateRandom(
'\`id\` UInt32,
\`advertiser_id\` String,
\`campaign_id\` String,
\`name\` String,
\`budget\` Float64,
\`budget_mode\` String,
\`landing_type\` String,
\`status\` String,
\`modify_time\` String,
\`campaign_type\` String,
\`campaign_create_time\` DateTime,
\`campaign_modify_time\` DateTime,
\`create_time\` DateTime,
\`update_time\` DateTime', 10, 10, 10) 
LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3528', () => {
    const query = `INSERT INTO tmp_table_01818 SELECT 2 as \`id\`, 'Database' as \`advertiser_id\`, * EXCEPT (\`id\`, \`advertiser_id\`) FROM generateRandom(
'\`id\` UInt32,
\`advertiser_id\` String,
\`campaign_id\` String,
\`name\` String,
\`budget\` Float64,
\`budget_mode\` String,
\`landing_type\` String,
\`status\` String,
\`modify_time\` String,
\`campaign_type\` String,
\`campaign_create_time\` DateTime,
\`campaign_modify_time\` DateTime,
\`create_time\` DateTime,
\`update_time\` DateTime', 10, 10, 10) 
LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3529', () => {
    const query = `INSERT INTO tmp_table_01818 SELECT 3 as \`id\`, 'ClickHouse' as \`advertiser_id\`, * EXCEPT (\`id\`, \`advertiser_id\`) FROM generateRandom(
'\`id\` UInt32,
\`advertiser_id\` String,
\`campaign_id\` String,
\`name\` String,
\`budget\` Float64,
\`budget_mode\` String,
\`landing_type\` String,
\`status\` String,
\`modify_time\` String,
\`campaign_type\` String,
\`campaign_create_time\` DateTime,
\`campaign_modify_time\` DateTime,
\`create_time\` DateTime,
\`update_time\` DateTime', 10, 10, 10) 
LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3530', () => {
    const query = `INSERT INTO data VALUES (0, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3531', () => {
    const query = `INSERT INTO test_01344 VALUES ('Hello, world');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3532', () => {
    const query = `insert into data_01809 values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3533', () => {
    const query = `insert into data_01809 values (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3534', () => {
    const query = `insert into data_01809 values (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3535', () => {
    const query = `INSERT INTO dictionary_decimal_source_table VALUES (1, 5.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3536', () => {
    const query = `INSERT INTO ip_trie_dictionary_decimal_source_table VALUES ('127.0.0.0', 5.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3537', () => {
    const query = `INSERT INTO dictionary_decimal_polygons_source_table VALUES ([[[(0, 0), (0, 1), (1, 1), (1, 0)]]], 5.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3538', () => {
    const query = `INSERT INTO t_map_null VALUES (map('a', 'b', 'c', 'd'), 'foo');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3539', () => {
    const query = `INSERT INTO 01802_empsalary VALUES ('sales', 1, 5000, '2006-10-01'), ('develop', 8, 6000, '2006-10-01'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 10, 5200, '2007-08-01'), ('sales', 3, 4800, '2007-08-01'), ('sales', 4, 4801, '2007-08-08'), ('develop', 11, 5200, '2007-08-15'), ('personnel', 5, 3500, '2007-12-10'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3540', () => {
    const query = `INSERT INTO nested_01800_tiny_log VALUES (['Hello', 'World'], [['a'], ['b', 'c']], [['PU', 'US'], ['OTHER']]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3541', () => {
    const query = `INSERT INTO nested_01800_stripe_log VALUES (['Hello', 'World'], [['a'], ['b', 'c']], [['PU', 'US'], ['OTHER']]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3542', () => {
    const query = `INSERT INTO nested_01800_log VALUES (['Hello', 'World'], [['a'], ['b', 'c']], [['PU', 'US'], ['OTHER']]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3543', () => {
    const query = `INSERT INTO TABLE test1(year, uv) select '2021',uniqThetaState(toInt64(1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3544', () => {
    const query = `INSERT INTO TABLE test1(year, uv) select '2021',uniqThetaState(toInt64(2));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3545', () => {
    const query = `INSERT INTO TABLE test1(year, uv) select '2021',uniqThetaState(toInt64(3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3546', () => {
    const query = `INSERT INTO TABLE test1(year, uv) select '2021',uniqThetaState(toInt64(4));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3547', () => {
    const query = `INSERT INTO TABLE test1(year, uv) select '2022',uniqThetaState(toInt64(1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3548', () => {
    const query = `INSERT INTO TABLE test1(year, uv) select '2022',uniqThetaState(toInt64(3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3549', () => {
    const query = `INSERT INTO TABLE test2(year, uv) select '2021',1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3550', () => {
    const query = `INSERT INTO TABLE test2(year, uv) select '2021',2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3551', () => {
    const query = `INSERT INTO TABLE test2(year, uv) select '2021',3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3552', () => {
    const query = `INSERT INTO TABLE test2(year, uv) select '2021',4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3553', () => {
    const query = `INSERT INTO TABLE test2(year, uv) select '2022',1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3554', () => {
    const query = `INSERT INTO TABLE test2(year, uv) select '2022',3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3555', () => {
    const query = `INSERT INTO stored_aggregates SELECT
toDate('2014-06-01') AS d,
uniqState(number) AS Uniq,
uniqThetaState(number) AS UniqThetaSketch
FROM
(
SELECT * FROM system.numbers LIMIT 1000
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3556', () => {
    const query = `INSERT INTO stored_aggregates SELECT
	toDate('2014-06-01') AS d,
	intDiv(number, 100) AS k1,
	toString(intDiv(number, 10)) AS k2,
	uniqState(toUInt64(number % 7)) AS Uniq,
uniqThetaState(toUInt64(number % 7)) AS UniqThetaSketch
FROM
(
	SELECT * FROM system.numbers LIMIT 1000
)
GROUP BY d, k1, k2
ORDER BY d, k1, k2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3557', () => {
    const query = `insert into summing_merge_tree_null select number % 3, 1, number % 53 from numbers(999999);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3558', () => {
    const query = `INSERT INTO t_having SELECT number, number FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3559', () => {
    const query = `INSERT INTO FUNCTION remote('127.1', currentDatabase(), underlying_01797) SELECT toUInt64(number) FROM system.numbers LIMIT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3560', () => {
    const query = `INSERT INTO FUNCTION remote('127.1', currentDatabase(), underlying_01796) SELECT toUInt64(number) FROM system.numbers LIMIT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3561', () => {
    const query = `INSERT INTO FUNCTION remote('127.1', currentDatabase(), underlying_01795) SELECT toUInt64(number) FROM system.numbers LIMIT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3562', () => {
    const query = `INSERT INTO dist_01781 VALUES ('1'),('2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3563', () => {
    const query = `INSERT INTO dist_01781 SELECT * FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3564', () => {
    const query = `INSERT INTO test_wide_nested SELECT number, [number,number + 1], ['aa','bb'], [number,number * 2] FROM numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3565', () => {
    const query = `INSERT INTO test_wide_not_nested SELECT number, number, 'aa', number * 2 FROM numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3566', () => {
    const query = `INSERT INTO group_by_pk SELECT number / 100, number FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3567', () => {
    const query = `INSERT INTO foo SELECT toString(number) AS n FROM system.numbers LIMIT 1025;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3568', () => {
    const query = `INSERT INTO foo_lc SELECT toString(number) AS n FROM system.numbers LIMIT 1025;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3569', () => {
    const query = `INSERT INTO 01785_db.simple_key_source_table VALUES (1, 'First');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3570', () => {
    const query = `INSERT INTO 01785_db.complex_key_source_table VALUES (1, 'FirstKey', 'First');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3571', () => {
    const query = `INSERT INTO bloom_filter SELECT number, 'yyy,uuu' FROM numbers(1024);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3572', () => {
    const query = `INSERT INTO merge_tree_deduplication (key, value) VALUES (1, '1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3573', () => {
    const query = `INSERT INTO merge_tree_deduplication (key, value) VALUES (2, '2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3574', () => {
    const query = `INSERT INTO merge_tree_deduplication (key, value) VALUES (3, '3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3575', () => {
    const query = `INSERT INTO merge_tree_deduplication (key, value) VALUES (4, '4');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3576', () => {
    const query = `INSERT INTO merge_tree_deduplication (key, value) VALUES (5, '5');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3577', () => {
    const query = `INSERT INTO merge_tree_deduplication (key, value) VALUES (6, '6');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3578', () => {
    const query = `INSERT INTO merge_tree_deduplication (key, value) VALUES (7, '7');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3579', () => {
    const query = `INSERT INTO merge_tree_deduplication (key, value) VALUES (8, '8');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3580', () => {
    const query = `INSERT INTO merge_tree_deduplication (key, value) VALUES (9, '9');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3581', () => {
    const query = `INSERT INTO merge_tree_deduplication (key, value) VALUES (10, '10');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3582', () => {
    const query = `INSERT INTO merge_tree_deduplication (key, value) VALUES (11, '11');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3583', () => {
    const query = `INSERT INTO merge_tree_deduplication (key, value) VALUES (12, '12');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3584', () => {
    const query = `INSERT INTO merge_tree_deduplication (key, value) VALUES (11, '11'); -- deduplicated INSERT INTO merge_tree_deduplication (key, value) VALUES (12, '12'); -- deduplicated
SELECT '===============';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3585', () => {
    const query = `INSERT INTO merge_tree_deduplication (key, value, part) VALUES (11, '11', 88);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3586', () => {
    const query = `INSERT INTO merge_tree_deduplication (key, value, part) VALUES (11, '11', 88); --deduplicated INSERT INTO merge_tree_deduplication (key, value) VALUES (11, '11'); -- not deduplicated
INSERT INTO merge_tree_deduplication (key, value) VALUES (12, '12'); -- not deduplicated
SELECT part, key, value FROM merge_tree_deduplication ORDER BY key, part;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3587', () => {
    const query = `INSERT INTO merge_tree_deduplication (key, value, part) VALUES (1, '1', 33);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3588', () => {
    const query = `INSERT INTO merge_tree_deduplication (key, value, part) VALUES (2, '2', 33);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3589', () => {
    const query = `INSERT INTO merge_tree_deduplication (key, value, part) VALUES (3, '3', 33);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3590', () => {
    const query = `INSERT INTO merge_tree_deduplication (key, value, part) VALUES (1, '1', 44);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3591', () => {
    const query = `INSERT INTO merge_tree_deduplication (key, value, part) VALUES (2, '2', 44);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3592', () => {
    const query = `INSERT INTO merge_tree_deduplication (key, value, part) VALUES (3, '3', 44);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3593', () => {
    const query = `INSERT INTO merge_tree_deduplication (key, value, part) VALUES (4, '4', 44);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3594', () => {
    const query = `INSERT INTO merge_tree_no_deduplication (key, value) VALUES (1, '1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3595', () => {
    const query = `INSERT INTO merge_tree_no_deduplication (key, value) VALUES (2, '2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3596', () => {
    const query = `INSERT INTO merge_tree_no_deduplication (key, value) VALUES (3, '3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3597', () => {
    const query = `INSERT INTO merge_tree_no_deduplication (key, value) VALUES (4, '4');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3598', () => {
    const query = `INSERT INTO simple_key_dictionary_source_table VALUES (1, 'First', 'First');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3599', () => {
    const query = `INSERT INTO simple_key_dictionary_source_table VALUES (2, 'Second', NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3600', () => {
    const query = `INSERT INTO simple_key_dictionary_source_table VALUES (3, 'Third', 'Third');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3601', () => {
    const query = `INSERT INTO complex_key_dictionary_source_table VALUES (1, 'key', 'First', 'First');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3602', () => {
    const query = `INSERT INTO complex_key_dictionary_source_table VALUES (2, 'key', 'Second', NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3603', () => {
    const query = `INSERT INTO complex_key_dictionary_source_table VALUES (3, 'key', 'Third', 'Third');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3604', () => {
    const query = `INSERT INTO range_key_dictionary_source_table VALUES(1, toDate('2019-05-20'), toDate('2019-05-20'), 'First', 'First');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3605', () => {
    const query = `INSERT INTO range_key_dictionary_source_table VALUES(2, toDate('2019-05-20'), toDate('2019-05-20'), 'Second', NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3606', () => {
    const query = `INSERT INTO range_key_dictionary_source_table VALUES(3, toDate('2019-05-20'), toDate('2019-05-20'), 'Third', 'Third');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3607', () => {
    const query = `INSERT INTO sparse_tuple SELECT number, (if (number % 20 = 0, number, 0), repeat('a', number % 10 + 1)) FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3608', () => {
    const query = `INSERT INTO sparse_tuple SELECT number, (if (number % 20 = 0, number, 0), (if (number % 15 = 0, number, 0), repeat('a', number % 10 + 1))) FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3609', () => {
    const query = `INSERT INTO t_sparse_pk VALUES (0, 'a'), (0, 'b'), (1, ''), (2, ''), (2, 'e'), (3, 'f'), (4, 'g');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3610', () => {
    const query = `INSERT INTO t_sparse_pk SELECT number % 10, number % 4 = 0 FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3611', () => {
    const query = `INSERT INTO t_full_pk SELECT number % 10, number % 4 = 0 FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3612', () => {
    const query = `INSERT INTO t_sparse_pk SELECT number % 10, number % 6 = 0 FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3613', () => {
    const query = `INSERT INTO t_full_pk SELECT number % 10, number % 6 = 0 FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3614', () => {
    const query = `INSERT INTO sparse_t SELECT number,
if (number % 2 = 0, number, 0),
if (number % 2 = 0, toString(number), ''),
if (number % 2 = 0, [''], []),
if (number % 2 = 0, [0], []),
(if (number % 2 = 0, number, 0), '')
FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3615', () => {
    const query = `INSERT INTO t_sparse_full SELECT
number,
if (number % 10 = 0, number, 0),
if (number % 7 = 0, toString(number), '')
FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3616', () => {
    const query = `INSERT INTO t_sparse_full SELECT
number,
number,
toString(number)
FROM numbers(500);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3617', () => {
    const query = `INSERT INTO t_sparse SELECT number,
if (number % 20 = 0, number, 0),
if (number % 50 = 0, toString(number), '')
FROM numbers(1, 100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3618', () => {
    const query = `INSERT INTO t_sparse SELECT number, number, toString(number)
FROM numbers (1, 100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3619', () => {
    const query = `INSERT INTO t_sparse_distinct SELECT number, number % 6 FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3620', () => {
    const query = `INSERT INTO t_sparse_distinct SELECT number, number % 100 = 0 FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3621', () => {
    const query = `INSERT INTO t_sparse_alter SELECT number,
if (number % 11 = 0, number, 0),
if (number % 13 = 0, toString(number), '')
FROM numbers(2000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3622', () => {
    const query = `INSERT INTO t_sparse SELECT number,
if (number % 10 = 0, number, 0),
if (number % 5 = 0, toString(number), ''),
if (number % 7 = 0, arrayMap(x -> toString(x), range(number % 10)), []),
if (number % 12 = 0, range(number % 10), [])
FROM numbers (200);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3623', () => {
    const query = `INSERT INTO t_sparse_1 VALUES (1, 6), (2, 1), (3, 0), (4, -1), (5, 0), (6, 0), (7, -2), (8, 0), (9, 0), (10, 4), (11, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3624', () => {
    const query = `INSERT INTO 01780_db.dict3_source VALUES (1, '1'), (2, '2'), (3, '3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3625', () => {
    const query = `INSERT INTO ttt01778 values('1',1),('2',2),('3',3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3626', () => {
    const query = `INSERT INTO test_01778 SELECT toString(intDiv(number,8000)), today() FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3627', () => {
    const query = `INSERT INTO test_01778 SELECT toString('xxx'), today() FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3628', () => {
    const query = `INSERT INTO 01778_db.hierarchy_source_table VALUES (1, 0), (2, 1), (3, 1), (4, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3629', () => {
    const query = `INSERT INTO test_data SELECT
IPv4NumToString(IPv4CIDRToRange(IPv4StringToNum('255.255.255.255'), toUInt8(number)).1) || '/' || toString(number) AS cidr
FROM system.numbers LIMIT 33;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3630', () => {
    const query = `INSERT INTO test VALUES ('2000-01-02 03:04:05.123'), ('2001-02-03 04:05:06.789');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3631', () => {
    const query = `INSERT INTO bloom_filter_null_array SELECT [number] FROM numbers(10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3632', () => {
    const query = `INSERT INTO test_aggregation VALUES ([1,2,3,4]), ([]), ([1,2,3]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3633', () => {
    const query = `INSERT INTO 01766_db.complex_key_simple_attributes_source_table VALUES(0, 'id_key_0', 'value_0', 'value_second_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3634', () => {
    const query = `INSERT INTO 01766_db.complex_key_simple_attributes_source_table VALUES(1, 'id_key_1', 'value_1', 'value_second_1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3635', () => {
    const query = `INSERT INTO 01766_db.complex_key_simple_attributes_source_table VALUES(2, 'id_key_2', 'value_2', 'value_second_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3636', () => {
    const query = `INSERT INTO 01766_db.complex_key_complex_attributes_source_table VALUES(0, 'id_key_0', 'value_0', 'value_second_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3637', () => {
    const query = `INSERT INTO 01766_db.complex_key_complex_attributes_source_table VALUES(1, 'id_key_1', 'value_1', NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3638', () => {
    const query = `INSERT INTO 01766_db.complex_key_complex_attributes_source_table VALUES(2, 'id_key_2', 'value_2', 'value_second_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3639', () => {
    const query = `INSERT INTO t_dst VALUES (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3640', () => {
    const query = `INSERT INTO t_dst VALUES (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3641', () => {
    const query = `INSERT INTO t_dst VALUES (1, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3642', () => {
    const query = `INSERT INTO t_src VALUES (1, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3643', () => {
    const query = `INSERT INTO 01765_db.simple_key_simple_attributes_source_table VALUES(0, 'value_0', 'value_second_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3644', () => {
    const query = `INSERT INTO 01765_db.simple_key_simple_attributes_source_table VALUES(1, 'value_1', 'value_second_1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3645', () => {
    const query = `INSERT INTO 01765_db.simple_key_simple_attributes_source_table VALUES(2, 'value_2', 'value_second_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3646', () => {
    const query = `INSERT INTO 01765_db.simple_key_complex_attributes_source_table VALUES(0, 'value_0', 'value_second_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3647', () => {
    const query = `INSERT INTO 01765_db.simple_key_complex_attributes_source_table VALUES(1, 'value_1', NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3648', () => {
    const query = `INSERT INTO 01765_db.simple_key_complex_attributes_source_table VALUES(2, 'value_2', 'value_second_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3649', () => {
    const query = `INSERT INTO 01765_db.simple_key_hierarchy_table VALUES (1, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3650', () => {
    const query = `INSERT INTO 01765_db.simple_key_hierarchy_table VALUES (2, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3651', () => {
    const query = `INSERT INTO 01765_db.simple_key_hierarchy_table VALUES (3, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3652', () => {
    const query = `INSERT INTO 01765_db.simple_key_hierarchy_table VALUES (4, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3653', () => {
    const query = `INSERT INTO table_function_dictionary_source_table VALUES (0, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3654', () => {
    const query = `INSERT INTO table_function_dictionary_source_table VALUES (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3655', () => {
    const query = `INSERT INTO mytable VALUES (1, 2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3656', () => {
    const query = `INSERT INTO collapsing_table SELECT if(number == 8192, 8191, number), 1, if(number == 8192, +1, -1) FROM numbers(8193);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3657', () => {
    const query = `INSERT INTO collapsing_suspicious_granularity VALUES (1, 1, -1) (1, 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3658', () => {
    const query = `INSERT INTO map_lc select map('a', 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3659', () => {
    const query = `INSERT INTO test_ttl_group_by01763(key, ts, value) SELECT number%5 as key, now() - interval 10 minute + number, 1 FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3660', () => {
    const query = `INSERT INTO test_ttl_group_by01763(key, ts, value) SELECT number%5 as key, now() - interval 10 minute + number, 0 FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3661', () => {
    const query = `INSERT INTO test_ttl_group_by01763(key, ts, value) SELECT number%5 as key, now() - interval 10 minute + number, 3 FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3662', () => {
    const query = `INSERT INTO test_ttl_group_by01763(key, ts, value) SELECT number%5 as key, now() -   interval 2 month + number, 1 FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3663', () => {
    const query = `INSERT INTO test_ttl_group_by01763(key, ts, value) SELECT number%5 as key, now() -   interval 2 month + number, 0 FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3664', () => {
    const query = `INSERT INTO test_ttl_group_by01763(key, ts, value) SELECT number%5 as key, now() -   interval 2 month + number, 3 FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3665', () => {
    const query = `insert into t select * from numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3666', () => {
    const query = `insert into t1 values (101, '2023-05-28 00:00:00'), (102, '2023-05-28 00:00:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3667', () => {
    const query = `insert into t2 values ('2023-05-31 00:00:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3668', () => {
    const query = `INSERT INTO test_alter_decimal VALUES (1, toDecimal32(5, 5));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3669', () => {
    const query = `INSERT INTO test_alter_decimal VALUES (2, toDecimal32(6, 6));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3670', () => {
    const query = `INSERT INTO test_alter_decimal VALUES (3, toDecimal32(7, 7));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3671', () => {
    const query = `INSERT INTO 01760_db.example_simple_key_source VALUES (0, 0), (1, 1), (2, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3672', () => {
    const query = `INSERT INTO 01760_db.example_complex_key_source VALUES (0, '0_key', 0), (1, '1_key', 1), (2, '2_key', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3673', () => {
    const query = `INSERT INTO 01760_db.polygons VALUES ([[[(3, 1), (0, 1), (0, -1), (3, -1)]]], 'Click East', 421, 421);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3674', () => {
    const query = `INSERT INTO 01760_db.polygons VALUES ([[[(-1, 1), (1, 1), (1, 3), (-1, 3)]]], 'Click North', 422, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3675', () => {
    const query = `INSERT INTO 01760_db.polygons VALUES ([[[(-3, 1), (-3, -1), (0, -1), (0, 1)]]], 'Click South', 423, 423);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3676', () => {
    const query = `INSERT INTO 01760_db.polygons VALUES ([[[(-1, -1), (1, -1), (1, -3), (-1, -3)]]], 'Click West', 424, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3677', () => {
    const query = `INSERT INTO 01760_db.points VALUES (0.1, 0.0, 112, 'aax');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3678', () => {
    const query = `INSERT INTO 01760_db.points VALUES (-0.1, 0.0, 113, 'aay');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3679', () => {
    const query = `INSERT INTO 01760_db.points VALUES (0.0, 1.1, 114, 'aaz');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3680', () => {
    const query = `INSERT INTO 01760_db.points VALUES (0.0, -1.1, 115, 'aat');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3681', () => {
    const query = `INSERT INTO 01760_db.points VALUES (3.0, 3.0, 22, 'bb');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3682', () => {
    const query = `INSERT INTO ddl_dictonary_test_source VALUES (0, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3683', () => {
    const query = `INSERT INTO ddl_dictonary_test_source VALUES (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3684', () => {
    const query = `INSERT INTO 01759_db.dictionary_source_table VALUES (0, 2, 3), (1, 5, 6), (2, 8, 9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3685', () => {
    const query = `insert into data_01756_str values (0)(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3686', () => {
    const query = `insert into data_01755 values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3687', () => {
    const query = `INSERT INTO 01754_dictionary_db.complex_key_simple_attributes_source_table VALUES(0, 'id_key_0', 'value_0', 'value_second_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3688', () => {
    const query = `INSERT INTO 01754_dictionary_db.complex_key_simple_attributes_source_table VALUES(1, 'id_key_1', 'value_1', 'value_second_1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3689', () => {
    const query = `INSERT INTO 01754_dictionary_db.complex_key_simple_attributes_source_table VALUES(2, 'id_key_2', 'value_2', 'value_second_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3690', () => {
    const query = `INSERT INTO 01754_dictionary_db.complex_key_complex_attributes_source_table VALUES(0, 'id_key_0', 'value_0', 'value_second_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3691', () => {
    const query = `INSERT INTO 01754_dictionary_db.complex_key_complex_attributes_source_table VALUES(1, 'id_key_1', 'value_1', NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3692', () => {
    const query = `INSERT INTO 01754_dictionary_db.complex_key_complex_attributes_source_table VALUES(2, 'id_key_2', 'value_2', 'value_second_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3693', () => {
    const query = `INSERT INTO 01753_dictionary_db.simple_key_simple_attributes_source_table VALUES(0, 'value_0', 'value_second_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3694', () => {
    const query = `INSERT INTO 01753_dictionary_db.simple_key_simple_attributes_source_table VALUES(1, 'value_1', 'value_second_1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3695', () => {
    const query = `INSERT INTO 01753_dictionary_db.simple_key_simple_attributes_source_table VALUES(2, 'value_2', 'value_second_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3696', () => {
    const query = `INSERT INTO 01753_dictionary_db.simple_key_complex_attributes_source_table VALUES(0, 'value_0', 'value_second_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3697', () => {
    const query = `INSERT INTO 01753_dictionary_db.simple_key_complex_attributes_source_table VALUES(1, 'value_1', NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3698', () => {
    const query = `INSERT INTO 01753_dictionary_db.simple_key_complex_attributes_source_table VALUES(2, 'value_2', 'value_second_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3699', () => {
    const query = `INSERT INTO 01753_dictionary_db.simple_key_hierarchy_table VALUES (1, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3700', () => {
    const query = `INSERT INTO 01753_dictionary_db.simple_key_hierarchy_table VALUES (2, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3701', () => {
    const query = `INSERT INTO 01753_dictionary_db.simple_key_hierarchy_table VALUES (3, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3702', () => {
    const query = `INSERT INTO 01753_dictionary_db.simple_key_hierarchy_table VALUES (4, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3703', () => {
    const query = `insert into x values (1, 1), (1, 2), (1, 3), (2, 4), (2, 5), (2, 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3704', () => {
    const query = `insert into mt select * from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3705', () => {
    const query = `INSERT INTO \`test.txt\` VALUES (1, 2, 'Hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3706', () => {
    const query = `insert into summing_table01747 values ('name', 2, 20, 'USD'),('name', 1, 10, 'USD');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3707', () => {
    const query = `INSERT INTO report VALUES ('IU', 'lada', '2101', toDateTime('1970-04-19 15:00:00'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3708', () => {
    const query = `INSERT INTO report VALUES ('PS', 'jeep', 'Grand Cherokee', toDateTime('2005-10-03 15:00:00'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3709', () => {
    const query = `INSERT INTO replicated_report VALUES ('IU', 'lada', '2101', toDateTime('1970-04-19 15:00:00'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3710', () => {
    const query = `INSERT INTO replicated_report VALUES ('PS', 'jeep', 'Grand Cherokee', toDateTime('2005-10-03 15:00:00'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3711', () => {
    const query = `INSERT INTO ttt01746 SELECT toDate('2021-02-14') + (number % 30) AS d, number AS n FROM numbers(1500000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3712', () => {
    const query = `insert into lc_test values (toString('a'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3713', () => {
    const query = `INSERT INTO test_table (f1, f2, pk) VALUES (1,1,1), (1,1,2), (2,1,1), (2,1,2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3714', () => {
    const query = `insert into tbl select number / 4, number, 0 from numbers(16);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3715', () => {
    const query = `insert into XXXX select number*60, 0 from numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3716', () => {
    const query = `INSERT INTO XXXX FORMAT Values ('2020-09-01 00:01:02', 1), ('2020-09-01 20:01:03', 2), ('2020-09-02 00:01:03', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3717', () => {
    const query = `INSERT INTO prewhere_move_select_final SELECT number, number * 2, number * 3 FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3718', () => {
    const query = `insert into test_enum values (1), (NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3719', () => {
    const query = `INSERT INTO join_tbl VALUES ('xxx', 'yyy', 'yyy');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3720', () => {
    const query = `INSERT INTO t VALUES (1, 1111111111222);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3721', () => {
    const query = `INSERT INTO t VALUES (2, 1111111111.222);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3722', () => {
    const query = `INSERT INTO t VALUES (3, '1111111111222');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3723', () => {
    const query = `INSERT INTO t VALUES (4, '1111111111.222');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3724', () => {
    const query = `INSERT INTO decimal VALUES (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3725', () => {
    const query = `INSERT INTO decimal VALUES (0.42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3726', () => {
    const query = `INSERT INTO decimal VALUES (-0.42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3727', () => {
    const query = `INSERT INTO bad_conversions VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3728', () => {
    const query = `INSERT INTO bad_conversions_2 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3729', () => {
    const query = `INSERT INTO TABLE FUNCTION file('01721_file/test/data.TSV', 'TSV', 'id UInt32') VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3730', () => {
    const query = `INSERT INTO test VALUES (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3731', () => {
    const query = `INSERT INTO test VALUES (4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3732', () => {
    const query = `INSERT INTO test VALUES (5), (6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3733', () => {
    const query = `INSERT INTO test VALUES (0), (1), (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3734', () => {
    const query = `insert into db_01721.table_decimal_dict select number,
number / 3,
number / 3,
number / 3,
number / 3
from numbers(5000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3735', () => {
    const query = `INSERT INTO constraint_constant_number_expression VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3736', () => {
    const query = `INSERT INTO constraint_constant_number_expression_non_uint8 VALUES (2); -- {serverError UNSUPPORTED_METHOD} SELECT * FROM constraint_constant_number_expression_non_uint8;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3737', () => {
    const query = `INSERT INTO constraint_constant_nullable_expression_that_contains_null VALUES (3); -- {serverError VIOLATED_CONSTRAINT} SELECT * FROM constraint_constant_nullable_expression_that_contains_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3738', () => {
    const query = `INSERT INTO table_map_with_key_integer VALUES ('2020-01-01', map(127, 1, 0, 1, -1, 1)) ('2020-01-01', map());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3739', () => {
    const query = `INSERT INTO table_map_with_key_integer VALUES ('2020-01-01', map(-1, 1, 2147483647, 2, -2147483648, 3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3740', () => {
    const query = `INSERT INTO table_map_with_key_integer VALUES ('2020-01-01', map('2020-01-01', 1, '2020-01-02', 2, '1970-01-02', 3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3741', () => {
    const query = `INSERT INTO table_map_with_key_integer VALUES ('2020-01-01', map('00001192-0000-4000-8000-000000000001', 1, '00001192-0000-4000-7000-000000000001', 2));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3742', () => {
    const query = `INSERT INTO table_map_with_key_integer SELECT '2020-01-01', map(-1, 'a', 0, 'b', toInt128('1234567898765432123456789'), 'c', toInt128('-1234567898765432123456789'), 'd');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3743', () => {
    const query = `INSERT INTO 01720_dictionary_db.dictionary_source_table VALUES (1, 'First');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3744', () => {
    const query = `INSERT INTO constraint_on_nullable_type VALUES (0); -- {serverError VIOLATED_CONSTRAINT} INSERT INTO constraint_on_nullable_type VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3745', () => {
    const query = `INSERT INTO constraint_on_low_cardinality_type VALUES (0); -- {serverError VIOLATED_CONSTRAINT} INSERT INTO constraint_on_low_cardinality_type VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3746', () => {
    const query = `INSERT INTO constraint_on_low_cardinality_nullable_type VALUES (0); -- {serverError VIOLATED_CONSTRAINT} INSERT INTO constraint_on_low_cardinality_nullable_type VALUES (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3747', () => {
    const query = `INSERT INTO test values ('2020-05-13 16:38:45', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3748', () => {
    const query = `INSERT INTO signed_table(k, v, s) VALUES (1, 'a', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3749', () => {
    const query = `INSERT INTO test_tuple VALUES ((NULL, 1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3750', () => {
    const query = `INSERT INTO test_tuple VALUES ((NULL, 2)); -- { clientError TYPE_MISMATCH } SELECT * FROM test_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3751', () => {
    const query = `INSERT INTO test_tuple_nested_in_array VALUES ([(NULL, 2), (3, NULL), (NULL, 4)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3752', () => {
    const query = `INSERT INTO test_tuple_nested_in_array VALUES ([(NULL, 1)]); -- { clientError TYPE_MISMATCH } SELECT * FROM test_tuple_nested_in_array;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3753', () => {
    const query = `INSERT INTO test_tuple_nested_in_array_nested_in_tuple VALUES ( (NULL, [(NULL, 2), (3, NULL), (NULL, 4)]) );`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3754', () => {
    const query = `INSERT INTO test_tuple_nested_in_array_nested_in_tuple VALUES ( (NULL, [(NULL, 1)]) ); -- { clientError TYPE_MISMATCH } SELECT * FROM test_tuple_nested_in_array_nested_in_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3755', () => {
    const query = `INSERT INTO test_tuple_nested_in_map VALUES (map('test', (NULL, 1)));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3756', () => {
    const query = `INSERT INTO test_tuple_nested_in_map VALUES (map('test', (NULL, 1))); -- { clientError TYPE_MISMATCH } SELECT * FROM test_tuple_nested_in_map;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3757', () => {
    const query = `INSERT INTO test_tuple_nested_in_map_nested_in_tuple VALUES ( (NULL, map('test', (NULL, 1))) );`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3758', () => {
    const query = `INSERT INTO test_tuple_nested_in_map_nested_in_tuple VALUES ( (NULL, map('test', (NULL, 1))) ); -- { clientError TYPE_MISMATCH } SELECT * FROM test_tuple_nested_in_map_nested_in_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3759', () => {
    const query = `INSERT INTO i20203_1 VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3760', () => {
    const query = `INSERT INTO alter_drop_version VALUES (1, '1', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3761', () => {
    const query = `INSERT INTO old_school_table VALUES (1, '1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3762', () => {
    const query = `INSERT INTO old_school_table VALUES (2, '2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3763', () => {
    const query = `insert into t SELECT number, -number, number FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3764', () => {
    const query = `insert into data_proj_order_by_incomp values (5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3765', () => {
    const query = `insert into data_proj_order_by_incomp values (6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3766', () => {
    const query = `insert into data_proj_order_by_comp values (5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3767', () => {
    const query = `insert into data_proj_order_by_comp values (6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3768', () => {
    const query = `insert into projection_test with rowNumberInAllBlocks() as id select toDateTime('2020-10-24 00:00:00') + (id / 20), * from generateRandom('cost Int64', 10, 10, 1) limit 1000 settings max_threads = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3769', () => {
    const query = `insert into projection_without_key select number from numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3770', () => {
    const query = `INSERT INTO projection_test__fuzz_0 SETTINGS max_threads = 1 WITH rowNumberInAllBlocks() AS id SELECT 1, toDateTime('2020-10-24 00:00:00') + (id / 20), toString(id % 100), * FROM generateRandom('x_id String, y_id String, block_count Int64, retry_count Int64, duration Int64, kbytes Int64, buffer_time Int64, first_time Int64, total_bytes Nullable(UInt64), valid_bytes Nullable(UInt64), completed_bytes Nullable(UInt64), fixed_bytes Nullable(UInt64), force_bytes Nullable(UInt64)', 10, 10, 1) LIMIT 1000 SETTINGS max_threads = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3771', () => {
    const query = `insert into projection_test with rowNumberInAllBlocks() as id select 1, toDateTime('2020-10-24 00:00:00') + (id / 20), toString(id % 100), * from generateRandom('x_id String, y_id String, block_count Int64, retry_count Int64, duration Int64, kbytes Int64, buffer_time Int64, first_time Int64, total_bytes Nullable(UInt64), valid_bytes Nullable(UInt64), completed_bytes Nullable(UInt64), fixed_bytes Nullable(UInt64), force_bytes Nullable(UInt64)', 10, 10, 1) limit 1000 settings max_threads = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3772', () => {
    const query = `insert into t select number from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3773', () => {
    const query = `insert into t select number + 100 from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3774', () => {
    const query = `insert into j select number, number from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3775', () => {
    const query = `INSERT INTO aggregate_functions_null_for_empty SELECT number, number * 2 FROM numbers(8192 * 10) SETTINGS aggregate_functions_null_for_empty = true;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3776', () => {
    const query = `INSERT INTO transform_null_in SELECT number, number * 2 FROM numbers(8192 * 10) SETTINGS transform_null_in = true;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3777', () => {
    const query = `INSERT INTO legacy_column_name_of_tuple_literal SELECT number, number * 2 FROM numbers(8192 * 10) SETTINGS legacy_column_name_of_tuple_literal = true;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3778', () => {
    const query = `insert into t values (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3779', () => {
    const query = `insert into t (c1, c18) select number, -number from numbers(2000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3780', () => {
    const query = `INSERT INTO t SELECT number % 10, number FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3781', () => {
    const query = `insert into x select * from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3782', () => {
    const query = `insert into tp select number, number from numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3783', () => {
    const query = `insert into tp select number, number from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3784', () => {
    const query = `insert into tp (p, k, v1, v2) values ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3785', () => {
    const query = `insert into tp values (1), (2), (3), (4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3786', () => {
    const query = `insert into z  select number, '2021-10-24', intDiv (number, 10000), 1 from numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3787', () => {
    const query = `insert into proj values (1, 1, 1, 1, '2012-10-24 21:30:00', 'ab');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3788', () => {
    const query = `INSERT INTO t SELECT 1 AS key, today() + (number % 30), number FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3789', () => {
    const query = `insert into x values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3790', () => {
    const query = `insert into x values (1, 2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3791', () => {
    const query = `insert into table flows values (15169, 83948), (12322, 98989), (60068, 99990), (15169, 89898), (15169, 83948), (15169, 89898), (15169, 83948), (15169, 89898), (15169, 83948), (15169, 89898), (15169, 83948), (15169, 89898);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3792', () => {
    const query = `insert into t select number, number, number from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3793', () => {
    const query = `insert into test values ('hello world', 1662336000241);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3794', () => {
    const query = `insert into tp_1 select number, number from numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3795', () => {
    const query = `insert into tp_1 select number, number from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3796', () => {
    const query = `INSERT INTO agg SELECT 1, toDateTime('2021-12-06 00:00:00') + number, number FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3797', () => {
    const query = `insert into x values (1, [2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3798', () => {
    const query = `INSERT INTO normal SELECT number,
toDateTime('2021-12-06 00:00:00') + number,
number
FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3799', () => {
    const query = `INSERT INTO agg SELECT 1,
toDateTime('2021-12-06 00:00:00') + number,
number
FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3800', () => {
    const query = `insert into atf_p select number from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3801', () => {
    const query = `insert into data_order_by_proj_incomp values (5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3802', () => {
    const query = `insert into data_order_by_proj_incomp values (6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3803', () => {
    const query = `insert into data_order_by_proj_comp values (5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3804', () => {
    const query = `insert into data_order_by_proj_comp values (6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3805', () => {
    const query = `INSERT INTO t2 SELECT number, number from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3806', () => {
    const query = `insert into t values (1, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3807', () => {
    const query = `insert into t values (1, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3808', () => {
    const query = `INSERT INTO test VALUES ('x', 'Hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3809', () => {
    const query = `INSERT INTO test VALUES ('y', 'World');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3810', () => {
    const query = `insert into t values (1, 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3811', () => {
    const query = `insert into test select number == 3 ? 'some value' : null from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3812', () => {
    const query = `insert into d select number, number from numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3813', () => {
    const query = `insert into has_final_mark select number, number from numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3814', () => {
    const query = `insert into t values ('2019-01-01', 'test1'), ('2019-02-01', 'test2'), ('2019-03-01', 'test3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3815', () => {
    const query = `insert into d values ('2021-10-24 10:00:00', 10), ('2021-10-25 10:00:00', 10), ('2021-10-26 10:00:00', 10), ('2021-10-27 10:00:00', 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3816', () => {
    const query = `insert into test select number, number from numbers(1e3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3817', () => {
    const query = `insert into tp values (1, 2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3818', () => {
    const query = `INSERT INTO t0(c0) VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3819', () => {
    const query = `insert into t1 values (-1), (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3820', () => {
    const query = `insert into tp select number%3, generateUUIDv4(), 1 from numbers(300);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3821', () => {
    const query = `insert into test values ('a', 'x') ('a', 'y') ('b', 'x') ('b', 'y');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3822', () => {
    const query = `insert into data_01709 values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3823', () => {
    const query = `insert into data_01709 values (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3824', () => {
    const query = `insert into data_01709 values (3); -- { serverError TOO_MANY_PARTS } drop table data_01709;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3825', () => {
    const query = `insert into t values (-1, -1, -1, -1), (-2, -2, -2, -2), (-3, -3, -3, -3), (-4, -4, -4, -4), (-5, -5, -5, -5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3826', () => {
    const query = `INSERT INTO agg_table SELECT toDateTime('2020-10-01 19:20:30'), 'hello', ([any(number)], sum(number)), sum(number), sumMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3827', () => {
    const query = `insert into tp_1 select number, number from numbers(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3828', () => {
    const query = `INSERT INTO 01686_test SELECT number, format('Hello, world ({})', toString(number)) FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3829', () => {
    const query = `INSERT INTO x_dist SELECT * FROM numbers(10) settings insert_shard_id = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3830', () => {
    const query = `INSERT INTO y_dist SELECT * FROM numbers(10) settings insert_shard_id = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3831', () => {
    const query = `INSERT INTO x_dist SELECT * FROM numbers(10, 10) settings insert_shard_id = 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3832', () => {
    const query = `INSERT INTO y_dist SELECT * FROM numbers(10, 10) settings insert_shard_id = 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3833', () => {
    const query = `INSERT INTO x_dist SELECT * FROM numbers(10); -- { serverError STORAGE_REQUIRES_PARAMETER } INSERT INTO y_dist SELECT * FROM numbers(10); -- { serverError STORAGE_REQUIRES_PARAMETER }
INSERT INTO x_dist SELECT * FROM numbers(10) settings insert_shard_id = 3; -- { serverError INVALID_SHARD_ID }
INSERT INTO y_dist SELECT * FROM numbers(10) settings insert_shard_id = 3; -- { serverError INVALID_SHARD_ID }
DROP TABLE x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3834', () => {
    const query = `INSERT INTO 01681_database_for_flat_dictionary.simple_key_simple_attributes_source_table VALUES(0, 'value_0', 'value_second_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3835', () => {
    const query = `INSERT INTO 01681_database_for_flat_dictionary.simple_key_simple_attributes_source_table VALUES(1, 'value_1', 'value_second_1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3836', () => {
    const query = `INSERT INTO 01681_database_for_flat_dictionary.simple_key_simple_attributes_source_table VALUES(2, 'value_2', 'value_second_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3837', () => {
    const query = `INSERT INTO 01681_database_for_flat_dictionary.simple_key_complex_attributes_source_table VALUES(0, 'value_0', 'value_second_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3838', () => {
    const query = `INSERT INTO 01681_database_for_flat_dictionary.simple_key_complex_attributes_source_table VALUES(1, 'value_1', NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3839', () => {
    const query = `INSERT INTO 01681_database_for_flat_dictionary.simple_key_complex_attributes_source_table VALUES(2, 'value_2', 'value_second_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3840', () => {
    const query = `INSERT INTO 01681_database_for_flat_dictionary.simple_key_hierarchy_table VALUES (1, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3841', () => {
    const query = `INSERT INTO 01681_database_for_flat_dictionary.simple_key_hierarchy_table VALUES (2, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3842', () => {
    const query = `INSERT INTO 01681_database_for_flat_dictionary.simple_key_hierarchy_table VALUES (3, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3843', () => {
    const query = `INSERT INTO 01681_database_for_flat_dictionary.simple_key_hierarchy_table VALUES (4, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3844', () => {
    const query = `INSERT INTO dist_01683 VALUES (1),(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3845', () => {
    const query = `INSERT INTO encryption_test VALUES (1, 'Some plaintext');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3846', () => {
    const query = `INSERT INTO 01682_database_for_cache_dictionary.complex_key_simple_attributes_source_table VALUES(0, 'id_key_0', 'value_0', 'value_second_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3847', () => {
    const query = `INSERT INTO 01682_database_for_cache_dictionary.complex_key_simple_attributes_source_table VALUES(1, 'id_key_1', 'value_1', 'value_second_1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3848', () => {
    const query = `INSERT INTO 01682_database_for_cache_dictionary.complex_key_simple_attributes_source_table VALUES(2, 'id_key_2', 'value_2', 'value_second_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3849', () => {
    const query = `INSERT INTO 01682_database_for_cache_dictionary.complex_key_complex_attributes_source_table VALUES(0, 'id_key_0', 'value_0', 'value_second_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3850', () => {
    const query = `INSERT INTO 01682_database_for_cache_dictionary.complex_key_complex_attributes_source_table VALUES(1, 'id_key_1', 'value_1', NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3851', () => {
    const query = `INSERT INTO 01682_database_for_cache_dictionary.complex_key_complex_attributes_source_table VALUES(2, 'id_key_2', 'value_2', 'value_second_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3852', () => {
    const query = `INSERT INTO 01681_database_for_cache_dictionary.simple_key_simple_attributes_source_table VALUES(0, 'value_0', 'value_second_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3853', () => {
    const query = `INSERT INTO 01681_database_for_cache_dictionary.simple_key_simple_attributes_source_table VALUES(1, 'value_1', 'value_second_1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3854', () => {
    const query = `INSERT INTO 01681_database_for_cache_dictionary.simple_key_simple_attributes_source_table VALUES(2, 'value_2', 'value_second_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3855', () => {
    const query = `INSERT INTO 01681_database_for_cache_dictionary.simple_key_complex_attributes_source_table VALUES(0, 'value_0', 'value_second_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3856', () => {
    const query = `INSERT INTO 01681_database_for_cache_dictionary.simple_key_complex_attributes_source_table VALUES(1, 'value_1', NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3857', () => {
    const query = `INSERT INTO 01681_database_for_cache_dictionary.simple_key_complex_attributes_source_table VALUES(2, 'value_2', 'value_second_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3858', () => {
    const query = `INSERT INTO 01681_database_for_cache_dictionary.simple_key_hierarchy_table VALUES (1, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3859', () => {
    const query = `INSERT INTO 01681_database_for_cache_dictionary.simple_key_hierarchy_table VALUES (2, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3860', () => {
    const query = `INSERT INTO 01681_database_for_cache_dictionary.simple_key_hierarchy_table VALUES (3, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3861', () => {
    const query = `INSERT INTO 01681_database_for_cache_dictionary.simple_key_hierarchy_table VALUES (4, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3862', () => {
    const query = `INSERT INTO bloom_filter_nullable_index VALUES (1, 'test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3863', () => {
    const query = `INSERT INTO bloom_filter_nullable_index VALUES (2, 'test2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3864', () => {
    const query = `INSERT INTO nullable_string_value VALUES ('test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3865', () => {
    const query = `INSERT INTO date_table VALUES(1, toDate('2019-05-05'), toDate('2019-05-20'), 0.33);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3866', () => {
    const query = `INSERT INTO date_table VALUES(1, toDate('2019-05-21'), toDate('2019-05-30'), 0.42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3867', () => {
    const query = `INSERT INTO date_table VALUES(2, toDate('2019-05-21'), toDate('2019-05-30'), 0.46);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3868', () => {
    const query = `INSERT INTO date_table VALUES(2, toDate('2019-05-21'), toDate('2019-05-30'), NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3869', () => {
    const query = `INSERT INTO test_01676.dict_data VALUES (2,20), (3,30), (4,40), (5,50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3870', () => {
    const query = `INSERT INTO test_01676.table (x) VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3871', () => {
    const query = `INSERT INTO test_01676.table VALUES (toUInt64(3), toUInt64(15));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3872', () => {
    const query = `INSERT INTO test_01676.table (x) VALUES (toInt64(4));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3873', () => {
    const query = `INSERT INTO defaults values ('<common tag>hello, world<tag>'), ('<script desc=content> some content </script>'), ('<![CDATA[hello, world]]>'), ('white space    collapse');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3874', () => {
    const query = `INSERT INTO t_filter SELECT toString(number), ['foo', 'bar'], number, toUInt8(number) FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3875', () => {
    const query = `INSERT INTO table1 VALUES ('a', '2018-01-01') ('b', '2018-01-01') ('c', '2018-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3876', () => {
    const query = `INSERT INTO table2 VALUES ('D', 'd', '2018-01-01') ('B', 'b', '2018-01-01') ('C', 'c', '2018-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3877', () => {
    const query = `INSERT INTO group_bitmap_data_test SELECT '2019-01-01',
1,
number
FROM numbers(1, 50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3878', () => {
    const query = `INSERT INTO group_bitmap_data_test SELECT '2019-01-02',
1,
number
FROM numbers(11, 60);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3879', () => {
    const query = `INSERT INTO group_bitmap_data_test SELECT '2019-01-03',
2,
number
FROM numbers(1, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3880', () => {
    const query = `INSERT INTO test VALUES (1, 2, -0.0001, 1.5, 0.5) (-2, 0, 2.5, -4, -5) (4, 5, 5, 0, 7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3881', () => {
    const query = `INSERT INTO neighbor_test VALUES (1, 'String 1', 'String 1'), (2, 'String 1', 'String 1'), (3, 'String 2', 'String 2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3882', () => {
    const query = `insert into dist_01670 select * from numbers(1) settings prefer_localhost_replica=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3883', () => {
    const query = `insert into dist_01670 select * from numbers(1) settings prefer_localhost_replica=0; -- { serverError DISTRIBUTED_TOO_MANY_PENDING_BYTES } system flush distributed dist_01670;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3884', () => {
    const query = `INSERT INTO database_dictionary_test_key_expression.test_for_dictionary VALUES ('Test1'), ('Test2'), ('Test3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3885', () => {
    const query = `INSERT INTO test VALUES ('Hello, world!');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3886', () => {
    const query = `INSERT INTO test ("\\\\") VALUES ('Hello, world!');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3887', () => {
    const query = `INSERT INTO test (x) VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3888', () => {
    const query = `INSERT INTO test_r1 ("\\\\") VALUES ('\\\\');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3889', () => {
    const query = `INSERT INTO test ("0") SELECT 'Hello, world!';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3890', () => {
    const query = `INSERT INTO test ("0") VALUES ('Hello, world!');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3891', () => {
    const query = `INSERT INTO test_r1 SELECT * FROM test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3892', () => {
    const query = `INSERT INTO data_01655 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3893', () => {
    const query = `INSERT INTO \`tab\` VALUES (toDate('2017-09-13'), toDateTime('2017-09-13 19:10:22', 'UTC'), toDateTime64('2017-09-13 19:10:22.123456', 6, 'UTC'), '2017-09-13', '2017-09-13 19:10:22', '2017-09-13 19:10:22.123456', 'foo');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3894', () => {
    const query = `INSERT INTO \`tab\` VALUES (toDate('2017-09-24'), toDateTime('2017-09-24 12:05:34', 'UTC'), toDateTime64('2017-09-24 12:05:34.123456', 6, 'UTC'), '2017-09-24', '2017-09-24 12:05:34', '2017-09-24 12:05:34.123456', 'bar');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3895', () => {
    const query = `INSERT INTO \`tab\` VALUES (toDate('2018-01-29'), toDateTime('2018-01-29 02:09:48', 'UTC'), toDateTime64('2018-01-29 02:09:48.123456', 6, 'UTC'), '2018-01-29', '2018-01-29 02:09:48', '2018-01-29 02:09:48.123456', 'qaz');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3896', () => {
    const query = `INSERT INTO \`tab\` VALUES (toDate('2019-02-21'), toDateTime('2019-02-21 15:07:43', 'UTC'), toDateTime64('2019-02-21 15:07:43.123456', 6, 'UTC'), '2019-02-21', '2019-02-21 15:07:43', '2019-02-21 15:07:43.123456', 'qux');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3897', () => {
    const query = `insert into tab2 values (2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3898', () => {
    const query = `insert into tab2 values (6, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3899', () => {
    const query = `insert into tab3 values (2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3900', () => {
    const query = `insert into tab3 values (5, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3901', () => {
    const query = `insert into tab3 values (100, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3902', () => {
    const query = `INSERT INTO data_01660 VALUES (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3903', () => {
    const query = `INSERT INTO data_01660 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3904', () => {
    const query = `insert into tab1 values (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3905', () => {
    const query = `insert into tab2 values (998, 999);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3906', () => {
    const query = `insert into tab3 values (1998, 1999);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3907', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:01',1,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3908', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:02',1,'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3909', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:03',1,'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3910', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:04',1,'D');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3911', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:01',2,'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3912', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:02',2,'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3913', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:03',2,'D');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3914', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:04',2,'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3915', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:01',3,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3916', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:02',3,'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3917', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:01',4,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3918', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:02',4,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3919', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:03',4,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3920', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:04',4,'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3921', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:05',4,'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3922', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:01',5,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3923', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:02',5,'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3924', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:03',5,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3925', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:04',5,'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3926', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:01',6,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3927', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:02',6,'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3928', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:03',6,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3929', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:04',6,'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3930', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:05',6,'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3931', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:01',10,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3932', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:02',10,'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3933', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:02',10,NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3934', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:03',10,'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3935', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:04',10,'D');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3936', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:01',11,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3937', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:01',11,'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3938', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:01',11,'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3939', () => {
    const query = `INSERT INTO test_sequenceNextNode_Nullable values ('2000-01-02 09:00:01',11,'D');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3940', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:01',1,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3941', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:02',1,'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3942', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:03',1,'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3943', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:04',1,'D');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3944', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:01',2,'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3945', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:02',2,'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3946', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:03',2,'D');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3947', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:04',2,'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3948', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:01',3,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3949', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:02',3,'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3950', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:01',4,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3951', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:02',4,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3952', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:03',4,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3953', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:04',4,'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3954', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:05',4,'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3955', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:01',5,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3956', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:02',5,'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3957', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:03',5,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3958', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:04',5,'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3959', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:01',6,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3960', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:02',6,'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3961', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:03',6,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3962', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:04',6,'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3963', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:05',6,'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3964', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:01',10,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3965', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:02',10,'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3966', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:03',10,'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3967', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:04',10,'D');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3968', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:01',11,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3969', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:01',11,'B');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3970', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:01',11,'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3971', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:01',11,'D');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3972', () => {
    const query = `INSERT INTO test_sequenceNextNode values ('2000-01-02 09:00:01',12,'A');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3973', () => {
    const query = `INSERT INTO test_base_condition values ('2000-01-02 09:00:01',1,'A','1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3974', () => {
    const query = `INSERT INTO test_base_condition values ('2000-01-02 09:00:02',1,'B','2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3975', () => {
    const query = `INSERT INTO test_base_condition values ('2000-01-02 09:00:03',1,'C','3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3976', () => {
    const query = `INSERT INTO test_base_condition values ('2000-01-02 09:00:04',1,'D','4');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3977', () => {
    const query = `INSERT INTO test_base_condition values ('2000-01-02 09:00:01',2,'D','4');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3978', () => {
    const query = `INSERT INTO test_base_condition values ('2000-01-02 09:00:02',2,'C','3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3979', () => {
    const query = `INSERT INTO test_base_condition values ('2000-01-02 09:00:03',2,'B','2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3980', () => {
    const query = `INSERT INTO test_base_condition values ('2000-01-02 09:00:04',2,'A','1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3981', () => {
    const query = `INSERT INTO test_base_condition values ('2000-01-02 09:00:01',3,'B','10');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3982', () => {
    const query = `INSERT INTO test_base_condition values ('2000-01-02 09:00:02',3,'B','2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3983', () => {
    const query = `INSERT INTO test_base_condition values ('2000-01-02 09:00:03',3,'D','3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3984', () => {
    const query = `INSERT INTO test_base_condition values ('2000-01-02 09:00:04',3,'C','4');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3985', () => {
    const query = `insert into table_map values ({'name':'zhangsan', 'age':'10'}, 'name', ['name', 'age'], ['zhangsan', '10']), ({'name':'lisi', 'gender':'female'},'age',['name', 'gender'], ['lisi', 'female']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3986', () => {
    const query = `insert into table_map select map(number, number), number, number, [number, number, number], [number*2, number*3, number*4] from numbers(1000, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3987', () => {
    const query = `INSERT INTO perf_lc_num (num) SELECT toUInt8(number) FROM numbers(10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3988', () => {
    const query = `INSERT INTO perf_lc_num (num) SELECT toUInt8(number) FROM numbers(10000000, 20000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3989', () => {
    const query = `INSERT INTO xp SELECT '2020-01-01', number, '' FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3990', () => {
    const query = `INSERT INTO trace_log values ('2020-10-06','2020-10-06 13:43:39','2020-10-06 13:43:39.208819',1601981019208819975,54441,'Real',20412,'2e8ddf40-48da-4641-8ccc-573dd487753f',[140316350688023,130685338,226362737,224904385,227758790,227742969,227761037,224450136,219847931,219844987,219854151,223212098,223208665,228194329,228227607,257889111,257890159,258775545,258767526,140316350645979,140316343425599],0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3991', () => {
    const query = `insert into test_01640 values (1, '2021-01-01','some');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3992', () => {
    const query = `INSERT INTO partitioned_table VALUES (1, 1, 'A'), (2, 2, 'B'), (3, 3, 'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3993', () => {
    const query = `INSERT INTO partitioned_table VALUES (11, 1, 'AA'), (22, 2, 'BB'), (33, 3, 'CC');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3994', () => {
    const query = `INSERT INTO partitioned_table VALUES (33, 3, 'CC'); -- must be deduplicated SELECT '~~~~parts after deduplication~~~~~';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3995', () => {
    const query = `INSERT INTO partitioned_table VALUES (33, 3, 'CC'); -- mustn't be deduplicated SELECT '~~~~parts after new part without deduplication~~~~~';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3996', () => {
    const query = `insert into alias_key_condition values (1, 2), (3, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3997', () => {
    const query = `INSERT INTO mutations_and_escaping_1648 (d, e) VALUES ('2018-01-01', 'foo');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3998', () => {
    const query = `INSERT INTO mutations_and_escaping_1648 (d, e) VALUES ('2018-01-02', 'bar');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 3999', () => {
    const query = `insert into trend values ('2019-01-28', 1, '2019-01-29 10:00:00', 1004, 'phone') ('2019-01-28', 1, '2019-01-29 10:00:00', 1003, 'phone') ('2019-01-28', 1, '2019-01-28 10:00:00', 1002, 'phone');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4000', () => {
    const query = `insert into trend values ('2019-01-28', 1, '2019-01-29 10:00:00', 1003, 'phone') ('2019-01-28', 1, '2019-01-29 10:00:00', 1004, 'phone') ('2019-01-28', 1, '2019-01-28 10:00:00', 1002, 'phone');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4001', () => {
    const query = `insert into dist_01643 select * from numbers(10) settings prefer_localhost_replica=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4002', () => {
    const query = `insert into rep_fsync_r1 values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4003', () => {
    const query = `insert into rep_fsync_r2 values (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4004', () => {
    const query = `insert into data_01643 values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4005', () => {
    const query = `insert into data_01643 values (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4006', () => {
    const query = `insert into data_01641 select number, toString(number) from numbers(120000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4007', () => {
    const query = `INSERT INTO adaptive_table SELECT number, randomPrintableASCII(if(number BETWEEN 8192-30 AND 8192, 102400, 1)) FROM system.numbers LIMIT 16384;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4008', () => {
    const query = `INSERT INTO distributed SELECT number FROM numbers(256);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4009', () => {
    const query = `INSERT INTO distributed SELECT number FROM numbers(256) WHERE number % 2 = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4010', () => {
    const query = `INSERT INTO distributed SELECT number FROM numbers(256) WHERE number % 2 = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4011', () => {
    const query = `INSERT INTO distributed SELECT number FROM numbers(256) WHERE number < 128;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4012', () => {
    const query = `insert into open_events_tmp select 2, '2020-07-10' from numbers(32);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4013', () => {
    const query = `insert into open_events_tmp select 2, '2020-07-11' from numbers(31);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4014', () => {
    const query = `insert into open_events_tmp select 2, '2020-07-12' from numbers(30);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4015', () => {
    const query = `insert into tracking_events_tmp select 2, '2020-07-09' from numbers(1555);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4016', () => {
    const query = `insert into tracking_events_tmp select 2, '2020-07-10' from numbers(1881);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4017', () => {
    const query = `insert into tracking_events_tmp select 2, '2020-07-11' from numbers(1623);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4018', () => {
    const query = `insert into p values ('2021-01-01', 1, 2), ('2021-01-02', 4, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4019', () => {
    const query = `insert into dt_overflow values('2106-11-11', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4020', () => {
    const query = `insert into dt_overflow values('2106-11-12', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4021', () => {
    const query = `insert into test_smt select id, sumMap(k), sumMapState(k) from (select 2 as id, arrayJoin([([0], [1]), ([0, 25], [-1, toInt64(1)])]) as k) group by id, rowNumberInAllBlocks();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4022', () => {
    const query = `insert into simple_agf_summing_mt select 1 a, groupUniqArrayArrayState([toUInt64(number)]), groupUniqArrayArray([toUInt64(number)]) from numbers(1) group by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4023', () => {
    const query = `insert into simple_agf_summing_mt select 1 a, groupUniqArrayArrayState([toUInt64(number)]), groupUniqArrayArray([toUInt64(number)]) from numbers(2) group by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4024', () => {
    const query = `INSERT INTO simple_agf_aggregating_mt SELECT number % 51 AS a,
minState(number),
min(number),
maxState(number),
max(number),
sumState(number),
sum(number),
sumWithOverflowState(number),
sumWithOverflow(number),
groupBitAndState(number + 111111111),
groupBitAnd(number + 111111111),
groupBitOrState(number + 111111111),
groupBitOr(number + 111111111),
groupBitXorState(number + 111111111),
groupBitXor(number + 111111111),
groupArrayArrayState([toUInt64(number % 1000)]),
groupArrayArray([toUInt64(number % 1000)]),
groupUniqArrayArrayState([toUInt64(number % 500)]),
groupUniqArrayArray([toUInt64(number % 500)]),
sumMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
sumMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
minMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
minMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
maxMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
maxMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13))))
FROM numbers(10000)
GROUP BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4025', () => {
    const query = `INSERT INTO simple_agf_aggregating_mt SELECT number % 1151 AS a,
minState(number),
min(number),
maxState(number),
max(number),
sumState(number),
sum(number),
sumWithOverflowState(number),
sumWithOverflow(number),
groupBitAndState(number + 111111111),
groupBitAnd(number + 111111111),
groupBitOrState(number + 111111111),
groupBitOr(number + 111111111),
groupBitXorState(number + 111111111),
groupBitXor(number + 111111111),
groupArrayArrayState([toUInt64(number % 1000)]),
groupArrayArray([toUInt64(number % 1000)]),
groupUniqArrayArrayState([toUInt64(number % 500)]),
groupUniqArrayArray([toUInt64(number % 500)]),
sumMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
sumMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
minMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
minMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
maxMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
maxMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13))))
FROM numbers(10000)
GROUP BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4026', () => {
    const query = `INSERT INTO simple_agf_aggregating_mt SELECT number % 11151 AS a,
minState(number),
min(number),
maxState(number),
max(number),
sumState(number),
sum(number),
sumWithOverflowState(number),
sumWithOverflow(number),
groupBitAndState((number % 3) + 111111110),
groupBitAnd((number % 3) + 111111110),
groupBitOrState(number + 111111111),
groupBitOr(number + 111111111),
groupBitXorState(number + 111111111),
groupBitXor(number + 111111111),
groupArrayArrayState([toUInt64(number % 100)]),
groupArrayArray([toUInt64(number % 100)]),
groupUniqArrayArrayState([toUInt64(number % 50)]),
groupUniqArrayArray([toUInt64(number % 50)]),
sumMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
sumMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
minMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
minMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
maxMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
maxMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13))))
FROM numbers(10000)
GROUP BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4027', () => {
    const query = `INSERT INTO simple_agf_summing_mt SELECT number % 51 AS a,
minState(number),
min(number),
maxState(number),
max(number),
sumState(number),
sum(number),
sumWithOverflowState(number),
sumWithOverflow(number),
groupBitAndState(number + 111111111),
groupBitAnd(number + 111111111),
groupBitOrState(number + 111111111),
groupBitOr(number + 111111111),
groupBitXorState(number + 111111111),
groupBitXor(number + 111111111),
groupArrayArrayState([toUInt64(number % 1000)]),
groupArrayArray([toUInt64(number % 1000)]),
groupUniqArrayArrayState([toUInt64(number % 500)]),
groupUniqArrayArray([toUInt64(number % 500)]),
sumMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
sumMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
minMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
minMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
maxMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
maxMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13))))
FROM numbers(10000)
GROUP BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4028', () => {
    const query = `INSERT INTO simple_agf_summing_mt SELECT number % 1151 AS a,
minState(number),
min(number),
maxState(number),
max(number),
sumState(number),
sum(number),
sumWithOverflowState(number),
sumWithOverflow(number),
groupBitAndState(number + 111111111),
groupBitAnd(number + 111111111),
groupBitOrState(number + 111111111),
groupBitOr(number + 111111111),
groupBitXorState(number + 111111111),
groupBitXor(number + 111111111),
groupArrayArrayState([toUInt64(number % 1000)]),
groupArrayArray([toUInt64(number % 1000)]),
groupUniqArrayArrayState([toUInt64(number % 500)]),
groupUniqArrayArray([toUInt64(number % 500)]),
sumMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
sumMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
minMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
minMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
maxMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
maxMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13))))
FROM numbers(10000)
GROUP BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4029', () => {
    const query = `INSERT INTO simple_agf_summing_mt SELECT number % 11151 AS a,
minState(number),
min(number),
maxState(number),
max(number),
sumState(number),
sum(number),
sumWithOverflowState(number),
sumWithOverflow(number),
groupBitAndState((number % 3) + 111111110),
groupBitAnd((number % 3) + 111111110),
groupBitOrState(number + 111111111),
groupBitOr(number + 111111111),
groupBitXorState(number + 111111111),
groupBitXor(number + 111111111),
groupArrayArrayState([toUInt64(number % 100)]),
groupArrayArray([toUInt64(number % 100)]),
groupUniqArrayArrayState([toUInt64(number % 50)]),
groupUniqArrayArray([toUInt64(number % 50)]),
sumMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
sumMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
minMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
minMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
maxMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
maxMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13))))
FROM numbers(10000)
GROUP BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4030', () => {
    const query = `INSERT INTO index_append_test_test VALUES (1, 10, 1), (2, 20, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4031', () => {
    const query = `INSERT INTO column_swap_test_test VALUES (1, 'cat', 1), (2, 'dog', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4032', () => {
    const query = `INSERT INTO column_swap_test_test SELECT number AS i, format('test {} kek {}', toString(number), toString(number + 10))  AS a, 1 AS b FROM system.numbers LIMIT 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4033', () => {
    const query = `INSERT INTO column_swap_test_test SELECT number AS i, toString(number) AS a, format('test {} kek {}', toString(number), toString(number + 10)) b FROM system.numbers LIMIT 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4034', () => {
    const query = `INSERT INTO t_bad_constraint SELECT number, randomPrintableASCII(100) FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4035', () => {
    const query = `INSERT INTO ttl_where SELECT toDate('2000-10-10'), number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4036', () => {
    const query = `INSERT INTO ttl_where SELECT toDate('1970-10-10'), number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4037', () => {
    const query = `INSERT INTO ttl_group_by SELECT toDate('2000-10-10'), number, number FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4038', () => {
    const query = `INSERT INTO ttl_group_by SELECT toDate('1970-10-10'), number, number FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4039', () => {
    const query = `insert into table function file("data1622.json", "TSV", "value String") VALUES ('{"a":1}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4040', () => {
    const query = `INSERT INTO t_constraints_where VALUES (1, 7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4041', () => {
    const query = `INSERT INTO constraint_test_assumption (URL, a) VALUES ('1', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4042', () => {
    const query = `INSERT INTO constraint_test_assumption (URL, a) VALUES ('2', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4043', () => {
    const query = `INSERT INTO constraint_test_assumption (URL, a) VALUES ('bigmir.net', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4044', () => {
    const query = `INSERT INTO constraint_test_assumption (URL, a) VALUES ('3', 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4045', () => {
    const query = `INSERT INTO constraint_test_transitivity (a, b, c, d) VALUES (1, 2, 3, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4046', () => {
    const query = `INSERT INTO constraint_test_strong_connectivity (a, b, c, d) VALUES ('1', '2', '3', '4');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4047', () => {
    const query = `INSERT INTO constraint_test_transitivity2 (a, b, c, d) VALUES ('1', '2', '3', '4');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4048', () => {
    const query = `INSERT INTO constraint_test_transitivity3 (a, b, c) VALUES (4, 0, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4049', () => {
    const query = `INSERT INTO constraint_test_constants_repl (a, b, c, d) VALUES (1, 2, 3, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4050', () => {
    const query = `INSERT INTO constraint_test_constants (a, b, c) VALUES (0, 0, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4051', () => {
    const query = `INSERT INTO words SELECT * FROM generateRandom('i Int, word String',1,10) LIMIT 1 BY i LIMIT 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4052', () => {
    const query = `INSERT INTO zstd_1_00 SELECT * FROM words;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4053', () => {
    const query = `INSERT INTO zstd_1_24 SELECT * FROM words;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4054', () => {
    const query = `INSERT INTO zstd_9_00 SELECT * FROM words;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4055', () => {
    const query = `INSERT INTO zstd_9_24 SELECT * FROM words;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4056', () => {
    const query = `insert into test_byte_size_number0 values(1, 8, 16, 32, 64, 256, -8, -16, -32, -64, -128, -256, 32.32, 64.64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4057', () => {
    const query = `insert into test_byte_size_number0 values(2, 8, 16, 32, 64, 256, -8, -16, -32, -64, -128, -256, 32.32, 64.64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4058', () => {
    const query = `insert into test_byte_size_number1 values(1, '2020-01-01', '2020-01-01 01:02:03', '2020-02-02 01:02:03', 'a', 'ck', 32.32, 64.64, 128.128, 256.256, generateUUIDv4());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4059', () => {
    const query = `insert into test_byte_size_number1 values(2, '2020-01-01', '2020-01-01 01:02:03', '2020-02-02 01:02:03', 'a', 'ck', 32.32, 64.64, 128.128, 256.256, generateUUIDv4());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4060', () => {
    const query = `insert into test_byte_size_string values(1, '', 'a', '', 'abcde');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4061', () => {
    const query = `insert into test_byte_size_string values(2, 'abced', '', 'abcde', '');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4062', () => {
    const query = `insert into test_byte_size_array values(1, [], [], [], [], [], [], []);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4063', () => {
    const query = `insert into test_byte_size_array values(2, [1], [-1], [256], [1.1], [1.1], ['2020-01-01'], ['61f0c404-5cb3-11e7-907b-a6006ad3dba0']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4064', () => {
    const query = `insert into test_byte_size_array values(3, [1,1], [-1,-1], [256,256], [1.1,1.1], [1.1,1.1], ['2020-01-01','2020-01-01'], ['61f0c404-5cb3-11e7-907b-a6006ad3dba0','61f0c404-5cb3-11e7-907b-a6006ad3dba0']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4065', () => {
    const query = `insert into test_byte_size_array values(4, [1,1,1], [-1,-1,-1], [256,256,256], [1.1,1.1,1.1], [1.1,1.1,1.1], ['2020-01-01','2020-01-01','2020-01-01'], ['61f0c404-5cb3-11e7-907b-a6006ad3dba0','61f0c404-5cb3-11e7-907b-a6006ad3dba0','61f0c404-5cb3-11e7-907b-a6006ad3dba0']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4066', () => {
    const query = `insert into test_byte_size_complex_array values(1, [], [[]], [], [[]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4067', () => {
    const query = `insert into test_byte_size_complex_array values(2, [1,2], [[], [1,2]], [''], [[], ['']]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4068', () => {
    const query = `insert into test_byte_size_complex_array values(3, [0,256], [[], [1,2], [0,256]], ['','a'], [[], [''], ['','a']]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4069', () => {
    const query = `insert into test_byte_size_complex_array values(4, [256,65536], [[], [1,2], [0,256], [256,65536]], ['','a','abced'], [[], [''], ['','a'], ['','a','abced']]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4070', () => {
    const query = `insert into test_byte_size_other values(1, NULL, NULL, tuple(1, NULL), '');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4071', () => {
    const query = `insert into test_byte_size_other values(2, 1, 'a', tuple(1, 'a'), 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4072', () => {
    const query = `insert into test_byte_size_other values(3, 256, 'abcde', tuple(256, 'abcde'), 'abcde');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4073', () => {
    const query = `insert into test_byte_size_more_complex values(1, []);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4074', () => {
    const query = `insert into test_byte_size_more_complex values(2, [tuple(NULL, [])]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4075', () => {
    const query = `insert into test_byte_size_more_complex values(3, [tuple('a', [])]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4076', () => {
    const query = `insert into test_byte_size_more_complex values(4, [tuple('a', [tuple(NULL, 'a')])]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4077', () => {
    const query = `insert into test_byte_size_more_complex values(5, [tuple('a', [tuple(NULL, 'a'), tuple(NULL, 'a')])]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4078', () => {
    const query = `insert into test_byte_size_more_complex values(6, [tuple(NULL, []), tuple('a', []), tuple('a', [tuple(NULL, 'a')]), tuple('a', [tuple(NULL, 'a'), tuple(NULL, 'a')])]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4079', () => {
    const query = `INSERT INTO sum_map_overflow VALUES ([1], [255]), ([1], [2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4080', () => {
    const query = `insert into ay values(40, 60);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4081', () => {
    const query = `insert into ay values(40, 50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4082', () => {
    const query = `insert into ay values(20, 30);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4083', () => {
    const query = `insert into ay values(20, 30), (40, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4084', () => {
    const query = `insert into bad_date_time values('2020-12-20 20:59:52', 1),  ('2020-12-20 21:59:52', 1),  ('2020-12-20 01:59:52', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4085', () => {
    const query = `insert into distr select number from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4086', () => {
    const query = `INSERT INTO table_with_lc_key VALUES(1, 'hello', 'world');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4087', () => {
    const query = `INSERT INTO table_with_string_key VALUES(1, 'hello', 'world');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4088', () => {
    const query = `INSERT INTO wide_to_comp SELECT number, number, number FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4089', () => {
    const query = `INSERT INTO skip_idx_comp_parts SELECT number, number FROM numbers(200);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4090', () => {
    const query = `INSERT INTO distinct_two_level SELECT 1546300800000, 'test.com', concat('foo', toString(number % 10000)) from numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4091', () => {
    const query = `INSERT INTO distinct_two_level SELECT 1546300800000, concat('test.com', toString(number / 10000)) , concat('foo', toString(number % 10000)) from numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4092', () => {
    const query = `INSERT INTO adaptive_table SELECT number, if(number > 700, randomPrintableASCII(102400), randomPrintableASCII(1)) FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4093', () => {
    const query = `INSERT INTO table_with_column_ttl VALUES (now() - INTERVAL 4 MONTH, 2, 45);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4094', () => {
    const query = `INSERT INTO table_with_column_ttl VALUES (now() - INTERVAL 10 MONTH, 3, 27);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4095', () => {
    const query = `INSERT INTO t SELECT number,
if(number < (8129 * 1024), arrayStringConcat(arrayMap(x -> toString(x), range(number % 128)), ' '), '')
FROM numbers_mt((8129 * 1024) * 3) settings max_insert_threads=8, max_rows_to_read=0, max_memory_usage='10Gi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4096', () => {
    const query = `INSERT INTO too_many_parts SELECT * FROM numbers(10) SETTINGS max_insert_threads=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4097', () => {
    const query = `INSERT INTO too_many_parts SELECT * FROM numbers(10); -- { serverError TOO_MANY_PARTS } DROP TABLE too_many_parts;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4098', () => {
    const query = `INSERT INTO test01603(f64) SELECT 1 / (number + 1) FROM system.numbers LIMIT 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4099', () => {
    const query = `INSERT INTO runningConcurrency_test VALUES ('2020-12-01', '2020-12-10'), ('2020-12-02', '2020-12-10'), ('2020-12-03', '2020-12-12'), ('2020-12-10', '2020-12-12'), ('2020-12-13', '2020-12-20');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4100', () => {
    const query = `INSERT INTO runningConcurrency_test VALUES ('2020-12-01 00:00:00', '2020-12-01 00:59:59'), ('2020-12-01 00:30:00', '2020-12-01 00:59:59'), ('2020-12-01 00:40:00', '2020-12-01 01:30:30'), ('2020-12-01 01:10:00', '2020-12-01 01:30:30'), ('2020-12-01 01:50:00', '2020-12-01 01:59:59');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4101', () => {
    const query = `INSERT INTO runningConcurrency_test VALUES ('2020-12-01 00:00:00.000', '2020-12-01 00:00:00.100'), ('2020-12-01 00:00:00.010', '2020-12-01 00:00:00.100'), ('2020-12-01 00:00:00.020', '2020-12-01 00:00:00.200'), ('2020-12-01 00:00:00.150', '2020-12-01 00:00:00.200'), ('2020-12-01 00:00:00.250', '2020-12-01 00:00:00.300');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4102', () => {
    const query = `INSERT INTO FUNCTION cluster('test_shard_localhost', currentDatabase(), x) SELECT * FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4103', () => {
    const query = `INSERT INTO FUNCTION cluster('test_shard_localhost', currentDatabase(), x, rand()) SELECT * FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4104', () => {
    const query = `INSERT INTO FUNCTION cluster('test_cluster_two_shards_localhost', currentDatabase(), x) SELECT * FROM numbers(10); --{ serverError STORAGE_REQUIRES_PARAMETER } INSERT INTO FUNCTION cluster('test_cluster_two_shards_localhost', currentDatabase(), x, rand()) SELECT * FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4105', () => {
    const query = `INSERT INTO FUNCTION remote('127.0.0.{1,2}', currentDatabase(), y, 'default') SELECT * FROM numbers(10); -- { serverError STORAGE_REQUIRES_PARAMETER } INSERT INTO FUNCTION remote('127.0.0.{1,2}', currentDatabase(), y, 'default', rand()) SELECT * FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4106', () => {
    const query = `INSERT INTO test_aggregation VALUES ([1,2,3,4,5,6]), ([]), ([1,2,3]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4107', () => {
    const query = `INSERT INTO test1601_detach_permanently_atomic.test_name_reuse SELECT * FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4108', () => {
    const query = `INSERT INTO test1601_detach_permanently_ordinary.test_name_reuse SELECT * FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4109', () => {
    const query = `INSERT INTO test1601_detach_permanently_lazy.test_name_reuse SELECT * FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4110', () => {
    const query = `INSERT INTO select_in_test VALUES (1), (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4111', () => {
    const query = `INSERT INTO select_in_test VALUES (-1), (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4112', () => {
    const query = `INSERT INTO ms SELECT * FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4113', () => {
    const query = `INSERT INTO t VALUES (NULL, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4114', () => {
    const query = `insert into joint VALUES ('00000000-0000-0000-0000-000000000000', 'yo');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4115', () => {
    const query = `insert into t VALUES ('00000000-0000-0000-0000-000000000000', now());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4116', () => {
    const query = `insert into data_01593 select * from numbers_mt(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4117', () => {
    const query = `insert into data_01593 select * from numbers_mt(10) settings max_partitions_per_insert_block=1; -- { serverError TOO_MANY_PARTS } insert into data_01593 select * from numbers_mt(10) settings max_partitions_per_insert_block=1, throw_on_max_partitions_per_insert_block=false;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4118', () => {
    const query = `insert into data_01593 settings max_partitions_per_insert_block=100 select * from numbers_mt(10) settings max_partitions_per_insert_block=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4119', () => {
    const query = `insert into stack select number%99991, number%11, number%1111, toDateTime('2020-01-01 00:00:00')+number/100,
toDateTime('2020-02-01 00:00:00')+number/10, intDiv(number,100)+1
from numbers_mt(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4120', () => {
    const query = `INSERT INTO low_card VALUES ( '1' );`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4121', () => {
    const query = `INSERT INTO replicated_mutations_empty_partitions SETTINGS insert_keeper_fault_injection_probability=0 SELECT number, toString(number) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4122', () => {
    const query = `insert into xp select number, number + 2 from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4123', () => {
    const query = `insert into xp select null, 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4124', () => {
    const query = `insert into realtimebuff (amount,transID,userID,appID,appName,transType,orderSource,nau,fau,transactionType,supplier,fMerchant,bankConnCode,reqDate) values (100, '200312000295032','200223000028708','14', 'Data','1', '20','1', '0','123','abc', '1234a','ZPVBIDV', 1598256583);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4125', () => {
    const query = `insert into insub select number a, a + 2 from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4126', () => {
    const query = `INSERT INTO prewhere_move SELECT number, toString(number) FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4127', () => {
    const query = `INSERT INTO prewhere_move SELECT number, number, number, repeat('a', 1024) FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4128', () => {
    const query = `INSERT INTO t VALUES ('a', 0), ('a', 1), ('b', 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4129', () => {
    const query = `INSERT INTO foo VALUES ('2020-01-01', '2020-01-01 12:00:00', 'test1'), ('2020-01-01', '2020-01-01 13:00:00', 'test2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4130', () => {
    const query = `INSERT INTO bar VALUES ('2020-01-01', 'test2'), ('2020-01-01', 'test3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4131', () => {
    const query = `INSERT INTO replicated_deduplicate_by_columns_r1 VALUES (1, 1001), (1, 1001), (2, 1002), (3, 1003), (4, 1004), (1, 2001), (9, 1002);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4132', () => {
    const query = `INSERT INTO replicated_deduplicate_by_columns_r2 VALUES (1, 1001), (2, 2002), (3, 1003), (4, 1004), (5, 2005), (5, 2005);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4133', () => {
    const query = `INSERT INTO source_data (pk, sk, val) VALUES (0, 0, 0), (0, 0, 0), (1, 1, 2), (1, 1, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4134', () => {
    const query = `INSERT INTO full_duplicates SELECT * FROM source_data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4135', () => {
    const query = `INSERT INTO partial_duplicates SELECT * FROM source_data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4136', () => {
    const query = `insert into test_index values('2020-10-30');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4137', () => {
    const query = `INSERT INTO test_table(timestamp, value) SELECT toDateTime('2020-01-01 12:00:00'), 1 FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4138', () => {
    const query = `INSERT INTO test_table(timestamp, value) SELECT toDateTime('2020-01-02 12:00:00'), 1 FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4139', () => {
    const query = `INSERT INTO test_table(timestamp, value) SELECT toDateTime('2020-01-03 12:00:00'), 1 FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4140', () => {
    const query = `INSERT INTO test_index SELECT * FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4141', () => {
    const query = `insert into pl values ('2020-10-24', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4142', () => {
    const query = `INSERT INTO order_by_const(a, b, c, d) VALUES (1, 1, 101, 1), (1, 2, 102, 1), (1, 3, 103, 1), (1, 4, 104, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4143', () => {
    const query = `INSERT INTO order_by_const(a, b, c, d) VALUES (1, 5, 104, 1), (1, 6, 105, 1), (2, 1, 106, 2), (2, 1, 107, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4144', () => {
    const query = `INSERT INTO order_by_const(a, b, c, d) VALUES (2, 2, 107, 2), (2, 3, 108, 2), (2, 4, 109, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4145', () => {
    const query = `insert into values_01564 values ('f'); -- { clientError CANNOT_PARSE_TEXT } insert into values_01564 values ('f'); -- { clientError CANNOT_PARSE_TEXT }
select 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4146', () => {
    const query = `insert into values_01564 values ('f'); -- { clientError CANNOT_PARSE_TEXT } select nonexistent column; -- { serverError UNKNOWN_IDENTIFIER }
insert into values_01564 this is bad syntax values ('f'); -- { clientError SYNTAX_ERROR }
insert into values_01564 this is bad syntax values ('f'); -- { clientError SYNTAX_ERROR }
select 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4147', () => {
    const query = `insert into values_01564 this is bad syntax values ('f'); -- { clientError SYNTAX_ERROR } select nonexistent column; -- { serverError UNKNOWN_IDENTIFIER }
insert into values_01564 values (11); -- { serverError VIOLATED_CONSTRAINT }
insert into values_01564 values (11); -- { serverError VIOLATED_CONSTRAINT }
select 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4148', () => {
    const query = `insert into values_01564 values (11); -- { serverError VIOLATED_CONSTRAINT } select nonexistent column; -- { serverError UNKNOWN_IDENTIFIER }
insert into values_01564 values (1); select 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4149', () => {
    const query = `INSERT INTO t0(c0, c1) VALUES ("1",1) ; -- { clientError UNKNOWN_IDENTIFIER } INSERT INTO t0(c0, c1) VALUES ('1', 1) ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4150', () => {
    const query = `insert into values_01564 values (11); -- { serverError VIOLATED_CONSTRAINT } drop table t0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4151', () => {
    const query = `INSERT INTO empty2 VALUES (1, 1, '2020-01-01'), (1, 1, '2020-01-01'), (1, -2, '2020-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4152', () => {
    const query = `INSERT INTO replacing_merge_tree VALUES (1, '2020-01-01'), (2, '2020-01-02'), (1, '2020-01-01'), (2, '2020-01-02');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4153', () => {
    const query = `INSERT INTO collapsing_merge_tree VALUES (1, 1, '2020-01-01'), (2, 1, '2020-01-02'), (1, -1, '2020-01-01'), (2, -1, '2020-01-02'), (1, 1, '2020-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4154', () => {
    const query = `INSERT INTO versioned_collapsing_merge_tree VALUES (1, 1, 1, '2020-01-01'), (1, -1, 1, '2020-01-01'), (1, 1, 2, '2020-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4155', () => {
    const query = `INSERT INTO summing_merge_tree VALUES (1, 1, '2020-01-01'), (2, 1, '2020-01-02'), (1, 5, '2020-01-01'), (2, 5, '2020-01-02');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4156', () => {
    const query = `INSERT INTO aggregating_merge_tree VALUES (1, 1, '2020-01-01'), (2, 1, '2020-01-02'), (1, 5, '2020-01-01'), (2, 5, '2020-01-02');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4157', () => {
    const query = `INSERT INTO empty VALUES (1, 1, '2020-01-01'), (1, 1, '2020-01-01'), (1, -2, '2020-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4158', () => {
    const query = `INSERT INTO mann_whitney_test VALUES (310, 0), (195, 0), (530, 0), (155, 0), (530, 0), (245, 0), (385, 0), (450, 0), (465, 0), (545, 0), (170, 0), (180, 0), (125, 0), (180, 0), (230, 0), (75, 0), (430, 0), (480, 0), (495, 0), (295, 0), (116, 1), (171, 1), (176, 1), (421, 1), (111, 1), (326, 1), (481, 1), (111, 1), (346, 1), (441, 1), (261, 1), (411, 1), (206, 1), (521, 1), (456, 1), (446, 1), (296, 1), (51, 1), (426, 1), (261, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4159', () => {
    const query = `INSERT INTO welch_ttest VALUES (27.5, 0), (21.0, 0), (19.0, 0), (23.6, 0), (17.0, 0), (17.9, 0), (16.9, 0), (20.1, 0), (21.9, 0), (22.6, 0), (23.1, 0), (19.6, 0), (19.0, 0), (21.7, 0), (21.4, 0), (27.1, 1), (22.0, 1), (20.8, 1), (23.4, 1), (23.4, 1), (23.5, 1), (25.8, 1), (22.0, 1), (24.8, 1), (20.2, 1), (21.9, 1), (22.1, 1), (22.9, 1), (20.5, 1), (24.4, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4160', () => {
    const query = `INSERT INTO welch_ttest VALUES (30.02, 0), (29.99, 0), (30.11, 0), (29.97, 0), (30.01, 0), (29.99, 0), (29.89, 1), (29.93, 1), (29.72, 1), (29.98, 1), (30.02, 1), (29.98, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4161', () => {
    const query = `INSERT INTO welch_ttest VALUES (0.010268, 0), (0.000167, 0), (0.000167, 0), (0.159258, 1), (0.136278, 1), (0.122389, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4162', () => {
    const query = `INSERT INTO welch_ttest VALUES (14.72789, 0), (9.61661, 0), (13.57615, 0), (3.98392, 0), (11.98889, 0), (10.99422, 0), (5.44792, 0), (20.29346, 0), (7.05926, 0), (9.22732, 0), (12.06847, 0), (13.52612, 0), (8.24597, 0), (9.35245, 0), (10.12297, 0), (15.80624, 0), (13.68613, 0), (10.72729, 0), (5.62078, 0), (6.12229, 0), (6.03801, 0), (8.95585, 0), (24.04613, 0), (9.04757, 0), (2.68263, 0), (15.43935, 0), (2.89423, 0), (4.01423, 0), (4.30568, 0), (11.99948, 0), (8.40574, 0), (10.86642, 0), (9.4266, 0), (-8.12752, 0), (7.91634, 0), (7.3967, 0), (2.26431, 0), (14.20118, 0), (6.68233, 0), (15.46221, 0), (7.88467, 0), (11.20011, 0), (8.92027, 0), (10.27926, 0), (5.14395, 0), (5.62178, 0), (12.84383, 0), (9.98009, 0), (-0.69789, 0), (11.41386, 0), (7.76863, 0), (7.21743, 0), (1.81176, 0), (9.43762, 0), (19.22117, 0), (2.97128, 0), (14.32851, 0), (7.54959, 0), (3.81545, 0), (10.1281, 0), (2.48596, 0), (10.0461, 0), (3.59714, 0), (9.73522, 0), (18.8077, 0), (3.15148, 0), (12.26062, 0), (5.66707, 0), (6.58623, 0), (17.30902, 0), (9.91391, 0), (5.36946, 0), (15.73637, 0), (16.96281, 0), (11.54063, 0), (18.37358, 0), (11.38255, 0), (10.53256, 0), (8.08833, 0), (16.27556, 0), (2.42969, 0), (9.56127, 0), (7.32998, 0), (9.19511, 0), (9.66903, 0), (4.15029, 0), (8.83511, 0), (14.60617, 0), (14.06143, 0), (5.39556, 0), (10.11871, 0), (10.56619, 0), (14.4462, 0), (10.42106, 0), (7.75551, 0), (11.00418, 0), (4.47226, 0), (16.35461, 0), (18.55174, 0), (11.82044, 0), (7.39454, 0), (11.27767, 0), (6.83827, 0), (7.76858, 0), (15.97614, 0), (14.53781, 0), (12.99546, 0), (16.91151, 0), (9.65012, 0), (14.25487, 0), (14.03618, 0), (2.57382, 0), (2.50779, 0), (14.24787, 0), (13.34666, 0), (7.31102, 0), (10.22981, 0), (17.4435, 0), (21.2074, 0), (6.64191, 0), (18.7086, 0), (14.78686, 0), (9.85287, 0), (4.48263, 0), (14.17469, 0), (14.4342, 0), (19.2481, 0), (3.47165, 0), (8.28712, 0), (8.81657, 0), (0.92319, 0), (20.41106, 0), (6.76127, 0), (22.00242, 0), (8.66129, 0), (10.9929, 0), (17.95494, 0), (17.20996, 0), (12.18888, 0), (12.14257, 0), (15.81243, 0), (4.43362, 0), (1.17567, 0), (15.60881, 0), (9.34833, 0), (6.33513, 0), (-0.83095, 0), (12.43268, 0), (6.63207, 0), (11.96877, 0), (14.81029, 0), (21.84876, 0), (3.75896, 0), (6.91307, 0), (13.73015, 0), (8.63753, 0), (15.71679, 0), (1.74565, 0), (9.16895, 0), (5.70685, 0), (5.00117, 0), (13.06888, 0), (7.51204, 0), (15.34885, 0), (5.20264, 0), (8.59043, 0), (6.45619, 0), (14.61979, 0), (11.7075, 0), (14.04901, 0), (4.20525, 0), (15.1733, 0), (3.12934, 0), (8.08049, 0), (15.41273, 0), (16.90751, 0), (5.86893, 0), (7.1086, 0), (4.418, 0), (12.0614, 0), (7.07887, 0), (3.61585, 0), (11.73001, 0), (10.80449, 0), (8.40311, 0), (9.91276, 0), (16.4164, 0), (5.25034, 0), (15.20283, 0), (10.42909, 0), (9.53888, 0), (14.68939, 0), (6.60007, 0), (18.31058, 0), (7.01885, 0), (18.71631, 0), (10.50002, 0), (10.7517, 0), (4.23224, 0), (2.28924, 0), (8.56059, 0), (8.25095, 0), (9.15673, 0), (13.28409, 0), (8.4513, 0), (2.83911, 0), (2.79676, 0), (9.11055, 0), (7.18529, 0), (-4.1258, 0), (5.28306, 0), (6.82757, 0), (10.89035, 0), (5.24822, 0), (11.935, 0), (6.45675, 0), (10.18088, 0), (4.9932, 0), (18.09939, 0), (8.11738, 0), (5.37883, 0), (10.50339, 0), (16.64093, 0), (14.77263, 0), (13.71385, 0), (6.98746, 0), (10.74635, 0), (5.49432, 0), (13.46078, 0), (10.67565, 0), (9.0291, 0), (11.51417, 0), (13.07118, 0), (9.5049, 0), (8.50611, 0), (6.47606, 0), (13.06526, 0), (19.08658, 0), (9.49741, 0), (10.60865, 0), (2.28996, 0), (8.12846, 0), (5.62241, 0), (4.07712, 0), (17.98526, 0), (9.466, 0), (11.38904, 0), (5.91826, 0), (1.52059, 0), (18.79161, 0), (18.20669, 0), (-1.67829, 0), (18.01586, 0), (16.31577, 0), (7.88281, 0), (8.46179, 0), (10.31113, 0), (14.88377, 0), (1.31835, 0), (2.53176, 0), (9.48625, 0), (3.97936, 0), (11.52319, 0), (13.24178, 0), (7.58739, 0), (10.00959, 0), (9.73361, 0), (8.35716, 0), (1.65491, 0), (11.11521, 0), (6.08355, 0), (10.04582, 0), (11.58237, 0), (16.40249, 0), (1.9691, 0), (13.22776, 0), (2.67059, 0), (9.83651, 0), (2.12539, 0), (9.27114, 0), (9.0699, 0), (2.78179, 0), (12.49311, 0), (12.97662, 0), (15.06359, 0), (16.91565, 0), (5.92011, 0), (5.81304, 0), (8.46425, 0), (9.48705, 0), (4.68191, 0), (5.70028, 0), (-0.78798, 0), (10.03442, 0), (15.45433, 0), (9.43845, 0), (3.05825, 0), (6.92126, 0), (14.05905, 0), (19.71579, 0), (15.0131, 0), (4.50386, 0), (1.31061, 0), (10.81197, 0), (14.32942, 0), (9.26469, 0), (7.27679, 0), (22.69295, 0), (12.03763, 0), (7.34876, 0), (16.60689, 0), (7.48786, 0), (15.78602, 0), (17.21048, 0), (13.93482, 0), (9.69911, 0), (12.24315, 0), (10.58131, 0), (19.57006, 0), (9.8856, 0), (11.70302, 0), (7.89864, 0), (12.24831, 0), (16.93707, 0), (9.65467, 0), (4.221, 0), (15.45229, 0), (12.83088, 0), (7.58313, 0), (12.895, 0), (10.02471, 0), (13.36059, 0), (5.07864, 0), (9.72017, 0), (11.05809, 0), (15.28528, 0), (13.99834, 0), (19.26989, 0), (9.41846, 0), (11.65425, 0), (8.49638, 0), (6.38592, 0), (-4.69837, 0), (12.22061, 0), (9.41331, 0), (13.2075, 0), (12.97005, 0), (11.44352, 0), (9.79805, 0), (6.93116, 0), (10.07691, 0), (22.05892, 0), (7.80353, 0), (-2.17276, 0), (0.61509, 0), (8.35842, 0), (17.77108, 0), (14.70841, 0), (1.27992, 0), (15.62699, 0), (9.32914, 0), (15.41866, 0), (10.82009, 0), (3.29902, 0), (9.21998, 0), (7.93845, 0), (10.33344, 0), (12.06399, 0), (5.5308, 0), (8.38727, 0), (18.11104, 0), (8.86565, 0), (19.41825, 0), (9.52376, 0), (3.94552, 0), (9.37587, 0), (15.44954, 0), (15.90527, 0), (13.18927, 0), (7.01646, 0), (9.06005, 0), (9.06431, 0), (5.76006, 0), (9.18705, 0), (-3.48446, 0), (15.89817, 0), (12.94719, 0), (23.69426, 0), (17.47755, 0), (15.61528, 0), (0.54832, 0), (14.32916, 0), (9.55305, 0), (13.79891, 0), (0.82544, 0), (13.34875, 0), (9.07614, 0), (5.19621, 0), (2.1451, 0), (9.87726, 0), (8.45439, 0), (-1.41842, 0), (7.93598, 0), (11.23151, 0), (17.84458, 0), (7.02237, 0), (10.7842, 0), (4.42832, 0), (4.45044, 0), (1.50938, 0), (21.21651, 0), (6.2097, 0), (6.84354, 0), (18.53804, 0), (12.01072, 0), (4.8345, 0), (20.41587, 0), (14.48353, 0), (8.71116, 0), (12.42818, 0), (14.89244, 0), (8.03033, 0), (5.25917, 0), (2.30092, 0), (10.22504, 0), (15.37573, 0), (7.13666, 0), (4.45018, 0), (10.18405, 0), (3.91025, 0), (14.52304, 0), (13.14771, 0), (11.99219, 0), (9.21345, 0), (8.85106, 0), (12.91887, 0), (15.62308, 0), (11.88034, 0), (15.12097, 0), (11.58168, 0), (16.83051, 0), (5.25405, 0), (2.19976, 0), (4.56716, 0), (16.46053, 0), (5.61995, 0), (8.67704, 0), (5.62789, 0), (9.84815, 0), (13.05834, 0), (11.74205, 0), (3.88393, 0), (16.15321, 0), (4.83925, 0), (13.00334, 0), (4.4028, 0), (4.35794, 0), (4.47478, 0), (2.38713, 0), (4.25235, 0), (10.87509, 0), (9.82411, 0), (13.61518, 0), (10.25507, 0), (4.0335, 0), (10.69881, 0), (5.70321, 0), (6.96244, 0), (9.35874, 0), (6.28076, 0), (8.29015, 0), (6.88653, 0), (7.70687, 0), (8.2001, 0), (6.73415, 0), (3.82052, 0), (3.94469, 0), (15.82384, 0), (2.54004, 0), (10.74876, 0), (12.60517, 0), (17.7024, 0), (4.6722, 0), (13.67341, 0), (6.4565, 0), (12.95699, 0), (4.56912, 0), (5.58464, 0), (4.0638, 0), (13.05559, 0), (5.38269, 0), (0.16354, 0), (7.23962, 0), (7.38577, 0), (8.50951, 0), (13.72574, 0), (17.80421, 0), (3.01135, 0), (8.02608, 0), (14.23847, 0), (-8.65656, 1), (22.98234, 1), (23.80821, 1), (13.33939, 1), (-4.05537, 1), (23.5155, 1), (-6.45272, 1), (17.7903, 1), (11.463, 1), (5.28021, 1), (8.39157, 1), (6.02464, 1), (14.43732, 1), (15.76584, 1), (1.54391, 1), (1.24897, 1), (27.1507, 1), (7.71091, 1), (15.71846, 1), (32.97808, 1), (-1.79334, 1), (-9.23439, 1), (11.27838, 1), (0.72703, 1), (18.51557, 1), (9.16619, 1), (17.29624, 1), (-1.30208, 1), (-3.48018, 1), (10.12082, 1), (-8.01318, 1), (-14.22264, 1), (16.58174, 1), (-0.55975, 1), (5.61449, 1), (1.44626, 1), (7.89158, 1), (1.13369, 1), (-0.82609, 1), (12.23365, 1), (12.45443, 1), (14.46915, 1), (13.72627, 1), (18.41459, 1), (29.66702, 1), (1.51619, 1), (10.40078, 1), (3.33266, 1), (6.12036, 1), (11.86553, 1), (6.59422, 1), (22.0948, 1), (1.79623, 1), (14.29513, 1), (19.69162, 1), (-7.98033, 1), (5.48433, 1), (-2.28474, 1), (9.91876, 1), (10.64097, 1), (0.22523, 1), (17.01773, 1), (22.37388, 1), (14.04215, 1), (23.1244, 1), (18.96958, 1), (8.42663, 1), (3.7165, 1), (14.29366, 1), (23.50886, 1), (26.33722, 1), (26.72396, 1), (13.26287, 1), (12.97607, 1), (17.41838, 1), (8.63875, 1), (17.08943, 1), (23.15356, 1), (-4.4965, 1), (7.58895, 1), (26.04074, 1), (6.84245, 1), (20.56287, 1), (3.84735, 1), (-2.76304, 1), (13.1615, 1), (8.21954, 1), (-3.49943, 1), (22.12419, 1), (7.08323, 1), (16.12937, 1), (-0.32672, 1), (16.5942, 1), (7.68977, 1), (11.39484, 1), (-5.11987, 1), (20.87404, 1), (8.01007, 1), (3.26497, 1), (5.61253, 1), (20.69182, 1), (0.0296, 1), (21.904, 1), (22.46572, 1), (3.63685, 1), (-5.10846, 1), (14.86389, 1), (5.47188, 1), (18.44095, 1), (16.71368, 1), (6.36704, 1), (8.82663, 1), (14.6727, 1), (7.98383, 1), (2.65568, 1), (21.45827, 1), (11.77948, 1), (4.71979, 1), (3.17951, 1), (13.90226, 1), (15.50578, 1), (10.8026, 1), (16.91369, 1), (9.90552, 1), (13.87322, 1), (4.12366, 1), (-3.78985, 1), (1.7599, 1), (3.43715, 1), (-3.45246, 1), (23.64571, 1), (-4.96877, 1), (3.93514, 1), (1.49914, 1), (12.71519, 1), (5.11521, 1), (4.79872, 1), (20.89391, 1), (5.363, 1), (8.02765, 1), (14.30804, 1), (11.49002, 1), (14.25281, 1), (7.6573, 1), (15.49686, 1), (3.29327, 1), (2.27236, 1), (12.58104, 1), (19.19128, 1), (15.25901, 1), (6.5221, 1), (10.10965, 1), (12.75249, 1), (16.50977, 1), (-8.6697, 1), (8.28553, 1), (1.44315, 1), (4.65869, 1), (0.98149, 1), (0.16623, 1), (17.66332, 1), (4.35346, 1), (6.52742, 1), (-1.06631, 1), (-5.28454, 1), (14.25583, 1), (8.74058, 1), (1.89553, 1), (-0.92959, 1), (10.30289, 1), (-6.3744, 1), (-8.1706, 1), (10.95369, 1), (4.94384, 1), (28.40568, 1), (3.7004, 1), (2.52363, 1), (4.07997, 1), (7.8849, 1), (17.95409, 1), (16.67021, 1), (11.34377, 1), (-0.07446, 1), (22.00223, 1), (3.31778, 1), (18.50719, 1), (-3.58655, 1), (6.5394, 1), (12.40459, 1), (16.59866, 1), (7.54176, 1), (-1.51044, 1), (12.69758, 1), (2.9842, 1), (2.49187, 1), (2.04113, 1), (-2.46544, 1), (15.18368, 1), (-0.04058, 1), (-0.4127, 1), (10.5526, 1), (12.03982, 1), (12.10923, 1), (11.54954, 1), (-1.18613, 1), (11.30984, 1), (23.54105, 1), (10.67321, 1), (24.09196, 1), (7.5008, 1), (12.52233, 1), (4.30673, 1), (9.35793, 1), (4.44472, 1), (-7.00679, 1), (8.56241, 1), (23.73891, 1), (15.62708, 1), (16.09205, 1), (12.52074, 1), (14.58927, 1), (-4.80187, 1), (8.47964, 1), (7.75477, 1), (12.6893, 1), (7.14147, 1), (12.12654, 1), (12.32334, 1), (7.98909, 1), (3.26652, 1), (20.53684, 1), (32.3369, 1), (19.74911, 1), (-4.62897, 1), (8.26483, 1), (20.88451, 1), (-2.12982, 1), (25.61459, 1), (5.32091, 1), (-4.1196, 1), (7.57937, 1), (21.15847, 1), (6.46355, 1), (7.74846, 1), (19.62636, 1), (28.34629, 1), (26.73919, 1), (20.40427, 1), (3.03378, 1), (10.2537, 1), (7.47745, 1), (10.79184, 1), (3.91962, 1), (19.97973, 1), (18.87711, 1), (12.56157, 1), (11.46033, 1), (3.78661, 1), (-9.45748, 1), (12.06033, 1), (-0.74615, 1), (13.2815, 1), (24.78052, 1), (5.83337, 1), (17.4111, 1), (19.70331, 1), (11.78446, 1), (-1.366, 1), (1.37458, 1), (16.31483, 1), (32.63464, 1), (-3.79736, 1), (19.17984, 1), (-0.27705, 1), (-3.69456, 1), (28.38058, 1), (-1.36876, 1), (-25.63301, 1), (3.58644, 1), (-6.85667, 1), (13.42225, 1), (12.04671, 1), (28.99468, 1), (7.87662, 1), (2.61119, 1), (-3.56022, 1), (1.50022, 1), (14.55836, 1), (9.35831, 1), (16.9366, 1), (29.23126, 1), (15.31386, 1), (13.46112, 1), (7.39667, 1), (11.15599, 1), (9.80499, 1), (22.64923, 1), (8.67693, 1), (18.67335, 1), (-3.19127, 1), (22.94716, 1), (17.86834, 1), (16.98267, 1), (15.91653, 1), (11.79718, 1), (18.50208, 1), (8.90755, 1), (10.44843, 1), (4.67433, 1), (6.82287, 1), (10.82228, 1), (-4.18631, 1), (20.3872, 1), (11.84735, 1), (21.25376, 1), (10.55032, 1), (12.19023, 1), (0.63369, 1), (7.92381, 1), (17.90933, 1), (15.30781, 1), (10.01877, 1), (0.88744, 1), (22.20967, 1), (-4.23117, 1), (21.50819, 1), (11.27421, 1), (-16.23179, 1), (33.43085, 1), (5.15093, 1), (1.34505, 1), (6.027, 1), (-10.43035, 1), (27.45998, 1), (19.24886, 1), (-4.44761, 1), (5.453, 1), (12.73758, 1), (11.2897, 1), (31.032, 1), (7.39168, 1), (11.95245, 1), (26.279, 1), (-1.0255, 1), (10.36675, 1), (11.58439, 1), (27.8405, 1), (13.1707, 1), (31.39133, 1), (27.08301, 1), (-2.14368, 1), (4.08476, 1), (21.5573, 1), (16.69822, 1), (7.69955, 1), (8.32793, 1), (6.49235, 1), (-7.3284, 1), (10.58264, 1), (-6.17006, 1), (34.55782, 1), (10.93221, 1), (44.24299, 1), (14.6224, 1), (-7.42798, 1), (15.52351, 1), (11.33982, 1), (10.46716, 1), (13.0986, 1), (-4.25988, 1), (9.55316, 1), (0.75489, 1), (25.99212, 1), (-0.81401, 1), (3.49551, 1), (22.99402, 1), (10.99628, 1), (23.70223, 1), (2.71482, 1), (22.82309, 1), (31.25686, 1), (4.86318, 1), (-1.06476, 1), (15.10298, 1), (-0.61015, 1), (17.81246, 1), (-1.55788, 1), (18.09709, 1), (9.11271, 1), (9.94682, 1), (-7.33194, 1), (-4.67293, 1), (21.81717, 1), (7.16318, 1), (13.25649, 1), (13.88776, 1), (4.95793, 1), (17.65303, 1), (14.47382, 1), (13.19373, 1), (31.86093, 1), (5.73161, 1), (10.96492, 1), (6.97951, 1), (1.75136, 1), (10.96144, 1), (15.08137, 1), (9.95311, 1), (7.07729, 1), (3.08148, 1), (22.37954, 1), (8.51951, 1), (2.88746, 1), (26.73509, 1), (-2.88939, 1), (-2.82367, 1), (-0.35783, 1), (14.22076, 1), (11.50295, 1), (7.10171, 1), (8.28488, 1), (0.54178, 1), (13.8022, 1), (15.62157, 1), (10.79173, 1), (28.18946, 1), (30.43524, 1), (2.54914, 1), (9.89421, 1), (13.08631, 1), (4.68761, 1), (5.61516, 1), (22.88072, 1), (7.4735, 1), (11.27382, 1), (2.39559, 1), (-3.31889, 1), (9.61957, 1), (23.01381, 1), (-1.23467, 1), (9.07691, 1), (15.78056, 1), (12.28421, 1), (9.44888, 1), (13.16928, 1), (4.33357, 1), (2.21737, 1), (33.17833, 1), (13.25407, 1), (-2.47961, 1), (6.41401, 1), (18.8439, 1), (-4.63375, 1), (-8.2909, 1), (12.18221, 1), (-2.95356, 1), (19.61659, 1), (12.45056, 1), (-4.17198, 1), (21.9641, 1), (11.96416, 1), (12.74573, 1), (10.47873, 1), (12.73295, 1), (11.31373, 1), (9.9827, 1), (5.87138, 1), (4.24372, 1), (-23.72256, 1), (28.41337, 1), (4.88103, 1), (3.61902, 1), (8.93586, 1), (16.40759, 1), (27.84494, 1), (5.6001, 1), (14.51379, 1), (13.5576, 1), (12.92213, 1), (3.90686, 1), (17.07104, 1), (15.84268, 1), (17.38777, 1), (16.54766, 1), (5.94487, 1), (17.02804, 1), (7.66386, 1), (10.43088, 1), (6.16059, 1), (20.46178, 1), (20.02888, 1), (20.95949, 1), (6.50808, 1), (7.22366, 1), (8.06659, 1), (16.08241, 1), (13.83514, 1), (-0.33454, 1), (12.98848, 1), (12.99024, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4163', () => {
    const query = `INSERT INTO welch_ttest VALUES (4.82025, 0), (6.13896, 0), (15.20277, 0), (14.15351, 0), (7.21338, 0), (8.55506, 0), (13.80816, 0), (11.28411, 0), (7.4612, 0), (7.43759, 0), (12.9832, 0), (-5.74783, 0), (12.47114, 0), (15.14223, 0), (3.40603, 0), (9.27323, 0), (7.88547, 0), (8.56456, 0), (4.59731, 0), (7.91213, 0), (7.33894, 0), (21.74811, 0), (11.92111, 0), (0.18828, 0), (10.47314, 0), (20.37396, 0), (11.04991, 0), (13.30083, 0), (14.28065, 0), (2.86942, 0), (24.96072, 0), (14.20164, 0), (18.28769, 0), (10.50949, 0), (9.22273, 0), (11.77608, 0), (8.56872, 0), (13.74535, 0), (11.65209, 0), (12.51894, 0), (17.76256, 0), (13.52122, 0), (8.70796, 0), (6.04749, 0), (16.33064, 0), (8.35636, 0), (14.03496, 0), (11.05834, 0), (14.49261, 0), (2.59383, 0), (8.01022, 0), (4.05458, 0), (13.26384, 0), (14.62058, 0), (10.52489, 0), (8.46357, 0), (6.4147, 0), (9.70071, 0), (12.47581, 0), (4.38333, 0), (17.54172, 0), (10.12109, 0), (7.73186, 0), (14.0279, 0), (11.6621, 0), (17.47045, 0), (15.50223, 0), (15.46034, 0), (13.39964, 0), (14.98025, 0), (15.87912, 0), (17.67374, 0), (9.64073, 0), (12.84904, 0), (7.70278, 0), (13.03156, 0), (9.04512, 0), (15.97014, 0), (8.96389, 0), (11.48009, 0), (9.71153, 0), (13.00084, 0), (12.39803, 0), (13.08188, 0), (5.82244, 0), (10.81871, 0), (8.2539, 0), (7.52114, 0), (9.11488, 0), (8.37482, 0), (14.48652, 0), (11.42152, 0), (16.03111, 0), (13.14057, 0), (-2.26351, 0), (15.50394, 0), (14.88603, 0), (13.37257, 0), (11.84026, 0), (7.66558, 0), (6.24584, 0), (3.6312, 0), (2.7018, 0), (5.63656, 0), (5.82643, 0), (10.06745, 0), (-0.5831, 0), (14.84202, 0), (9.5524, 0), (19.71713, 0), (14.23109, 0), (8.69105, 0), (5.33742, 0), (7.30372, 0), (7.93342, 0), (15.20884, 0), (7.53839, 0), (13.45311, 0), (11.04473, 0), (10.76673, 0), (15.44145, 0), (14.06596, 0), (9.14873, 0), (12.88372, 0), (8.74994, 0), (10.53263, 0), (16.16694, 0), (8.37197, 0), (3.43739, 0), (4.72799, 0), (9.08802, 0), (11.2531, 0), (5.16115, 0), (10.20895, 0), (18.70884, 0), (15.88924, 0), (3.38758, 0), (6.46449, 0), (10.21088, 0), (14.08458, 0), (15.74508, 0), (19.31896, 0), (13.19641, 0), (11.95409, 0), (10.70718, 0), (1.05245, 0), (10.04772, 0), (17.01369, 0), (10.2286, 0), (19.58323, 0), (7.02892, 0), (4.16866, 0), (8.94326, 0), (4.99854, 0), (8.88352, 0), (18.65422, 0), (17.32328, 0), (9.33492, 0), (14.94788, 0), (8.05863, 0), (14.6737, 0), (10.93801, 0), (0.54036, 0), (-0.34242, 0), (5.89076, 0), (3.15189, 0), (1.94421, 0), (6.38698, 0), (10.50654, 0), (8.95362, 0), (6.23711, 0), (11.75359, 0), (12.42155, 0), (-1.55472, 0), (4.6688, 0), (10.48087, 0), (11.74615, 0), (9.26822, 0), (7.55517, 0), (12.76005, 0), (16.47102, 0), (11.31297, 0), (14.37437, 0), (2.38799, 0), (6.44577, 0), (5.07471, 0), (11.55123, 0), (7.76795, 0), (10.60116, 0), (14.40885, 0), (11.58158, 0), (8.81648, 0), (12.92299, 0), (11.26939, 0), (17.95014, 0), (2.95002, 0), (17.41959, 0), (11.12455, 0), (8.78541, 0), (14.36413, 0), (12.98554, 0), (12.58505, 0), (15.49789, 0), (11.70999, 0), (0.65596, 0), (11.08202, 0), (14.75752, 0), (6.84385, 0), (9.27245, 0), (13.78243, 0), (17.4863, 0), (4.01777, 0), (11.82861, 0), (13.86551, 0), (6.16591, 0), (8.71589, 0), (16.77195, 0), (17.23243, 0), (-2.12941, 0), (5.66629, 0), (12.45153, 0), (1.63971, 0), (13.84031, 0), (4.6144, 0), (5.26169, 0), (9.27769, 0), (9.14288, 0), (9.71953, 0), (9.38446, 0), (1.64788, 0), (11.72922, 0), (13.68926, 0), (9.42952, 0), (12.05574, 0), (9.09148, 0), (5.32273, 0), (20.25258, 0), (10.14599, 0), (10.82156, 0), (5.75736, 0), (7.13567, 0), (9.29746, 0), (5.1618, 0), (10.076, 0), (21.65669, 0), (13.35486, 0), (6.79957, 0), (8.76243, 0), (14.59294, 0), (16.90609, 0), (10.50337, 0), (-0.07923, 0), (13.51648, 0), (12.0676, 0), (0.86482, 0), (9.03563, 0), (5.38751, 0), (17.16866, 0), (2.78702, 0), (11.15548, 0), (12.30843, 0), (8.04897, 0), (9.95814, 0), (11.29308, 0), (14.13032, 0), (21.05877, 0), (3.57386, 0), (7.96631, 0), (3.30484, 0), (18.61856, 0), (16.35184, 0), (7.65236, 0), (18.02895, 0), (9.79458, 0), (16.7274, 0), (8.84453, 0), (13.05709, 0), (10.91447, 0), (8.40171, 0), (16.95211, 0), (11.82194, 0), (19.87978, 0), (12.88455, 0), (-0.00947, 0), (12.28109, 0), (6.96462, 0), (13.75282, 0), (14.39141, 0), (11.07193, 0), (12.88039, 0), (11.38253, 0), (21.02707, 0), (7.51955, 0), (6.31984, 0), (15.6543, 0), (14.80315, 0), (8.38024, 0), (21.7516, 0), (14.31336, 0), (15.04703, 0), (5.73787, 0), (13.16911, 0), (12.40695, 0), (9.88968, 0), (8.46703, 0), (8.70637, 0), (8.03551, 0), (5.9757, 0), (12.22951, 0), (3.14736, 0), (10.51266, 0), (18.593, 0), (10.82213, 0), (7.14216, 0), (6.81154, 0), (-0.6486, 0), (20.56136, 0), (11.35367, 0), (11.38205, 0), (17.14, 0), (14.91215, 0), (15.50207, 0), (5.93162, 0), (3.74869, 0), (14.11532, 0), (7.38954, 0), (5.45764, 0), (18.33733, 0), (9.91923, 0), (2.38991, 0), (14.16756, 0), (2.39791, 0), (6.92586, 0), (5.32474, 0), (2.28812, 0), (5.71718, 0), (5.84197, 0), (2.76206, 0), (19.05928, 0), (11.51788, 0), (6.56648, 0), (3.35735, 0), (7.55948, 0), (19.99908, 0), (13.00634, 0), (18.36886, 0), (11.14675, 0), (16.72931, 0), (12.50106, 0), (6.00605, 0), (23.06653, 0), (5.39694, 0), (9.53167, 0), (12.76944, 0), (7.20604, 0), (13.25391, 0), (13.7341, 0), (10.85292, 0), (-7.75835, 0), (10.29728, 0), (13.70099, 0), (10.17959, 0), (9.98399, 0), (12.69389, 0), (-0.28848, 0), (-2.18319, 0), (13.36378, 0), (10.09232, 0), (5.49489, 0), (5.46156, 0), (0.94225, 0), (12.79205, 0), (10.09593, 0), (6.06218, 0), (0.89463, 0), (11.88986, 0), (10.79733, 0), (1.51371, 0), (2.20967, 0), (15.45732, 0), (16.5262, 0), (5.99724, 0), (8.3613, 0), (15.68183, 0), (15.32117, 0), (14.15674, 0), (6.64553, 0), (4.20777, 0), (-0.10521, 0), (-0.88169, 0), (1.85913, 0), (9.73673, 0), (0.30926, 0), (6.17559, 0), (11.76602, 0), (5.68385, 0), (14.57088, 0), (12.81509, 0), (9.85682, 0), (12.06376, 0), (6.08874, 0), (11.63921, 0), (14.86722, 0), (10.41035, 0), (2.93794, 0), (12.21841, 0), (0.23804, 0), (3.14845, 0), (7.29748, 0), (3.06134, 0), (13.77684, 0), (16.21992, 0), (5.33511, 0), (9.68959, 0), (9.44169, 0), (18.08012, 0), (4.04224, 0), (8.77918, 0), (10.18324, 0), (9.38914, 0), (11.76995, 0), (14.19963, 0), (6.88817, 0), (16.56123, 0), (15.39885, 0), (5.21241, 0), (4.44408, 0), (17.87587, 0), (12.53337, 0), (13.60916, 0), (6.60104, 0), (7.35453, 0), (18.61572, 0), (6.10437, 0), (13.08682, 0), (12.15404, 0), (4.90789, 0), (2.13353, 0), (12.49593, 0), (11.93056, 0), (13.29408, 0), (5.70038, 0), (8.40271, 0), (5.19456, 0), (-5.51028, 0), (14.0329, 0), (10.38365, 0), (6.56812, 0), (4.21129, 0), (9.7157, 0), (9.88553, 0), (13.45346, 0), (4.97752, 0), (12.77595, 0), (8.56465, 0), (4.27703, 0), (18.12502, 0), (12.45735, 0), (12.42912, 0), (12.08125, 0), (10.85779, 0), (4.36013, 0), (11.85062, 0), (8.47776, 0), (9.60822, 0), (11.3069, 0), (14.25525, 0), (1.55168, 0), (14.57782, 0), (7.84786, 0), (9.87774, 0), (14.75575, 0), (3.68774, 0), (9.37667, 0), (20.28676, 0), (12.10027, 0), (8.01819, 0), (18.78158, 0), (20.85402, 0), (18.98069, 0), (16.1429, 0), (9.24047, 0), (14.12487, 0), (10.18841, 0), (-3.04478, 0), (5.7552, 0), (9.30376, 0), (11.42837, 0), (6.02364, 0), (8.86984, 0), (10.91177, 0), (10.04418, 0), (18.10774, 0), (7.49384, 0), (9.11556, 0), (9.7051, 0), (5.23268, 0), (9.04647, 0), (8.81547, 0), (2.65098, 0), (-2.69857, 1), (15.80943, 1), (7.31555, 1), (3.96517, 1), (4.77809, 1), (9.6472, 1), (-26.41717, 1), (-10.85635, 1), (-1.4376, 1), (-0.96308, 1), (2.84315, 1), (5.79467, 1), (-3.06091, 1), (-14.62902, 1), (22.08022, 1), (-2.11982, 1), (-4.84824, 1), (-10.50447, 1), (2.4891, 1), (9.90324, 1), (-22.66866, 1), (-0.97103, 1), (-16.57608, 1), (-3.78749, 1), (25.84511, 1), (5.30797, 1), (-18.19466, 1), (11.72708, 1), (0.2891, 1), (-9.83474, 1), (6.69942, 1), (18.09604, 1), (18.52651, 1), (1.38201, 1), (7.64615, 1), (17.66598, 1), (-2.44141, 1), (-9.01598, 1), (27.69142, 1), (4.06946, 1), (-15.0077, 1), (-10.49648, 1), (-4.88322, 1), (-25.09805, 1), (-4.64024, 1), (20.94434, 1), (24.12126, 1), (-14.10962, 1), (10.6512, 1), (14.50687, 1), (-19.88081, 1), (-11.55271, 1), (13.16921, 1), (16.63864, 1), (-24.08114, 1), (-9.09949, 1), (-10.54702, 1), (0.20813, 1), (8.19066, 1), (-2.70523, 1), (-0.23954, 1), (7.19398, 1), (-7.1618, 1), (-7.44322, 1), (-17.92031, 1), (-1.58146, 1), (9.18338, 1), (3.25838, 1), (-14.30234, 1), (1.84695, 1), (31.13794, 1), (-0.85067, 1), (19.02787, 1), (-3.09594, 1), (13.45584, 1), (-5.48104, 1), (-22.74928, 1), (-8.03697, 1), (17.31143, 1), (-16.65231, 1), (-18.58713, 1), (-16.52641, 1), (14.95261, 1), (12.56762, 1), (15.00188, 1), (1.85858, 1), (2.1926, 1), (-2.4095, 1), (21.56873, 1), (3.35509, 1), (-4.98672, 1), (35.08603, 1), (-10.01602, 1), (-3.85153, 1), (-6.81974, 1), (19.56525, 1), (-9.35488, 1), (0.24268, 1), (-3.51488, 1), (-0.37066, 1), (24.20888, 1), (-11.73537, 1), (0.01282, 1), (0.03963, 1), (-9.65589, 1), (-0.37429, 1), (5.61255, 1), (0.49984, 1), (-10.15066, 1), (-14.54314, 1), (16.56889, 1), (-7.73873, 1), (-3.76422, 1), (1.40722, 1), (2.28818, 1), (-13.12643, 1), (5.17082, 1), (4.79089, 1), (-17.42643, 1), (8.72548, 1), (-3.70285, 1), (16.77893, 1), (13.382, 1), (19.98418, 1), (0.00483, 1), (-4.75951, 1), (2.35391, 1), (21.65809, 1), (-9.2714, 1), (-18.38253, 1), (7.23097, 1), (14.97927, 1), (-4.02197, 1), (-29.8189, 1), (-12.8554, 1), (-7.60124, 1), (-14.90158, 1), (-3.31486, 1), (31.38144, 1), (-8.61288, 1), (15.31895, 1), (-10.19488, 1), (13.796, 1), (-0.32912, 1), (-0.0684, 1), (-30.06834, 1), (24.93912, 1), (-3.26506, 1), (-8.29751, 1), (-5.39189, 1), (-25.08603, 1), (-1.45318, 1), (16.72724, 1), (-3.38467, 1), (-26.00478, 1), (7.28369, 1), (16.96226, 1), (16.5858, 1), (10.46583, 1), (3.84345, 1), (-2.99382, 1), (1.42078, 1), (-11.0123, 1), (2.09909, 1), (1.21064, 1), (15.36079, 1), (-21.61349, 1), (22.7726, 1), (10.50512, 1), (-6.95825, 1), (9.20036, 1), (15.66902, 1), (3.28098, 1), (-9.05692, 1), (0.32882, 1), (-1.64934, 1), (-4.81406, 1), (-5.06006, 1), (19.97493, 1), (2.88646, 1), (-0.34552, 1), (7.55186, 1), (-22.96115, 1), (31.29166, 1), (6.18798, 1), (-2.52715, 1), (-11.58799, 1), (14.13596, 1), (13.45069, 1), (12.15179, 1), (3.44491, 1), (-8.78006, 1), (18.32087, 1), (11.91757, 1), (-2.00179, 1), (10.88411, 1), (9.09327, 1), (6.62484, 1), (8.87178, 1), (11.52254, 1), (-14.15988, 1), (-17.19515, 1), (14.03089, 1), (-2.4095, 1), (-16.83575, 1), (2.71469, 1), (4.84351, 1), (-1.17651, 1), (-3.37529, 1), (-19.92137, 1), (4.48952, 1), (-12.4906, 1), (-5.65277, 1), (8.50819, 1), (-19.61261, 1), (12.54156, 1), (11.06784, 1), (-12.59285, 1), (3.43683, 1), (-3.00325, 1), (12.49082, 1), (7.20955, 1), (17.6547, 1), (15.8619, 1), (24.3048, 1), (-8.05434, 1), (-6.06901, 1), (-15.69515, 1), (-11.13917, 1), (-3.90757, 1), (-2.57038, 1), (5.14065, 1), (17.8497, 1), (-8.64665, 1), (-18.68331, 1), (5.8567, 1), (-20.93884, 1), (4.40583, 1), (14.35985, 1), (4.18134, 1), (4.3635, 1), (9.35428, 1), (2.8908, 1), (16.01017, 1), (-1.48499, 1), (-9.97949, 1), (1.03055, 1), (-2.79697, 1), (6.85977, 1), (4.73213, 1), (2.7815, 1), (-2.46866, 1), (18.39425, 1), (-0.80378, 1), (-0.22982, 1), (-16.11608, 1), (3.0862, 1), (3.20779, 1), (10.50146, 1), (-0.21305, 1), (11.21012, 1), (-0.99825, 1), (18.39633, 1), (-3.39003, 1), (-0.64411, 1), (-1.39932, 1), (15.45319, 1), (-0.66044, 1), (-15.2223, 1), (-34.39907, 1), (-3.57836, 1), (16.82828, 1), (1.66624, 1), (15.43475, 1), (8.17776, 1), (5.50486, 1), (10.43082, 1), (-6.63332, 1), (2.28008, 1), (16.37203, 1), (5.16313, 1), (-8.85281, 1), (13.26692, 1), (-7.46842, 1), (8.43091, 1), (-13.18172, 1), (-0.72401, 1), (22.3881, 1), (10.65448, 1), (2.81289, 1), (10.92405, 1), (-8.95358, 1), (19.80653, 1), (-12.86527, 1), (5.38826, 1), (-6.83501, 1), (-15.7647, 1), (-27.67412, 1), (8.6499, 1), (-4.89542, 1), (16.76167, 1), (12.84284, 1), (-17.27324, 1), (-4.18726, 1), (-14.62366, 1), (-5.49863, 1), (-16.22846, 1), (10.60329, 1), (6.46781, 1), (1.70458, 1), (10.77448, 1), (0.8463, 1), (13.0482, 1), (-4.36264, 1), (3.22647, 1), (2.38828, 1), (6.7946, 1), (-0.25254, 1), (1.2497, 1), (1.6544, 1), (4.1019, 1), (11.27839, 1), (-5.04127, 1), (18.11674, 1), (0.51231, 1), (-0.51029, 1), (13.52556, 1), (16.10171, 1), (5.68197, 1), (-2.85904, 1), (-8.89167, 1), (6.24489, 1), (10.85319, 1), (-0.39816, 1), (3.87079, 1), (-3.1867, 1), (1.55322, 1), (16.86779, 1), (-14.60321, 1), (-1.81952, 1), (-3.11624, 1), (1.24193, 1), (10.18179, 1), (4.69796, 1), (0.69032, 1), (11.7723, 1), (7.62896, 1), (9.89741, 1), (9.11484, 1), (-3.84676, 1), (-0.4777, 1), (0.95958, 1), (-7.95056, 1), (-10.97474, 1), (-6.54861, 1), (34.74933, 1), (27.39463, 1), (4.18299, 1), (6.02476, 1), (-1.99397, 1), (1.26478, 1), (23.37106, 1), (10.49682, 1), (-11.04354, 1), (-12.22284, 1), (-9.87635, 1), (28.90511, 1), (6.77613, 1), (0.55352, 1), (0.37031, 1), (7.1418, 1), (3.24897, 1), (-1.60918, 1), (3.1675, 1), (-17.97072, 1), (-5.61743, 1), (14.1422, 1), (14.87695, 1), (-4.65961, 1), (-0.99174, 1), (-2.96623, 1), (-9.02263, 1), (-17.2088, 1), (2.78608, 1), (6.74239, 1), (4.8524, 1), (7.46731, 1), (1.04894, 1), (-12.8023, 1), (-17.18188, 1), (-5.08801, 1), (22.13942, 1), (-0.36384, 1), (17.80564, 1), (7.67504, 1), (1.59779, 1), (4.10942, 1), (0.61074, 1), (-14.40767, 1), (10.59906, 1), (16.57017, 1), (-15.17526, 1), (-6.98549, 1), (-0.64548, 1), (3.23756, 1), (14.65504, 1), (4.583, 1), (12.72378, 1), (5.26547, 1), (0.81781, 1), (9.38273, 1), (10.37636, 1), (10.70325, 1), (-0.83043, 1), (-7.53149, 1), (-9.09147, 1), (-19.51381, 1), (-28.44508, 1), (6.44392, 1), (11.10201, 1), (-2.86184, 1), (8.30673, 1), (8.8797, 1), (10.68053, 1), (15.62919, 1), (8.00579, 1), (6.4651, 1), (-4.50029, 1), (18.04514, 1), (11.12996, 1), (-5.14007, 1), (9.43857, 1), (3.13476, 1), (4.9772, 1), (-17.45782, 1), (0.05552, 1), (-1.90283, 1), (2.67908, 1), (-2.62243, 1), (-3.22767, 1), (-8.70222, 1), (-23.11605, 1), (21.6757, 1), (12.70076, 1), (4.4322, 1), (11.69344, 1), (9.18052, 1), (-2.2549, 1), (-2.15615, 1), (20.29765, 1), (-0.29536, 1), (15.50109, 1), (8.79187, 1), (5.11533, 1), (-20.44436, 1), (-3.00909, 1), (-4.48291, 1), (21.84462, 1), (1.94225, 1), (-2.81908, 1), (17.19418, 1), (-9.33528, 1), (-0.17346, 1), (0.03958, 1), (-35.17786, 1), (8.36887, 1), (-9.02292, 1), (-10.98804, 1), (0.29335, 1), (4.29634, 1), (3.87718, 1), (-9.08532, 1), (7.13922, 1), (-7.62463, 1), (-10.5666, 1), (4.68165, 1), (-3.30172, 1), (13.04852, 1), (13.45616, 1), (2.41043, 1), (-0.36501, 1), (-15.67383, 1), (17.92217, 1), (8.42106, 1), (3.22063, 1), (-7.31753, 1), (21.99596, 1), (-36.8273, 1), (-20.46391, 1), (5.74179, 1), (-15.83178, 1), (14.90454, 1), (-8.84645, 1), (3.72036, 1), (4.6877, 1), (16.35418, 1), (3.15441, 1), (2.39907, 1), (-17.58664, 1), (-13.18269, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4164', () => {
    const query = `INSERT INTO student_ttest VALUES (4.52546, 0), (8.69444, 1), (3.73628, 0), (3.81414, 1), (-0.39478, 0), (12.38442, 1), (5.15633, 0), (8.9738, 1), (0.50539, 0), (9.19594, 1), (-5.34036, 0), (7.21009, 1), (0.19336, 0), (4.97743, 1), (8.35729, 0), (4.94756, 1), (6.95818, 0), (19.80911, 1), (-2.93812, 0), (13.75358, 1), (8.30807, 0), (16.56373, 1), (-3.3517, 0), (9.72882, 1), (4.16279, 0), (4.64509, 1), (-3.17231, 0), (17.76854, 1), (1.93545, 0), (4.80693, 1), (11.06606, 0), (8.79505, 1), (-4.22678, 0), (10.88868, 1), (-1.99975, 0), (6.21932, 1), (-4.51178, 0), (15.11614, 1), (-4.50711, 0), (13.24703, 1), (1.89786, 0), (14.76476, 1), (-6.19638, 0), (-0.6117, 1), (-3.70188, 0), (17.48993, 1), (5.01334, 0), (12.11847, 1), (1.79036, 0), (4.87439, 1), (2.14435, 0), (18.56479, 1), (3.0282, 0), (1.23712, 1), (2.35528, 0), (5.41596, 1), (-12.18535, 0), (4.54994, 1), (5.59709, 0), (11.37668, 1), (-12.92336, 0), (9.5982, 1), (-0.04281, 0), (6.59822, 1), (-0.16923, 0), (1.16703, 1), (0.88924, 0), (8.88418, 1), (-4.68414, 0), (10.95047, 1), (8.01099, 0), (5.52787, 1), (2.61686, 0), (-1.11647, 1), (-2.76895, 0), (14.49946, 1), (3.32165, 0), (3.27585, 1), (-0.85135, 0), (-0.42025, 1), (1.21368, 0), (6.37906, 1), (4.38673, 0), (2.5242, 1), (6.20964, 0), (8.1405, 1), (-1.23172, 0), (6.46732, 1), (4.65516, 0), (9.89332, 1), (-1.87143, 0), (10.4374, 1), (0.86429, 0), (-1.06465, 1), (2.51184, 0), (6.84902, 1), (-1.88822, 0), (10.96576, 1), (-1.61802, 0), (7.83319, 1), (1.93653, 0), (14.39823, 1), (-3.66631, 0), (7.02594, 1), (-1.05294, 0), (13.46629, 1), (-10.74718, 0), (10.39531, 1), (16.49295, 0), (11.27348, 1), (-7.65494, 0), (9.32187, 1), (-3.39303, 0), (12.32667, 1), (-4.89418, 0), (8.98905, 1), (3.2521, 0), (9.54757, 1), (0.05831, 0), (5.98325, 1), (-3.00409, 0), (3.47248, 1), (5.76702, 0), (9.26966, 1), (2.67674, 0), (5.77816, 1), (10.52623, 0), (6.32966, 1), (-0.54501, 0), (9.49313, 1), (-4.89835, 0), (6.21337, 1), (3.52457, 0), (10.00242, 1), (-0.0451, 0), (6.25167, 1), (-6.61226, 0), (15.64671, 1), (9.02391, 0), (2.78968, 1), (5.52571, 0), (6.55442, 1), (4.54352, 0), (3.68819, 1), (-3.8394, 0), (9.55934, 1), (-7.75295, 0), (4.166, 1), (5.91167, 0), (12.32471, 1), (1.38897, 0), (7.10969, 1), (6.24166, 0), (16.31723, 1), (5.58536, 0), (12.99482, 1), (4.7591, 0), (10.11585, 1), (-2.58336, 0), (10.29455, 1), (-1.91263, 0), (18.27524, 1), (3.31575, 0), (12.84435, 1), (5.3507, 0), (13.11954, 1), (-15.22081, 0), (12.84147, 1), (-0.84775, 0), (15.55658, 1), (-4.538, 0), (11.45329, 1), (6.71177, 0), (7.50912, 1), (0.52882, 0), (8.56226, 1), (2.0242, 0), (8.63104, 1), (5.69146, 0), (15.68026, 1), (4.63328, 0), (21.6361, 1), (0.22984, 0), (6.23925, 1), (-2.84052, 0), (8.65714, 1), (7.91867, 0), (9.9423, 1), (1.11001, 0), (12.28213, 1), (-0.11251, 0), (3.11279, 1), (-0.20905, 0), (13.58128, 1), (0.03287, 0), (16.51407, 1), (-1.59397, 0), (16.60476, 1), (-5.39405, 0), (12.02022, 1), (-7.1233, 0), (12.11035, 1), (4.51517, 0), (9.47832, 1), (-0.70967, 0), (6.40742, 1), (5.67299, 0), (8.87252, 1), (-0.33835, 0), (15.14265, 1), (-1.83047, 0), (2.23572, 1), (-0.62877, 0), (11.57144, 1), (-7.23148, 0), (18.87737, 1), (0.1802, 0), (12.1833, 1), (11.73325, 0), (11.17519, 1), (2.17603, 0), (16.80422, 1), (-0.11683, 0), (6.81423, 1), (-1.29102, 0), (12.12546, 1), (-0.23201, 0), (8.06153, 1), (-6.8643, 0), (10.97228, 1), (-6.85153, 0), (7.30596, 1), (-4.77163, 0), (15.44026, 1), (6.11721, 0), (8.00993, 1), (5.96406, 0), (12.60196, 1), (3.59135, 0), (13.96832, 1), (-0.60095, 0), (14.03207, 1), (3.11163, 0), (4.53758, 1), (-0.18831, 0), (8.08297, 1), (0.67657, 0), (4.90451, 1), (-3.16117, 0), (8.14253, 1), (0.26957, 0), (19.88605, 1), (2.18653, 0), (13.85254, 1), (-5.94611, 0), (23.01839, 1), (-4.39352, 0), (6.02084, 1), (-3.71525, 0), (9.60319, 1), (5.11103, 0), (1.90511, 1), (1.33998, 0), (10.35237, 1), (1.01629, 0), (16.27082, 1), (-3.36917, 0), (12.52379, 1), (-3.99661, 0), (11.37435, 1), (8.19336, 0), (13.61823, 1), (2.89168, 0), (15.77622, 1), (-11.10373, 0), (15.17254, 1), (11.68005, 0), (6.711, 1), (3.08282, 0), (4.74205, 1), (-6.81506, 0), (10.09812, 1), (-2.34587, 0), (6.61722, 1), (-2.68725, 0), (10.34164, 1), (0.3577, 0), (8.96602, 1), (-3.05682, 0), (12.32157, 1), (9.08062, 0), (11.75711, 1), (-0.77913, 0), (13.49499, 1), (10.35215, 0), (8.57713, 1), (6.82565, 0), (11.50313, 1), (-1.24674, 0), (1.13097, 1), (5.18822, 0), (7.83205, 1), (-3.70743, 0), (5.77957, 1), (1.40319, 0), (15.5519, 1), (5.89432, 0), (10.82676, 1), (1.43152, 0), (11.51218, 1), (6.70638, 0), (9.29779, 1), (9.76613, 0), (9.77021, 1), (4.27604, 0), (9.94114, 1), (-2.63141, 0), (15.54513, 1), (-7.8133, 0), (19.10736, 1), (-0.06668, 0), (15.04205, 1), (1.05391, 0), (9.03114, 1), (4.41797, 0), (24.0104, 1), (0.09337, 0), (9.94205, 1), (6.16075, 0), (2.5925, 1), (7.49413, 0), (8.82726, 1), (-3.52872, 0), (10.0209, 1), (-2.17126, 0), (8.1635, 1), (-3.87605, 0), (4.24074, 1), (3.26607, 0), (7.67291, 1), (-3.28045, 0), (5.21642, 1), (2.1429, 0), (11.2808, 1), (1.53386, 0), (6.88172, 1), (0.21169, 0), (5.98743, 1), (-0.63674, 0), (17.97249, 1), (5.84893, 0), (6.46323, 1), (-0.63498, 0), (15.37416, 1), (8.29526, 0), (2.89957, 1), (-1.08358, 0), (17.13044, 1), (-2.306, 0), (11.06355, 1), (2.86991, 0), (3.09625, 1), (-0.76074, 0), (-2.33019, 1), (5.49191, 0), (7.42675, 1), (1.82883, 0), (15.06792, 1), (-3.70497, 0), (8.81116, 1), (-0.53232, 0), (19.17446, 1), (-11.49722, 0), (18.77181, 1), (3.44877, 0), (14.06443, 1), (-1.8596, 0), (12.81241, 1), (-10.34851, 0), (2.72299, 1), (1.13093, 0), (18.67739, 1), (-10.93389, 0), (11.63275, 1), (-3.39703, 0), (2.23891, 1), (0.19749, 0), (13.01195, 1), (-3.68389, 0), (7.43402, 1), (-4.67863, 0), (8.14599, 1), (10.78916, 0), (16.65328, 1), (0.37675, 0), (1.362, 1), (3.98094, 0), (3.87957, 1), (-3.64775, 0), (11.16134, 1), (-4.8443, 0), (6.25357, 1), (1.102, 0), (4.21945, 1), (8.72112, 0), (12.50047, 1), (-1.47361, 0), (6.45486, 1), (6.24183, 0), (18.99924, 1), (6.83569, 0), (18.09508, 1), (-3.11684, 0), (13.59528, 1), (4.91306, 0), (3.39681, 1), (-0.03628, 0), (13.33157, 1), (5.1282, 0), (5.8945, 1), (-2.38558, 0), (5.61212, 1), (2.33351, 0), (8.41149, 1), (-0.97191, 0), (13.78608, 1), (-0.05588, 0), (6.08609, 1), (-4.70019, 0), (12.76962, 1), (-5.12371, 0), (3.26206, 1), (0.65606, 0), (0.25528, 1), (-0.11574, 0), (11.9083, 1), (4.4238, 0), (4.35071, 1), (6.93399, 0), (11.19855, 1), (3.68712, 0), (13.87404, 1), (-0.01187, 0), (6.87986, 1), (1.8332, 0), (8.32566, 1), (5.81322, 0), (22.51334, 1), (-4.04709, 0), (2.5226, 1), (-8.26397, 0), (16.84498, 1), (-2.11273, 0), (6.26108, 1), (5.28396, 0), (13.84824, 1), (0.73054, 0), (6.03262, 1), (6.43559, 0), (14.12668, 1), (4.35565, 0), (16.01939, 1), (-1.05545, 0), (8.19237, 1), (5.00087, 0), (18.01595, 1), (-2.72239, 0), (9.45609, 1), (7.32313, 0), (6.90459, 1), (2.11548, 0), (12.83115, 1), (-3.40953, 0), (10.603, 1), (6.97051, 0), (13.70439, 1), (-0.45567, 0), (6.1633, 1), (1.31699, 0), (4.1151, 1), (-1.49871, 0), (8.20499, 1), (7.14772, 0), (11.67903, 1), (0.79277, 0), (7.30851, 1), (6.9698, 0), (6.50941, 1), (2.08733, 0), (7.3949, 1), (-3.55962, 0), (12.80075, 1), (0.75601, 0), (5.62043, 1), (1.21, 0), (18.2542, 1), (-2.17877, 0), (17.9393, 1), (1.83206, 0), (16.4569, 1), (5.72463, 0), (8.78811, 1), (7.42257, 0), (4.85949, 1), (0.97829, 0), (-3.36394, 1), (7.54238, 0), (5.38683, 1), (9.91081, 0), (12.26083, 1), (-4.61743, 0), (10.27907, 1), (-4.40799, 0), (11.5144, 1), (9.99854, 0), (11.57335, 1), (8.53725, 0), (1.94203, 1), (3.2905, 0), (7.78228, 1), (0.38634, 0), (11.79385, 1), (-2.53374, 0), (10.18415, 1), (4.94758, 0), (14.67613, 1), (4.79624, 0), (4.70301, 1), (5.57664, 0), (12.72151, 1), (-6.44871, 0), (-3.35508, 1), (3.34431, 0), (17.63775, 1), (0.14209, 0), (2.53883, 1), (10.88431, 0), (14.01483, 1), (0.31846, 0), (12.4387, 1), (-0.54703, 0), (11.15408, 1), (-4.67791, 0), (7.74882, 1), (-5.68011, 0), (13.60956, 1), (-4.93362, 0), (7.81991, 1), (1.2271, 0), (10.90969, 1), (5.27512, 0), (8.19828, 1), (-3.84611, 0), (-1.18523, 1), (6.81706, 0), (0.5916, 1), (10.33033, 0), (0.35805, 1), (5.13979, 0), (12.98364, 1), (3.66534, 0), (11.38628, 1), (-2.07219, 0), (13.94644, 1), (10.65442, 0), (2.03781, 1), (-3.31751, 0), (10.74447, 1), (-1.82011, 0), (12.35656, 1), (-0.39886, 0), (7.08701, 1), (1.77052, 0), (2.69871, 1), (1.29049, 0), (19.66653, 1), (7.92344, 0), (7.88636, 1), (-2.92595, 0), (10.36916, 1), (-2.67107, 0), (1.632, 1), (5.64708, 0), (11.86081, 1), (0.34639, 0), (13.47602, 1), (-3.04356, 0), (6.60204, 1), (3.98828, 0), (7.01303, 1), (-1.36695, 0), (20.19992, 1), (-8.48462, 0), (18.88249, 1), (-4.04669, 0), (11.34367, 1), (9.84561, 0), (12.97305, 1), (-6.1537, 0), (9.5776, 1), (0.82433, 0), (17.91364, 1), (1.92449, 0), (18.3247, 1), (2.51288, 0), (9.9211, 1), (0.40965, 0), (7.14257, 1), (2.89183, 0), (6.59133, 1), (3.84347, 0), (12.35274, 1), (0.66829, 0), (10.57523, 1), (-3.45094, 0), (12.12859, 1), (1.3544, 0), (9.47177, 1), (-9.85456, 0), (0.60659, 1), (5.25689, 0), (4.72996, 1), (-5.26018, 0), (4.51121, 1), (-6.16912, 0), (13.28893, 1), (-1.77163, 0), (8.09014, 1), (3.96687, 0), (8.02511, 1), (0.70893, 0), (13.85406, 1), (-5.45342, 0), (1.75412, 1), (-3.89706, 0), (6.00641, 1), (3.11868, 0), (6.35554, 1), (4.41714, 0), (7.11293, 1), (7.64841, 0), (8.30442, 1), (0.00489, 0), (12.63024, 1), (3.2263, 0), (12.38966, 1), (-5.33042, 0), (7.6801, 1), (2.52189, 0), (11.33744, 1), (-7.40308, 0), (4.67713, 1), (0.67891, 0), (7.62276, 1), (2.49343, 0), (2.14478, 1), (5.43133, 0), (15.32988, 1), (-0.67541, 0), (1.52299, 1), (-0.60299, 0), (17.00017, 1), (-6.32903, 0), (8.29701, 1), (-3.44336, 0), (10.92961, 1), (-0.23963, 0), (6.78449, 1), (6.94686, 0), (7.02698, 1), (6.59442, 0), (11.51719, 1), (-4.18532, 0), (9.97926, 1), (-1.8228, 0), (7.44251, 1), (-0.29443, 0), (7.58541, 1), (2.99821, 0), (4.76058, 1), (2.51942, 0), (12.88959, 1), (-3.49176, 0), (9.974, 1), (-0.57979, 0), (17.03689, 1), (8.69471, 0), (11.14554, 1), (-1.19427, 0), (11.7392, 1), (-3.17119, 0), (11.50029, 1), (-2.99566, 0), (19.41759, 1), (-3.34493, 0), (9.65127, 1), (-2.33826, 0), (9.87673, 1), (-5.04164, 0), (14.13485, 1), (-0.48214, 0), (9.78034, 1), (7.45097, 0), (1.57826, 1), (3.04787, 0), (3.72091, 1), (2.92632, 0), (9.4054, 1), (1.39694, 0), (23.22816, 1), (4.38686, 0), (-0.12571, 1), (3.25753, 0), (6.97343, 1), (7.14218, 0), (10.09049, 1), (-4.04341, 0), (11.78393, 1), (-9.19352, 0), (3.01909, 1), (2.78473, 0), (16.09448, 1), (0.33331, 0), (6.25485, 1), (9.89238, 0), (7.13164, 1), (6.00566, 0), (7.75879, 1), (-1.7511, 0), (9.56834, 1), (4.77815, 0), (6.14824, 1), (5.07457, 0), (13.53454, 1), (2.56132, 0), (8.26364, 1), (2.38317, 0), (8.7095, 1), (-1.63486, 0), (10.61607, 1), (-1.46871, 0), (10.64418, 1), (-5.8681, 0), (23.9106, 1), (-2.96227, 0), (11.38978, 1), (-1.90638, 0), (11.4383, 1), (-13.3052, 0), (18.41498, 1), (-2.14705, 0), (3.70959, 1), (-9.62069, 0), (19.95918, 1), (2.29313, 0), (9.53847, 1), (0.22162, 0), (14.04957, 1), (-1.83956, 0), (13.70151, 1), (4.1853, 0), (5.45046, 1), (6.05965, 0), (10.95061, 1), (-0.23737, 0), (9.55156, 1), (6.07452, 0), (17.92345, 1), (4.34629, 0), (6.23976, 1), (4.02922, 0), (8.71029, 1), (3.62622, 0), (13.58736, 1), (-3.95825, 0), (8.78527, 1), (-1.63412, 0), (11.14213, 1), (-1.25727, 0), (12.23717, 1), (5.06323, 0), (16.44557, 1), (-0.66176, 0), (0.47144, 1), (2.36606, 0), (9.7198, 1), (-5.77792, 0), (13.50981, 1), (4.535, 0), (14.27806, 1), (1.02031, 0), (13.50793, 1), (4.49345, 0), (7.47381, 1), (-4.99791, 0), (11.07844, 1), (2.46716, 0), (9.89844, 1), (3.65471, 0), (21.48548, 1), (11.2283, 0), (6.92085, 1), (6.69743, 0), (4.44074, 1), (-5.60375, 0), (19.98074, 1), (0.28683, 0), (7.92826, 1), (-0.85737, 0), (16.6313, 1), (4.26726, 0), (17.17618, 1), (-3.4322, 0), (13.80807, 1), (-2.07039, 0), (5.37083, 1), (-2.26798, 0), (9.73962, 1), (-0.99818, 0), (10.66273, 1), (0.41335, 0), (8.90639, 1), (5.18124, 0), (12.24596, 1), (-5.01858, 0), (16.89203, 1), (2.05561, 0), (12.69184, 1), (-0.12117, 0), (15.59077, 1), (0.99471, 0), (6.94287, 1), (6.89979, 0), (-0.1801, 1), (-4.18527, 0), (3.25318, 1), (-6.35104, 0), (8.08804, 1), (3.89734, 0), (13.78384, 1), (-1.979, 0), (0.46434, 1), (3.15404, 0), (7.78224, 1), (3.52672, 0), (9.10987, 1), (2.48372, 0), (-0.89391, 1), (-6.13089, 0), (14.3696, 1), (2.2968, 0), (3.01763, 1), (-2.74324, 0), (8.03559, 1), (-0.12876, 0), (7.24609, 1), (-1.51135, 0), (11.86271, 1), (-3.92434, 0), (6.28196, 1), (-1.71254, 0), (8.9725, 1), (-1.25878, 0), (14.46114, 1), (2.03021, 0), (9.50216, 1), (4.31726, 0), (16.30413, 1), (-3.02908, 0), (1.02795, 1), (9.7093, 0), (1.88717, 1), (-3.36284, 0), (9.80106, 1), (6.70938, 0), (4.53487, 1), (0.42762, 0), (16.34543, 1), (5.04726, 0), (7.71098, 1), (2.78386, 0), (2.74639, 1), (6.83022, 0), (6.51875, 1), (-3.02109, 0), (10.42308, 1), (-0.65382, 0), (13.57901, 1), (-15.58675, 0), (0.52784, 1), (5.89746, 0), (4.4708, 1), (-4.11598, 0), (6.39619, 1), (-1.37208, 0), (14.57666, 1), (10.08082, 0), (2.71602, 1), (5.35686, 0), (12.53905, 1), (1.93331, 0), (11.4292, 1), (10.47444, 0), (12.44641, 1), (-2.36872, 0), (14.50894, 1), (6.50752, 0), (17.64374, 1), (2.54603, 0), (11.03218, 1), (-0.4332, 0), (9.82789, 1), (5.26572, 0), (10.11104, 1), (2.09016, 0), (2.16137, 1), (1.15513, 0), (10.24054, 1), (14.95941, 0), (12.86909, 1), (-3.85505, 0), (15.22845, 1), (-2.36239, 0), (5.05411, 1), (1.64338, 0), (10.84836, 1), (-4.25074, 0), (11.15717, 1), (7.29744, 0), (0.91782, 1), (-1.18964, 0), (13.29961, 1), (5.60612, 0), (15.11314, 1), (-3.77011, 0), (11.54004, 1), (6.67642, 0), (-0.94238, 1), (-0.06862, 0), (19.32581, 1), (5.60514, 0), (10.20744, 1), (3.7341, 0), (6.54857, 1), (9.59001, 0), (8.69108, 1), (3.30093, 0), (8.2296, 1), (-2.75658, 0), (8.4474, 1), (4.71994, 0), (6.81178, 1), (0.74699, 0), (5.99415, 1), (2.91095, 0), (13.99336, 1), (-7.36829, 0), (8.7469, 1), (-5.29487, 0), (8.62349, 1), (3.31079, 0), (1.84212, 1), (1.06974, 0), (4.4762, 1), (-1.18424, 0), (9.25421, 1), (-7.415, 0), (10.44229, 1), (3.40595, 0), (12.21649, 1), (-7.63085, 0), (10.45968, 1), (1.13336, 0), (15.34722, 1), (-0.0096, 0), (5.50868, 1), (0.8928, 0), (10.93609, 1), (-0.5943, 0), (2.78631, 1), (7.48306, 0), (11.86145, 1), (10.11943, 0), (18.67385, 1), (5.60459, 0), (10.64051, 1), (4.00189, 0), (12.75565, 1), (2.35823, 0), (6.63666, 1), (0.33475, 0), (12.19343, 1), (3.47072, 0), (9.08636, 1), (-6.68867, 0), (11.67256, 1), (3.31031, 0), (20.31392, 1), (2.17159, 0), (11.66443, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4165', () => {
    const query = `INSERT INTO null_in_1 VALUES (1, NULL), (2, 2), (3, NULL), (4, 4), (5, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4166', () => {
    const query = `INSERT INTO null_in_1 VALUES (1, NULL) (0, NULL) (NULL, NULL) (NULL, 1) (NULL, 0) (0, 0) (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4167', () => {
    const query = `INSERT INTO enum_as_num FORMAT TSV 1	1 INSERT INTO enum_as_num FORMAT TSV 2	2
INSERT INTO enum_as_num FORMAT TSV 3	3
INSERT INTO enum_as_num FORMAT TSV 4	a
INSERT INTO enum_as_num FORMAT TSV 5	b
INSERT INTO enum_as_num FORMAT CSV 6,1
INSERT INTO enum_as_num FORMAT CSV 7,2
INSERT INTO enum_as_num FORMAT CSV 8,3
INSERT INTO enum_as_num FORMAT CSV 9,a
INSERT INTO enum_as_num FORMAT CSV 10,b
SELECT * FROM enum_as_num ORDER BY Id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4168', () => {
    const query = `INSERT INTO t VALUES ('Hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4169', () => {
    const query = `INSERT INTO t SELECT toString(number) FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4170', () => {
    const query = `insert into dist_01555 values (1)(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4171', () => {
    const query = `INSERT INTO 01154_test VALUES (1), (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4172', () => {
    const query = `INSERT INTO 01154_test VALUES (toUUID('00000000-0000-0000-0000-000000000001')), (toUUID('00000000-0000-0000-0000-000000000002')), (toUUID('00000000-0000-0000-0000-000000000003'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4173', () => {
    const query = `INSERT INTO datetime64_cmp VALUES ('2019-09-16 19:20:33.123000', '2019-09-16 19:20:33.123'), ('2019-09-16 19:20:33.123456', '2015-05-18 07:40:29.123'),  ('2015-05-18 07:40:29.123456', '2019-09-16 19:20:33.123');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4174', () => {
    const query = `insert into test_bm VALUES (1,1),(2,2),(3,3),(4,4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4175', () => {
    const query = `INSERT INTO src VALUES (1, 'Hello\\0World');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4176', () => {
    const query = `INSERT INTO data_01551 SELECT number FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4177', () => {
    const query = `INSERT INTO map_formats VALUES(map('k1', 1, 'k2', 2, 'k3', 3), map('k1', toDate('2020-05-05')), map('k1', [], 'k2', [7, 8]));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4178', () => {
    const query = `INSERT INTO map_formats VALUES(map('k1', 10, 'k3', 30), map('k2', toDate('2020-06-06')), map());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4179', () => {
    const query = `insert into t(id, dealer_id) values('1','2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4180', () => {
    const query = `insert into table_map values ({'name':'zhangsan', 'gender':'male'}), ({'name':'lisi', 'gender':'female'});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4181', () => {
    const query = `insert into table_map select map('key1', number, 'key2', number * 2) from numbers(1111, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4182', () => {
    const query = `insert into table_map values ({'name':'zhangsan', 'gender':'male'}, 'name'), ({'name':'lisi', 'gender':'female'}, 'gender');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4183', () => {
    const query = `insert into table_map values ('2020-01-01', map(1, 0, 2, 1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4184', () => {
    const query = `insert into table_map values ('2020-01-01', map(1, 0, 2, -1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4185', () => {
    const query = `insert into table_map select map(number, number+5), number from numbers(1111,4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4186', () => {
    const query = `insert into table_map values(map('k1', [1,2,3], 'k2', [4,5,6])), (map('k0', [], 'k1', [100,20,90]));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4187', () => {
    const query = `insert into table_map select map('k1', [number, number + 2, number * 2]) from numbers(6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4188', () => {
    const query = `insert into table_map select map('k2', [number, number + 2, number * 2]) from numbers(6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4189', () => {
    const query = `INSERT INTO table_map SELECT number, (arrayMap(x -> toString(x), range(number % 10 + 2)), range(number % 10 + 2)) FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4190', () => {
    const query = `INSERT INTO table_map SELECT number, arrayMap(x -> (toString(x), x), range(number % 10 + 2)) FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4191', () => {
    const query = `INSERT INTO HASH_TEST_INSERT VALUES ('a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4192', () => {
    const query = `INSERT INTO HASH_TEST_INSERT VALUES ('test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4193', () => {
    const query = `insert into file_delim select 1, 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4194', () => {
    const query = `INSERT INTO fromModifiedJulianDay_test VALUES (-1), (0), (59154);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4195', () => {
    const query = `INSERT INTO toModifiedJulianDay_test VALUES ('1858-11-16'), ('1858-11-17'), ('2020-11-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4196', () => {
    const query = `insert into xy values (0, 2), (2, 3), (8, 4), (9, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4197', () => {
    const query = `insert into xyz values (1, 2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4198', () => {
    const query = `insert into test values ('2020-01-01', 1, '');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4199', () => {
    const query = `insert into test values ('2020-01-02', 1, '');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4200', () => {
    const query = `INSERT INTO myTable (myDay, myOrder) VALUES ('2021-01-01', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4201', () => {
    const query = `INSERT INTO myTable (myDay, myOrder) VALUES ('2021-01-02', 2); -- This row should be returned INSERT INTO myTable (myDay, myOrder) VALUES ('2021-01-03', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4202', () => {
    const query = `insert into T values (1), (2), (3), (4), (5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4203', () => {
    const query = `INSERT INTO optimize_final SELECT toDate('2020-01-01'), number FROM numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4204', () => {
    const query = `INSERT INTO optimize_final SELECT toDate('2020-01-01'), number + 5 FROM numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4205', () => {
    const query = `INSERT INTO optimize_final SELECT toDate('2000-01-01'), number FROM numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4206', () => {
    const query = `INSERT INTO optimize_final SELECT toDate('2000-01-01'), number + 5 FROM numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4207', () => {
    const query = `INSERT INTO nested VALUES ([(1, 'q'), (2, 'w'), (3, 'e')], [(4, [('a', 5), ('s', 6), ('d', 7)])], [([(8, 9), (10, 11)], [('z', 'x'), ('c', 'v')])]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4208', () => {
    const query = `INSERT INTO nested VALUES ([(12, 'qq')], [(4, []), (5, [('b', 6), ('n', 7)])], [([], []), ([(44, 55), (66, 77)], [])]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4209', () => {
    const query = `INSERT INTO nested SELECT number, arrayMap(x -> (x, arrayMap(y -> (toString(y * x), y + x), range(number % 17))), range(number % 19)) FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4210', () => {
    const query = `INSERT INTO bug_14144 SELECT cast(toUUID('442d3ff4-842a-45bb-8b02-b616122c0dc6'), 'Nullable(UUID)'), number, 'missing' FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4211', () => {
    const query = `INSERT INTO bug_14144 SELECT cast(toUUIDOrZero('2fc89389-4728-4b30-9e51-b5bc3ad215f6'), 'Nullable(UUID)'), number, 'missing' FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4212', () => {
    const query = `INSERT INTO bug_14144 SELECT cast(toUUIDOrNull('05fe40cb-1d0c-45b0-8e60-8e311c2463f1'), 'Nullable(UUID)'), number, 'missing' FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4213', () => {
    const query = `INSERT INTO bug_14144 SELECT generateUUIDv4(), number, 'missing' FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4214', () => {
    const query = `INSERT INTO bug_13492 SELECT addDays(now(), number) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4215', () => {
    const query = `INSERT INTO merge_tree_pk VALUES (1, 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4216', () => {
    const query = `INSERT INTO merge_tree_pk VALUES (2, 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4217', () => {
    const query = `INSERT INTO merge_tree_pk VALUES (1, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4218', () => {
    const query = `INSERT INTO merge_tree_pk_sql VALUES (1, 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4219', () => {
    const query = `INSERT INTO merge_tree_pk_sql VALUES (2, 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4220', () => {
    const query = `INSERT INTO merge_tree_pk_sql VALUES (1, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4221', () => {
    const query = `INSERT INTO merge_tree_pk_sql VALUES (2, 'd', 555);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4222', () => {
    const query = `INSERT INTO merge_tree_pk_sql VALUES (2, 'e', 555);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4223', () => {
    const query = `INSERT INTO replicated_merge_tree_pk_sql VALUES (1, 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4224', () => {
    const query = `INSERT INTO replicated_merge_tree_pk_sql VALUES (2, 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4225', () => {
    const query = `INSERT INTO replicated_merge_tree_pk_sql VALUES (1, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4226', () => {
    const query = `INSERT INTO replicated_merge_tree_pk_sql VALUES (2, 'd', 555);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4227', () => {
    const query = `INSERT INTO replicated_merge_tree_pk_sql VALUES (2, 'e', 555);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4228', () => {
    const query = `INSERT INTO to_uuid_test VALUES ('61f0c404-5cb3-11e7-907b-a6006ad3dba0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4229', () => {
    const query = `INSERT INTO to_uuid_test VALUES ('61f0c404-5cb3-11e7-907b-a6006ad3dba0T');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4230', () => {
    const query = `INSERT INTO defaults SELECT * FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4231', () => {
    const query = `INSERT INTO t1 VALUES ('Hello'); -- { serverError TOO_DEEP_RECURSION } INSERT INTO t2 VALUES ('World'); -- { serverError TOO_DEEP_RECURSION }
DROP TABLE IF EXISTS t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4232', () => {
    const query = `INSERT INTO db_01526.table_for_dict1 VALUES (1, 2, 'aaa'), (1, 3, 'bbb'), (2, 3, 'ccc');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4233', () => {
    const query = `INSERT INTO table_for_alter VALUES(toDate('2019-10-01'), 'a', 1, 'aa', 1, 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4234', () => {
    const query = `INSERT INTO table_for_alter VALUES(toDate('2019-10-02'), 'b', 2, 'bb', 2, 2, 2, 1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4235', () => {
    const query = `INSERT INTO test_fetch VALUES(1, 1), (2, 1), (3, 4), (3, 3), (5, 4), (0, 6), (5, 7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4236', () => {
    const query = `INSERT INTO select_final SELECT toDate('2000-01-01'), number, '' FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4237', () => {
    const query = `INSERT INTO select_final SELECT toDate('2000-01-01'), number + 1, '' FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4238', () => {
    const query = `INSERT INTO select_final SELECT toDate('2020-01-01'), number, '' FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4239', () => {
    const query = `INSERT INTO select_final SELECT toDate('2020-01-01'), number + 1, '' FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4240', () => {
    const query = `INSERT INTO select_final SELECT toDate('2000-01-01'), number, 'updated' FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4241', () => {
    const query = `INSERT INTO select_final SELECT toDate('2020-01-01'), number, 'updated' FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4242', () => {
    const query = `INSERT INTO select_final SELECT toDate('2000-01-01'), number, '' FROM numbers(500000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4243', () => {
    const query = `INSERT INTO test VALUES ('2020-10-15 00:00:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4244', () => {
    const query = `INSERT INTO test VALUES ('2020-10-15 12:00:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4245', () => {
    const query = `INSERT INTO test VALUES ('2020-10-16 00:00:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4246', () => {
    const query = `INSERT INTO max_length_alias_14053 VALUES ('2020-10-06',7367,['2020-10-06','2020-10-06','2020-10-06','2020-10-06','2020-10-06']),('2020-10-06',7367,['2020-10-06','2020-10-06','2020-10-06']),('2020-10-06',7367,['2020-10-06','2020-10-06']),('2020-10-07',7367,['2020-10-07','2020-10-07','2020-10-07','2020-10-07','2020-10-07']),('2020-10-08',7367,['2020-10-08','2020-10-08','2020-10-08','2020-10-08']),('2020-10-11',7367,['2020-10-11','2020-10-11','2020-10-11','2020-10-11','2020-10-11','2020-10-11','2020-10-11','2020-10-11']),('2020-10-11',7367,['2020-10-11']),('2020-08-26',7367,['2020-08-26','2020-08-26']),('2020-08-28',7367,['2020-08-28','2020-08-28','2020-08-28']),('2020-08-29',7367,['2020-08-29']),('2020-09-22',7367,['2020-09-22','2020-09-22','2020-09-22','2020-09-22','2020-09-22','2020-09-22','2020-09-22']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4247', () => {
    const query = `insert into xp select '2020-01-01', number , '' from numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4248', () => {
    const query = `INSERT INTO enum_test SELECT '2020-10-09 00:00:00', 'h1', 'WS' FROM numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4249', () => {
    const query = `INSERT INTO enum_test SELECT '2020-10-09 00:00:00', 'h1', 'PS' from numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4250', () => {
    const query = `INSERT INTO topXtest SELECT number FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4251', () => {
    const query = `INSERT INTO topXtest SELECT number FROM numbers(30);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4252', () => {
    const query = `INSERT INTO topXtest SELECT number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4253', () => {
    const query = `insert into t1 select 'AAAAAAAAAAA', 'BBBBBB';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4254', () => {
    const query = `INSERT INTO testNullableStates SELECT toDateTime('2020-01-01 00:00:00') + number AS ts,
toString(number % 999) AS id,
toString(number) AS string,
number / 333 AS float64,
number / 333 AS float32,
number / 333 AS decimal325,
toDate(ts),
ts,
ts,
number,
toInt32(number),
toInt16(number),
toInt8(number)
FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4255', () => {
    const query = `INSERT INTO testNullableStates SELECT toDateTime('2020-01-01 00:00:00') + number AS ts,
toString(number % 999 - 5) AS id,
NULL AS string,
NULL AS float64,
NULL AS float32,
NULL AS decimal325,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL
FROM numbers(500);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4256', () => {
    const query = `insert into testNullableStatesAgg select
ts DateTime,
id String,
minState(string) stringMin,
maxState(string) stringMax,
minState(float64) float64Min,
maxState(float64) float64Max,
avgState(float64) float64Avg,
sumState(float64) float64Sum,
minState(float32) float32Min,
maxState(float32) float32Max,
avgState(float32) float32Avg,
sumState(float32) float32Sum,
minState(decimal325) decimal325Min,
maxState(decimal325) decimal325Max,
avgState(decimal325) decimal325Avg,
sumState(decimal325) decimal325Sum,
minState(date) dateMin,
maxState(date) dateMax,
minState(datetime) datetimeMin,
maxState(datetime) datetimeMax,
minState(datetime64) datetime64Min,
maxState(datetime64) datetime64Max,
minState(int64) int64Min,
maxState(int64) int64Max,
avgState(int64) int64Avg,
sumState(int64) int64Sum,
minState(int32) int32Min,
maxState(int32) int32Max,
avgState(int32) int32Avg,
sumState(int32) int32Sum,
minState(int16) int16Min,
maxState(int16) int16Max,
avgState(int16) int16Avg,
sumState(int16) int16Sum,
minState(int8) int8Min,
maxState(int8) int8Max,
avgState(int8) int8Avg,
sumState(int8) int8Sum
from testNullableStates
group by ts, id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4257', () => {
    const query = `INSERT INTO logs VALUES('2019-11-20 00:00:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4258', () => {
    const query = `INSERT INTO test5346 VALUES('1',toDateTime('2020-01-01 00:00:00'),toDateTime('2020-01-01 00:00:00'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4259', () => {
    const query = `INSERT INTO test_datetime VALUES ('2020-10-15 00:00:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4260', () => {
    const query = `INSERT INTO test_datetime VALUES ('2020-10-15 00:00:00'), (1602709200123);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4261', () => {
    const query = `INSERT INTO primary_key_test VALUES (1), (1), (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4262', () => {
    const query = `INSERT INTO primary_key_test VALUES (1, 1), (1, 1), (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4263', () => {
    const query = `INSERT INTO primary_key_test VALUES(7, 14, 'hello'), (2, 2, 'world'), (7, 14, 'duplicate');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4264', () => {
    const query = `INSERT INTO visits (\`CounterID\`,\`StartDate\`,\`StartTime\`,\`Sign\`,\`GoalsID\`) VALUES (1, toDate('2000-01-01'), toDateTime(toDate('2000-01-01')), 1, [1]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4265', () => {
    const query = `INSERT INTO data_01515 VALUES (1, 2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4266', () => {
    const query = `insert into tsv(a) select number from numbers(10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4267', () => {
    const query = `INSERT INTO table_with_enum_column_for_tsv_insert FORMAT TSV 102	2 INSERT INTO table_with_enum_column_for_tsv_insert FORMAT TabSeparatedRaw 103	1
SELECT * FROM table_with_enum_column_for_tsv_insert ORDER BY Id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4268', () => {
    const query = `INSERT INTO table_with_enum_column_for_json_insert FORMAT JSONEachRow {"Id":102,"Value":2} SELECT * FROM table_with_enum_column_for_json_insert;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4269', () => {
    const query = `INSERT INTO table_with_enum_column_for_csv_insert FORMAT CSV 102,2 SELECT * FROM table_with_enum_column_for_csv_insert;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4270', () => {
    const query = `insert into merge_tree_table1 values ('a', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4271', () => {
    const query = `insert into data_01513 select number%10e3 from numbers(2e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4272', () => {
    const query = `INSERT INTO defaults_on_defaults values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4273', () => {
    const query = `INSERT INTO quorum1 VALUES (1, '1990-11-15');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4274', () => {
    const query = `INSERT INTO quorum1 VALUES (2, '1990-11-15');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4275', () => {
    const query = `INSERT INTO quorum1 VALUES (3, '2020-12-16');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4276', () => {
    const query = `INSERT INTO quorum2 VALUES (4, toDate('2020-12-16'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4277', () => {
    const query = `INSERT INTO test_not_found_column_nothing(col001) SELECT number FROM numbers(11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4278', () => {
    const query = `INSERT INTO table_with_version_replicated_1 VALUES (1, '1', 1, -1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4279', () => {
    const query = `INSERT INTO table_with_version_replicated_1 VALUES (2, '2', 2, -1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4280', () => {
    const query = `INSERT INTO TABLE table_with_version_replicated_1 VALUES(1, '1', 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4281', () => {
    const query = `INSERT INTO TABLE table_with_version_replicated_1 VALUES(1, '1', 2, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4282', () => {
    const query = `INSERT INTO TABLE table_with_version_replicated_1 VALUES(3, '3', 65555, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4283', () => {
    const query = `INSERT INTO TABLE table_with_version_replicated_1 VALUES(3, '3', 65555, -1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4284', () => {
    const query = `INSERT INTO table_with_version VALUES (1, '1', 1, -1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4285', () => {
    const query = `INSERT INTO table_with_version VALUES (2, '2', 2, -1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4286', () => {
    const query = `INSERT INTO TABLE table_with_version VALUES(1, '1', 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4287', () => {
    const query = `INSERT INTO TABLE table_with_version VALUES(1, '1', 2, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4288', () => {
    const query = `INSERT INTO TABLE table_with_version VALUES(3, '3', 65555, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4289', () => {
    const query = `INSERT INTO TABLE table_with_version VALUES(3, '3', 65555, -1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4290', () => {
    const query = `INSERT INTO r1 VALUES(1, '1'); --{serverError TOO_FEW_LIVE_REPLICAS} INSERT INTO r1 VALUES(1, '1'); --{serverError TOO_FEW_LIVE_REPLICAS}
INSERT INTO r1 VALUES(1, '1'); --{serverError TOO_FEW_LIVE_REPLICAS}
SELECT 'insert to two replicas works';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4291', () => {
    const query = `INSERT INTO r1 VALUES(1, '1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4292', () => {
    const query = `INSERT INTO r1 VALUES(2, '2'); --{serverError TOO_FEW_LIVE_REPLICAS} INSERT INTO r1 VALUES(2, '2'); --{serverError TOO_FEW_LIVE_REPLICAS}
INSERT INTO r1 VALUES(2, '2'); --{serverError TOO_FEW_LIVE_REPLICAS}
SET insert_quorum=1, insert_quorum_parallel=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4293', () => {
    const query = `INSERT INTO r1 VALUES(2, '2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4294', () => {
    const query = `INSERT INTO r2 VALUES(2, '2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4295', () => {
    const query = `INSERT INTO r1 VALUES(3, '3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4296', () => {
    const query = `INSERT INTO r2 VALUES(3, '3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4297', () => {
    const query = `INSERT INTO r1 VALUES(3, '3'); --{serverError TOO_FEW_LIVE_REPLICAS} SET insert_quorum=2, insert_quorum_parallel=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4298', () => {
    const query = `INSERT INTO r1 SETTINGS insert_keeper_fault_injection_probability=0 VALUES (4, '4'); -- { serverError UNKNOWN_STATUS_OF_INSERT } INSERT INTO r1 SETTINGS insert_keeper_fault_injection_probability=0 VALUES (4, '4'); -- { serverError UNKNOWN_STATUS_OF_INSERT }
INSERT INTO r1 SETTINGS insert_keeper_fault_injection_probability=0 VALUES (4, '4'); -- { serverError UNKNOWN_STATUS_OF_INSERT }
SELECT * FROM r2 WHERE key=4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4299', () => {
    const query = `INSERT INTO r1 VALUES (4, '4');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4300', () => {
    const query = `INSERT INTO derived_metrics_local values('2020-01-01 00:00:00', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4301', () => {
    const query = `INSERT INTO derived_metrics_local values('2020-01-01 00:01:00', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4302', () => {
    const query = `INSERT INTO derived_metrics_local values('2020-01-01 00:02:00', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4303', () => {
    const query = `INSERT INTO derived_metrics_local values('2020-01-01 00:01:00', 111);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4304', () => {
    const query = `INSERT INTO derived_metrics_local values('2020-01-01 00:19:22', 22);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4305', () => {
    const query = `INSERT INTO derived_metrics_local values('2020-01-01 00:59:02', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4306', () => {
    const query = `INSERT INTO derived_metrics_local values('2020-01-01 00:01:00', 111) ('2020-01-01 00:19:22', 22) ('2100-01-01 00:19:22', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4307', () => {
    const query = `INSERT INTO buf (timestamp) VALUES (toDateTime('2020-01-01 00:05:00'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4308', () => {
    const query = `INSERT INTO buf (timestamp, s) VALUES (toDateTime('2020-01-01 00:06:00'), 'hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4309', () => {
    const query = `insert into test1 values ('2020-09-01 00:01:02', 1), ('2020-09-01 20:01:03', 2), ('2020-09-02 00:01:03', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4310', () => {
    const query = `insert into test_tuple values ('2020-09-01 00:01:02', 1, 2), ('2020-09-01 00:01:03', 2, 3), ('2020-09-02 00:01:03', 3, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4311', () => {
    const query = `insert into test_two_args values (1, 2, 3), (2, 1, 3), (0, 3, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4312', () => {
    const query = `insert into t_dist values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4313', () => {
    const query = `INSERT INTO t VALUES (0), (1), (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4314', () => {
    const query = `INSERT INTO 01504_test SELECT '1_1', number FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4315', () => {
    const query = `INSERT INTO 01504_test SELECT concat(toString(number), '_1'), number FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4316', () => {
    const query = `INSERT INTO 01504_test SELECT number % 77 AS k, SUM(number) AS value, (1, 1.2), bitmapBuild(groupArray(number)) FROM numbers(10000000) group by k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4317', () => {
    const query = `INSERT INTO 01504_test_memory SELECT number % 77 AS k, SUM(number) AS value, (1, 1.2), bitmapBuild(groupArray(number)) FROM numbers(10000000) group by k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4318', () => {
    const query = `INSERT INTO columns_with_multiple_streams VALUES(1, 1, [[1]], tuple(1, [1]));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4319', () => {
    const query = `INSERT INTO columns_with_multiple_streams VALUES(2, 2, [[2]], tuple(2, [2]));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4320', () => {
    const query = `INSERT INTO columns_with_multiple_streams VALUES(3, 3, [[3]], tuple(3, [3]));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4321', () => {
    const query = `INSERT INTO columns_with_multiple_streams_compact VALUES(1, 1, [[1]], tuple(1, [1]));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4322', () => {
    const query = `INSERT INTO columns_with_multiple_streams_compact VALUES(2, 2, [[2]], tuple(2, [2]));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4323', () => {
    const query = `INSERT INTO columns_with_multiple_streams_compact VALUES(3, 3, [[3]], tuple(3, [3]));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4324', () => {
    const query = `INSERT INTO columns_with_multiple_streams_bad_case VALUES(1), (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4325', () => {
    const query = `INSERT INTO columns_with_multiple_streams_bad_case VALUES(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4326', () => {
    const query = `INSERT INTO test SELECT toString(intDiv(number, 8)) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4327', () => {
    const query = `INSERT INTO db_01501.table_cache_dict VALUES (1, 2, 3, 4, 5, -1, -2, -3, -4, '550e8400-e29b-41d4-a716-446655440003', '1973-06-28', '1985-02-28 23:43:25', 'clickhouse', 22.543, 3332154213.4, toDecimal32('1e-5', 5), toDecimal64('1e-15', 15), toDecimal128('1e-35', 35), 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4328', () => {
    const query = `INSERT INTO db_01501.table_cache_dict VALUES (2, 22, 33, 44, 55, -11, -22, -33, -44, 'cb307805-44f0-49e7-9ae9-9954c543be46', '1978-06-28', '1986-02-28 23:42:25', 'hello', 21.543, 3111154213.9, toDecimal32('2e-5', 5), toDecimal64('2e-15', 15), toDecimal128('2e-35', 35), 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4329', () => {
    const query = `INSERT INTO db_01501.table_cache_dict VALUES (3, 222, 333, 444, 555, -111, -222, -333, -444, 'de7f7ec3-f851-4f8c-afe5-c977cb8cea8d', '1982-06-28', '1999-02-28 23:42:25', 'dbms', 13.334, 3222187213.1, toDecimal32('3e-5', 5), toDecimal64('3e-15', 15), toDecimal128('3e-35', 35), 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4330', () => {
    const query = `INSERT INTO db_01501.table_cache_dict VALUES (4, 2222, 3333, 4444, 5555, -1111, -2222, -3333, -4444, '4bd3829f-0669-43b7-b884-a8e034a68224', '1987-06-28', '2000-02-28 23:42:25', 'MergeTree', 52.001, 3237554213.5, toDecimal32('4e-5', 5), toDecimal64('4e-15', 15), toDecimal128('4e-35', 35), 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4331', () => {
    const query = `INSERT INTO db_01501.table_cache_dict VALUES (5, 22222, 33333, 44444, 55555, -11111, -22222, -33333, -44444, 'ff99a408-78bb-4939-93cc-65e657e347c6', '1991-06-28', '2007-02-28 23:42:25', 'dictionary', 33.333, 3222193713.7, toDecimal32('5e-5', 5), toDecimal64('5e-15', 15), toDecimal128('5e-35', 35), 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4332', () => {
    const query = `INSERT INTO t VALUES (1), (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4333', () => {
    const query = `INSERT INTO t SELECT * FROM t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4334', () => {
    const query = `INSERT INTO defaults VALUES(1, '1') (2, '2') (3, '3') (4, '4') (5, '5');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4335', () => {
    const query = `INSERT INTO test_new_col (_csv) VALUES ('a1;b1;c1;d1'), ('a2;b2;c2;d2'), ('a3;b3;c3;d3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4336', () => {
    const query = `insert into test1 values (53), (1777), (53284);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4337', () => {
    const query = `INSERT INTO cte1 SELECT * FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4338', () => {
    const query = `INSERT INTO cte2 SELECT * FROM numbers(5000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4339', () => {
    const query = `INSERT INTO test1 VALUES (1, 2), (3, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4340', () => {
    const query = `INSERT INTO join VALUES (1,21);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4341', () => {
    const query = `INSERT INTO function null('number UInt64') SELECT * FROM numbers_mt(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4342', () => {
    const query = `INSERT INTO number values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4343', () => {
    const query = `INSERT INTO set VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4344', () => {
    const query = `INSERT INTO r_prop_table1 (column_codec, column_comment, column_ttl) VALUES ('str', toDate('2100-01-01'), 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4345', () => {
    const query = `INSERT INTO r_prop_table1 (column_codec, column_comment, column_ttl) VALUES ('tsr', now(), 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4346', () => {
    const query = `INSERT INTO r_prop_table1 (column_codec, column_comment, column_ttl) VALUES ('rts', now() - INTERVAL 1 YEAR, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4347', () => {
    const query = `INSERT INTO prop_table (column_codec, column_comment, column_ttl) VALUES ('str', toDate('2019-10-01'), 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4348', () => {
    const query = `INSERT INTO prop_table (column_alias, column_codec, column_comment, column_ttl) VALUES (33, 'trs', toDate('2020-01-01'), 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4349', () => {
    const query = `INSERT INTO prop_table (column_materialized, column_alias, column_codec, column_comment, column_ttl) VALUES (11, 44, 'rts', toDate('2020-02-01'), 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4350', () => {
    const query = `INSERT INTO prop_table (column_materialized, column_alias, column_codec, column_comment, column_ttl) VALUES (22, 55, 'tsr', toDate('2020-03-01'), 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4351', () => {
    const query = `INSERT INTO t_source (x) VALUES ('hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4352', () => {
    const query = `INSERT INTO t_enum(x) SELECT x from t_source WHERE x in ('hello', 'world');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4353', () => {
    const query = `INSERT INTO a VALUES (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4354', () => {
    const query = `INSERT INTO b VALUES (0, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4355', () => {
    const query = `insert into table APPLICATION values ('ApplicationA', 'BaseA'), ('ApplicationB', 'BaseB') , ('ApplicationC', 'BaseC');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4356', () => {
    const query = `insert into table DATABASE_IO  values ('AppA', 'BaseA', '2020-01-01 00:00:00', 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4357', () => {
    const query = `insert into t1 values (1),(2),(3),(4),(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4358', () => {
    const query = `insert into t2 values (1),(2),(3),(4),(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4359', () => {
    const query = `INSERT INTO binary_op_mono1 VALUES (toUnixTimestamp('2020-09-01 00:00:00') * 1000, 1), (toUnixTimestamp('2020-09-01 00:00:00') * 1000, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4360', () => {
    const query = `INSERT INTO binary_op_mono2 VALUES (1, 1), (10000, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4361', () => {
    const query = `INSERT INTO binary_op_mono3 VALUES (1, 1), (10000, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4362', () => {
    const query = `INSERT INTO binary_op_mono4 VALUES (1, 1), (10000, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4363', () => {
    const query = `INSERT INTO binary_op_mono5 VALUES (1, 1), (10000, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4364', () => {
    const query = `INSERT INTO binary_op_mono6 VALUES (1, 1), (10000, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4365', () => {
    const query = `INSERT INTO binary_op_mono7 VALUES (1, 1), (10000, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4366', () => {
    const query = `INSERT INTO binary_op_mono8 VALUES (1, 1), (10000, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4367', () => {
    const query = `insert into x values (10, 1), (20, 2), (30, 3), (40, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4368', () => {
    const query = `INSERT INTO t VALUES (1, 'l');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4369', () => {
    const query = `INSERT INTO nr VALUES (2, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4370', () => {
    const query = `INSERT INTO null_subcolumns VALUES (1, 'foo') (2, NULL) (3, NULL) (4, 'abc');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4371', () => {
    const query = `INSERT INTO map_subcolumns VALUES (1, map('a', 1, 'b', 2)) (2, map('a', 3, 'c', 4)), (3, map('b', 5, 'c', 6, 'd', 7));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4372', () => {
    const query = `INSERT INTO subcolumns VALUES (([1, NULL], 2, 'a'), ['foo', NULL, 'bar'], [['123'], ['456', '789']], 'qqqq', ['zzz', 'xxx'], [42, 43]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4373', () => {
    const query = `INSERT INTO t_arr VALUES ([1]) ([]) ([1, 2, 3]) ([1, 2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4374', () => {
    const query = `INSERT INTO t_tup VALUES (('foo', 1)) (('bar', 2)) (('baz', 42));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4375', () => {
    const query = `INSERT INTO t_nul VALUES (1) (NULL) (2) (NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4376', () => {
    const query = `INSERT INTO t_map VALUES (map('a', 1, 'b', 2)) (map('a', 3, 'c', 4)), (map('b', 5, 'c', 6));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4377', () => {
    const query = `INSERT INTO mutation_table (id, price) VALUES (1, 100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4378', () => {
    const query = `insert into mutation_table (name, dt) values ('car', '2020-02-28');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4379', () => {
    const query = `insert into mutation_table (name, dt) values ('dog', '2020-03-28');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4380', () => {
    const query = `insert into mutation_table (name, dt) values ('car', Null);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4381', () => {
    const query = `insert into mutation_table (name, dt) values ('cat', Null);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4382', () => {
    const query = `insert into mutation_table (name, dt) values (Null, '2020-08-05');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4383', () => {
    const query = `INSERT INTO local_table SELECT number AS id, toString(number) AS val FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4384', () => {
    const query = `INSERT INTO table_for_ttl SELECT now() - INTERVAL 2 YEAR, 1, toString(number) from numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4385', () => {
    const query = `INSERT INTO table_for_ttl SELECT now() - INTERVAL 2 DAY, 3, toString(number) from numbers(2000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4386', () => {
    const query = `INSERT INTO table_for_ttl SELECT now(), 4, toString(number) from numbers(3000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4387', () => {
    const query = `INSERT INTO insert_select_src VALUES (1, 2), (3, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4388', () => {
    const query = `INSERT INTO insert_select_dst(* EXCEPT (middle_a, middle_b)) SELECT * FROM insert_select_src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4389', () => {
    const query = `INSERT INTO insert_select_dst(insert_select_dst.* EXCEPT (middle_a, middle_b)) SELECT * FROM insert_select_src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4390', () => {
    const query = `INSERT INTO insert_select_dst(COLUMNS('.*') EXCEPT (middle_a, middle_b)) SELECT * FROM insert_select_src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4391', () => {
    const query = `INSERT INTO insert_select_dst(insert_select_src.* EXCEPT (middle_a, middle_b)) SELECT * FROM insert_select_src;  -- { serverError UNKNOWN_IDENTIFIER } SELECT * FROM insert_select_dst;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4392', () => {
    const query = `INSERT INTO columns_transformers VALUES (100, 10, 324, 120, 8, 23);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4393', () => {
    const query = `INSERT INTO columns_transformers VALUES (100, 10, 324), (120, 8, 23);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4394', () => {
    const query = `INSERT INTO recompression_table SELECT now(), 1, toString(number) from numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4395', () => {
    const query = `INSERT INTO recompression_table SELECT now() - INTERVAL 2 MONTH, 2, toString(number) from numbers(1000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4396', () => {
    const query = `INSERT INTO recompression_table SELECT now() - INTERVAL 2 YEAR, 3, toString(number) from numbers(2000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4397', () => {
    const query = `INSERT INTO recompression_table_compact SELECT now(), 1, toString(number) from numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4398', () => {
    const query = `INSERT INTO recompression_table_compact SELECT now() - INTERVAL 2 MONTH, 2, toString(number) from numbers(1000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4399', () => {
    const query = `INSERT INTO recompression_table_compact SELECT now() - INTERVAL 2 YEAR, 3, toString(number) from numbers(2000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4400', () => {
    const query = `insert into order_by_nulls_first values (NULL,1),(NULL,0),(NULL,0),(NULL,0),(NULL,0),(NULL,0),(28,0),(0,0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4401', () => {
    const query = `insert into order_by_another values (1, 8), (1, 7), (1, 6), (1, 5), (1, 4), (1, 3), (1, 2), (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4402', () => {
    const query = `INSERT INTO valid_min_index_granularity_bytes_setting SELECT number, concat('xxxxxxxxxx', toString(number)) FROM numbers(1000,1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4403', () => {
    const query = `INSERT INTO test_01457.tf_remote_explicit_structure VALUES ('42');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4404', () => {
    const query = `INSERT INTO test_01457.tf_remote VALUES (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4405', () => {
    const query = `INSERT INTO tbl SELECT number, number * 2, number * 3, number * 4, number * 5 FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4406', () => {
    const query = `insert into order_test1 values ('2020-08-21 18:46:08.000','red')('2020-08-21 18:46:08.000','green');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4407', () => {
    const query = `insert into order_test1 values ('2020-08-21 18:46:07.000','red')('2020-08-21 18:46:07.000','green');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4408', () => {
    const query = `insert into order_test1 values ('2020-08-21 18:46:06.000','red')('2020-08-21 18:46:06.000','green');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4409', () => {
    const query = `INSERT INTO local_table SELECT number FROM numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4410', () => {
    const query = `INSERT INTO test_local SELECT '2000-08-01', number as value from numbers(50000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4411', () => {
    const query = `INSERT INTO moons VALUES (1.230365,1.291454), (1.93851,0.6499), (1.574085,0.744109), (1.416457,1.41872), (1.90165,1.298199), (2.023844,1.142459), (1.828602,0.636404), (1.568649,1.157387), (1.968863,1.160039), (1.790198,0.860815), (1.238993,0.252486), (1.690338,0.573545), (1.678741,0.739649), (1.363346,0.514698), (1.924442,0.484331), (0.849071,0.585017), (1.859407,1.098124), (1.657176,1.314958), (1.085181,0.761741), (1.184481,0.639135), (1.59856,0.688384), (1.304818,1.212579), (1.913821,0.663551), (1.872619,0.510627), (1.29273,0.795267), (1.767669,0.892397), (1.790311,1.21813), (1.621893,1.229768), (1.525505,0.752643), (1.513535,1.016012), (1.120456,1.427238), (1.71505,0.716654), (1.394756,0.733629), (1.746027,1.422821), (1.5376,1.387397), (1.358968,0.575393), (1.941569,0.572639), (1.904995,0.966926), (1.967455,0.436449), (2.045535,0.582434), (1.365599,0.446582), (2.035874,0.468542), (1.419283,0.739308), (1.718267,0.895579), (1.285871,1.014628), (2.010657,1.631207), (1.78226,0.576882), (1.78274,0.727585), (1.454934,1.285701), (1.657208,0.581418);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4412', () => {
    const query = `INSERT INTO circles VALUES (1.20848,0.505643), (1.577706,1.726383), (1.945215,1.638926), (0.493616,0.792443), (0.827802,1.41133), (1.012179,1.654582), (1.815329,0.254426), (-0.068102,1.456476), (1.235432,1.565291), (1.269633,1.857153), (0.687433,1.24911), (0.131356,1.610389), (1.991372,0.204134), (1.678587,1.456911), (0.501133,0.68513), (0.924535,0.541514), (0.574115,0.340542), (-0.013384,1.17037), (0.917257,1.799431), (1.364786,0.396457), (1.931339,1.093935), (0.575076,0.427512), (2.084798,1.752707), (0.694029,0.257422), (-0.003821,0.160859), (0.037966,0.217695), (1.986527,1.249144), (1.864518,0.521483), (0.038928,0.175741), (1.855737,1.678827), (0.779503,0.963619), (0.035384,0.238397), (0.136108,0.128737), (0.0581,1.093712), (-0.012542,0.713137), (1.53441,0.447265), (0.198885,1.232961), (1.66781,0.259156), (1.478017,1.256315), (1.148358,1.659979), (0.340698,0.76793), (0.376184,0.578202), (0.251495,1.765917), (1.836389,1.75769), (1.573166,1.753943), (0.448309,0.965337), (1.704437,1.138451), (1.93234,1.723736), (1.412218,0.603027), (1.978789,0.938132);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4413', () => {
    const query = `INSERT INTO t SELECT * FROM numbers_mt(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4414', () => {
    const query = `INSERT INTO compress_table VALUES(1, '1', '1', '1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4415', () => {
    const query = `INSERT INTO compress_table VALUES(2, '2', '2', '2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4416', () => {
    const query = `INSERT INTO badFixedStringSort values (UUIDStringToNum('999e1140-66ef-5610-9c3a-b3fb33e0fda9'), '1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4417', () => {
    const query = `INSERT INTO badFixedStringSort values (UUIDStringToNum('999e1140-66ef-5610-9c3a-b3fb33e0fda9'), '2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4418', () => {
    const query = `INSERT INTO badFixedStringSort values (UUIDStringToNum('8ad8fc5e-a49e-544c-98e6-1140afd79f80'), '2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4419', () => {
    const query = `INSERT INTO badFixedStringSort values (UUIDStringToNum('8ad8fc5e-a49e-544c-98e6-1140afd79f80'), '1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4420', () => {
    const query = `INSERT INTO replica1 SETTINGS insert_keeper_fault_injection_probability=0 VALUES (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4421', () => {
    const query = `INSERT INTO replica1 SETTINGS insert_keeper_fault_injection_probability=0 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4422', () => {
    const query = `INSERT INTO replica1 SETTINGS insert_keeper_fault_injection_probability=0 VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4423', () => {
    const query = `INSERT INTO replica2 SETTINGS insert_keeper_fault_injection_probability=0 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4424', () => {
    const query = `INSERT INTO replica2 SETTINGS insert_keeper_fault_injection_probability=0 VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4425', () => {
    const query = `INSERT INTO mt_01451 VALUES (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4426', () => {
    const query = `INSERT INTO mt_01451 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4427', () => {
    const query = `INSERT INTO mt_01451 VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4428', () => {
    const query = `INSERT INTO test_mtree VALUES ('Hello, world');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4429', () => {
    const query = `INSERT INTO test_table_2 FORMAT JSONCompactStringsEachRowWithNamesAndTypes ["v1", "n.id", "n.name"]["UInt8", "Array(UInt8)", "Array(String)"]["16", "[15, 16, 17]", "['first', 'second', 'third']"];`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4430', () => {
    const query = `INSERT INTO test_table_2 FORMAT JSONCompactStringsEachRowWithNames ["v1", "n.id", "n.name"]["16", "[15, 16, 17]", "['first', 'second', 'third']"];`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4431', () => {
    const query = `INSERT INTO test VALUES('2020-01-01 00:00:00', '2020-01-01 00:01:00', '2020-01-01 00:02:00.11', '2020-01-01 00:03:00', '2020-01-01 00:04:00.22', '2020-01-01 00:05:00', '2020-01-01 00:06:00', '2020-01-01 00:06:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4432', () => {
    const query = `INSERT INTO t_01411 (str) SELECT concat('asdf', toString(number % 10000)) FROM numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4433', () => {
    const query = `INSERT INTO t_01411_num (num) SELECT number % 1000 FROM numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4434', () => {
    const query = `INSERT INTO tdm VALUES (now());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4435', () => {
    const query = `INSERT INTO tdm2 VALUES (toUnixTimestamp('2000-01-01 13:12:12')), (toUnixTimestamp('2000-01-01 14:12:12')), (toUnixTimestamp('2000-01-01 15:12:12'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4436', () => {
    const query = `INSERT INTO t SELECT number * number * number AS x, x AS i256, x AS u256, x AS d256 FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4437', () => {
    const query = `INSERT INTO t SELECT -number * number * number AS x, x AS i256, x AS u256, x AS d256 FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4438', () => {
    const query = `INSERT INTO t VALUES (0x1.f7ced916872b0p-4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4439', () => {
    const query = `INSERT INTO pk_func SELECT '2020-05-05 01:00:00', number FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4440', () => {
    const query = `INSERT INTO modify_sample (x) SELECT toUInt8(number) AS x FROM system.numbers LIMIT 256;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4441', () => {
    const query = `INSERT INTO modify_sample_replicated (x, y) SELECT toUInt8(number) AS x, toUInt64(number) as y FROM system.numbers LIMIT 256;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4442', () => {
    const query = `INSERT INTO index_compact SELECT number, toString(number) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4443', () => {
    const query = `INSERT INTO index_compact SELECT number, toString(number) FROM numbers(30);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4444', () => {
    const query = `INSERT INTO mytable_local SELECT toDateTime('2020-06-01 00:00:00') + toIntervalMinute(number) AS created,
toDate(created) AS eventday,
if((number % 100) > 50, 742522, number % 32141) AS user_id
FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4445', () => {
    const query = `INSERT INTO table_float VALUES (1.2, 1) (1.3, 2) (1.4, 3) (1.5, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4446', () => {
    const query = `INSERT INTO table_with_pk_clear SELECT number, number * number, toString(number), toString(number * number) FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4447', () => {
    const query = `INSERT INTO t VALUES (1, 'hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4448', () => {
    const query = `INSERT INTO mutation_table SELECT toDate('2019-10-01'), number, '42' FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4449', () => {
    const query = `INSERT INTO mutation_table SELECT toDate('2019-10-02'), number, 'Hello' FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4450', () => {
    const query = `INSERT INTO lc_nullable SELECT groupArray(number) AS order_key,
groupArray(toInt8(number)) AS i8,
groupArray(toInt16(number)) AS i16,
groupArray(toInt32(number)) AS i32,
groupArray(toInt64(number)) AS i64,
groupArray(toUInt8(number)) AS u8,
groupArray(toUInt16(number)) AS u16,
groupArray(toUInt32(number)) AS u32,
groupArray(toUInt64(number)) AS u64,
groupArray(toFloat32(number)) AS f32,
groupArray(toFloat64(number)) AS f64,
groupArray(toDate(number, 'Asia/Istanbul')) AS date,
groupArray(toDateTime(number, 'Asia/Istanbul')) AS date_time,
groupArray(toString(number)) AS str,
groupArray(toFixedString(toString(number), 5)) AS fixed_string
FROM (SELECT number FROM system.numbers LIMIT 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4451', () => {
    const query = `INSERT INTO lc_nullable SELECT groupArray(num) AS order_key,
groupArray(toInt8(num)) AS i8,
groupArray(toInt16(num)) AS i16,
groupArray(toInt32(num)) AS i32,
groupArray(toInt64(num)) AS i64,
groupArray(toUInt8(num)) AS u8,
groupArray(toUInt16(num)) AS u16,
groupArray(toUInt32(num)) AS u32,
groupArray(toUInt64(num)) AS u64,
groupArray(toFloat32(num)) AS f32,
groupArray(toFloat64(num)) AS f64,
groupArray(toDate(num, 'Asia/Istanbul')) AS date,
groupArray(toDateTime(num, 'Asia/Istanbul')) AS date_time,
groupArray(toString(num)) AS str,
groupArray(toFixedString(toString(num), 5)) AS fixed_string
FROM (SELECT negate(number) as num FROM system.numbers LIMIT 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4452', () => {
    const query = `INSERT INTO lc_nullable SELECT groupArray(number) AS order_key,
groupArray(toInt8(number)) AS i8,
groupArray(toInt16(number)) AS i16,
groupArray(toInt32(number)) AS i32,
groupArray(toInt64(number)) AS i64,
groupArray(toUInt8(number)) AS u8,
groupArray(toUInt16(number)) AS u16,
groupArray(toUInt32(number)) AS u32,
groupArray(toUInt64(number)) AS u64,
groupArray(toFloat32(number)) AS f32,
groupArray(toFloat64(number)) AS f64,
groupArray(toDate(number, 'Asia/Istanbul')) AS date,
groupArray(toDateTime(number, 'Asia/Istanbul')) AS date_time,
groupArray(toString(number)) AS str,
groupArray(toFixedString(toString(number), 5)) AS fixed_string
FROM (SELECT number FROM system.numbers WHERE number >= 5 LIMIT 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4453', () => {
    const query = `INSERT INTO lc_nullable SELECT groupArray(number) AS order_key,
groupArray(toInt8(number)) AS i8,
groupArray(toInt16(number)) AS i16,
groupArray(toInt32(number)) AS i32,
groupArray(toInt64(number)) AS i64,
groupArray(toUInt8(number)) AS u8,
groupArray(toUInt16(number)) AS u16,
groupArray(toUInt32(number)) AS u32,
groupArray(toUInt64(number)) AS u64,
groupArray(toFloat32(number)) AS f32,
groupArray(toFloat64(number)) AS f64,
groupArray(toDate(number, 'Asia/Istanbul')) AS date,
groupArray(toDateTime(number, 'Asia/Istanbul')) AS date_time,
groupArray(toString(number)) AS str,
groupArray(toFixedString(toString(number), 5)) AS fixed_string
FROM (SELECT number FROM system.numbers WHERE number >= 10 LIMIT 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4454', () => {
    const query = `INSERT INTO lc_nullable SELECT n AS order_key,
n AS i8,
n AS i16,
n AS i32,
n AS i64,
n AS u8,
n AS u16,
n AS u32,
n AS u64,
n AS f32,
n AS f64,
n AS date,
n AS date_time,
n AS str,
n AS fixed_string
FROM (SELECT [NULL] AS n);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4455', () => {
    const query = `INSERT INTO lc_nullable SELECT [NULL, n] AS order_key,
[NULL, toInt8(n)] AS i8,
[NULL, toInt16(n)] AS i16,
[NULL, toInt32(n)] AS i32,
[NULL, toInt64(n)] AS i64,
[NULL, toUInt8(n)] AS u8,
[NULL, toUInt16(n)] AS u16,
[NULL, toUInt32(n)] AS u32,
[NULL, toUInt64(n)] AS u64,
[NULL, toFloat32(n)] AS f32,
[NULL, toFloat64(n)] AS f64,
[NULL, toDate(n, 'Asia/Istanbul')] AS date,
[NULL, toDateTime(n, 'Asia/Istanbul')] AS date_time,
[NULL, toString(n)] AS str,
[NULL, toFixedString(toString(n), 5)] AS fixed_string
FROM (SELECT 100 as n);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4456', () => {
    const query = `INSERT INTO t VALUES (1, 'hello'), (2, 'world');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4457', () => {
    const query = `INSERT INTO test_bloom_filter_index SELECT number, number, number FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4458', () => {
    const query = `INSERT INTO truncate_test VALUES(1), (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4459', () => {
    const query = `INSERT INTO  rows_events_test%' AND type = 2 AND event_date >= yesterday() ORDER BY event_time DESC LIMIT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4460', () => {
    const query = `INSERT INTO t SELECT number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4461', () => {
    const query = `insert into tesd_dedupl values (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4462', () => {
    const query = `INSERT into test_23634 values ('s','s','s'), (null,'s1','s1'), (null,null,'s2'), (null,null,null);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4463', () => {
    const query = `INSERT INTO nullable_key SELECT number * 2, number * 3 FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4464', () => {
    const query = `INSERT INTO nullable_key SELECT NULL, -number FROM numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4465', () => {
    const query = `INSERT INTO nullable_key_without_final_mark VALUES ('123'), (NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4466', () => {
    const query = `INSERT INTO nullable_minmax_index VALUES (1, 3), (2, 7), (3, 4), (2, NULL); -- [3, +Inf] INSERT INTO nullable_minmax_index VALUES (1, 1), (2, 2), (3, 2), (2, 1); -- [1, 2]
INSERT INTO nullable_minmax_index VALUES (2, NULL), (3, NULL); -- [+Inf, +Inf]
SET force_primary_key = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4467', () => {
    const query = `INSERT INTO xxxx_null SELECT '2021-11-11 00:00:00';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4468', () => {
    const query = `INSERT INTO test_joinGet VALUES ('ab', '1', 0.1), ('ab', '2', 0.2), ('cd', '3', 0.3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4469', () => {
    const query = `INSERT INTO test_lc VALUES ('ab', '1', 0.1), ('ab', '2', 0.2), ('cd', '3', 0.3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4470', () => {
    const query = `INSERT INTO test FORMAT CSV 1,RU INSERT INTO test FORMAT CSV 1,
SELECT * FROM test ORDER BY code;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4471', () => {
    const query = `INSERT INTO tableConversion(conversionId, value) VALUES ('Conversion 1', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4472', () => {
    const query = `INSERT INTO tableClick(clickId, conversionId, value) VALUES ('Click 1', 'Conversion 1', 14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4473', () => {
    const query = `INSERT INTO tableClick(clickId, conversionId, value) VALUES ('Click 2', 'Conversion 1', 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4474', () => {
    const query = `INSERT INTO tableClick(clickId, conversionId, value) VALUES ('Click 3', 'Conversion 1', 16);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4475', () => {
    const query = `INSERT INTO TABLE a SELECT number FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4476', () => {
    const query = `INSERT INTO t VALUES (0, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4477', () => {
    const query = `INSERT INTO d_src VALUES (0, 0, 'n');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4478', () => {
    const query = `INSERT INTO check_codec SELECT number, number * 2 FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4479', () => {
    const query = `INSERT INTO test (x) VALUES (1), (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4480', () => {
    const query = `INSERT INTO test (x, y) VALUES (1, 1), (2, 2), (3, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4481', () => {
    const query = `INSERT INTO test (x, y, z) VALUES (1, 1, 'a'), (2, 2, 'b'), (3, 3, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4482', () => {
    const query = `INSERT INTO t0 VALUES (0, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4483', () => {
    const query = `insert into test_01383.fact values (1,2,10),(2,2,10),(3,3,10),(4,3,10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4484', () => {
    const query = `insert into test_01383.dimension values (1,'name_1'),(2,'name_1'),(3,'name_3'),(4, 'name_4');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4485', () => {
    const query = `INSERT INTO table_rename_with_ttl SELECT toDate('2018-10-01') + number % 3, toString(number) from numbers(9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4486', () => {
    const query = `INSERT INTO a VALUES ('hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4487', () => {
    const query = `INSERT INTO b VALUES ('hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4488', () => {
    const query = `INSERT INTO c VALUES ('hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4489', () => {
    const query = `INSERT INTO d VALUES ('hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4490', () => {
    const query = `INSERT INTO dictdb_01376.table_for_dict VALUES (1, 1.1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4491', () => {
    const query = `INSERT INTO table_tsv_01375 SELECT number as n, toString(n) as s FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4492', () => {
    const query = `INSERT INTO table_csv_01375 SELECT number as n, toString(n) as s FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4493', () => {
    const query = `INSERT INTO null_issue_3767 (value) VALUES ('A String'), (NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4494', () => {
    const query = `INSERT INTO codecs SELECT number, number, toString(number) FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4495', () => {
    const query = `INSERT INTO tt_01373 SELECT number%13, number%17, 1 from numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4496', () => {
    const query = `INSERT INTO test VALUES ('hello'), ('world'), ('xyz'), (NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4497', () => {
    const query = `INSERT INTO b1_01361 VALUES (1, now());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4498', () => {
    const query = `INSERT INTO b1_01361 VALUES (2, now());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4499', () => {
    const query = `INSERT INTO expected_times VALUES('main_dashboard_top_query', 500), ('main_dashboard_bottom_query', 500);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4500', () => {
    const query = `INSERT INTO mutation_delete_null_rows VALUES ('2020-01-01', '', 2)('2020-01-02', 'aaa', 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4501', () => {
    const query = `INSERT INTO mutation_delete_null_rows VALUES ('2020-01-03', '', 2)('2020-01-04', '', 2)('2020-01-05', NULL, 2)('2020-01-06', 'aaa', 0)('2020-01-07', 'aaa', 0)('2020-01-08', 'aaa', NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4502', () => {
    const query = `insert into constrained values ('a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4503', () => {
    const query = `INSERT INTO versioned_collapsing_table VALUES (toDate('2019-10-10'), 1, 1, 'Hello', -1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4504', () => {
    const query = `insert into t0 values ('a', 1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4505', () => {
    const query = `INSERT INTO cdp_orders VALUES ('hello', 'world', '2020-01-02 03:04:05');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4506', () => {
    const query = `INSERT INTO test_datetime (time) VALUES (toDate(18012));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4507', () => {
    const query = `INSERT INTO test (a, b, c, p.at1, p.at2) VALUES (now(), 1, 2, ['foo', 'bar'], ['baz', 'qux']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4508', () => {
    const query = `INSERT INTO test VALUES ('hello', 'test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4509', () => {
    const query = `INSERT INTO test VALUES ('goodbye', 'test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4510', () => {
    const query = `INSERT INTO test VALUES (111, 'abc');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4511', () => {
    const query = `INSERT INTO index VALUES ('2020-04-07');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4512', () => {
    const query = `INSERT INTO test VALUES ('1', 'NEW', array('a', 'b'), now());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4513', () => {
    const query = `INSERT INTO test_01343 VALUES ('Hello, world');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4514', () => {
    const query = `INSERT INTO t_uuid VALUES (1, '417ddc5de5564d2795dda34d84e46a50', 'Example 1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4515', () => {
    const query = `INSERT INTO t_uuid VALUES (2, '417ddc5d-e556-4d27-95dd-a34d84e46a51', 'Example 2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4516', () => {
    const query = `INSERT INTO test VALUES (1.12345111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4517', () => {
    const query = `INSERT INTO mt VALUES ('Hello, world', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4518', () => {
    const query = `insert into tsv_raw format TSVRaw "a 	1	\\	\\\\	"\\""	"\\\\"" select * from tsv_raw format TSVRaw;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4519', () => {
    const query = `insert into table_01323_many_parts select number from numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4520', () => {
    const query = `INSERT INTO test SELECT number, number, toString(number), number from numbers(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4521', () => {
    const query = `INSERT INTO test_nullable_float_issue7347 VALUES (1,NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4522', () => {
    const query = `INSERT INTO tags(id, seqs) VALUES ('id1', [1,2,3]), ('id2', [0,2,3]), ('id1', [1,3]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4523', () => {
    const query = `insert into TestTable (column, start, end) values('test', toDateTime('2020-07-20 09:00:00'), toDateTime('2020-07-20 20:00:00')),('test1', toDateTime('2020-07-20 09:00:00'), toDateTime('2020-07-20 20:00:00')),('test2', toDateTime('2020-07-20 09:00:00'), toDateTime('2020-07-20 20:00:00'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4524', () => {
    const query = `INSERT INTO aaa VALUES (1, 'sef'),(2, 'fre'),(3, 'jhg');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4525', () => {
    const query = `INSERT INTO bbb VALUES (2, 'fre'), (3, 'jhg');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4526', () => {
    const query = `INSERT INTO r1 VALUES ('Hello, world');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4527', () => {
    const query = `INSERT INTO r2 VALUES ('Hello, world');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4528', () => {
    const query = `insert into final_bug select number % 10, 1 from numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4529', () => {
    const query = `INSERT INTO encryption_test (input) VALUES (''), ('text'), ('What Is ClickHouse? ClickHouse is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4530', () => {
    const query = `INSERT INTO decrypt_null VALUES ('2022-08-02 00:00:00', 1, encrypt('aes-256-gcm', 'value1', 'keykeykeykeykeykeykeykeykeykey01', 'iv1'), 'iv1'), ('2022-09-02 00:00:00', 2, encrypt('aes-256-gcm', 'value2', 'keykeykeykeykeykeykeykeykeykey02', 'iv2'), 'iv2'), ('2022-09-02 00:00:01', 3, encrypt('aes-256-gcm', 'value3', 'keykeykeykeykeykeykeykeykeykey03', 'iv3'), 'iv3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4531', () => {
    const query = `INSERT INTO test SELECT * FROM numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4532', () => {
    const query = `INSERT INTO enum VALUES ('hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4533', () => {
    const query = `INSERT INTO test_01307 (id, val) select number as id, toString(number) as val from numbers(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4534', () => {
    const query = `insert into data values(toDateTime('2020-05-14 02:08:00'),'some_field_value',7.);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4535', () => {
    const query = `insert into t select number from numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4536', () => {
    const query = `insert into t_buf values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4537', () => {
    const query = `insert into h values ('2020-06-10', 16671268, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4538', () => {
    const query = `insert into polygon_01302 values ([[[(23.725750, 37.971536)]]], [[[(4.3826169, 50.8119483)]]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4539', () => {
    const query = `INSERT INTO geo VALUES ((0, 0), 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4540', () => {
    const query = `INSERT INTO geo VALUES ((1, 0), 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4541', () => {
    const query = `INSERT INTO geo VALUES ((2, 0), 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4542', () => {
    const query = `INSERT INTO geo VALUES ([(0, 0), (10, 0), (10, 10), (0, 10)], 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4543', () => {
    const query = `INSERT INTO geo VALUES ([(1, 0), (10, 0), (10, 10), (0, 10)], 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4544', () => {
    const query = `INSERT INTO geo VALUES ([(2, 0), (10, 0), (10, 10), (0, 10)], 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4545', () => {
    const query = `INSERT INTO geo VALUES ([[(0, 0), (10, 0), (10, 10), (0, 10)], [(4, 4), (5, 4), (5, 5), (4, 5)]], 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4546', () => {
    const query = `INSERT INTO geo VALUES ([[(1, 0), (10, 0), (10, 10), (0, 10)], [(4, 4), (5, 4), (5, 5), (4, 5)]], 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4547', () => {
    const query = `INSERT INTO geo VALUES ([[(2, 0), (10, 0), (10, 10), (0, 10)], [(4, 4), (5, 4), (5, 5), (4, 5)]], 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4548', () => {
    const query = `INSERT INTO geo VALUES ([[[(0, 0), (10, 0), (10, 10), (0, 10)], [(4, 4), (5, 4), (5, 5), (4, 5)]], [[(-10, -10), (-10, -9), (-9, 10)]]], 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4549', () => {
    const query = `INSERT INTO geo VALUES ([[[(1, 0), (10, 0), (10, 10), (0, 10)], [(4, 4), (5, 4), (5, 5), (4, 5)]], [[(-10, -10), (-10, -9), (-9, 10)]]], 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4550', () => {
    const query = `INSERT INTO geo VALUES ([[[(2, 0), (10, 0), (10, 10), (0, 10)], [(4, 4), (5, 4), (5, 5), (4, 5)]], [[(-10, -10), (-10, -9), (-9, 10)]]], 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4551', () => {
    const query = `INSERT INTO geo VALUES ((0., 0.), 'b', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4552', () => {
    const query = `INSERT INTO geo VALUES ((1., 0.), 'c', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4553', () => {
    const query = `INSERT INTO geo VALUES ((2., 0.), 'd', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4554', () => {
    const query = `INSERT INTO geo VALUES ([(0., 0.), (10, 0), (10, 10), (0, 10)], 'b', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4555', () => {
    const query = `INSERT INTO geo VALUES ([(1., 0.), (10, 0), (10, 10), (0, 10)], 'c', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4556', () => {
    const query = `INSERT INTO geo VALUES ([(2., 0.), (10, 0), (10, 10), (0, 10)], 'd', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4557', () => {
    const query = `INSERT INTO geo VALUES ([[(0., 0.), (10, 0), (10, 10), (0, 10)], [(4, 4), (5, 4), (5, 5), (4, 5)]], 'b', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4558', () => {
    const query = `INSERT INTO geo VALUES ([[(1., 0.), (10, 0), (10, 10), (0, 10)], [(4, 4), (5, 4), (5, 5), (4, 5)]], 'c', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4559', () => {
    const query = `INSERT INTO geo VALUES ([[(2., 0.), (10, 0), (10, 10), (0, 10)], [(4, 4), (5, 4), (5, 5), (4, 5)]], 'd', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4560', () => {
    const query = `INSERT INTO geo VALUES ([[[(0., 0.), (10, 0), (10, 10), (0, 10)], [(4., 4.), (5, 4), (5, 5), (4, 5)]], [[(-10., -10.), (-10, -9), (-9, 10)]]], 'b', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4561', () => {
    const query = `INSERT INTO geo VALUES ([[[(1., 0.), (10, 0), (10, 10), (0, 10)], [(4., 4.), (5, 4), (5, 5), (4, 5)]], [[(-10., -10.), (-10, -9), (-9, 10)]]], 'c', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4562', () => {
    const query = `INSERT INTO geo VALUES ([[[(2., 0.), (10, 0), (10, 10), (0, 10)], [(4., 4.), (5, 4), (5, 5), (4, 5)]], [[(-10., -10.), (-10, -9), (-9, 10)]]], 'd', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4563', () => {
    const query = `INSERT INTO geo VALUES ('POINT(0 0)', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4564', () => {
    const query = `INSERT INTO geo VALUES ('POINT(1 0)', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4565', () => {
    const query = `INSERT INTO geo VALUES ('POINT(2 0)', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4566', () => {
    const query = `INSERT INTO geo VALUES ('POLYGON((1 0,10 0,10 10,0 10,1 0))', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4567', () => {
    const query = `INSERT INTO geo VALUES ('POLYGON((0 0,10 0,10 10,0 10,0 0))', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4568', () => {
    const query = `INSERT INTO geo VALUES ('POLYGON((2 0,10 0,10 10,0 10,2 0))', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4569', () => {
    const query = `INSERT INTO geo VALUES ('POLYGON((0 0,10 0,10 10,0 10,0 0),(4 4,5 4,5 5,4 5,4 4))', 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4570', () => {
    const query = `INSERT INTO geo VALUES ('POLYGON((2 0,10 0,10 10,0 10,2 0),(4 4,5 4,5 5,4 5,4 4))', 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4571', () => {
    const query = `INSERT INTO geo VALUES ('POLYGON((1 0,10 0,10 10,0 10,1 0),(4 4,5 4,5 5,4 5,4 4))', 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4572', () => {
    const query = `INSERT INTO geo VALUES ('MULTIPOLYGON(((1 0,10 0,10 10,0 10,1 0),(4 4,5 4,5 5,4 5,4 4)),((-10 -10,-10 -9,-9 10,-10 -10)))', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4573', () => {
    const query = `INSERT INTO geo VALUES ('MULTIPOLYGON(((0 0,10 0,10 10,0 10,0 0),(4 4,5 4,5 5,4 5,4 4)),((-10 -10,-10 -9,-9 10,-10 -10)))', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4574', () => {
    const query = `INSERT INTO geo VALUES ('MULTIPOLYGON(((2 0,10 0,10 10,0 10,2 0),(4 4,5 4,5 5,4 5,4 4)),((-10 -10,-10 -9,-9 10,-10 -10)))', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4575', () => {
    const query = `insert into merge_tree values (1, '2013-09-19', 1, 0, 2, '2013-09-19 12:43:06', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4576', () => {
    const query = `insert into merge_tree values (1, 'Hello, Alter Table!','2013-09-19', 1, 0, 2, '2013-09-19 12:43:06', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4577', () => {
    const query = `insert into merge1 values (1, '2013-09-19', 1, 0, 2, '2013-09-19 12:43:06', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4578', () => {
    const query = `insert into merge2 values (2, '2013-09-19', 1, 0, 2, '2013-09-19 12:43:06', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4579', () => {
    const query = `insert into merge1 values (1, 'Hello, Alter Table!','2013-09-19', 1, 0, 2, '2013-09-19 12:43:06', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4580', () => {
    const query = `insert into merge_distributed1 values (1, '2013-09-19', 1, 0, 2, '2013-09-19 12:43:06', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4581', () => {
    const query = `insert into merge_distributed1 values (1, 'Hello, Alter Table!','2013-09-19', 1, 0, 2, '2013-09-19 12:43:06', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4582', () => {
    const query = `insert into data_01295 values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4583', () => {
    const query = `insert into data_01295 select * from data_01295; -- no stuck for now select * from data_01295;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4584', () => {
    const query = `insert into data_01295 select * from data_01295 final settings max_threads=2; -- stuck with multiple threads select * from data_01295;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4585', () => {
    const query = `insert into data_01295 select * from data_01295 final settings max_threads=2; -- no stuck for now select * from data_01295;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4586', () => {
    const query = `insert into dist_01293 select * from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4587', () => {
    const query = `insert into data_01292 values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4588', () => {
    const query = `INSERT INTO geo VALUES((0, 0), [(0, 0), (10, 0), (10, 10), (0, 10)], [[(20, 20), (50, 20), (50, 50), (20, 50)], [(30, 30), (50, 50), (50, 30)]], [[[(0, 0), (10, 0), (10, 10), (0, 10)]], [[(20, 20), (50, 20), (50, 50), (20, 50)],[(30, 30), (50, 50), (50, 30)]]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4589', () => {
    const query = `insert into data values ('foo');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4590', () => {
    const query = `INSERT INTO pk_order(a, b, c, d) VALUES (1, 1, 101, 1), (1, 2, 102, 1), (1, 3, 103, 1), (1, 4, 104, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4591', () => {
    const query = `INSERT INTO pk_order(a, b, c, d) VALUES (1, 5, 104, 1), (1, 6, 105, 1), (2, 1, 106, 2), (2, 1, 107, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4592', () => {
    const query = `INSERT INTO pk_order(a, b, c, d) VALUES (2, 2, 107, 2), (2, 3, 108, 2), (2, 4, 109, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4593', () => {
    const query = `INSERT INTO pk_order SELECT toDateTime('2019-05-05 00:00:00') + INTERVAL number % 10 DAY, number, intHash32(number) from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4594', () => {
    const query = `INSERT INTO times SELECT now();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4595', () => {
    const query = `INSERT INTO count_lc_test(num, arr) VALUES (1,[]),(2,['a']),(3,['a','b','c']),(4,['aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4596', () => {
    const query = `insert into ES select toString(number) from numbers(10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4597', () => {
    const query = `INSERT INTO default_constraints (x) SELECT number FROM system.numbers LIMIT 5; -- { serverError VIOLATED_CONSTRAINT } INSERT INTO default_constraints (x) VALUES (0),(1),(2),(3),(4); -- { serverError VIOLATED_CONSTRAINT }
SELECT y, throwIf(NOT y < 5) FROM default_constraints;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4598', () => {
    const query = `INSERT INTO date_datetime_key_condition VALUES ('2020-01-01 00:00:00'), ('2020-01-01 10:00:00'), ('2020-01-02 00:00:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4599', () => {
    const query = `INSERT INTO data_01285 SELECT 1, number FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4600', () => {
    const query = `INSERT INTO data_01285 SELECT 1, number FROM numbers(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4601', () => {
    const query = `insert into num_10m select * from numbers(10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4602', () => {
    const query = `INSERT INTO ttl VALUES ('2000-01-01 01:02:03'), ('2000-02-03 04:05:06');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4603', () => {
    const query = `INSERT INTO current_failed_query_metrics  SELECT event, value
FROM system.events
WHERE event in ('FailedQuery', 'FailedInsertQuery', 'FailedSelectQuery');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4604', () => {
    const query = `INSERT INTO table_that_do_not_exists VALUES (42); -- { serverError UNKNOWN_TABLE } SELECT current_value - previous_value
FROM (
SELECT event, value as current_value FROM system.events WHERE event like 'FailedInsertQuery'
) AS previous
ALL LEFT JOIN (
SELECT event, value as previous_value FROM current_failed_query_metrics
) AS current
on previous.event = current.event;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4605', () => {
    const query = `INSERT INTO to_insert SELECT throwIf(1); -- { serverError FUNCTION_THROW_IF_VALUE_IS_NON_ZERO } SELECT current_value - previous_value
FROM (
SELECT event, value as current_value FROM system.events WHERE event like 'FailedInsertQuery'
) AS previous
ALL LEFT JOIN (
SELECT event, value as previous_value FROM current_failed_query_metrics
) AS current
on previous.event = current.event;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4606', () => {
    const query = `INSERT INTO rename_table_multiple VALUES (1, 2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4607', () => {
    const query = `INSERT INTO rename_table_multiple VALUES (4, '5', 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4608', () => {
    const query = `INSERT INTO rename_table_multiple VALUES (7, '8', 9, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4609', () => {
    const query = `INSERT INTO rename_table_multiple_compact VALUES (1, 2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4610', () => {
    const query = `INSERT INTO rename_table_multiple_compact VALUES (4, '5', 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4611', () => {
    const query = `INSERT INTO rename_table_multiple_compact VALUES (7, '8', 9, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4612', () => {
    const query = `insert into data_01279 select reinterpretAsString(number) from numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4613', () => {
    const query = `INSERT INTO rename_table VALUES (1, 2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4614', () => {
    const query = `INSERT INTO rename_table VALUES (4, 5, 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4615', () => {
    const query = `INSERT INTO rename_table_polymorphic VALUES (1, 2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4616', () => {
    const query = `INSERT INTO rename_table_polymorphic VALUES (4, 5, 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4617', () => {
    const query = `insert into mv_01277_1 select number k1,
number k2,
number a1,
number a2,
number b1,
number b2,
number c
from numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4618', () => {
    const query = `insert into mv_01277_2 select number a1,
number a2,
number k1,
number k2,
number b1,
number b2,
number c
from numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4619', () => {
    const query = `INSERT INTO table_for_rename1 SELECT toDate('2019-10-01') + number % 3, number, toString(number), toString(number + 1), toString(number + 2) from numbers(9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4620', () => {
    const query = `INSERT INTO table_for_rename1 SELECT toDate('2019-10-01') + number % 3, number, toString(number), toString(number + 1), toString(number) from numbers(9); ; --{serverError VIOLATED_CONSTRAINT} SELECT * FROM table_for_rename1 ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4621', () => {
    const query = `INSERT INTO table_for_rename1 SELECT toDate('2019-10-01') + number % 3, number, toString(number), toString(number + 1), toString(number + 2) from numbers(10, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4622', () => {
    const query = `INSERT INTO table_for_rename1 SELECT toDate('2019-10-01') + number % 3, number, toString(number), toString(number + 1), toString(number) from numbers(10, 10); ; --{serverError VIOLATED_CONSTRAINT} SELECT * FROM table_for_rename1 ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4623', () => {
    const query = `INSERT INTO table_for_rename1 SELECT toDate('2019-10-01') + number % 3, number, toString(number), toString(number + 1), toString(number + 2) from numbers(20,10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4624', () => {
    const query = `INSERT INTO table_for_rename1 SELECT toDate('2019-10-01') + number % 3, number, toString(number), toString(number), toString(number + 2) from numbers(20, 10); ; --{serverError VIOLATED_CONSTRAINT} SELECT * FROM table_for_rename1 ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4625', () => {
    const query = `INSERT INTO table_for_rename SELECT toDate('2019-10-01') + number % 3, number, toString(number), toString(number + 1), toString(number + 2) from numbers(9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4626', () => {
    const query = `INSERT INTO table_for_rename SELECT toDate('2019-10-01') + number % 3, number, toString(number), toString(number + 1), toString(number) from numbers(9); --{serverError VIOLATED_CONSTRAINT} SELECT * FROM table_for_rename ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4627', () => {
    const query = `INSERT INTO table_for_rename SELECT toDate('2019-10-01') + number % 3, number, toString(number), toString(number + 1), toString(number + 2) from numbers(10, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4628', () => {
    const query = `INSERT INTO table_for_rename SELECT toDate('2019-10-01') + number % 3, number, toString(number), toString(number + 1), toString(number) from numbers(10, 10); --{serverError VIOLATED_CONSTRAINT} SELECT * FROM table_for_rename ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4629', () => {
    const query = `INSERT INTO table_for_rename SELECT toDate('2019-10-01') + number % 3, number, toString(number), toString(number + 1), toString(number + 2) from numbers(20,10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4630', () => {
    const query = `INSERT INTO table_for_rename SELECT toDate('2019-10-01') + number % 3, number, toString(number), toString(number), toString(number + 2) from numbers(20, 10); --{serverError VIOLATED_CONSTRAINT} SELECT * FROM table_for_rename ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4631', () => {
    const query = `INSERT INTO table_for_rename (date, key, value1, value2) SELECT toDate('2019-10-01') + number % 3, number, toString(number), toString(number + 1) from numbers(9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4632', () => {
    const query = `INSERT INTO table_for_rename (date, key, value4, value5) SELECT toDate('2019-10-01') + number % 3, number, toString(number), toString(number + 1) from numbers(10, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4633', () => {
    const query = `INSERT INTO table_for_rename (date, key, value1, value2) SELECT toDate('2019-10-01') + number % 3, number, toString(number), toString(number + 1) from numbers(20,10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4634', () => {
    const query = `INSERT INTO visits_dist (StartDate, Name) VALUES ('2020-01-01', 'hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4635', () => {
    const query = `INSERT INTO visits_dist (StartDate, Name) VALUES ('2020-01-02', 'hello2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4636', () => {
    const query = `INSERT INTO t (d, s, c) VALUES ('2020-01-01', 'ABC', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4637', () => {
    const query = `INSERT INTO t (d, s, c) VALUES ('2020-01-01', 'ABC', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4638', () => {
    const query = `INSERT INTO foo VALUES ('2020-01-01', 'test1', 10), ('2020-01-01', 'test2', 20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4639', () => {
    const query = `INSERT INTO bar VALUES ('2020-01-01', 'test2', 30), ('2020-01-01', 'test3', 40);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4640', () => {
    const query = `INSERT INTO offset_without_limit SELECT * FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4641', () => {
    const query = `INSERT INTO data_null VALUES (NULL, 2, NULL, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4642', () => {
    const query = `INSERT INTO set_null VALUES (NULL, 2, NULL, NULL, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4643', () => {
    const query = `INSERT INTO data_01269 VALUES (1, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4644', () => {
    const query = `INSERT INTO dummy VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4645', () => {
    const query = `insert into src_table select * from numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4646', () => {
    const query = `insert into right_table select toDate('2020-01-01') + number, number, number / 2 from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4647', () => {
    const query = `insert into left_table select toDate('2020-01-01'), 0, number * 2 from numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4648', () => {
    const query = `insert into left_table select toDate('2020-01-01'), 5, number * 2 from numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4649', () => {
    const query = `insert into left_table select toDate('2020-01-01') + 5, 5, number * 2 from numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4650', () => {
    const query = `INSERT INTO tab VALUES (1,1),(1,2),(1,3),(1,4),(1,5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4651', () => {
    const query = `INSERT INTO tab VALUES (2,6),(2,7),(2,8),(2,9),(2,0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4652', () => {
    const query = `INSERT INTO database_for_dict_01268.table_for_dict1 VALUES (100500, 10000000, 'Hello world');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4653', () => {
    const query = `INSERT INTO database_for_dict_01268.table_for_dict2 VALUES (1, 0, 'Russia');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4654', () => {
    const query = `INSERT INTO database_for_dict_01268.table_for_dict2 VALUES (2, 1, 'Moscow');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4655', () => {
    const query = `INSERT INTO database_for_dict_01268.table_for_dict2 VALUES (3, 2, 'Center');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4656', () => {
    const query = `INSERT INTO database_for_dict_01268.table_for_dict2 VALUES (4, 0, 'Great Britain');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4657', () => {
    const query = `INSERT INTO database_for_dict_01268.table_for_dict2 VALUES (5, 4, 'London');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4658', () => {
    const query = `INSERT INTO database_for_dict_01268.table_for_dict3 VALUES (1, 0.5, 'Russia');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4659', () => {
    const query = `INSERT INTO database_for_dict_01268.table_for_dict3 VALUES (2, 1.6, 'Moscow');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4660', () => {
    const query = `INSERT INTO database_for_dict_01268.table_for_dict3 VALUES (3, 2.3, 'Center');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4661', () => {
    const query = `INSERT INTO database_for_dict_01268.table_for_dict3 VALUES (4, 0.2, 'Great Britain');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4662', () => {
    const query = `INSERT INTO database_for_dict_01268.table_for_dict3 VALUES (5, 4.9, 'London');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4663', () => {
    const query = `INSERT INTO ints VALUES (1, 8, 11, 16, 21, 32, 41, 64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4664', () => {
    const query = `INSERT INTO floats VALUES (1.1, 1.2, 1.3, 41.1, 41.1, 42.1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4665', () => {
    const query = `INSERT INTO strings VALUES ('test', 'string');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4666', () => {
    const query = `insert into t1 (date, s1,s2) values(today()-1,'aaa','bbb');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4667', () => {
    const query = `insert into t1 (date, s1,s2) values(today(),'aaa2','bbb2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4668', () => {
    const query = `INSERT INTO tztest (timeBerlin, timeLA) VALUES ('2019-05-06 12:00:00', '2019-05-06 12:00:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4669', () => {
    const query = `INSERT INTO LOG_T VALUES (123, ['Hello', 'ProcessName'], ['World', 'node']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4670', () => {
    const query = `INSERT INTO m VALUES (123);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4671', () => {
    const query = `INSERT INTO m VALUES ('a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4672', () => {
    const query = `INSERT INTO m VALUES ('b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4673', () => {
    const query = `INSERT INTO testTable VALUES ('A', 1),('B',2),('C',3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4674', () => {
    const query = `INSERT INTO table_for_dict VALUES (100500, 10000000, 'Hello world');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4675', () => {
    const query = `INSERT INTO test_dict_db.table1 VALUES ('id1',1,'20200127-1',701,'20200127-1-01',0,300,NULL,'N1','Hi','N40',NULL,1,'2020-02-03 10:37:59',NULL,'2020-02-04 11:35:14','2020-02-08 05:32:04',NULL,NULL,'12345'),('id1',1,'20200127-1',701,'20200127-1-01',0,300,NULL,'N1','Hi','N40',NULL,1,'2020-02-03 10:37:59',NULL,'2020-02-04 11:35:14','2020-02-08 05:32:04',NULL,NULL,'12345'),('id1',1,'20200127-1',702,'20200127-1-02',0,300,NULL,'N1','Hi','N40',NULL,1,'2020-02-03 10:37:59',NULL,'2020-02-04 11:35:14','2020-02-08 05:32:04',NULL,NULL,'12345'),('id1',1,'20200127-1',703,'20200127-1-03',0,300,NULL,'N1','Hi','N40',NULL,1,'2020-02-03 10:37:59',NULL,'2020-02-04 11:35:14','2020-02-08 05:32:04',NULL,NULL,'12345'),('id1',1,'20200127-1',704,'20200127-1-04',0,300,NULL,'N1','Hi','N40',NULL,1,'2020-02-03 10:37:59',NULL,'2020-02-04 11:35:14','2020-02-08 05:32:04',NULL,NULL,'12345'),('id1',1,'20200127-1',705,'20200127-1-05',0,300,NULL,'N1','Hi','N40',NULL,1,'2020-02-03 10:37:59',NULL,'2020-02-04 11:35:14','2020-02-08 05:32:04',NULL,NULL,'12345'),('id1',1,'20200202-1',711,'20200202-1-01',0,200,NULL,'C2','Hello','C40',NULL,1,'2020-02-03 11:07:57',NULL,NULL,NULL,'2020-02-03 11:09:23',NULL,NULL),('id1',1,'20200202-2',712,'20200202-2-01',0,0,NULL,'C3','bye','R40',NULL,1,'2020-02-03 14:13:10',NULL,'2020-02-03 16:11:31','2020-02-07 05:32:05','2020-02-07 11:18:15','2020-02-07 11:18:16','123455'),('id1',1,'20200202-2',713,'20200202-2-02',0,0,NULL,'C3','bye','R40',NULL,1,'2020-02-03 14:13:10',NULL,'2020-02-03 16:11:31','2020-02-07 05:32:05','2020-02-07 11:18:15','2020-02-07 11:18:16','123455'),('id1',2,'20200128-1',701,'20200128-1-01',0,0,NULL,'N1','Hi','N40',NULL,2,'2020-02-03 17:07:27',NULL,'2020-02-05 13:33:55','2020-02-13 05:32:04',NULL,NULL,'A123755'),('id1',2,'20200131-1',701,'20200131-1-01',0,0,NULL,'N1','Hi','N40',NULL,1,'2020-02-03 13:07:17',NULL,'2020-02-04 13:47:55','2020-02-12 05:32:04',NULL,NULL,'A123485'),('id1',2,'20200201-1',701,'20200201-1-01',0,0,NULL,'N1','Hi','N40',NULL,1,'2020-02-03 21:07:37',NULL,'2020-02-05 13:40:51','2020-02-13 05:32:04',NULL,NULL,'A123455'),('id1',2,'20200202-1',711,'20200202-1-01',0,0,NULL,'N1','Hi','N40',NULL,1,'2020-02-03 02:06:54',NULL,'2020-02-04 13:36:45','2020-02-12 05:32:04',NULL,NULL,'A123459'),('id1',2,'20200202-1',712,'20200202-1-02',0,0,NULL,'N1','Hi','N40',NULL,1,'2020-02-03 02:06:54',NULL,'2020-02-04 13:36:45','2020-02-12 05:32:04',NULL,NULL,'A123429'),('id2',1,'20200131-1',401,'20200131-1-01',0,210,'2020-02-16 05:22:04','N1','Hi','N40',NULL,1,'2020-02-03 10:11:00',NULL,'2020-02-05 17:30:05','2020-02-09 05:32:05',NULL,NULL,'454545'),('id2',1,'20200131-1',402,'20200131-1-02',0,210,'2020-02-16 05:22:04','N1','Hi','N40',NULL,1,'2020-02-03 10:11:00',NULL,'2020-02-05 17:30:05','2020-02-09 05:32:05',NULL,NULL,'454545'),('id2',1,'20200131-1',403,'20200131-1-03',0,270,'2020-02-16 05:22:04','N1','Hi','N40',NULL,1,'2020-02-03 10:11:00',NULL,'2020-02-05 17:30:05','2020-02-09 05:32:05',NULL,NULL,'454545'),('id2',1,'20200131-1',404,'20200131-1-04',0,270,'2020-02-16 05:22:04','N1','Hi','N40',NULL,1,'2020-02-03 10:11:00',NULL,'2020-02-05 17:30:05','2020-02-09 05:32:05',NULL,NULL,'454545'),('id2',1,'20200131-1',405,'20200131-1-05',0,380,NULL,'N1','Hi','N40',NULL,1,'2020-02-03 10:11:00',NULL,'2020-02-11 16:52:58','2020-02-15 05:32:04',NULL,NULL,'6892144935823'),('id2',1,'20200131-1',406,'20200131-1-06',0,380,NULL,'N1','Hi','N40',NULL,1,'2020-02-03 10:11:00',NULL,'2020-02-11 16:52:58','2020-02-15 05:32:04',NULL,NULL,'6892144935823'),('id2',1,'20200131-1',407,'20200131-1-07',0,280,NULL,'C2','Hello','C40',NULL,1,'2020-02-03 10:11:00',NULL,NULL,NULL,'2020-02-04 11:01:21',NULL,NULL),('id2',1,'20200131-1',408,'20200131-1-08',0,0,NULL,'N1','Hi','N40',NULL,1,'2020-02-03 10:11:00',NULL,'2020-02-05 17:30:05','2020-02-09 05:32:04',NULL,NULL,'454545'),('id2',1,'20200201-1',401,'20200201-1-01',0,190,'2020-02-16 05:22:05','N1','Hi','N40',NULL,1,'2020-02-03 12:06:17',NULL,'2020-02-05 17:30:30','2020-02-09 05:32:03',NULL,NULL,'90071'),('id2',1,'20200201-1',402,'20200201-1-01',0,160,'2020-02-14 05:22:13','N1','Hi','N40',NULL,1,'2020-02-03 06:21:05',NULL,'2020-02-03 17:42:35','2020-02-07 05:32:04',NULL,NULL,'96575'),('id2',1,'20200201-1',403,'20200201-1-02',0,230,'2020-02-14 05:22:13','N1','Hi','N40',NULL,1,'2020-02-03 06:21:05',NULL,'2020-02-03 17:42:35','2020-02-07 05:32:04',NULL,NULL,'96575'),('id2',1,'20200202-1',404,'20200202-1-01',0,130,'2020-02-14 05:22:14','N1','Hi','N40',NULL,1,'2020-02-03 14:00:39',NULL,'2020-02-03 17:42:45','2020-02-07 05:32:04',NULL,NULL,'96850'),('id3',1,'20200130-1',391,'20200130-1-01',0,300,NULL,'N1','Hi','N40',NULL,1,'2020-02-03 10:26:46',NULL,'2020-02-05 15:33:01','2020-02-08 05:32:05',NULL,NULL,'27243'),('id3',1,'20200130-1',392,'20200130-1-02',0,300,NULL,'N1','Hi','N40',NULL,1,'2020-02-03 10:26:46',NULL,'2020-02-10 16:16:11','2020-02-13 05:32:06',NULL,NULL,'92512'),('id3',1,'20200131-1',393,'20200131-1-01',0,0,NULL,'C2','Hello','C40',NULL,1,'2020-02-03 10:24:38',NULL,NULL,NULL,'2020-02-05 14:04:40',NULL,NULL),('id3',1,'20200131-2',391,'20200131-1-01',0,0,NULL,'N1','Hi','N40',NULL,1,'2020-02-03 10:22:08',NULL,'2020-02-06 14:27:06','2020-02-09 05:32:04',NULL,NULL,'46433'),('id3',1,'20200131-2',392,'20200131-1-02',0,0,NULL,'N1','Hi','N40',NULL,1,'2020-02-03 10:22:08',NULL,'2020-02-06 14:27:06','2020-02-09 05:32:02',NULL,NULL,'46433');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4676', () => {
    const query = `INSERT INTO tutorial VALUES ([(123, 456), (789, 234)], [(567, 890)]), ([], [(11, 22), (33, 44), (55, 66)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4677', () => {
    const query = `INSERT INTO mass_table_457 SELECT * FROM generateRandom('\`key\` Array(Tuple(Float64, Float64)),\`name\` String,\`value\` UInt64', 1, 10, 2) LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4678', () => {
    const query = `INSERT INTO test_table VALUES ('2020-04-20', 'Hello', 123);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4679', () => {
    const query = `INSERT INTO database_for_dict.dict_source VALUES (1, 0, 'hello'), (2, 1, 'world'), (3, 2, 'upyachka'), (11, 22, 'a'), (22, 11, 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4680', () => {
    const query = `insert into data_01247 select * from system.numbers limit 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4681', () => {
    const query = `insert into test_quantile select medianTimingState(.2)(number) from (select * from numbers(1000) order by number desc);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4682', () => {
    const query = `insert into test values ('2017-04-01', '1396-01-12') ,('2017-04-02', '1396-01-13');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4683', () => {
    const query = `INSERT into test_graphite WITH dates AS
(
SELECT toStartOfDay(toDateTime(now('UTC'), 'UTC')) as today,
today - INTERVAL 3 day as older_date
)
select 1 AS key, 'sum_1' AS s, today - number * 60 - 30, number, 1, number from dates, numbers(300) union all
select 2, 'sum_1', today - number * 60 - 30, number, 1, number from dates, numbers(300) union all
select 1, 'sum_2', today - number * 60 - 30, number, 1, number from dates, numbers(300) union all
select 2, 'sum_2', today - number * 60 - 30, number, 1, number from dates, numbers(300) union all
select 1, 'max_1', today - number * 60 - 30, number, 1, number from dates, numbers(300) union all
select 2, 'max_1', today - number * 60 - 30, number, 1, number from dates, numbers(300) union all
select 1, 'max_2', today - number * 60 - 30, number, 1, number from dates, numbers(300) union all
select 2, 'max_2', today - number * 60 - 30, number, 1, number from dates, numbers(300) union all
select 1 AS key, 'sum_1' AS s, older_date - number * 60 - 30, number, 1, number from dates, numbers(1200) union all
select 2, 'sum_1', older_date - number * 60 - 30, number, 1, number from dates, numbers(1200) union all
select 1, 'sum_2', older_date - number * 60 - 30, number, 1, number from dates, numbers(1200) union all
select 2, 'sum_2', older_date - number * 60 - 30, number, 1, number from dates, numbers(1200) union all
select 1, 'max_1', older_date - number * 60 - 30, number, 1, number from dates, numbers(1200) union all
select 2, 'max_1', older_date - number * 60 - 30, number, 1, number from dates, numbers(1200) union all
select 1, 'max_2', older_date - number * 60 - 30, number, 1, number from dates, numbers(1200) union all
select 2, 'max_2', older_date - number * 60 - 30, number, 1, number from dates, numbers(1200);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4684', () => {
    const query = `INSERT INTO test1 SELECT toString(number) FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4685', () => {
    const query = `INSERT INTO test2 SELECT toString(number) FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4686', () => {
    const query = `insert into kv values (1, 10, 20, 10, 20, 30), (2, 11, 20, 10, 20, 30), (1, 18, 20, 10, 20, 30), (1, 20, 20, 10, 20, 30), (3, 70, 20, 10, 20, 30), (4, 10, 20, 10, 20, 30), (1, 10, 20, 10, 20, 30), (5, 10, 20, 10, 20, 30), (1, 10, 20, 10, 20, 30), (8, 30, 20, 10, 20, 30), (1, 10, 20, 10, 20, 30), (6, 10, 20, 10, 20, 30), (1, 10, 20, 10, 20, 30), (7, 18, 20, 10, 20, 30), (1, 10, 20, 10, 20, 30), (7, 10, 20, 10, 20, 30), (1, 10, 20, 10, 20, 30), (8, 10, 20, 10, 20, 30), (1, 10, 20, 10, 20, 30);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4687', () => {
    const query = `insert into shard_0.num_01232 select number from numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4688', () => {
    const query = `insert into shard_1.num_01232 select number from numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4689', () => {
    const query = `insert into shard_0.num2_01232 select number from numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4690', () => {
    const query = `insert into shard_1.num2_01232 select number from numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4691', () => {
    const query = `INSERT INTO null_in VALUES (1, 1, 1, '1') (2, 2, NULL, NULL) (3, 3, 3, '3') (4, 4, NULL, NULL) (5, 5, 5, '5');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4692', () => {
    const query = `INSERT INTO test_set2 VALUES (1), (NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4693', () => {
    const query = `INSERT INTO null_in_subquery SELECT number % 3, number, number FROM system.numbers LIMIT 99999;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4694', () => {
    const query = `INSERT INTO null_in_subquery VALUES (0, 123456780, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4695', () => {
    const query = `INSERT INTO null_in_subquery VALUES (1, 123456781, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4696', () => {
    const query = `INSERT INTO null_in_tuple VALUES (1, 1, (1, '1')) (2, 2, (2, NULL)) (3, 3, (NULL, '3')) (4, 4, (NULL, NULL));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4697', () => {
    const query = `INSERT INTO markdown VALUES (1, 'name1', [1,2,3], 'Some long string', 'name1', 1.11), (2, 'name2', [4,5,60000], Null, 'Another long string', 222.222222), (30000, 'One more long string', [7,8,9], 'name3', 'name3', 3.33);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4698', () => {
    const query = `insert into shard_0.shard_01231_distributed_aggregation_memory_efficient select * from numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4699', () => {
    const query = `insert into shard_1.shard_01231_distributed_aggregation_memory_efficient select * from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4700', () => {
    const query = `INSERT INTO join_test (id, num) SELECT number, number FROM system.numbers LIMIT 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4701', () => {
    const query = `INSERT INTO join_test (id, num) SELECT number, number * 2 FROM system.numbers LIMIT 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4702', () => {
    const query = `insert into data_01227 select * from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4703', () => {
    const query = `insert into data_01223 select * from numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4704', () => {
    const query = `insert into data_01223 select number%3 from numbers(30);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4705', () => {
    const query = `INSERT INTO tt1 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4706', () => {
    const query = `INSERT INTO tt2 VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4707', () => {
    const query = `INSERT INTO tt3(a, c) VALUES (3, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4708', () => {
    const query = `INSERT INTO tt4 VALUES (5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4709', () => {
    const query = `INSERT INTO local_01213 SELECT toString(number) FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4710', () => {
    const query = `INSERT INTO table_for_rename_nested (date, key, n.x, n.y, value1) SELECT toDate('2019-10-01'), number, [number + 1, number + 2, number + 3], ['a', 'b', 'c'], toString(number) FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4711', () => {
    const query = `INSERT INTO table_rename_with_default (date, key, value1) SELECT toDateTime(toDate('2019-10-01') + number % 3, 'Asia/Istanbul'), number, toString(number)  from numbers(9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4712', () => {
    const query = `INSERT INTO table_rename_with_ttl SELECT toDateTime(toDate('2019-10-01') + number % 3, 'Asia/Istanbul'), toDateTime(toDate('2018-10-01') + number % 3, 'Asia/Istanbul'), toString(number), toString(number) from numbers(9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4713', () => {
    const query = `INSERT INTO table_for_rename_pk SELECT toDate('2019-10-01') + number % 3, number, number, number, toString(number), toString(number) from numbers(9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4714', () => {
    const query = `INSERT INTO table_for_rename_with_primary_key SELECT toDate('2019-10-01') + number % 3, number, number, number, toString(number), toString(number) from numbers(9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4715', () => {
    const query = `INSERT INTO table_for_rename_nested (date, key, n.x, n.y, value1) SELECT toDate('2019-10-01'), number, [number + 1, number + 2, number + 3], ['a', 'b', 'c'], [[toString(number)]] FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4716', () => {
    const query = `INSERT INTO table_with_compact_parts SELECT toDate('2019-10-01') + number % 3, number, toString(number), toString(number), toString(number) from numbers(9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4717', () => {
    const query = `INSERT INTO table_for_rename SELECT toDate('2019-10-01') + number % 3, number, toString(number), toString(number), toString(number) from numbers(9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4718', () => {
    const query = `INSERT INTO t SELECT number FROM numbers(10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4719', () => {
    const query = `insert into mt_compact (a, s, n.y, lc) select number, toString((number * 2132214234 + 5434543) % 2133443), ['a', 'b', 'c'], number % 2 ? 'bar' : 'baz' from numbers(90);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4720', () => {
    const query = `insert into mt_compact (a, s, n.x, lc) select number % 3, toString((number * 75434535 + 645645) % 2133443), [1, 2], toString(number) from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4721', () => {
    const query = `INSERT INTO table_with_single_pk SELECT number, toString(number % 10) FROM numbers(10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4722', () => {
    const query = `INSERT INTO table_with_multi_pk SELECT number % 32, number, toDateTime('2019-10-01 00:00:00'), toString(number % 10) FROM numbers(10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4723', () => {
    const query = `INSERT INTO table_with_function_pk SELECT number % 32, number, toDateTime('2019-10-01 00:00:00'), toString(number % 10) FROM numbers(10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4724', () => {
    const query = `INSERT INTO table_without_pk SELECT number % 32, number, toDateTime('2019-10-01 00:00:00'), toString(number % 10) FROM numbers(10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4725', () => {
    const query = `INSERT INTO summing SELECT '', 1, e FROM generateRandom('e Enum(\\'hello\\' = 1, \\'world\\' = 2)', 1) LIMIT 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4726', () => {
    const query = `INSERT INTO test_01191._ VALUES (42, 'test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4727', () => {
    const query = `insert into mt values (42, 'mt');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4728', () => {
    const query = `insert into t1 values (1, 'test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4729', () => {
    const query = `insert into t1 values (2, null);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4730', () => {
    const query = `INSERT INTO numbers SELECT * FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4731', () => {
    const query = `INSERT INTO src SELECT number, toString(number) FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4732', () => {
    const query = `INSERT INTO mv SELECT toString(number + 1000) FROM numbers(1000); -- { serverError TYPE_MISMATCH } INSERT INTO mv SELECT arrayJoin(['42', 'test']); -- { serverError TYPE_MISMATCH }
SELECT count(), sum(n), sum(toInt64(s)), max(n), min(n) FROM src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4733', () => {
    const query = `insert into mt2 values (10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4734', () => {
    const query = `insert into mt1 values (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4735', () => {
    const query = `insert into mt2 values (20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4736', () => {
    const query = `insert into mt1 values (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4737', () => {
    const query = `insert into mt2 values (30);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4738', () => {
    const query = `insert into mt1 values (4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4739', () => {
    const query = `insert into mt2 values (40);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4740', () => {
    const query = `insert into mt1 values (6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4741', () => {
    const query = `insert into mt2 values (60);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4742', () => {
    const query = `insert into mt1 values ([1]); -- { clientError ILLEGAL_TYPE_OF_ARGUMENT } rollback;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4743', () => {
    const query = `insert into mt1 values (7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4744', () => {
    const query = `insert into mt2 values (70);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4745', () => {
    const query = `insert into m values (1); -- { serverError NOT_IMPLEMENTED } select * from m; -- { serverError INVALID_TRANSACTION }
commit; -- { serverError INVALID_TRANSACTION } -- after 48
rollback;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4746', () => {
    const query = `insert into txn_counters(n) values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4747', () => {
    const query = `insert into txn_counters(n) values (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4748', () => {
    const query = `insert into txn_counters(n) values (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4749', () => {
    const query = `insert into txn_counters(n) values (4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4750', () => {
    const query = `insert into txn_counters(n) values (5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4751', () => {
    const query = `insert into trunc select * from numbers(20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4752', () => {
    const query = `insert into rmt1 values (now(), arrayJoin([1, 2])); -- { clientError BAD_ARGUMENTS } insert into rmt1(n) select * from system.numbers limit arrayJoin([1, 2]); -- { serverError BAD_ARGUMENTS, INVALID_LIMIT_EXPRESSION }
insert into rmt1 values (now(), rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4753', () => {
    const query = `insert into rmt1 values (now(), rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4754', () => {
    const query = `insert into rmt1 values (rand(), rand(), now(), now());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4755', () => {
    const query = `INSERT INTO t0 SELECT quantileArrayState(0.10)([number]) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4756', () => {
    const query = `INSERT INTO t1 SELECT quantileDistinctState(0.10)(number) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4757', () => {
    const query = `INSERT INTO t2 SELECT quantileForEachState(0.10)([number]) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4758', () => {
    const query = `INSERT INTO t3 SELECT quantileIfState(0.10)(number, number % 2) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4759', () => {
    const query = `INSERT INTO t4 SELECT quantileMergeState(0.10)(state) FROM (SELECT quantileState(0.10)(number) as state FROM numbers(100));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4760', () => {
    const query = `INSERT INTO t5 SELECT quantileOrNullState(0.10)(number) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4761', () => {
    const query = `INSERT INTO t6 SELECT quantileOrDefaultState(0.10)(number) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4762', () => {
    const query = `INSERT INTO t7 SELECT quantileResampleState(0.10, 1, 2, 42)(number, number) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4763', () => {
    const query = `INSERT INTO t8 SELECT quantileState(0.10)(number) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4764', () => {
    const query = `INSERT INTO t9 SELECT quantileArrayResampleOrDefaultIfState(0.10, 1, 2, 42)([number], number, number % 2) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4765', () => {
    const query = `insert into buf values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4766', () => {
    const query = `insert into buf values (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4767', () => {
    const query = `insert into buf values (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4768', () => {
    const query = `insert into t(n) values (4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4769', () => {
    const query = `INSERT INTO dist(s) VALUES ('before moving tables');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4770', () => {
    const query = `INSERT INTO test_01155_atomic.src(s) VALUES ('after moving tables');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4771', () => {
    const query = `INSERT INTO dist(s) VALUES ('after renaming database');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4772', () => {
    const query = `INSERT INTO dist(s) VALUES ('after renaming tables');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4773', () => {
    const query = `INSERT INTO src VALUES (1), (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4774', () => {
    const query = `INSERT INTO src VALUES (3), (4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4775', () => {
    const query = `INSERT INTO demo_loan_01568_dist VALUES (1, '2021-04-13', 'qwerty', 3.14159), (2, '2021-04-14', 'asdfgh', 2.71828);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4776', () => {
    const query = `insert into tmp values ('src_table_1'), ('src_table_3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4777', () => {
    const query = `insert into mt values (3, '3'), (4, '4');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4778', () => {
    const query = `insert into rmt values (1, '1'), (2, '2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4779', () => {
    const query = `insert into rmt values (1,'1'), (2, '2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4780', () => {
    const query = `INSERT INTO t1 (x, y) VALUES (0, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4781', () => {
    const query = `INSERT INTO t1 (x, y) VALUES (1, 10) (2, 20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4782', () => {
    const query = `INSERT INTO t1 (x, y) VALUES (4, 40) (3, 30);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4783', () => {
    const query = `INSERT INTO t2 (x, y) VALUES (4, 41) (2, 21) (2, 22);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4784', () => {
    const query = `INSERT INTO t2 (x, y) VALUES (0, 0) (5, 50) (4, 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4785', () => {
    const query = `INSERT INTO multiword_types(a) VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4786', () => {
    const query = `INSERT INTO unsigned_types(a) VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4787', () => {
    const query = `INSERT INTO t1 (id, value1) VALUES (1, 'val11');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4788', () => {
    const query = `INSERT INTO t2 (id, value2) VALUES (1, 'val21');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4789', () => {
    const query = `INSERT INTO t3 (id, value3) VALUES (1, 'val31');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4790', () => {
    const query = `insert into wt select 0, number from numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4791', () => {
    const query = `insert into t1 values('1', 's', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4792', () => {
    const query = `insert into t2 values('2', 's', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4793', () => {
    const query = `insert into t3 values('3', 's', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4794', () => {
    const query = `insert into t4 values('4', 's', 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4795', () => {
    const query = `insert into tab select number, number from numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4796', () => {
    const query = `INSERT INTO pk_func SELECT '2020-05-05 01:00:00', number FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4797', () => {
    const query = `INSERT INTO pk_func SELECT '2020-05-06 01:00:00', number FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4798', () => {
    const query = `INSERT INTO pk_func SELECT '2020-05-07 01:00:00', number FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4799', () => {
    const query = `INSERT INTO pk_func SELECT '2020-05-05 01:00:00', number FROM numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4800', () => {
    const query = `INSERT INTO pk_func SELECT '2020-05-06 01:00:00', number FROM numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4801', () => {
    const query = `INSERT INTO pk_func SELECT '2020-05-07 01:00:00', number FROM numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4802', () => {
    const query = `INSERT INTO nORX SELECT 111, number, number FROM numbers(10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4803', () => {
    const query = `insert into test values ('val1'), ('val2'), ('val3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4804', () => {
    const query = `INSERT INTO default_table VALUES(1, 'index'), (2, 'fox');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4805', () => {
    const query = `INSERT INTO default_table (id) VALUES(3), (4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4806', () => {
    const query = `INSERT INTO mass_table_312 SELECT * FROM generateRandom('\`d\` Date,\`x\` UInt64,\`n.a\` Array(String),\`n.b\` Array(String)', 1, 10, 2) LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4807', () => {
    const query = `INSERT INTO mt VALUES ('2106-02-07', 'Hello'), ('1970-01-01', 'World');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4808', () => {
    const query = `INSERT INTO mt VALUES (52392, 1), (62677, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4809', () => {
    const query = `INSERT INTO mass_table_117 SELECT * FROM generateRandom('\`dt\` Date,\`site_id\` Int32,\`site_key\` String', 1, 10, 2) LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4810', () => {
    const query = `INSERT INTO date_table VALUES(1, '1', toDate('2019-01-05'), toDate('2020-01-10'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4811', () => {
    const query = `INSERT INTO source_table SELECT * FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4812', () => {
    const query = `INSERT INTO rollup_having VALUES (NULL, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4813', () => {
    const query = `INSERT INTO rollup_having VALUES ('a', NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4814', () => {
    const query = `INSERT INTO rollup_having VALUES ('a', 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4815', () => {
    const query = `insert into t select 1, sum(number) as c, getSetting('max_threads') from numbers_mt(100000000) settings max_insert_threads=4, max_threads=2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4816', () => {
    const query = `insert into t select 2, sum(number) as c, getSetting('max_threads') from numbers_mt(100000000) group by 1 settings max_insert_threads=4, max_threads=2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4817', () => {
    const query = `insert into t select 3, sum(number) as c, getSetting('max_threads') from numbers_mt(10000000) group by 3 settings max_insert_threads=4, max_threads=2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4818', () => {
    const query = `insert into t select 4, sum(number) as c, getSetting('max_threads') as mt from numbers_mt(10000000) group by mt settings max_insert_threads=4, max_threads=2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4819', () => {
    const query = `INSERT INTO sessions VALUES ('2018-01-01 00:00:00', 'v1', 's1'), ('2018-01-02 00:00:00', 'v1', 's2'), ('2018-01-03 00:00:00', 'v2', 's3'), ('2018-01-04 00:00:00', 'v1', 's4'), ('2018-01-05 00:00:00', 'v2', 's5'), ('2018-01-06 00:00:00', 'v3', 's6');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4820', () => {
    const query = `INSERT INTO orders VALUES ('2018-01-03 00:00:00', 'v1', 'o1'), ('2018-01-05 00:00:00', 'v1', 'o2'), ('2018-01-06 00:00:00', 'v2', 'o3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4821', () => {
    const query = `INSERT INTO prewhere SELECT 0, randomPrintableASCII(10000) FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4822', () => {
    const query = `INSERT INTO testtable (*) Values (now(), 'app', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4823', () => {
    const query = `INSERT INTO t1 SELECT number, number, toString(number), number from numbers(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4824', () => {
    const query = `INSERT INTO minmax_compact VALUES (0, 2, 1), (1, 1, 1), (2, 1, 1), (3, 1, 1), (4, 1, 1), (5, 2, 1), (6, 1, 2), (7, 1, 2), (8, 1, 2), (9, 1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4825', () => {
    const query = `INSERT INTO clear_column VALUES (1, 1), (2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4826', () => {
    const query = `INSERT INTO mt_compact SELECT toDate('2020-01-05'), number, toString(number) FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4827', () => {
    const query = `INSERT INTO mt_compact SELECT toDate('2020-01-06'), number, toString(number) FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4828', () => {
    const query = `INSERT INTO table_for_dict VALUES ('First', 'WINDOWS', 1), ('Second', 'LINUX', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4829', () => {
    const query = `INSERT INTO check_table_with_indices VALUES (0, 'test'), (1, 'test2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4830', () => {
    const query = `INSERT INTO db_for_dict.table_for_dict VALUES (1, 'Hello'), (2, 'World');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4831', () => {
    const query = `INSERT INTO t VALUES (1, 100, '1970-01-01'), (1, 200, '1970-01-02');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4832', () => {
    const query = `INSERT INTO test_a (OldColumn, EventTime) VALUES('1', now());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4833', () => {
    const query = `INSERT INTO test_b (OldColumn, NewColumn, EventTime) VALUES('1', '1a', now());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4834', () => {
    const query = `INSERT INTO test_b (OldColumn, NewColumn, EventTime) VALUES('2', '2a', now());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4835', () => {
    const query = `INSERT INTO test_a (OldColumn, NewColumn, EventTime) VALUES('2', '2a', now());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4836', () => {
    const query = `INSERT INTO local_01099_a SELECT number from system.numbers limit 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4837', () => {
    const query = `INSERT INTO distributed_01099_b SELECT * from distributed_01099_a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4838', () => {
    const query = `INSERT INTO distributed_01099_b SELECT * FROM urlCluster('test_cluster_two_shards', 'http://localhost:8123/?query=select+{1,2,3}+format+TSV', 'TSV', 's String');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4839', () => {
    const query = `insert into t values (1, 0) (2, 1) (3, 0) (4, 0) (5, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4840', () => {
    const query = `insert into t values (1, 1) (2, 1) (3, 0) (4, 0) (5, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4841', () => {
    const query = `INSERT INTO table_with_complex_default FORMAT JSONEachRow {"i":0, "n": 0} SELECT * FROM table_with_complex_default;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4842', () => {
    const query = `INSERT INTO test_default_using_alias(what) VALUES ('Click');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4843', () => {
    const query = `INSERT INTO mutations_and_quorum1 VALUES ('2019-01-01', 'test1'), ('2019-02-01', 'test2'), ('2019-03-01', 'test3'), ('2019-04-01', 'test4'), ('2019-05-01', 'test1'), ('2019-06-01', 'test2'), ('2019-07-01', 'test3'), ('2019-08-01', 'test4'), ('2019-09-01', 'test1'), ('2019-10-01', 'test2'), ('2019-11-01', 'test3'), ('2019-12-01', 'test4');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4844', () => {
    const query = `INSERT INTO test_table SELECT * FROM generateRandom('a Array(Int8), d Decimal32(4), c Tuple(DateTime64(3, \\'UTC\\'), UUID)', 1, 10, 2) LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4845', () => {
    const query = `INSERT INTO test_table_2 SELECT * FROM generateRandom('a Array(Int8), b UInt32, c Nullable(String), d Decimal32(4), e Nullable(Enum16(\\'h\\' = 1, \\'w\\' = 5 , \\'o\\' = -200)), f Float64, g Tuple(Date, DateTime(\\'UTC\\'), DateTime64(3, \\'UTC\\'), UUID), h FixedString(2)', 10, 5, 3) LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4846', () => {
    const query = `insert into t values (1, 1, 'a') (2, 1, 'a') (3, 1, 'a') (4, 1, 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4847', () => {
    const query = `INSERT INTO table_with_defaults_on_aliases (col1) VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4848', () => {
    const query = `INSERT INTO table_with_defaults_on_aliases (col1) VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4849', () => {
    const query = `INSERT INTO table_with_defaults_on_aliases (col1) VALUES (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4850', () => {
    const query = `INSERT INTO functional_index_mergetree VALUES (7.42)(7.41)(7.51);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4851', () => {
    const query = `INSERT INTO buffer VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4852', () => {
    const query = `insert into ax values (1, 1), (2, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4853', () => {
    const query = `insert into bx values (2), (4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4854', () => {
    const query = `insert into da_memory_efficient_shard select number, number from numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4855', () => {
    const query = `insert into test_01081 select * from system.numbers limit 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4856', () => {
    const query = `INSERT INTO test_joinGet VALUES (2, 'a'), (6, 'b'), (10, 'c'), (null, 'd');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4857', () => {
    const query = `insert into A1(a) select now();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4858', () => {
    const query = `insert into {CLICKHOUSE_DATABASE:Identifier}.test_table_01080 values(1,'test1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4859', () => {
    const query = `insert into t select number < 20 ? 0 : 1 from numbers(50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4860', () => {
    const query = `INSERT INTO alter_default select toDate('2020-01-05'), number from system.numbers limit 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4861', () => {
    const query = `insert into t select 0, 0 from numbers(50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4862', () => {
    const query = `insert into t select 0, 1  from numbers(350);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4863', () => {
    const query = `insert into t select 1, 2  from numbers(400);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4864', () => {
    const query = `insert into t select 2, 2  from numbers(400);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4865', () => {
    const query = `insert into t select 3, 0 from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4866', () => {
    const query = `INSERT INTO bloom_filter_not_has VALUES ([], '2020-02-27') (['o','a'], '2020-02-27') (['e','a','b'], '2020-02-27');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4867', () => {
    const query = `INSERT INTO bloom_filter_not_has VALUES (['o','a','b','c'], '2020-02-27') (['e','a','b','c','d'], '2020-02-27');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4868', () => {
    const query = `insert into t50 select 0, 1, repeat('a', 10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4869', () => {
    const query = `insert into t50 select number, multiIf(number < 5, 1, number < 50, 0, number < 55, 1, number < 100, 0, number < 105, 1, 0), '' from numbers(150);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4870', () => {
    const query = `INSERT INTO t SELECT number, number * 2, number * 3 FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4871', () => {
    const query = `INSERT INTO test_01073_crlf_end_of_line VALUES (1, 'hello'), (2, 'world');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4872', () => {
    const query = `INSERT INTO merge_tree VALUES ('2020-01-01'), ('2020-01-02'), ('2020-01-03'), ('2020-01-04'), ('2020-01-05'), ('2020-01-06');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4873', () => {
    const query = `INSERT INTO foo VALUES (1, 0.5, 0.2, 0.3, 0.8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4874', () => {
    const query = `INSERT INTO json_square_brackets FORMAT JSONEachRow [{"id": 1, "name": "name1"}, {"id": 2, "name": "name2"}];`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4875', () => {
    const query = `INSERT INTO json_square_brackets FORMAT JSONEachRow[];`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4876', () => {
    const query = `INSERT INTO json_square_brackets FORMAT JSONEachRow [  ]  ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4877', () => {
    const query = `insert into ttl values (1, 1, 'a') (2, 1, 'b') (3, 1, 'c') (4, 1, 'd');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4878', () => {
    const query = `insert into ttl values (1, 1, 'a') (2, 1, 'a') (3, 1, 'a') (4, 1, 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4879', () => {
    const query = `insert into ttl values (1, 2, 3, '2100-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4880', () => {
    const query = `insert into ttl values (toDateTime('2000-10-10 00:00:00'), 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4881', () => {
    const query = `insert into ttl values (toDateTime('2000-10-10 00:00:00'), 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4882', () => {
    const query = `insert into ttl values (toDateTime('2100-10-10 00:00:00'), 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4883', () => {
    const query = `insert into ttl values (toDateTime('2100-10-10 00:00:00'), 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4884', () => {
    const query = `insert into ttl values (1, 'a') (2, 'b') (3, 'c') (4, 'd');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4885', () => {
    const query = `insert into ttl values (toDate('2000-01-02'), 1, 'a') (toDate('2000-01-03'), 2, 'b') (toDate('2080-01-01'), 3, 'c') (toDate('2080-01-03'), 4, 'd');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4886', () => {
    const query = `insert into ttl values (1, 'a', 'aa') (2, 'b', 'bb') (3, 'c', 'cc') (4, 'd', 'dd');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4887', () => {
    const query = `INSERT INTO h3_indexes VALUES (599405990164561919, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4888', () => {
    const query = `INSERT INTO h3_indexes VALUES (599405990164561919, 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4889', () => {
    const query = `INSERT INTO h3_indexes VALUES (599405990164561919, 8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4890', () => {
    const query = `INSERT INTO testmt VALUES (1, '1'), (2, '2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4891', () => {
    const query = `INSERT INTO mv_source VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4892', () => {
    const query = `INSERT INTO mv_source VALUES (1),(2),(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4893', () => {
    const query = `insert into t1 values (2.4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4894', () => {
    const query = `insert into t2 values (2.4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4895', () => {
    const query = `INSERT INTO memory_01069.mt VALUES (1), (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4896', () => {
    const query = `INSERT INTO memory_01069.file VALUES (3), (4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4897', () => {
    const query = `INSERT INTO logins SELECT number as id,    '2000-01-01 08:00:00' from numbers(50000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4898', () => {
    const query = `INSERT INTO checkouts SELECT number as id, '2000-01-01 10:00:00' from numbers(50000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4899', () => {
    const query = `INSERT INTO logins    SELECT number as id, '2000-01-01 11:00:00' from numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4900', () => {
    const query = `INSERT INTO checkouts SELECT number as id, '2000-01-01 11:10:00' from numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4901', () => {
    const query = `INSERT INTO logins    SELECT number+2 as id, '2001-01-01 11:10:01' from numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4902', () => {
    const query = `INSERT INTO checkouts SELECT number+2 as id, '2001-01-01 11:10:02' from numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4903', () => {
    const query = `INSERT INTO test_alter_on_mutation select toDate('2020-01-05'), number, toString(number) from system.numbers limit 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4904', () => {
    const query = `INSERT INTO test_alter_on_mutation select toDate('2020-01-06'), number, toString(number) from system.numbers limit 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4905', () => {
    const query = `INSERT INTO test_alter_on_mutation select toDate('2020-01-07'), number, toString(number) from system.numbers limit 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4906', () => {
    const query = `INSERT INTO test_alter_on_mutation select toDate('2020-01-05'), number, toString(number) from system.numbers limit 100, 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4907', () => {
    const query = `INSERT INTO test_alter_on_mutation select toDate('2020-01-06'), number, toString(number) from system.numbers limit 100, 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4908', () => {
    const query = `INSERT INTO test_alter_on_mutation select toDate('2020-01-07'), number, toString(number) from system.numbers limit 100, 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4909', () => {
    const query = `INSERT INTO nested_alter VALUES ('2015-01-01', 6,38,'2014-07-15 13:26:50',[10,20,30],['asd','qwe','qwe'],['2000-01-01','2000-01-01','2000-01-03'],'100500');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4910', () => {
    const query = `INSERT INTO alter_bug(_time_dec) VALUES(1577351080);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4911', () => {
    const query = `INSERT INTO defaults_all_columns FORMAT JSONEachRow {"n": 1, "s": "hello"} {};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4912', () => {
    const query = `INSERT INTO defaults_all_columns FORMAT JSONEachRow {"n": 2}, {"s": "world"};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4913', () => {
    const query = `INSERT INTO test VALUES(1, 2)(0, 3)(1, 4)(0, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4914', () => {
    const query = `INSERT INTO test VALUES (-1, -1, -1, -1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4915', () => {
    const query = `INSERT INTO test_prewhere_default_column VALUES( 42, 42 );`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4916', () => {
    const query = `INSERT INTO test_prewhere_column_type VALUES ('', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4917', () => {
    const query = `insert into mt_compact_2 values (1, 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4918', () => {
    const query = `insert into test_01054_overflow.ints values (1, 1, 1, 1, 1, 1, 1, 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4919', () => {
    const query = `insert into test_01054_overflow.ints values (2, 2, 2, 2, 2, 2, 2, 2, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4920', () => {
    const query = `insert into test_01054_overflow.ints values (3, 3, 3, 3, 3, 3, 3, 3, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4921', () => {
    const query = `insert into test_01054_overflow.ints values (4, 4, 4, 4, 4, 4, 4, 4, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4922', () => {
    const query = `insert into test_01054_overflow.ints values (5, 5, 5, 5, 5, 5, 5, 5, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4923', () => {
    const query = `insert into test_01054_overflow.ints values (6, 6, 6, 6, 6, 6, 6, 6, 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4924', () => {
    const query = `insert into test_01054_overflow.ints values (7, 7, 7, 7, 7, 7, 7, 7, 7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4925', () => {
    const query = `insert into test_01054_overflow.ints values (8, 8, 8, 8, 8, 8, 8, 8, 8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4926', () => {
    const query = `insert into test_01054_overflow.ints values (9, 9, 9, 9, 9, 9, 9, 9, 9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4927', () => {
    const query = `insert into test_01054_overflow.ints values (10, 10, 10, 10, 10, 10, 10, 10, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4928', () => {
    const query = `insert into test_01054_overflow.ints values (11, 11, 11, 11, 11, 11, 11, 11, 11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4929', () => {
    const query = `insert into test_01054_overflow.ints values (12, 12, 12, 12, 12, 12, 12, 12, 12);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4930', () => {
    const query = `insert into test_01054_overflow.ints values (13, 13, 13, 13, 13, 13, 13, 13, 13);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4931', () => {
    const query = `insert into test_01054_overflow.ints values (14, 14, 14, 14, 14, 14, 14, 14, 14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4932', () => {
    const query = `insert into test_01054_overflow.ints values (15, 15, 15, 15, 15, 15, 15, 15, 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4933', () => {
    const query = `insert into test_01054_overflow.ints values (16, 16, 16, 16, 16, 16, 16, 16, 16);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4934', () => {
    const query = `insert into test_01054_overflow.ints values (17, 17, 17, 17, 17, 17, 17, 17, 17);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4935', () => {
    const query = `insert into test_01054_overflow.ints values (18, 18, 18, 18, 18, 18, 18, 18, 18);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4936', () => {
    const query = `insert into test_01054_overflow.ints values (19, 19, 19, 19, 19, 19, 19, 19, 19);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4937', () => {
    const query = `insert into test_01054_overflow.ints values (20, 20, 20, 20, 20, 20, 20, 20, 20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4938', () => {
    const query = `INSERT INTO t1 (x, str) VALUES (0, 'a1'), (1, 'a2'), (2, 'a3'), (3, 'a4'), (4, 'a5');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4939', () => {
    const query = `INSERT INTO any_left_join (x, s) VALUES (2, 'b1'), (2, 'b2'), (4, 'b3'), (4, 'b4'), (4, 'b5'), (5, 'b6');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4940', () => {
    const query = `INSERT INTO any_inner_join (x, s) VALUES (2, 'b1'), (2, 'b2'), (4, 'b3'), (4, 'b4'), (4, 'b5'), (5, 'b6');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4941', () => {
    const query = `INSERT INTO any_right_join (x, s) VALUES (2, 'b1'), (2, 'b2'), (4, 'b3'), (4, 'b4'), (4, 'b5'), (5, 'b6');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4942', () => {
    const query = `INSERT INTO semi_left_join (x, s) VALUES (2, 'b1'), (2, 'b2'), (4, 'b3'), (4, 'b4'), (4, 'b5'), (5, 'b6');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4943', () => {
    const query = `INSERT INTO semi_right_join (x, s) VALUES (2, 'b1'), (2, 'b2'), (4, 'b3'), (4, 'b4'), (4, 'b5'), (5, 'b6');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4944', () => {
    const query = `INSERT INTO anti_left_join (x, s) VALUES (2, 'b1'), (2, 'b2'), (4, 'b3'), (4, 'b4'), (4, 'b5'), (5, 'b6');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4945', () => {
    const query = `INSERT INTO anti_right_join (x, s) VALUES (2, 'b1'), (2, 'b2'), (4, 'b3'), (4, 'b4'), (4, 'b5'), (5, 'b6');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4946', () => {
    const query = `INSERT INTO left_join (x, s) VALUES (2, 'b1'), (2, 'b2'), (4, 'b3'), (4, 'b4'), (4, 'b5'), (5, 'b6');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4947', () => {
    const query = `INSERT INTO inner_join (x, s) VALUES (2, 'b1'), (2, 'b2'), (4, 'b3'), (4, 'b4'), (4, 'b5'), (5, 'b6');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4948', () => {
    const query = `INSERT INTO right_join (x, s) VALUES (2, 'b1'), (2, 'b2'), (4, 'b3'), (4, 'b4'), (4, 'b5'), (5, 'b6');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4949', () => {
    const query = `INSERT INTO full_join (x, s) VALUES (2, 'b1'), (2, 'b2'), (4, 'b3'), (4, 'b4'), (4, 'b5'), (5, 'b6');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4950', () => {
    const query = `INSERT INTO a VALUES (1,1,1)(2,2,2)(3,3,3); `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4951', () => {
    const query = `INSERT INTO id1 VALUES (1,1)(2,2)(3,3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4952', () => {
    const query = `INSERT INTO id2 VALUES (1,1)(2,2)(3,3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4953', () => {
    const query = `INSERT INTO testJoinTable VALUES (1, '1'), (2, '2'), (3, '3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4954', () => {
    const query = `INSERT INTO master VALUES (1, 'ONE');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4955', () => {
    const query = `INSERT INTO transaction VALUES (1, 52.5, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4956', () => {
    const query = `insert into {CLICKHOUSE_DATABASE:Identifier}.test_01051_d values (1, 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4957', () => {
    const query = `INSERT INTO table_for_synchronous_mutations1 select number, number from numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4958', () => {
    const query = `INSERT INTO table_for_synchronous_mutations_no_replication select number, number from numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4959', () => {
    const query = `INSERT INTO Alpha VALUES ('a', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4960', () => {
    const query = `INSERT INTO Beta VALUES ('a', 2), ('b', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4961', () => {
    const query = `INSERT INTO column_size_bug VALUES(now(),1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4962', () => {
    const query = `INSERT INTO requests (event_time) VALUES ('2010-01-01 00:00:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4963', () => {
    const query = `INSERT INTO test_count values ('2019-12-12');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4964', () => {
    const query = `INSERT INTO t_d SELECT number FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4965', () => {
    const query = `INSERT INTO t SELECT number+2 FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4966', () => {
    const query = `INSERT INTO bloom_filter_null_array VALUES ([]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4967', () => {
    const query = `INSERT INTO bloom_filter_null_array VALUES (['1', '2']) ([]) ([]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4968', () => {
    const query = `INSERT INTO bloom_filter_null_array VALUES ([]) ([]) (['2', '3']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4969', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.dicttbl VALUES (12, 'hello', '55:66:77');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4970', () => {
    const query = `INSERT INTO h3_indexes VALUES (579205133326352383,1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4971', () => {
    const query = `INSERT INTO check_query_test SELECT number, toString(number) FROM system.numbers LIMIT 81920;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4972', () => {
    const query = `INSERT INTO check_query_test_non_adaptive SELECT number, toString(number) FROM system.numbers LIMIT 81920;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4973', () => {
    const query = `INSERT INTO check_query_test_non_adaptive SELECT number, toString(number) FROM system.numbers LIMIT 77;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4974', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_for_dict VALUES (1, 1.1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4975', () => {
    const query = `INSERT INTO dist_test_01040 SELECT toUInt64(number) FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4976', () => {
    const query = `insert into tab select cityHash64(number) from numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4977', () => {
    const query = `INSERT INTO array_of_tuples values ([(1, 2), (2, 3), (3, 4)], array(tuple(1, 2, 3), tuple(2, 3, 4))), (array((1.0, 2.0)), [tuple(4, 3, 1)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4978', () => {
    const query = `INSERT INTO mt_without_pk VALUES (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4979', () => {
    const query = `INSERT INTO replicated_mt_without_pk VALUES (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4980', () => {
    const query = `INSERT INTO test_01035_avg (u64) SELECT number FROM system.numbers LIMIT 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4981', () => {
    const query = `insert into sample_final select number / (8192 * 4), toDate('2019-01-01'), toDateTime('2019-01-01 00:00:01') + number, number / (8192 * 2), number % 3 = 1 ? -1 : 1 from numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4982', () => {
    const query = `INSERT INTO test_max_parallel_replicas_lr select number as timestamp from system.numbers limit 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4983', () => {
    const query = `INSERT INTO test_table SELECT number, toString(number) FROM system.numbers LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4984', () => {
    const query = `INSERT INTO test_table SELECT number, toString(number * number) FROM system.numbers LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4985', () => {
    const query = `INSERT INTO test_table_2 FORMAT JSONCompactEachRowWithNamesAndTypes ["v1", "n.id", "n.name"]["UInt8", "Array(UInt8)", "Array(String)"][16, [15, 16, null], ["first", "second", "third"]];`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4986', () => {
    const query = `INSERT INTO test_table_2 FORMAT JSONCompactEachRowWithNames ["v1", "n.id", "n.name"][16, [15, 16, null], ["first", "second", "third"]];`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4987', () => {
    const query = `INSERT INTO TABLE tab VALUES ('hello', 'shark'), ('world', 'eagle');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4988', () => {
    const query = `INSERT INTO tab VALUES ('abcdefgh', 2, -2), ('12345678', 3, -3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4989', () => {
    const query = `INSERT INTO t VALUES ('abcdefgh', -2, -2),('12345678', -3, -3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4990', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_for_dict VALUES (1, 100, 'Hello world');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4991', () => {
    const query = `INSERT INTO sometable (date, time, value) VALUES ('2019-11-08', 1573185600, 100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4992', () => {
    const query = `INSERT INTO sometable (date, time, value, time) VALUES ('2019-11-08', 1573185600, 100, 1573185600); -- {serverError DUPLICATE_COLUMN} DROP TABLE IF EXISTS sometable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4993', () => {
    const query = `INSERT INTO t_uuid SELECT generateUUIDv4();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4994', () => {
    const query = `INSERT INTO t1 (x, s) VALUES (0, 'a1'), (1, 'a2'), (2, 'a3'), (3, 'a4'), (4, 'a5'), (2, 'a6');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4995', () => {
    const query = `INSERT INTO t2 (x, s) VALUES (2, 'b1'), (2, 'b2'), (4, 'b3'), (4, 'b4'), (4, 'b5'), (5, 'b6');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4996', () => {
    const query = `INSERT INTO t1 (x, s) VALUES (0, 'a1'), (1, 'a2'), (2, 'a3'), (3, 'a4'), (4, 'a5');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4997', () => {
    const query = `INSERT INTO t2 (x, s) VALUES (2, 'b1'), (4, 'b2'), (5, 'b4');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4998', () => {
    const query = `INSERT INTO userid_test VALUES (1),(2),(3),(4),(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 4999', () => {
    const query = `INSERT INTO userid_set VALUES (1),(2),(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5000', () => {
    const query = `insert into tst values ('2018-02-01 00:00:00', 1), ('2018-02-02 00:00:00', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5001', () => {
    const query = `insert into tst values ('2018-02-01 00:00:00', 1), ('2018-02-02 00:00:00', 2), ('2018-02-01 00:00:00', 3), ('2018-02-02 00:00:00', 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5002', () => {
    const query = `INSERT INTO empty_pk SELECT number FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5003', () => {
    const query = `INSERT INTO input VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5004', () => {
    const query = `INSERT INTO tuple_values VALUES ((1)), ((2,));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5005', () => {
    const query = `INSERT INTO test SELECT (number, number) FROM numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5006', () => {
    const query = `INSERT INTO mv_extra_columns_src VALUES (0, 0), (1, 1), (2, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5007', () => {
    const query = `INSERT INTO src_01019 VALUES (1), (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5008', () => {
    const query = `INSERT INTO src_01019 VALUES (42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5009', () => {
    const query = `INSERT INTO buffer_ SELECT toUInt64(number) FROM system.numbers LIMIT toUInt64(10e6+1); -- { serverError MEMORY_LIMIT_EXCEEDED } OPTIMIZE TABLE buffer_; -- flush just in case
CREATE MATERIALIZED VIEW aggregation_ engine=Memory() AS SELECT toString(key) FROM null_;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5010', () => {
    const query = `INSERT INTO buffer_ SELECT toUInt64(number) FROM system.numbers LIMIT toUInt64(10e6+1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5011', () => {
    const query = `INSERT INTO TESTTABLE4 VALUES (0,'1','1'), (1,'0','1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5012', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie SELECT
'255.255.255.255/' || toString((number + 1) * 13 % 33) AS prefix,
toUInt32((number + 1) * 13 % 33) AS asn,
'NA' as cca2
FROM system.numbers LIMIT 33;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5013', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.0.0.2', 1272, 'RU');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5014', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.0.0.0/8', 1270, 'RU');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5015', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('202.79.32.2', 11211, 'NP');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5016', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('101.79.55.22', 11212, 'UK');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5017', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie SELECT
'255.255.255.255/' || toString(number) AS prefix,
toUInt32(number) AS val
FROM VALUES ('number UInt32', 5, 13, 24, 30);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5018', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.0.0.0/8', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5019', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.0.0.0/16', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5020', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.0.0.0/24', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5021', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.0.0.1/32', 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5022', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.0.127.0/32', 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5023', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.0.128.1/32', 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5024', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.0.255.0/32', 7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5025', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.0.255.1/32', 8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5026', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.0.255.255/32', 9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5027', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.1.0.0/16', 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5028', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.1.1.0', 11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5029', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.1.255.0/24', 12);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5030', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.254.0.0/15', 13);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5031', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.254.0.127', 14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5032', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.255.0.0/16', 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5033', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.255.128.0/24', 16);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5034', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.255.128.1/32', 17);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5035', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.255.128.10/32', 18);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5036', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.255.128.128/25', 19);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5037', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.255.255.128/32', 20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5038', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie VALUES ('127.255.255.255/32', 21);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5039', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ip_trie VALUES ('101.79.55.22', 'JA'), ('127.0.0.1', 'RU'), ('2620:0:870::/48', 'US'), ('2a02:6b8:1::/48', 'UK'), ('2001:db8::/32', 'ZZ');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5040', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ip_trie SELECT
'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/' || toString((number + 1) * 13 % 129) AS prefix,
toString((number + 1) * 13 % 129) AS val
FROM system.numbers LIMIT 129;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5041', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ip_trie SELECT
'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/' || toString(number) AS prefix,
toString(number) AS val
FROM VALUES ('number UInt32', 5, 13, 24, 48, 49, 99, 127);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5042', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ip_trie VALUES ('101.79.55.22', 'JA');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5043', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_ip_trie SELECT
'255.255.255.255/' || toString(number) AS prefix,
toString(number) AS val
FROM VALUES ('number UInt32', 5, 13, 24, 30);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5044', () => {
    const query = `INSERT INTO database_for_dict.table_for_dict SELECT number, number % 17, toString(number * number), number / 2.0 from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5045', () => {
    const query = `INSERT INTO database_for_dict.table_for_dict SELECT number, number % 17, toString(number * number), number / 2.0 from numbers(100, 100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5046', () => {
    const query = `INSERT INTO database_for_dict.table_for_dict SELECT number, number % 17, toString(number * number), number / 2.0 from numbers(200, 100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5047', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.date_table VALUES(1, toDate('2019-05-05'), toDate('2019-05-20'), 0.33);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5048', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.date_table VALUES(1, toDate('2019-05-21'), toDate('2019-05-30'), 0.42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5049', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.date_table VALUES(2, toDate('2019-05-21'), toDate('2019-05-30'), 0.46);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5050', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.datetime_table VALUES(1, toDateTime('2019-05-05 00:00:00'), toDateTime('2019-05-20 00:00:00'), 0.33);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5051', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.datetime_table VALUES(1, toDateTime('2019-05-21 00:00:00'), toDateTime('2019-05-30 00:00:00'), 0.42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5052', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.datetime_table VALUES(2, toDateTime('2019-05-21 00:00:00'), toDateTime('2019-05-30 00:00:00'), 0.46);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5053', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_with_hierarchy VALUES (3, 2, 'Hamovniki'), (2, 1, 'Moscow'), (1, 10000, 'Russia') (7, 10000, 'Ulan-Ude');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5054', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.table_for_dict SELECT number, number % 17, toString(number * number), number / 2.0 from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5055', () => {
    const query = `INSERT INTO database_for_dict_01018.table_for_dict VALUES (1, 100, 'Hello world');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5056', () => {
    const query = `INSERT INTO mem1 VALUES (10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5057', () => {
    const query = `INSERT INTO dist_1 VALUES (20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5058', () => {
    const query = `INSERT INTO mem2 VALUES (100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5059', () => {
    const query = `INSERT INTO mem3 VALUES (100, 'foo');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5060', () => {
    const query = `INSERT INTO defaults VALUES ((12, 43), (12312, 43453) ,(-10, 32)) ((1, 4), (546, 12345), (546, 12345)) ((90, 9875), (43456, 234203), (1231, -123)) ((87, 987), (545645, 768354634), (9123, 909));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5061', () => {
    const query = `INSERT INTO defaults VALUES (1, 2, 3, 4) (12, 4345, 435, 1233) (45, 675, 32343, 54566) (90, 784, 9034, 778752);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5062', () => {
    const query = `INSERT INTO test_string VALUES ('hello', 'hello', 'hello', 'hello') ('hello', 'hellow', 'hello', 'hellow') ('clickhouse', '012345', 'clickhouse', '012345');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5063', () => {
    const query = `INSERT INTO defaults values ('It is the latest occurrence of the Southeast European haze, the issue that occurs in constant intensity during every wet season. It has mainly been caused by forest fires resulting from illegal slash-and-burn clearing performed on behalf of the palm oil industry in Kazakhstan, principally on the islands, which then spread quickly in the dry season.') ('It is the latest occurrence of the Southeast Asian haze, the issue that occurs in constant intensity during every wet season. It has mainly been caused by forest fires resulting from illegal slash-and-burn clearing performed on behalf of the palm oil industry in Kazakhstan, principally on the islands, which then spread quickly in the dry season.');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5064', () => {
    const query = `INSERT INTO defaults SELECT arrayJoin(splitByString('\\n\\n', 'ClickHouse uses all available hardware to its full potential to process each query as fast as possible. Peak processing performance for a single query stands at more than 2 terabytes per second (after decompression, only used columns). In distributed setup reads are automatically balanced among healthy replicas to avoid increasing latency.
ClickHouse supports multi-master asynchronous replication and can be deployed across multiple datacenters. All nodes are equal, which allows avoiding having single points of failure. Downtime of a single node or the whole datacenter wont affect the systems availability for both reads and writes.
ClickHouse is simple and works out-of-the-box. It streamlines all your data processing: ingest all your structured data into the system and it becomes instantly available for building reports. SQL dialect allows expressing the desired result without involving any custom non-standard API that could be found in some alternative systems.
ClickHouse makes full use of all available hardware to process every request as quickly as possible. Peak performance for a single query is over 2 terabytes per second (only used columns after unpacking). In a distributed setup, reads are automatically balanced across healthy replicas to avoid increased latency.
ClickHouse supports asynchronous multi-master replication and can be deployed across multiple data centers. All nodes are equal to avoid single points of failure. Downtime for one site or the entire data center will not affect the system''s read and write availability.
ClickHouse is simple and works out of the box. It simplifies all the processing of your data: it loads all your structured data into the system, and they immediately become available for building reports. The SQL dialect allows you to express the desired result without resorting to any non-standard APIs that can be found in some alternative systems.
ClickHouse makes full use of all available hardware to process each request as quickly as possible. Peak performance for a single query is over 2 terabytes per second (used columns only after unpacking). In a distributed setup, reads are automatically balanced across healthy replicas to avoid increased latency.
ClickHouse supports asynchronous multi-master replication and can be deployed across multiple data centers. All nodes are equal to avoid a single point of failure. Downtime for one site or the entire data center will not affect the system''s read / write availability.
ClickHouse is simple and works out of the box. It simplifies all the processing of your data: it loads all your structured data into the system, and they are immediately available for building reports. The SQL dialect allows you to express the desired result without resorting to any of the non-standard APIs found in some alternative systems.
ClickHouse makes full use of all available hardware to process each request as quickly as possible. Peak performance for a single query is over 2 terabytes per second (using columns only after unpacking). In a distributed setup, reads are automatically balanced across healthy replicas to avoid increased latency.
ClickHouse supports asynchronous multi-master replication and can be deployed across multiple data centers. All nodes are equal to avoid a single point of failure. Downtime for one site or the entire data center will not affect the read / write availability of the system.
ClickHouse is simple and works out of the box. It simplifies all the processing of your data: it loads all of your structured data into the system, and it is immediately available for building reports. The SQL dialect allows you to express the desired result without resorting to any of the non-standard APIs found in some alternative systems.
ClickHouse makes full use of all available hardware to process each request as quickly as possible. Peak performance for a single query is over 2 terabytes per second (using columns after decompression only). In a distributed setup, reads are automatically balanced across healthy replicas to avoid increased latency.
ClickHouse supports asynchronous multi-master replication and can be deployed across multiple data centers. All nodes are equal to avoid a single point of failure. Downtime for one site or the entire data center will not affect the read / write availability of the system.
ClickHouse is simple and works out of the box. It simplifies all processing of your data: it loads all your structured data into the system and immediately becomes available for building reports. The SQL dialect allows you to express the desired result without resorting to any of the non-standard APIs found in some alternative systems.
ClickHouse makes full use of all available hardware to process each request as quickly as possible. Peak performance for a single query is over 2 terabytes per second (using columns after decompression only). In a distributed setup, reads are automatically balanced across healthy replicas to avoid increased latency.
ClickHouse supports asynchronous multi-master replication and can be deployed across multiple data centers. All nodes are equal to avoid a single point of failure. Downtime for one site or the entire data center will not affect the read / write availability of the system.
ClickHouse is simple and works out of the box. It simplifies all processing of your data: it loads all structured data into the system and immediately becomes available for building reports. The SQL dialect allows you to express the desired result without resorting to any of the non-standard APIs found in some alternative systems.'
));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5065', () => {
    const query = `insert into null_01016 values (null);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5066', () => {
    const query = `INSERT INTO tuple_01016 VALUES (('2018-01-01 00:00:00', 1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5067', () => {
    const query = `INSERT INTO table_01 SELECT toDate('2019-10-01'), number FROM system.numbers LIMIT 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5068', () => {
    const query = `INSERT INTO new_table_test VALUES ('test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5069', () => {
    const query = `INSERT INTO check_table_test (value1) SELECT value FROM system.events WHERE event = 'Merge';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5070', () => {
    const query = `INSERT INTO check_table_test (value2) SELECT value FROM system.events WHERE event = 'Merge';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5071', () => {
    const query = `INSERT INTO defaults values ('abc', 3, 12, 4, 56) ('sdfgg', -2, 10, 21, 200) ('xywq', -1, 4, 9, 5) ('plkf', 0, 5, 7,77);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5072', () => {
    const query = `INSERT INTO ints SELECT 1 AS i64, number AS i32 FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5073', () => {
    const query = `INSERT INTO test_insert_t1 SELECT '2019-09-01',toString(number),toString(rand()),toString(rand()) FROM system.numbers WHERE number > 10 limit 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5074', () => {
    const query = `INSERT INTO test_insert_t2 SELECT '2019-09-01',toString(number) FROM system.numbers WHERE number >=0 limit 200;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5075', () => {
    const query = `INSERT INTO test_insert_t2 SELECT '2019-09-01',toString(number) FROM system.numbers WHERE number >=100000 limit 200;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5076', () => {
    const query = `INSERT INTO test_insert_t2 SELECT '2019-09-01',toString(number) FROM system.numbers WHERE number >=300000 limit 200;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5077', () => {
    const query = `INSERT INTO test_insert_t2 SELECT '2019-09-01',toString(number) FROM system.numbers WHERE number >=500000 limit 200;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5078', () => {
    const query = `INSERT INTO test_insert_t2 SELECT '2019-09-01',toString(number) FROM system.numbers WHERE number >=700000 limit 200;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5079', () => {
    const query = `INSERT INTO test_insert_t2 SELECT '2019-09-01',toString(number) FROM system.numbers WHERE number >=900000 limit 200;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5080', () => {
    const query = `INSERT INTO test_insert_t3 SELECT '2019-09-01', uid, name, city FROM ( SELECT dt, uid, name, city FROM test_insert_t1 WHERE dt = '2019-09-01') t1 GLOBAL SEMI LEFT JOIN (SELECT uid FROM test_insert_t2 WHERE dt = '2019-09-01') t2 ON t1.uid=t2.uid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5081', () => {
    const query = `insert into tab select n from (SELECT number AS n FROM numbers(20)) nums semi left join (select number * 10 as n from numbers(2)) js2 using(n)
settings max_block_size = 5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5082', () => {
    const query = `INSERT INTO test1 VALUES (1, [1, 2, 3]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5083', () => {
    const query = `insert into bar (id, n, foo_id) values (1, 'bar_n_1', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5084', () => {
    const query = `INSERT INTO ttl_with_default VALUES (now() - 1000, 1) (now() - 1000, 2) (now() + 1000, 3)(now() + 1000, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5085', () => {
    const query = `INSERT INTO bad_skip_idx SELECT number, concat('xxxxxxxxxx', toString(number)) FROM numbers(1000,1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5086', () => {
    const query = `INSERT INTO test_vertical_merge SELECT number, number + 5, number * 12 from numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5087', () => {
    const query = `INSERT INTO l (a, b) VALUES ('a', ('b', 'c')), ('d', ('e', 'f'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5088', () => {
    const query = `INSERT INTO r (a, c) VALUES ('a', ('b', 'c')), ('x', ('y', 'z'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5089', () => {
    const query = `INSERT INTO l (a, b) VALUES ('a', 'b'), ('d', 'e');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5090', () => {
    const query = `INSERT INTO r (a, c) VALUES ('a', ['b', 'c']), ('x', ['y', 'z']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5091', () => {
    const query = `insert into X (id) values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5092', () => {
    const query = `insert into Y (id) values (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5093', () => {
    const query = `INSERT INTO constrained VALUES ('https://www.censor.net/?q=upyachka'), ('Hello'), ('test'); -- { serverError VIOLATED_CONSTRAINT } INSERT INTO constrained VALUES ('https://www.censor.net/?q=upyachka'), ('ftp://censor.net/Hello'), ('https://censor.net/te\\xFFst'); -- { serverError VIOLATED_CONSTRAINT }
INSERT INTO constrained VALUES ('https://www.censor.net/?q=upyachka'), ('ftp://censor.net/Hello'), (toValidUTF8('https://censor.net/te\\xFFst'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5094', () => {
    const query = `INSERT INTO constrained VALUES ('https://www.censor.net/?q=upyachka'), ('Hello'), ('test'); -- { serverError VIOLATED_CONSTRAINT } SELECT count() FROM constrained;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5095', () => {
    const query = `INSERT INTO constrained VALUES ('https://www.censor.net/?q=upyachka'), ('ftp://censor.net/Hello'), ('https://censor.net/te\\xFFst'); -- { serverError VIOLATED_CONSTRAINT } SELECT count() FROM constrained;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5096', () => {
    const query = `INSERT INTO constrained VALUES ('https://www.censor.net/?q=upyachka'), ('ftp://censor.net/Hello'), (toValidUTF8('https://censor.net/te\\xFFst'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5097', () => {
    const query = `INSERT INTO constrained VALUES ('https://www.censor.net/?q=upyachka'), ('Hello'), ('test'); -- { serverError VIOLATED_CONSTRAINT } INSERT INTO constrained2 VALUES ('https://www.censor.net/?q=upyachka'), ('Hello'), ('test'); -- { serverError VIOLATED_CONSTRAINT }
DROP TABLE constrained;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5098', () => {
    const query = `INSERT INTO set_array select
toString(intDiv(number, 100000)) as primary_key,
array(number) as index_array
from system.numbers
limit 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5099', () => {
    const query = `INSERT INTO ties VALUES (1), (1), (2), (2), (2), (2) (3), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5100', () => {
    const query = `INSERT INTO fill VALUES (toDate('2019-05-24'), 13, 'sd0')(toDate('2019-05-10'), 16, 'vp7')(toDate('2019-05-25'), 17, '0ei')(toDate('2019-05-30'), 18, '3kd')(toDate('2019-05-15'), 27, 'enb')(toDate('2019-06-04'), 5, '6az')(toDate('2019-05-23'), 15, '01v')(toDate('2019-05-08'), 28, 'otf')(toDate('2019-05-19'), 20, 'yfh')(toDate('2019-05-07'), 26, '2ke')(toDate('2019-05-07'), 18, 'prh')(toDate('2019-05-09'), 25, '798')(toDate('2019-05-10'), 1, 'myj')(toDate('2019-05-11'), 18, '3s2')(toDate('2019-05-23'), 29, '72y');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5101', () => {
    const query = `INSERT INTO fill VALUES (1, -2), (1, 3), (3, 2), (5, -1), (6, 5), (8, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5102', () => {
    const query = `INSERT INTO order_with_aggr SELECT * FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5103', () => {
    const query = `insert into bloom_filter select number+2000, 'abc,def,zzz' from numbers(8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5104', () => {
    const query = `insert into bloom_filter select number+3000, 'yyy,uuu' from numbers(1024);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5105', () => {
    const query = `insert into bloom_filter select number+3000, 'abcdefzzz' from numbers(1024);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5106', () => {
    const query = `insert into bloom_filter2 select number, 'yyy,uuu' from numbers(1024);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5107', () => {
    const query = `insert into bloom_filter2 select number+2000, 'ABC,def,zzz' from numbers(8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5108', () => {
    const query = `insert into bloom_filter2 select number+3000, 'yyy,uuu' from numbers(1024);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5109', () => {
    const query = `insert into bloom_filter2 select number+3000, 'abcdefzzz' from numbers(1024);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5110', () => {
    const query = `INSERT INTO mt SELECT * FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5111', () => {
    const query = `INSERT INTO replicated_constraints1 VALUES (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5112', () => {
    const query = `INSERT INTO replicated_constraints2 VALUES (3, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5113', () => {
    const query = `INSERT INTO replicated_constraints1 VALUES (10, 10); -- { serverError VIOLATED_CONSTRAINT } ALTER TABLE replicated_constraints1 DROP CONSTRAINT a_constraint;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5114', () => {
    const query = `INSERT INTO replicated_constraints1 VALUES (10, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5115', () => {
    const query = `INSERT INTO replicated_constraints2 VALUES (10, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5116', () => {
    const query = `INSERT INTO replicated_constraints1 VALUES (10, 11); -- { serverError VIOLATED_CONSTRAINT } INSERT INTO replicated_constraints2 VALUES (9, 10); -- { serverError VIOLATED_CONSTRAINT }
DROP TABLE replicated_constraints1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5117', () => {
    const query = `insert into test1 values (1); -- { serverError TOO_DEEP_RECURSION } DROP TABLE test1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5118', () => {
    const query = `INSERT INTO test2 VALUES (1, 'test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5119', () => {
    const query = `INSERT INTO topk WITH number % 7 = 0 AS frequent SELECT toString(frequent ? number % 10 : number), frequent ? 999999999 : number FROM numbers(4000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5120', () => {
    const query = `INSERT INTO replicated_table_for_alter2 VALUES (1, '1'), (2, '2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5121', () => {
    const query = `INSERT INTO replicated_table_for_alter1 VALUES (3, '3'), (4, '4');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5122', () => {
    const query = `INSERT INTO replicated_table_for_alter2 VALUES (3, '1'), (4, '2'); -- { serverError TOO_MANY_PARTS } INSERT INTO replicated_table_for_alter1 VALUES (5, '5'), (6, '6');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5123', () => {
    const query = `INSERT INTO t_local VALUES (1), (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5124', () => {
    const query = `INSERT INTO table_for_alter VALUES (2, '2'); -- { serverError TOO_MANY_PARTS } DETACH TABLE table_for_alter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5125', () => {
    const query = `INSERT INTO table_for_alter VALUES (2, '2'); -- { serverError TOO_MANY_PARTS } ALTER TABLE table_for_alter MODIFY SETTING xxx_yyy=124; -- { serverError UNKNOWN_SETTING }
ALTER TABLE table_for_alter MODIFY SETTING parts_to_throw_insert = 100, parts_to_delay_insert = 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5126', () => {
    const query = `INSERT INTO table_for_alter VALUES (2, '2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5127', () => {
    const query = `INSERT INTO table_for_reset_setting VALUES (1, '1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5128', () => {
    const query = `INSERT INTO table_for_reset_setting VALUES (2, '2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5129', () => {
    const query = `INSERT INTO table_for_reset_setting VALUES (1, '1'); -- { serverError TOO_MANY_PARTS } ALTER TABLE table_for_reset_setting RESET SETTING parts_to_delay_insert, parts_to_throw_insert;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5130', () => {
    const query = `insert into test_join values ('2019-01-01', 1, 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5131', () => {
    const query = `insert into test_join values ('2019-01-01', 2, 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5132', () => {
    const query = `insert into test_join values ('2019-01-01', 3, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5133', () => {
    const query = `insert into test_join values ('2019-01-01', 1, null);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5134', () => {
    const query = `INSERT INTO test1 SELECT * FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5135', () => {
    const query = `INSERT INTO test3 SELECT toDecimal64(number, 3) FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5136', () => {
    const query = `insert into set_index_not values ('Jon','alive'),('Ramsey','rip');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5137', () => {
    const query = `insert into t values(1,1,'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5138', () => {
    const query = `insert into s values(2,2,'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5139', () => {
    const query = `insert into ttl values (toDateTime('2000-10-10 00:00:00'), 1), (toDateTime('2000-10-10 00:00:00'), 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5140', () => {
    const query = `insert into ttl values (toDateTime('2100-10-10 00:00:00'), 3), (toDateTime('2100-10-10 00:00:00'), 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5141', () => {
    const query = `INSERT INTO han_1 values (1, '2019-07-31');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5142', () => {
    const query = `insert into sample_prewhere values ('2019-01-01', 2, toDateTime('2019-07-20 00:00:01'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5143', () => {
    const query = `insert into sample_prewhere values ('2019-01-01', 1, toDateTime('2019-07-20 00:00:02'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5144', () => {
    const query = `insert into sample_prewhere values ('2019-01-02', 3, toDateTime('2019-07-20 00:00:03'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5145', () => {
    const query = `INSERT INTO test_move_partition_src SELECT number % 2, number FROM system.numbers LIMIT 10000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5146', () => {
    const query = `insert into t1 values (1, 'x'), (2, 'y'), (3, 'z');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5147', () => {
    const query = `insert into t2 values (2, 'w'), (4, 'y');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5148', () => {
    const query = `insert into t3 values (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5149', () => {
    const query = `INSERT INTO test_00974 VALUES ('2019-07-23', 1, 1), ('2019-07-23', 1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5150', () => {
    const query = `INSERT INTO test_00974 VALUES ('2019-07-23', 2, 1), ('2019-07-23', 2, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5151', () => {
    const query = `INSERT INTO source_table1 VALUES (42, 'qwe');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5152', () => {
    const query = `INSERT INTO source_table2 VALUES (42, 'qwe');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5153', () => {
    const query = `INSERT INTO test (num) VALUES (1), (2), (10), (15), (23);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5154', () => {
    const query = `INSERT INTO indexed_table SELECT toDateTime('2019-05-27 10:00:00') + number % 100, 'h' FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5155', () => {
    const query = `INSERT INTO indexed_table SELECT
toDateTime('2019-05-27 10:00:00') + number % 100,
concat('hhhhhhhhhhhhhhhhhhhhhhhhh', 'xxxxxxxxxxxxxxxxxxxxxxxxxxxx', 'yyyyyyyyyyyyyyyyyyyyyyyyyy', toString(rand()))
FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5156', () => {
    const query = `INSERT INTO another_indexed_table SELECT toDateTime('2019-05-27 10:00:00') + number % 100, 'h' FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5157', () => {
    const query = `INSERT INTO another_indexed_table SELECT
toDateTime('2019-05-27 10:00:00') + number % 100,
concat('hhhhhhhhhhhhhhhhhhhhhhhhh', 'xxxxxxxxxxxxxxxxxxxxxxxxxxxx', 'yyyyyyyyyyyyyyyyyyyyyyyyyy', toString(rand()))
FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5158', () => {
    const query = `INSERT INTO merge_tree SELECT 0 FROM numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5159', () => {
    const query = `INSERT INTO ColumnsClauseTest VALUES (100, 10, 324), (120, 8, 23);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5160', () => {
    const query = `INSERT INTO tableFile_00968 SELECT number FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5161', () => {
    const query = `INSERT INTO tableMergeTree_00968 SELECT number FROM system.numbers LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5162', () => {
    const query = `INSERT INTO dist_00967 SELECT toUInt64(number) FROM system.numbers LIMIT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5163', () => {
    const query = `INSERT INTO test_startsWith (a) values ('a'), ('abcd'), ('bbb'), (''), ('abc');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5164', () => {
    const query = `INSERT INTO t_enum8 Values('hello'),('world'),('hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5165', () => {
    const query = `INSERT INTO t_enum16 Values('hello'),('world'),('hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5166', () => {
    const query = `INSERT INTO test_00961 VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5167', () => {
    const query = `INSERT INTO mt_table VALUES (toDate('2018-01-01'), 1, 'old');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5168', () => {
    const query = `INSERT INTO mt_table VALUES (toDate('2019-01-02'), 1, 'Hello'), (toDate('2019-01-02'), 2, 'World');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5169', () => {
    const query = `INSERT INTO mt_table VALUES (toDate('2019-01-02'), 3, 'quick'), (toDate('2019-01-02'), 4, 'brown');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5170', () => {
    const query = `INSERT INTO mt_table VALUES (toDate('2019-02-03'), 5, '!'), (toDate('2019-02-03'), 6, '?');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5171', () => {
    const query = `INSERT INTO mt_table VALUES (toDate('2019-02-03'), 7, 'jump'), (toDate('2019-02-03'), 8, 'around');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5172', () => {
    const query = `INSERT INTO segfault_table VALUES (1111), (2222);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5173', () => {
    const query = `INSERT INTO mt_with_pk (d, x, y, z, \`n.Age\`, \`n.Name\`) VALUES (toDate('2018-10-01'), toDateTime('2018-10-01 12:57:57'), [1, 1, 1], 11, [77], ['Joe']), (toDate('2018-10-01'), toDateTime('2018-10-01 16:57:57'), [2, 2, 2], 12, [88], ['Mark']), (toDate('2018-10-01'), toDateTime('2018-10-01 19:57:57'), [3, 3, 3], 13, [99], ['Robert']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5174', () => {
    const query = `INSERT INTO mt_with_pk (d, x, y, z, \`n.Age\`, \`n.Name\`) VALUES (toDate('2018-10-01'), toDateTime('2018-10-01 07:57:57'), [4, 4, 4], 14, [111, 222], ['Lui', 'Dave']), (toDate('2018-10-01'), toDateTime('2018-10-01 08:57:57'), [5, 5, 5], 15, [333, 444], ['John', 'Mike']), (toDate('2018-10-01'), toDateTime('2018-10-01 09:57:57'), [6, 6, 6], 16, [555, 666, 777], ['Alex', 'Jim', 'Tom']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5175', () => {
    const query = `INSERT INTO mt_with_pk (d, x, y, z, \`n.Age\`, \`n.Name\`) VALUES (toDate('2018-10-01'), toDateTime('2018-10-01 05:57:57'), ['a', 'a', 'a'], 14, [888, 999], ['Jack', 'Elvis']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5176', () => {
    const query = `INSERT INTO mt_with_pk (d, x, y, z, \`n.Age\`, \`n.Name\`, w) VALUES (toDate('2018-10-01'), toDateTime('2018-10-01 03:57:57'), ['z', 'z', 'z'], 15, [1111, 2222], ['Garry', 'Ron'], 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5177', () => {
    const query = `INSERT INTO alter_attach VALUES (1, 1), (2, 1), (3, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5178', () => {
    const query = `INSERT INTO alter_attach VALUES (4, 2, 'Hello'), (5, 2, 'World');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5179', () => {
    const query = `INSERT INTO alter_attach VALUES (6, 3), (7, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5180', () => {
    const query = `INSERT INTO alter_update_00806 (d, e) VALUES ('2018-01-01', 'foo');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5181', () => {
    const query = `INSERT INTO alter_update_00806 (d, e) VALUES ('2018-01-02', 'bar');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5182', () => {
    const query = `INSERT INTO mt_without_pk (d, x, y, z, \`n.Age\`, \`n.Name\`) VALUES (toDate('2018-10-01'), toDateTime('2018-10-01 12:57:57'), [1, 1, 1], 11, [77], ['Joe']), (toDate('2018-10-01'), toDateTime('2018-10-01 16:57:57'), [2, 2, 2], 12, [88], ['Mark']), (toDate('2018-10-01'), toDateTime('2018-10-01 19:57:57'), [3, 3, 3], 13, [99], ['Robert']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5183', () => {
    const query = `INSERT INTO mt_without_pk (d, x, y, z, \`n.Age\`, \`n.Name\`) VALUES (toDate('2018-10-01'), toDateTime('2018-10-01 07:57:57'), [4, 4, 4], 14, [111, 222], ['Lui', 'Dave']), (toDate('2018-10-01'), toDateTime('2018-10-01 08:57:57'), [5, 5, 5], 15, [333, 444], ['John', 'Mike']), (toDate('2018-10-01'), toDateTime('2018-10-01 09:57:57'), [6, 6, 6], 16, [555, 666, 777], ['Alex', 'Jim', 'Tom']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5184', () => {
    const query = `INSERT INTO mt_with_small_granularity (d, x, y, z, \`n.Age\`, \`n.Name\`) VALUES (toDate('2018-10-01'), toDateTime('2018-10-01 12:57:57'), [1, 1, 1], 11, [77], ['Joe']), (toDate('2018-10-01'), toDateTime('2018-10-01 16:57:57'), [2, 2, 2], 12, [88], ['Mark']), (toDate('2018-10-01'), toDateTime('2018-10-01 19:57:57'), [3, 3, 3], 13, [99], ['Robert']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5185', () => {
    const query = `INSERT INTO mt_with_small_granularity (d, x, y, z, \`n.Age\`, \`n.Name\`) VALUES (toDate('2018-10-01'), toDateTime('2018-10-01 07:57:57'), [4, 4, 4], 14, [111, 222], ['Lui', 'Dave']), (toDate('2018-10-01'), toDateTime('2018-10-01 08:57:57'), [5, 5, 5], 15, [333, 444], ['John', 'Mike']), (toDate('2018-10-01'), toDateTime('2018-10-01 09:57:57'), [6, 6, 6], 16, [555, 666, 777], ['Alex', 'Jim', 'Tom']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5186', () => {
    const query = `INSERT INTO moving_sum_num SELECT 'b' k, toDateTime('2001-02-03 00:00:00')+number as dt, number as v
FROM system.numbers
LIMIT 5
UNION ALL
SELECT 'a' k, toDateTime('2001-02-03 00:00:00')+number as dt, number as v
FROM system.numbers
LIMIT 5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5187', () => {
    const query = `INSERT INTO moving_sum_num SELECT 'b' k, toDateTime('2001-02-03 01:00:00')+number as dt, 5+number as v
FROM system.numbers
LIMIT 5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5188', () => {
    const query = `INSERT INTO part_info VALUES (toDateTime('1970-10-01 00:00:01')), (toDateTime('1970-10-02 00:00:01')), (toDateTime('1970-10-03 00:00:01'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5189', () => {
    const query = `INSERT INTO part_info VALUES (toDateTime('1970-10-02 00:00:02'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5190', () => {
    const query = `INSERT INTO distributed_00952 VALUES ('2018-08-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5191', () => {
    const query = `INSERT INTO distributed_00952 (date, value) VALUES ('2018-08-01', '2019-08-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5192', () => {
    const query = `insert into ints values (1, 1, 1, 1, 1, 1, 1, 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5193', () => {
    const query = `insert into strings values (1, '1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5194', () => {
    const query = `insert into decimals values (1, 1, 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5195', () => {
    const query = `INSERT INTO test_generic_events_all VALUES( 42, 42 );`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5196', () => {
    const query = `INSERT INTO type_names VALUES (1, toTypeName([1, 2]), toTypeName((256, -1, 3.14, 'str', [1, -1])), toTypeName([(1, [256]), (256, [1, 2])])), (2, toTypeName([1, -1]), toTypeName((256, -1, 3, 'str', [1, 2])), toTypeName([(256, []), (1, [])]));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5197', () => {
    const query = `INSERT INTO values_template VALUES ((1), lower(replaceAll('Hella', 'a', 'o')), 1 + 2 + 3, round(-4 * 5.0), nan / CAST('42', 'Int8'), reverse([1, 2, 3])), ((2), lower(replaceAll('Warld', 'a', 'o')), -4 + 5 + 6, round(18446744073709551615 * 1e-19), 1.0 / CAST('0', 'Int8'), reverse([])), ((3), lower(replaceAll('Test', 'a', 'o')), 3 + 2 + 1, round(9223372036854775807 * -1), 6.28  / CAST('2', 'Int8'), reverse([4, 5])), ((4), lower(replaceAll('Expressians', 'a', 'o')), 6 + 5 + 4, round(1 * -9223372036854775807), 127.0 / CAST('127', 'Int8'), reverse([6, 7, 8, 9, 0]));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5198', () => {
    const query = `INSERT INTO values_template_nullable VALUES ((1), lower(replaceAll('Hella', 'a', 'o')), 1 + 2 + 3, arraySort(x -> assumeNotNull(x), [null, NULL::Nullable(UInt8)])),   ((2), lower(replaceAll('Warld', 'b', 'o')), 4 - 5 + 6, arraySort(x -> assumeNotNull(x), [+1, -1, Null])),   ((3), lower(replaceAll('Test', 'c', 'o')), 3 + 2 - 1, arraySort(x -> assumeNotNull(x), [1, nUlL, 3.14])),   ((4), lower(replaceAll(null, 'c', 'o')), 6 + 5 - null, arraySort(x -> assumeNotNull(x), [3, 2, 1]));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5199', () => {
    const query = `INSERT INTO values_template_fallback VALUES (1 + x); -- { clientError SYNTAX_ERROR } INSERT INTO values_template_fallback VALUES (abs(functionThatDoesNotExists(42))); -- { clientError UNKNOWN_FUNCTION }
INSERT INTO values_template_fallback VALUES ([1]); -- { clientError ILLEGAL_TYPE_OF_ARGUMENT }
INSERT INTO values_template_fallback VALUES (CAST(1, 'UInt8')), (CAST('2', 'UInt8'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5200', () => {
    const query = `INSERT INTO type_names VALUES (3, toTypeName([1, 2]), toTypeName((256, -1, 3.14, 'str', [1, -1])), toTypeName([(1, [256]), (256, [1, 2])])), (4, toTypeName([1, -1]), toTypeName((256, -1, 3, 'str', [1, 2])), toTypeName([(256, []), (1, [])]));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5201', () => {
    const query = `INSERT INTO values_template_fallback VALUES (1 + 2), (3 + +04), (5 + 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5202', () => {
    const query = `INSERT INTO values_template_fallback VALUES (+020), (+030), (+040);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5203', () => {
    const query = `insert into defaults values (-3.273, -1.452, 4.267, 20.0, 40.0), (0.121, -0.615, 4.290, 20.0, 40.0), (-1.099, 2.755, -3.060, 20.0, 40.0), (1.090, 2.945, -2.346, 20.0, 40.0), (0.305, 2.179, -1.205, 20.0, 40.0), (-0.925, 0.702, 1.134, 20.0, 40.0), (3.178, -1.316, 7.221, 20.0, 40.0), (-2.756, -0.473, 2.569, 20.0, 40.0), (3.665, 2.303, 0.226, 20.0, 40.0), (1.662, 1.951, -0.070, 20.0, 40.0), (2.869, 0.593, 3.249, 20.0, 40.0), (0.818, -0.593, 4.594, 20.0, 40.0), (-1.917, 0.916, 0.209, 20.0, 40.0), (2.706, 1.523, 1.307, 20.0, 40.0), (0.219, 2.162, -1.214, 20.0, 40.0), (-4.510, 1.376, -2.007, 20.0, 40.0), (4.284, -0.515, 6.173, 20.0, 40.0), (-1.101, 2.810, -3.170, 20.0, 40.0), (-1.810, -1.117, 4.329, 20.0, 40.0), (0.055, 1.115, 0.797, 20.0, 40.0), (-2.178, 2.904, -3.898, 20.0, 40.0), (-3.494, -1.814, 4.882, 20.0, 40.0), (3.027, 0.476, 3.562, 20.0, 40.0), (-1.434, 1.151, -0.018, 20.0, 40.0), (1.180, 0.992, 1.606, 20.0, 40.0), (0.015, 0.971, 1.067, 20.0, 40.0), (-0.511, -0.875, 4.495, 20.0, 40.0), (0.961, 2.348, -1.216, 20.0, 40.0), (-2.279, 0.038, 1.785, 20.0, 40.0), (-1.568, -0.248, 2.712, 20.0, 40.0), (-0.496, 0.366, 2.020, 20.0, 40.0), (1.177, -1.401, 6.390, 20.0, 40.0), (2.882, -1.442, 7.325, 20.0, 40.0), (-1.066, 1.817, -1.167, 20.0, 40.0), (-2.144, 2.791, -3.655, 20.0, 40.0), (-4.370, 2.228, -3.642, 20.0, 40.0), (3.996, 2.775, -0.553, 20.0, 40.0), (0.289, 2.055, -0.965, 20.0, 40.0), (-0.588, -1.601, 5.908, 20.0, 40.0), (-1.801, 0.417, 1.265, 20.0, 40.0), (4.375, -1.499, 8.186, 20.0, 40.0), (-2.618, 0.038, 1.615, 20.0, 40.0), (3.616, -0.833, 6.475, 20.0, 40.0), (-4.045, -1.558, 4.094, 20.0, 40.0), (-3.962, 0.636, -0.253, 20.0, 40.0), (3.505, 2.625, -0.497, 20.0, 40.0), (3.029, -0.523, 5.560, 20.0, 40.0), (-3.520, -0.474, 2.188, 20.0, 40.0), (2.430, -1.469, 7.154, 20.0, 40.0), (1.547, -1.654, 7.082, 20.0, 40.0), (-1.370, 0.575, 1.165, 20.0, 40.0), (-1.869, -1.555, 5.176, 20.0, 40.0), (3.536, 2.841, -0.913, 20.0, 40.0), (-3.810, 1.220, -1.344, 20.0, 40.0), (-1.971, 1.462, -0.910, 20.0, 40.0), (-0.243, 0.167, 2.545, 20.0, 40.0), (-1.403, 2.645, -2.991, 20.0, 40.0), (0.532, -0.114, 3.494, 20.0, 40.0), (-1.678, 0.975, 0.212, 20.0, 40.0), (-0.656, 2.140, -1.609, 20.0, 40.0), (1.743, 2.631, -1.390, 20.0, 40.0), (2.586, 2.943, -1.593, 20.0, 40.0), (-0.512, 2.969, -3.195, 20.0, 40.0), (2.283, -0.100, 4.342, 20.0, 40.0), (-4.293, 0.872, -0.890, 20.0, 40.0), (3.411, 1.300, 2.106, 20.0, 40.0), (-0.281, 2.951, -3.042, 20.0, 40.0), (-4.442, 0.384, 0.012, 20.0, 40.0), (1.194, 1.746, 0.104, 20.0, 40.0), (-1.152, 1.862, -1.300, 20.0, 40.0), (1.362, -1.341, 6.363, 20.0, 40.0), (-4.488, 2.618, -4.481, 20.0, 40.0), (3.419, -0.564, 5.837, 20.0, 40.0), (-3.392, 0.396, 0.512, 20.0, 40.0), (-1.629, -0.909, 4.003, 20.0, 40.0), (4.447, -1.088, 7.399, 20.0, 40.0), (-1.232, 1.699, -1.014, 20.0, 40.0), (-1.286, -0.609, 3.575, 20.0, 40.0), (2.437, 2.796, -1.374, 20.0, 40.0), (-4.864, 1.989, -3.410, 20.0, 40.0), (-1.716, -1.399, 4.940, 20.0, 40.0), (-3.084, 1.858, -2.259, 20.0, 40.0), (2.828, -0.319, 5.053, 20.0, 40.0), (-1.226, 2.586, -2.786, 20.0, 40.0), (2.456, 0.092, 4.044, 20.0, 40.0), (-0.989, 2.375, -2.245, 20.0, 40.0), (3.268, 0.935, 2.765, 20.0, 40.0), (-4.128, -1.995, 4.927, 20.0, 40.0), (-1.083, 2.197, -1.935, 20.0, 40.0), (-3.471, -1.198, 3.660, 20.0, 40.0), (4.617, -1.136, 7.579, 20.0, 40.0), (2.054, -1.675, 7.378, 20.0, 40.0), (4.106, 2.326, 0.402, 20.0, 40.0), (1.558, 0.310, 3.158, 20.0, 40.0), (0.792, 0.900, 1.596, 20.0, 40.0), (-3.229, 0.300, 0.785, 20.0, 40.0), (3.787, -0.793, 6.479, 20.0, 40.0), (1.786, 2.288, -0.684, 20.0, 40.0), (2.643, 0.223, 3.875, 20.0, 40.0), (-3.592, 2.122, -3.040, 20.0, 40.0), (4.519, -1.760, 8.779, 20.0, 40.0), (3.221, 2.255, 0.101, 20.0, 40.0), (4.151, 1.788, 1.500, 20.0, 40.0), (-1.033, -1.195, 4.874, 20.0, 40.0), (-1.636, -1.037, 4.257, 20.0, 40.0), (-3.548, 1.911, -2.596, 20.0, 40.0), (4.829, -0.293, 6.001, 20.0, 40.0), (-4.684, -1.664, 3.986, 20.0, 40.0), (4.531, -0.503, 6.271, 20.0, 40.0), (-3.503, -1.606, 4.460, 20.0, 40.0), (-2.036, -1.522, 5.027, 20.0, 40.0), (-0.473, -0.617, 3.997, 20.0, 40.0), (-1.554, -1.630, 5.483, 20.0, 40.0), (-3.567, -1.043, 3.302, 20.0, 40.0), (-2.038, 0.579, 0.823, 20.0, 40.0), (-3.040, 0.857, -0.233, 20.0, 40.0), (4.610, 0.562, 4.181, 20.0, 40.0), (-3.323, -1.938, 5.215, 20.0, 40.0), (4.314, 1.720, 1.717, 20.0, 40.0), (-1.220, 0.615, 1.161, 20.0, 40.0), (-2.556, 1.120, -0.519, 20.0, 40.0), (-3.717, -0.108, 1.358, 20.0, 40.0), (4.689, -1.826, 8.996, 20.0, 40.0), (3.452, 0.506, 3.713, 20.0, 40.0), (2.472, 0.612, 3.012, 20.0, 40.0), (3.452, 0.450, 3.826, 20.0, 40.0), (1.207, 2.585, -1.567, 20.0, 40.0), (-4.826, 1.090, -1.593, 20.0, 40.0), (3.116, -1.118, 6.794, 20.0, 40.0), (0.448, 2.732, -2.240, 20.0, 40.0), (-1.096, -0.525, 3.503, 20.0, 40.0), (-4.680, -0.238, 1.137, 20.0, 40.0), (2.552, -1.403, 7.082, 20.0, 40.0), (0.719, 2.997, -2.635, 20.0, 40.0), (0.347, -1.966, 7.105, 20.0, 40.0), (2.958, -0.404, 5.288, 20.0, 40.0), (0.722, -1.950, 7.261, 20.0, 40.0), (-2.851, -0.986, 3.546, 20.0, 40.0), (-4.316, -0.439, 1.721, 20.0, 40.0), (-1.685, -0.201, 2.560, 20.0, 40.0), (1.856, 0.190, 3.549, 20.0, 40.0), (-2.052, 0.206, 1.562, 20.0, 40.0), (-2.504, -0.646, 3.041, 20.0, 40.0), (3.235, 0.882, 2.854, 20.0, 40.0), (-1.366, -1.573, 5.463, 20.0, 40.0), (-3.447, 2.419, -3.562, 20.0, 40.0), (4.155, 2.092, 0.893, 20.0, 40.0), (-0.935, 0.209, 2.116, 20.0, 40.0), (3.117, -1.821, 8.201, 20.0, 40.0), (3.759, 0.577, 3.725, 20.0, 40.0), (-0.938, 2.992, -3.453, 20.0, 40.0), (-0.525, 2.341, -1.945, 20.0, 40.0), (4.540, 2.625, 0.019, 20.0, 40.0), (-2.097, 1.190, -0.429, 20.0, 40.0), (-2.672, 1.983, -2.302, 20.0, 40.0), (-3.038, -1.490, 4.460, 20.0, 40.0), (-0.943, 2.149, -1.770, 20.0, 40.0), (0.739, 1.598, 0.174, 20.0, 40.0), (1.828, 1.853, 0.208, 20.0, 40.0), (4.856, 0.137, 5.153, 20.0, 40.0), (-1.617, 0.468, 1.255, 20.0, 40.0), (-1.972, 2.053, -2.092, 20.0, 40.0), (-4.633, 1.389, -2.094, 20.0, 40.0), (-3.628, -1.156, 3.498, 20.0, 40.0), (3.597, 1.034, 2.731, 20.0, 40.0), (-1.488, -0.002, 2.261, 20.0, 40.0), (0.749, 1.921, -0.468, 20.0, 40.0), (1.304, -1.371, 6.394, 20.0, 40.0), (4.587, 2.936, -0.579, 20.0, 40.0), (-2.241, 1.791, -1.703, 20.0, 40.0), (-2.945, 1.372, -1.216, 20.0, 40.0), (1.375, 0.395, 2.898, 20.0, 40.0), (-1.281, -0.641, 3.642, 20.0, 40.0), (2.178, 0.895, 2.299, 20.0, 40.0), (3.031, -0.786, 6.087, 20.0, 40.0), (-1.385, -0.375, 3.058, 20.0, 40.0), (4.041, -0.431, 5.882, 20.0, 40.0), (0.480, -0.507, 4.254, 20.0, 40.0), (-3.797, 0.140, 0.822, 20.0, 40.0), (2.355, 2.502, -0.827, 20.0, 40.0), (1.376, -1.583, 6.854, 20.0, 40.0), (0.164, 1.405, 0.273, 20.0, 40.0), (-1.273, 1.471, -0.579, 20.0, 40.0), (0.770, 2.246, -1.107, 20.0, 40.0), (4.552, 2.904, -0.533, 20.0, 40.0), (4.259, -1.772, 8.674, 20.0, 40.0), (-0.309, 1.159, 0.528, 20.0, 40.0), (3.581, 2.700, -0.610, 20.0, 40.0), (-3.202, 0.346, 0.707, 20.0, 40.0), (-1.575, 1.242, -0.271, 20.0, 40.0), (-1.584, -0.493, 3.194, 20.0, 40.0), (-3.778, 0.150, 0.810, 20.0, 40.0), (-4.675, 1.749, -2.835, 20.0, 40.0), (3.567, -0.792, 6.367, 20.0, 40.0), (-0.417, 1.399, -0.006, 20.0, 40.0), (-4.672, 2.007, -3.349, 20.0, 40.0), (-1.034, 0.196, 2.090, 20.0, 40.0), (-3.796, 2.496, -3.890, 20.0, 40.0), (3.532, -0.497, 5.759, 20.0, 40.0), (4.868, -1.359, 8.151, 20.0, 40.0), (-0.769, 0.302, 2.011, 20.0, 40.0), (4.475, 2.612, 0.014, 20.0, 40.0), (-3.532, -0.395, 2.024, 20.0, 40.0), (0.322, 0.675, 1.812, 20.0, 40.0), (-2.028, -1.942, 5.870, 20.0, 40.0), (1.810, -1.244, 6.392, 20.0, 40.0), (-0.783, 1.242, 0.124, 20.0, 40.0), (-4.745, -1.300, 3.227, 20.0, 40.0), (1.902, 1.973, 0.005, 20.0, 40.0), (-3.453, -1.429, 4.132, 20.0, 40.0), (1.559, 0.986, 1.808, 20.0, 40.0), (0.128, 2.754, -2.443, 20.0, 40.0), (2.759, 1.727, 0.926, 20.0, 40.0), (-4.468, 1.690, -2.614, 20.0, 40.0), (-2.368, -1.922, 5.659, 20.0, 40.0), (-2.766, 2.128, -2.640, 20.0, 40.0), (0.967, -1.825, 7.133, 20.0, 40.0), (-2.854, 2.855, -4.136, 20.0, 40.0), (-2.944, 1.875, -2.222, 20.0, 40.0), (-2.632, -0.983, 3.649, 20.0, 40.0), (2.427, 2.239, -0.266, 20.0, 40.0), (-1.726, -0.838, 3.812, 20.0, 40.0), (0.007, -0.903, 4.809, 20.0, 40.0), (-2.013, 1.092, -0.191, 20.0, 40.0), (-0.449, 0.970, 0.836, 20.0, 40.0), (1.396, 0.411, 2.876, 20.0, 40.0), (-1.115, -1.790, 6.023, 20.0, 40.0), (3.748, 1.917, 1.039, 20.0, 40.0), (2.978, 1.043, 2.404, 20.0, 40.0), (-3.969, 2.514, -4.013, 20.0, 40.0), (4.455, -0.050, 5.328, 20.0, 40.0), (-3.065, -0.846, 3.160, 20.0, 40.0), (-1.069, 2.167, -1.869, 20.0, 40.0), (3.016, -1.393, 7.294, 20.0, 40.0), (0.045, -1.928, 6.879, 20.0, 40.0), (-2.555, -0.984, 3.690, 20.0, 40.0), (-1.995, -0.054, 2.111, 20.0, 40.0), (4.600, -0.509, 6.318, 20.0, 40.0), (-1.942, 1.215, -0.402, 20.0, 40.0), (1.262, 2.765, -1.899, 20.0, 40.0), (2.617, -1.106, 6.521, 20.0, 40.0), (1.737, 0.554, 2.761, 20.0, 40.0), (-2.197, 0.632, 0.638, 20.0, 40.0), (4.768, 2.618, 0.147, 20.0, 40.0), (-3.737, -0.939, 3.010, 20.0, 40.0), (-2.623, 0.595, 0.499, 20.0, 40.0), (4.752, -0.340, 6.057, 20.0, 40.0), (2.333, -1.037, 6.240, 20.0, 40.0), (4.234, -1.882, 8.881, 20.0, 40.0), (-3.393, -0.812, 2.927, 20.0, 40.0), (0.885, 1.383, 0.678, 20.0, 40.0), (0.123, 2.937, -2.812, 20.0, 40.0), (2.969, 0.760, 2.964, 20.0, 40.0), (-4.929, 1.251, -1.967, 20.0, 40.0), (1.916, 2.223, -0.488, 20.0, 40.0), (-0.020, -1.740, 6.469, 20.0, 40.0), (0.702, -1.272, 5.895, 20.0, 40.0), (2.496, 2.648, -1.048, 20.0, 40.0), (4.067, -1.475, 7.984, 20.0, 40.0), (-3.717, 1.851, -2.561, 20.0, 40.0), (1.678, -0.624, 5.088, 20.0, 40.0), (1.073, 0.695, 2.146, 20.0, 40.0), (1.842, -0.749, 5.419, 20.0, 40.0), (-3.518, 1.909, -2.578, 20.0, 40.0), (2.229, 1.189, 1.737, 20.0, 40.0), (4.987, 2.893, -0.292, 20.0, 40.0), (-4.809, 1.043, -1.490, 20.0, 40.0), (-0.241, -0.728, 4.334, 20.0, 40.0), (-3.331, 0.590, 0.156, 20.0, 40.0), (-0.455, 2.621, -2.470, 20.0, 40.0), (1.492, 1.223, 1.301, 20.0, 40.0), (3.948, 2.841, -0.709, 20.0, 40.0), (0.732, 0.446, 2.475, 20.0, 40.0), (2.400, 2.390, -0.579, 20.0, 40.0), (-2.718, 1.427, -1.213, 20.0, 40.0), (-1.826, 1.451, -0.815, 20.0, 40.0), (1.125, 0.438, 2.686, 20.0, 40.0), (-4.918, 1.880, -3.219, 20.0, 40.0), (3.068, -0.442, 5.418, 20.0, 40.0), (1.982, 1.201, 1.589, 20.0, 40.0), (0.701, -1.709, 6.768, 20.0, 40.0), (-1.496, 2.564, -2.877, 20.0, 40.0), (-3.812, 0.974, -0.853, 20.0, 40.0), (-3.405, 2.018, -2.739, 20.0, 40.0), (2.211, 2.889, -1.674, 20.0, 40.0), (-2.481, 2.931, -4.103, 20.0, 40.0), (-3.721, 2.765, -4.391, 20.0, 40.0), (-1.768, -1.292, 4.699, 20.0, 40.0), (-4.462, 1.058, -1.347, 20.0, 40.0), (-3.516, -1.942, 5.126, 20.0, 40.0), (0.485, 2.420, -1.597, 20.0, 40.0), (-0.492, 0.242, 2.270, 20.0, 40.0), (4.245, 1.689, 1.744, 20.0, 40.0), (2.234, 0.364, 3.389, 20.0, 40.0), (2.629, 2.224, -0.134, 20.0, 40.0), (-4.375, 1.221, -1.630, 20.0, 40.0), (-0.618, 1.374, -0.057, 20.0, 40.0), (-2.580, -1.604, 4.918, 20.0, 40.0), (0.159, 1.104, 0.871, 20.0, 40.0), (-3.597, 0.975, -0.749, 20.0, 40.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5204', () => {
    const query = `INSERT INTO grouptest VALUES (1, 1.732, 3.653, 11.422), (1, 2.150, 2.103, 7.609), (1, 0.061, 3.310, 7.052), (1, 1.030, 3.671, 10.075), (1, 1.879, 0.578, 2.492), (1, 0.922, 2.552, 6.499), (1, 1.145, -0.095, -0.993), (1, 1.920, 0.373, 1.959), (1, 0.458, 0.094, -1.801), (1, -0.118, 3.273, 6.582), (1, 2.667, 1.472, 6.752), (1, -0.387, -0.529, -5.360), (1, 2.219, 1.790, 6.810), (1, -0.754, 2.139, 1.908), (1, -0.446, -0.668, -5.896), (1, 1.729, 0.914, 3.199), (1, 2.908, -0.420, 1.556), (1, 1.645, 3.581, 11.034), (1, 0.358, -0.950, -5.136), (1, -0.467, 2.339, 3.084), (1, 3.629, 2.959, 13.135), (1, 2.393, 0.926, 4.563), (1, -0.945, 0.281, -4.047), (1, 3.688, -0.570, 2.667), (1, 3.016, 1.775, 8.356), (1, 2.571, 0.139, 2.559), (1, 2.999, 0.956, 5.866), (1, 1.754, -0.809, -1.920), (1, 3.943, 0.382, 6.030), (1, -0.970, 2.315, 2.004), (1, 1.503, 0.790, 2.376), (1, -0.775, 2.563, 3.139), (1, 1.211, 0.113, -0.240), (1, 3.058, 0.977, 6.048), (1, 2.729, 1.634, 7.360), (1, 0.307, 2.759, 5.893), (1, 3.272, 0.181, 4.089), (1, 1.192, 1.963, 5.273), (1, 0.931, 1.447, 3.203), (1, 3.835, 3.447, 15.011), (1, 0.709, 0.008, -1.559), (1, 3.155, -0.676, 1.283), (1, 2.342, 1.047, 4.824), (1, 2.059, 1.262, 4.903), (1, 2.797, 0.855, 5.159), (1, 0.387, 0.645, -0.292), (1, 1.418, 0.408, 1.060), (1, 2.719, -0.826, -0.039), (1, 2.735, 3.736, 13.678), (1, 0.205, 0.777, -0.260), (1, 3.117, 2.063, 9.424), (1, 0.601, 0.178, -1.263), (1, 0.064, 0.157, -2.401), (1, 3.104, -0.455, 1.842), (1, -0.253, 0.672, -1.490), (1, 2.592, -0.408, 0.961), (1, -0.909, 1.314, -0.878), (1, 0.625, 2.594, 6.031), (1, 2.749, -0.210, 1.869), (1, -0.469, 1.532, 0.657), (1, 1.954, 1.827, 6.388), (1, -0.528, 1.136, -0.647), (1, 0.802, -0.583, -3.146), (1, -0.176, 1.584, 1.400), (1, -0.705, -0.785, -6.766), (1, 1.660, 2.365, 7.416), (1, 2.278, 3.977, 13.485), (1, 2.846, 3.845, 14.229), (1, 3.588, -0.401, 2.974), (1, 3.525, 3.831, 15.542), (1, 0.191, 3.312, 7.318), (1, 2.615, -0.287, 1.370), (1, 2.701, -0.446, 1.064), (1, 2.065, -0.556, -0.538), (1, 2.572, 3.618, 12.997), (1, 3.743, -0.708, 2.362), (1, 3.734, 2.319, 11.425), (1, 3.768, 2.777, 12.866), (1, 3.203, 0.958, 6.280), (1, 1.512, 2.635, 7.927), (1, 2.194, 2.323, 8.356), (1, -0.726, 2.729, 3.735), (1, 0.020, 1.704, 2.152), (1, 2.173, 2.856, 9.912), (1, 3.124, 1.705, 8.364), (1, -0.834, 2.142, 1.759), (1, -0.702, 3.024, 4.666), (1, 1.393, 0.583, 1.535), (1, 2.136, 3.770, 12.581), (1, -0.445, 0.991, -0.917), (1, 0.244, -0.835, -5.016), (1, 2.789, 0.691, 4.652), (1, 0.246, 2.661, 5.475), (1, 3.793, 2.671, 12.601), (1, 1.645, -0.973, -2.627), (1, 2.405, 1.842, 7.336), (1, 3.221, 3.109, 12.769), (1, -0.638, 3.220, 5.385), (1, 1.836, 3.025, 9.748), (1, -0.660, 1.818, 1.133), (1, 0.901, 0.981, 1.744), (1, -0.236, 3.087, 5.789), (1, 1.744, 3.864, 12.078), (1, -0.166, 3.186, 6.226), (1, 3.536, -0.090, 3.803), (1, 3.284, 2.026, 9.648), (1, 1.327, 2.822, 8.119), (1, -0.709, 0.105, -4.104), (1, 0.509, -0.989, -4.949), (1, 0.180, -0.934, -5.440), (1, 3.522, 1.374, 8.168), (1, 1.497, -0.764, -2.297), (1, 1.696, 2.364, 7.482), (1, -0.202, -0.032, -3.500), (1, 3.109, -0.138, 2.804), (1, -0.238, 2.992, 5.501), (1, 1.639, 1.634, 5.181), (1, 1.919, 0.341, 1.859), (1, -0.563, 1.750, 1.124), (1, 0.886, 3.589, 9.539), (1, 3.619, 3.020, 13.299), (1, 1.703, -0.493, -1.073), (1, 2.364, 3.764, 13.022), (1, 1.820, 1.854, 6.201), (1, 1.437, -0.765, -2.421), (1, 1.396, 0.959, 2.668), (1, 2.608, 2.032, 8.312), (1, 0.333, -0.040, -2.455), (1, 3.441, 0.824, 6.355), (1, 1.303, 2.767, 7.908), (1, 1.359, 2.404, 6.932), (1, 0.674, 0.241, -0.930), (1, 2.708, -0.077, 2.183), (1, 3.821, 3.215, 14.287), (1, 3.316, 1.591, 8.404), (1, -0.848, 1.145, -1.259), (1, 3.455, 3.081, 13.153), (1, 2.568, 0.259, 2.914), (1, 2.866, 2.636, 10.642), (1, 2.776, -0.309, 1.626), (1, 2.087, 0.619, 3.031), (1, 1.682, 1.201, 3.967), (1, 3.800, 2.600, 12.399), (1, 3.344, -0.780, 1.347), (1, 1.053, -0.817, -3.346), (1, 0.805, 3.085, 7.865), (1, 0.173, 0.069, -2.449), (1, 2.018, 1.309, 4.964), (1, 3.713, 3.804, 15.838), (1, 3.805, -0.063, 4.421), (1, 3.587, 2.854, 12.738), (1, 2.426, -0.179, 1.315), (1, 0.535, 0.572, -0.213), (1, -0.558, 0.142, -3.690), (1, -0.875, 2.700, 3.349), (1, 2.405, 3.933, 13.610), (1, 1.633, 1.222, 3.934), (1, 0.049, 2.853, 5.657), (1, 1.146, 0.907, 2.015), (1, 0.300, 0.219, -1.744), (1, 2.226, 2.526, 9.029), (1, 2.545, -0.762, -0.198), (1, 2.553, 3.956, 13.974), (1, -0.898, 2.836, 3.713), (1, 3.796, -0.202, 3.985), (1, -0.810, 2.963, 4.268), (1, 0.511, 2.104, 4.334), (1, 3.527, 3.741, 15.275), (1, -0.921, 3.094, 4.440), (1, 0.856, 3.108, 8.036), (1, 0.815, 0.565, 0.323), (1, 3.717, 0.693, 6.512), (1, 3.052, 3.558, 13.778), (1, 2.942, 3.034, 11.986), (1, 0.765, 3.177, 8.061), (1, 3.175, -0.525, 1.776), (1, 0.309, 1.006, 0.638), (1, 1.922, 0.835, 3.349), (1, 3.678, 3.314, 14.297), (1, 2.840, -0.486, 1.221), (1, 1.195, 3.396, 9.578), (1, -0.157, 3.122, 6.053), (1, 2.404, 1.434, 6.110), (1, 3.108, 2.210, 9.845), (1, 2.289, 1.188, 5.142), (1, -0.319, -0.044, -3.769), (1, -0.625, 3.701, 6.854), (1, 2.269, -0.276, 0.710), (1, 0.777, 1.963, 4.442), (1, 0.411, 1.893, 3.501), (1, 1.173, 0.461, 0.728), (1, 1.767, 3.077, 9.765), (1, 0.853, 3.076, 7.933), (1, -0.013, 3.149, 6.421), (1, 3.841, 1.526, 9.260), (1, -0.950, 0.277, -4.070), (1, -0.644, -0.747, -6.527), (1, -0.923, 1.733, 0.353), (1, 0.044, 3.037, 6.201), (1, 2.074, 2.494, 8.631), (1, 0.016, 0.961, -0.085), (1, -0.780, -0.448, -5.904), (1, 0.170, 1.936, 3.148), (1, -0.420, 3.730, 7.349), (1, -0.630, 1.504, 0.254), (1, -0.006, 0.045, -2.879), (1, 1.101, -0.985, -3.753), (1, 1.618, 0.555, 1.900), (1, -0.336, 1.408, 0.552), (1, 1.086, 3.284, 9.024), (1, -0.815, 2.032, 1.466), (1, 3.144, -0.380, 2.148), (1, 2.326, 2.077, 7.883), (1, -0.571, 0.964, -1.251), (1, 2.416, 1.255, 5.595), (1, 3.964, 1.379, 9.065), (1, 3.897, 1.553, 9.455), (1, 1.806, 2.667, 8.611), (1, 0.323, 3.809, 9.073), (1, 0.501, 3.256, 7.769), (1, -0.679, 3.539, 6.259), (1, 2.825, 3.856, 14.219), (1, 0.288, -0.536, -4.032), (1, 3.009, 0.725, 5.193), (1, -0.763, 1.140, -1.105), (1, 1.124, 3.807, 10.670), (1, 2.478, 0.204, 2.570), (1, 2.825, 2.639, 10.566), (1, 1.878, -0.883, -1.892), (1, 3.380, 2.942, 12.587), (1, 2.202, 1.739, 6.621), (1, -0.711, -0.680, -6.463), (1, -0.266, 1.827, 1.951), (1, -0.846, 1.003, -1.683), (1, 3.201, 0.132, 3.798), (1, 2.797, 0.085, 2.849), (1, 1.632, 3.269, 10.072), (1, 2.410, 2.727, 10.003), (1, -0.624, 0.853, -1.690), (1, 1.314, 3.268, 9.433), (1, -0.395, 0.450, -2.440), (1, 0.992, 3.168, 8.489), (1, 3.355, 2.106, 10.028), (1, 0.509, -0.888, -4.647), (1, 1.007, 0.797, 1.405), (1, 0.045, 0.211, -2.278), (1, -0.911, 1.093, -1.544), (1, 2.409, 0.273, 2.637), (1, 2.640, 3.540, 12.899), (1, 2.668, -0.433, 1.038), (1, -0.014, 0.341, -2.005), (1, -0.525, -0.344, -5.083), (1, 2.278, 3.517, 12.105), (1, 3.712, 0.901, 7.128), (1, -0.689, 2.842, 4.149), (1, -0.467, 1.263, -0.147), (1, 0.963, -0.653, -3.034), (1, 2.559, 2.590, 9.889), (1, 1.566, 1.393, 4.312), (1, -1.000, 1.809, 0.429), (1, -0.297, 3.221, 6.070), (1, 2.199, 3.820, 12.856), (1, 3.096, 3.251, 12.944), (1, 1.479, 1.835, 5.461), (1, 0.276, 0.773, -0.130), (1, 0.607, 1.382, 2.360), (1, 1.169, -0.108, -0.985), (1, 3.429, 0.475, 5.282), (1, 2.626, 0.104, 2.563), (1, 1.156, 3.512, 9.850), (1, 3.947, 0.796, 7.282), (1, -0.462, 2.425, 3.351), (1, 3.957, 0.366, 6.014), (1, 3.763, -0.330, 3.536), (1, 0.667, 3.361, 8.417), (1, -0.583, 0.892, -1.492), (1, -0.505, 1.344, 0.021), (1, -0.474, 2.714, 4.195), (1, 3.455, 0.014, 3.950), (1, 1.016, 1.828, 4.516), (1, 1.845, 0.193, 1.269), (1, -0.529, 3.930, 7.731), (1, 2.636, 0.045, 2.408), (1, 3.757, -0.918, 1.760), (1, -0.808, 1.160, -1.137), (1, 0.744, 1.435, 2.793), (1, 3.457, 3.566, 14.613), (1, 1.061, 3.140, 8.544), (1, 3.733, 3.368, 14.570), (1, -0.969, 0.879, -2.301), (1, 3.940, 3.136, 14.287), (1, -0.730, 2.107, 1.860), (1, 3.699, 2.820, 12.858), (1, 2.197, -0.636, -0.514), (1, 0.775, -0.979, -4.387), (1, 2.019, 2.828, 9.521), (1, 1.415, 0.113, 0.170), (1, 1.567, 3.410, 10.363), (1, 0.984, -0.960, -3.913), (1, 1.809, 2.487, 8.079), (1, 1.550, 1.130, 3.489), (1, -0.770, 3.027, 4.542), (1, -0.358, 3.326, 6.262), (1, 3.140, 0.096, 3.567), (1, -0.685, 2.213, 2.270), (1, 0.916, 0.692, 0.907), (1, 1.526, 1.159, 3.527), (1, 2.675, -0.568, 0.645), (1, 1.740, 3.019, 9.538), (1, 1.223, 2.088, 5.709), (1, 1.572, -0.125, -0.230), (1, 3.641, 0.362, 5.369), (1, 2.944, 3.897, 14.578), (1, 2.775, 2.461, 9.932), (1, -0.200, 2.492, 4.076), (1, 0.065, 2.055, 3.296), (1, 2.375, -0.639, -0.167), (1, -0.133, 1.138, 0.149), (1, -0.385, 0.163, -3.281), (1, 2.200, 0.863, 3.989), (1, -0.470, 3.492, 6.536), (1, -0.916, -0.547, -6.472), (1, 0.634, 0.927, 1.049), (1, 2.930, 2.655, 10.825), (1, 3.094, 2.802, 11.596), (1, 0.457, 0.539, -0.470), (1, 1.277, 2.229, 6.240), (1, -0.157, 1.270, 0.496), (1, 3.320, 0.640, 5.559), (1, 2.836, 1.067, 5.872), (1, 0.921, -0.716, -3.307), (1, 3.886, 1.487, 9.233), (1, 0.306, -0.142, -2.815), (1, 3.727, -0.410, 3.225), (1, 1.268, -0.801, -2.866), (1, 2.302, 2.493, 9.084), (1, 0.331, 0.373, -1.220), (1, 3.224, -0.857, 0.879), (1, 1.328, 2.786, 8.014), (1, 3.639, 1.601, 9.081), (1, 3.201, -0.484, 1.949), (1, 3.447, -0.734, 1.692), (1, 2.773, -0.143, 2.117), (1, 1.517, -0.493, -1.445), (1, 1.778, -0.428, -0.728), (1, 3.989, 0.099, 5.274), (1, 1.126, 3.985, 11.206), (1, 0.348, 0.756, -0.035), (1, 2.399, 2.576, 9.525), (1, 0.866, 1.800, 4.132), (1, 3.612, 1.598, 9.017), (1, 0.495, 2.239, 4.707), (1, 2.442, 3.712, 13.019), (1, 0.238, -0.844, -5.057), (1, 1.404, 3.095, 9.093), (1, 2.842, 2.044, 8.816), (1, 0.622, 0.322, -0.791), (1, -0.561, 1.242, -0.395), (1, 0.679, 3.822, 9.823), (1, 1.875, 3.526, 11.327), (1, 3.587, 1.050, 7.324), (1, 1.467, 0.588, 1.699), (1, 3.180, 1.571, 8.074), (1, 1.402, 0.430, 1.093), (1, 1.834, 2.209, 7.294), (1, 3.542, -0.259, 3.306), (1, -0.517, 0.174, -3.513), (1, 3.549, 2.210, 10.729), (1, 2.260, 3.393, 11.699), (1, 0.036, 1.893, 2.751), (1, 0.680, 2.815, 6.804), (1, 0.219, 0.368, -1.459), (1, -0.519, 3.987, 7.924), (1, 0.974, 0.761, 1.231), (1, 0.107, 0.620, -0.927), (1, 1.513, 1.910, 5.755), (1, 3.114, 0.894, 5.910), (1, 3.061, 3.052, 12.276), (1, 2.556, 3.779, 13.448), (1, 1.964, 2.692, 9.002), (1, 3.894, -0.032, 4.690), (1, -0.693, 0.910, -1.655), (1, 2.692, 2.908, 11.108), (1, -0.824, 1.190, -1.078), (1, 3.621, 0.918, 6.997), (1, 3.190, 2.442, 10.707), (1, 1.424, -0.546, -1.791), (1, 2.061, -0.427, -0.158), (1, 1.532, 3.158, 9.540), (1, 0.648, 3.557, 8.967), (1, 2.511, 1.665, 7.017), (1, 1.903, -0.168, 0.302), (1, -0.186, -0.718, -5.528), (1, 2.421, 3.896, 13.531), (1, 3.063, 1.841, 8.650), (1, 0.636, 1.699, 3.367), (1, 1.555, 0.688, 2.174), (1, -0.412, 0.454, -2.462), (1, 1.645, 3.207, 9.911), (1, 3.396, 3.766, 15.090), (1, 0.375, -0.256, -3.017), (1, 3.636, 0.732, 6.469), (1, 2.503, 3.133, 11.405), (1, -0.253, 0.693, -1.429), (1, 3.178, 3.110, 12.686), (1, 3.282, -0.725, 1.388), (1, -0.297, 1.222, 0.070), (1, 1.872, 3.211, 10.377), (1, 3.471, 1.446, 8.278), (1, 2.891, 0.197, 3.374), (1, -0.896, 2.198, 1.802), (1, 1.178, -0.717, -2.796), (1, 0.650, 3.371, 8.412), (1, 0.447, 3.248, 7.637), (1, 1.616, -0.109, -0.097), (1, 1.837, 1.092, 3.951), (1, 0.767, 1.384, 2.684), (1, 3.466, -0.600, 2.133), (1, -0.800, -0.734, -6.802), (1, -0.534, 0.068, -3.865), (1, 3.416, -0.459, 2.455), (1, 0.800, -0.132, -1.795), (1, 2.150, 1.190, 4.869), (1, 0.830, 1.220, 2.319), (1, 2.656, 2.587, 10.072), (1, 0.375, -0.219, -2.906), (1, 0.582, -0.637, -3.749), (1, 0.588, -0.723, -3.992), (1, 3.875, 2.126, 11.127), (1, -0.476, 1.909, 1.775), (1, 0.963, 3.597, 9.716), (1, -0.888, 3.933, 7.021), (1, 1.711, -0.868, -2.184), (1, 3.244, 1.990, 9.460), (1, -0.057, 1.537, 1.497), (1, -0.015, 3.511, 7.504), (1, 0.280, 0.582, -0.695), (1, 2.402, 2.731, 9.998), (1, 2.053, 2.253, 7.865), (1, 1.955, 0.172, 1.424), (1, 3.746, 0.872, 7.107), (1, -0.157, 2.381, 3.829), (1, 3.548, -0.918, 1.340), (1, 2.449, 3.195, 11.482), (1, 1.582, 1.055, 3.329), (1, 1.908, -0.839, -1.700), (1, 2.341, 3.137, 11.091), (1, -0.043, 3.873, 8.532), (1, 0.528, -0.752, -4.198), (1, -0.940, 0.261, -4.098), (1, 2.609, 3.531, 12.812), (1, 2.439, 2.486, 9.336), (1, -0.659, -0.150, -4.768), (1, 2.131, 1.973, 7.181), (1, 0.253, 0.304, -1.583), (1, -0.169, 2.273, 3.480), (1, 1.855, 3.974, 12.631), (1, 0.092, 1.160, 0.666), (1, 3.990, 0.402, 6.187), (1, -0.455, 0.932, -1.113), (1, 2.365, 1.152, 5.185), (1, -0.058, 1.244, 0.618), (1, 0.674, 0.481, -0.209), (1, 3.002, 0.246, 3.743), (1, 1.804, 3.765, 11.902), (1, 3.567, -0.752, 1.876), (1, 0.098, 2.257, 3.968), (1, 0.130, -0.889, -5.409), (1, 0.633, 1.891, 3.940), (1, 0.421, 2.533, 5.440), (1, 2.252, 1.853, 7.063), (1, 3.191, -0.980, 0.443), (1, -0.776, 3.241, 5.171), (1, 0.509, 1.737, 3.229), (1, 3.583, 1.274, 7.986), (1, 1.101, 2.896, 7.891), (1, 3.072, -0.008, 3.120), (1, 2.945, -0.295, 2.006), (1, 3.621, -0.161, 3.760), (1, 1.399, 3.759, 11.075), (1, 3.783, -0.866, 1.968), (1, -0.241, 2.902, 5.225), (1, 1.323, 1.934, 5.449), (1, 1.449, 2.855, 8.464), (1, 0.088, 1.526, 1.753), (1, -1.000, 2.161, 1.485), (1, -0.214, 3.358, 6.647), (1, -0.384, 3.230, 5.921), (1, 3.146, 1.228, 6.975), (1, 1.917, 0.860, 3.415), (1, 1.982, 1.735, 6.167), (1, 1.404, 1.851, 5.360), (1, 2.428, -0.674, -0.166), (1, 2.081, -0.505, -0.352), (1, 0.914, -0.543, -2.802), (1, -0.029, -0.482, -4.506), (1, 0.671, 0.184, -1.105), (1, 1.641, -0.524, -1.292), (1, 1.005, 0.361, 0.094), (1, -0.493, 3.582, 6.760), (2, 3.876, 2.563, 21.500), (2, 0.159, -0.309, 7.986), (2, -0.496, 0.417, 12.998), (2, -0.164, -0.512, 7.092), (2, 0.632, 3.200, 28.571), (2, 3.772, 0.493, 9.188), (2, 2.430, -0.797, 2.789), (2, 3.872, -0.775, 1.475), (2, -0.031, -0.256, 8.495), (2, 2.726, 3.000, 25.271), (2, 1.116, -0.269, 7.269), (2, 0.551, 3.402, 29.860), (2, 0.820, 2.500, 24.179), (2, 1.153, -0.453, 6.131), (2, -0.717, -0.360, 8.556), (2, 0.532, 0.531, 12.654), (2, 2.096, 0.981, 13.791), (2, 0.146, -0.433, 7.259), (2, 1.000, 1.075, 15.452), (2, 2.963, -0.090, 6.495), (2, 1.047, 2.052, 21.267), (2, 0.882, 1.778, 19.785), (2, 1.380, 2.702, 24.832), (2, 1.853, 0.401, 10.554), (2, 2.004, 1.770, 18.618), (2, 3.377, 0.772, 11.253), (2, 1.227, -0.169, 7.759), (2, 0.428, 2.052, 21.885), (2, 0.070, 3.648, 31.816), (2, 0.128, -0.938, 4.244), (2, 2.061, 0.753, 12.454), (2, 1.207, -0.301, 6.989), (2, -0.168, 3.765, 32.757), (2, 3.450, 1.801, 17.353), (2, -0.483, 3.344, 30.547), (2, 1.847, 1.884, 19.455), (2, 3.241, 2.369, 20.975), (2, 0.628, 3.590, 30.912), (2, 2.183, 1.741, 18.263), (2, 0.774, 2.638, 25.057), (2, 3.292, 2.867, 23.912), (2, 0.056, 2.651, 25.850), (2, -0.506, 0.300, 12.308), (2, 0.524, 1.182, 16.570), (2, -0.267, 2.563, 25.647), (2, 3.953, -0.334, 4.040), (2, 2.507, 2.319, 21.408), (2, -0.770, 1.017, 16.875), (2, 0.481, 1.591, 19.062), (2, 3.243, 1.060, 13.114), (2, 2.178, -0.325, 5.873), (2, 2.510, 1.235, 14.900), (2, 2.684, 2.370, 21.535), (2, 3.466, 3.656, 28.469), (2, 2.994, 3.960, 30.764), (2, -0.363, 3.592, 31.917), (2, 1.738, 0.074, 8.708), (2, 1.462, 3.727, 30.902), (2, 0.059, 0.180, 11.021), (2, 2.980, 2.317, 20.925), (2, 1.248, 0.965, 14.545), (2, 0.776, -0.229, 7.850), (2, -0.562, 2.839, 27.598), (2, 3.581, 0.244, 7.883), (2, -0.958, 0.901, 16.362), (2, 3.257, 0.364, 8.925), (2, 1.478, 1.718, 18.827), (2, -0.121, -0.436, 7.507), (2, 0.966, 1.444, 17.697), (2, 3.631, 3.463, 27.144), (2, 0.174, -0.663, 5.848), (2, 2.783, 0.124, 7.959), (2, 1.106, -0.936, 3.276), (2, 0.186, -0.942, 4.162), (2, 3.513, 2.456, 21.222), (2, 0.339, 2.316, 23.558), (2, 0.566, 2.515, 24.523), (2, -0.134, 0.746, 14.607), (2, 1.554, 0.106, 9.084), (2, -0.846, 2.748, 27.337), (2, 3.934, 0.564, 9.451), (2, 2.840, -0.966, 1.366), (2, 1.379, 0.307, 10.463), (2, 1.065, -0.780, 4.253), (2, 3.324, 2.145, 19.546), (2, 0.974, -0.543, 5.767), (2, 2.469, 3.976, 31.385), (2, -0.434, 3.689, 32.570), (2, 0.261, 0.481, 12.624), (2, 3.786, 2.605, 21.843), (2, -0.460, -0.536, 7.243), (2, 2.576, 2.880, 24.702), (2, -0.501, 3.551, 31.810), (2, 2.946, 3.263, 26.633), (2, 2.959, -0.813, 2.162), (2, -0.749, 0.490, 13.686), (2, 2.821, 0.335, 9.187), (2, 3.964, 0.272, 7.667), (2, 0.808, -0.700, 4.994), (2, 0.415, 2.183, 22.682), (2, 2.551, 3.785, 30.156), (2, 0.821, 1.120, 15.897), (2, 1.714, 3.019, 26.400), (2, 2.265, 1.950, 19.438), (2, 1.493, 3.317, 28.409), (2, -0.445, 2.282, 24.134), (2, -0.508, 2.508, 25.553), (2, 1.017, -0.621, 5.255), (2, 1.053, 2.246, 22.422), (2, 0.441, 1.637, 19.382), (2, 3.657, 1.246, 13.816), (2, 0.756, 0.808, 14.095), (2, 1.849, 1.599, 17.742), (2, 1.782, -0.000, 8.215), (2, 1.136, 3.940, 32.506), (2, 2.814, 3.288, 26.916), (2, 3.180, 3.198, 26.008), (2, 0.728, -0.054, 8.946), (2, 0.801, 0.775, 13.852), (2, 1.399, -0.546, 5.322), (2, 1.415, 1.753, 19.103), (2, 2.860, 1.796, 17.913), (2, 0.712, 2.902, 26.699), (2, -0.389, 3.093, 28.945), (2, 3.661, 3.666, 28.333), (2, 3.944, 0.996, 12.030), (2, 1.655, 1.385, 16.657), (2, 0.122, -0.662, 5.906), (2, 3.667, 2.763, 22.912), (2, 2.606, 0.630, 11.172), (2, -0.291, 1.492, 19.242), (2, -0.787, 1.223, 18.125), (2, 2.405, 0.325, 9.545), (2, 3.129, -0.412, 4.398), (2, 0.588, 3.964, 33.194), (2, -0.177, 3.636, 31.993), (2, 2.079, 3.280, 27.603), (2, 3.055, 3.958, 30.692), (2, -0.164, 3.188, 29.292), (2, 3.803, 3.151, 25.105), (2, 3.123, -0.891, 1.531), (2, 3.070, -0.824, 1.988), (2, 3.103, -0.931, 1.309), (2, 0.589, 3.353, 29.529), (2, 1.095, 1.973, 20.744), (2, -0.557, 0.370, 12.775), (2, 1.223, 0.307, 10.620), (2, 3.255, -0.768, 2.136), (2, 0.508, 2.157, 22.435), (2, 0.373, 0.319, 11.544), (2, 1.240, 1.736, 19.177), (2, 1.846, 0.970, 13.972), (2, 3.352, -0.534, 3.445), (2, -0.352, -0.290, 8.610), (2, 0.281, 0.193, 10.880), (2, 3.450, -0.059, 6.193), (2, 0.310, 2.575, 25.140), (2, 1.791, 1.127, 14.970), (2, 1.992, 2.347, 22.087), (2, -0.288, 2.881, 27.576), (2, 3.464, 3.664, 28.518), (2, 0.573, 2.789, 26.159), (2, 2.265, 1.583, 17.233), (2, 3.203, 0.730, 11.177), (2, 3.345, 1.368, 14.862), (2, 0.891, 3.690, 31.248), (2, 2.252, -0.311, 5.884), (2, -0.087, 0.804, 14.912), (2, 0.153, 2.510, 24.905), (2, 3.533, -0.965, 0.675), (2, 2.035, 1.953, 19.683), (2, 0.316, 2.448, 24.373), (2, 2.199, 3.858, 30.946), (2, -0.519, 3.647, 32.399), (2, 0.867, 1.961, 20.901), (2, 2.739, 2.268, 20.866), (2, 2.462, -0.664, 3.551), (2, 1.372, 3.419, 29.144), (2, -0.628, 2.723, 26.968), (2, 3.989, -0.225, 4.659), (2, 0.166, 3.190, 28.976), (2, 1.681, 2.937, 25.943), (2, 2.979, 2.263, 20.600), (2, 3.896, -0.419, 3.590), (2, 3.861, 2.224, 19.485), (2, -0.087, -0.861, 4.918), (2, 1.182, 1.886, 20.133), (2, 3.622, 2.320, 20.301), (2, 3.560, 0.008, 6.491), (2, 3.082, -0.605, 3.285), (2, 1.777, 1.324, 16.169), (2, 2.269, 2.436, 22.348), (2, 0.019, 3.074, 28.423), (2, -0.560, 3.868, 33.765), (2, 1.568, 2.886, 25.749), (2, 2.045, 0.222, 9.286), (2, 1.391, 0.352, 10.723), (2, 0.172, 1.908, 21.276), (2, 1.173, -0.726, 4.474), (2, 1.642, 2.576, 23.814), (2, 3.346, 1.377, 14.918), (2, 0.120, 0.411, 12.344), (2, 3.913, 0.820, 11.008), (2, 1.054, 3.732, 31.340), (2, 2.284, 0.108, 8.362), (2, 2.266, 0.066, 8.131), (2, 3.204, 1.156, 13.735), (2, 3.243, 2.032, 18.947), (2, 3.052, -0.121, 6.221), (2, 1.131, 2.189, 22.000), (2, 2.958, 0.658, 10.990), (2, 1.717, 3.708, 30.530), (2, 2.417, 2.070, 20.004), (2, 2.175, 0.881, 13.110), (2, 0.333, 3.494, 30.629), (2, 3.598, 3.940, 30.044), (2, 3.683, -0.110, 5.660), (2, 2.555, 1.196, 14.620), (2, 1.511, 0.453, 11.206), (2, 0.903, 1.390, 17.439), (2, -0.897, 3.303, 30.716), (2, 0.245, 2.129, 22.527), (2, 1.370, 2.715, 24.923), (2, 1.822, -0.917, 2.676), (2, 2.690, -0.109, 6.657), (2, 0.206, 1.561, 19.162), (2, 3.905, 2.710, 22.357), (2, -0.438, 3.207, 29.678), (2, 0.898, 3.445, 29.772), (2, 1.838, 2.871, 25.385), (2, 0.116, 1.401, 18.292), (2, -0.408, 2.375, 24.656), (2, 1.681, 3.338, 28.349), (2, 1.177, -0.318, 6.914), (2, 1.004, 0.626, 12.753), (2, 2.840, 2.589, 22.691), (2, 1.258, 3.993, 32.700), (2, 2.016, 3.489, 28.920), (2, -0.728, 0.164, 11.713), (2, 0.193, 1.479, 18.682), (2, 2.647, -0.969, 1.541), (2, 3.837, 2.602, 21.773), (2, 0.541, 0.205, 10.690), (2, 0.026, 2.756, 26.511), (2, 0.924, 0.909, 14.530), (2, 0.974, -0.074, 8.581), (2, 0.081, 0.005, 9.948), (2, 1.331, 2.942, 26.320), (2, 2.498, 3.405, 27.934), (2, 3.741, 1.554, 15.581), (2, 3.502, -0.089, 5.964), (2, 3.069, 1.768, 17.539), (2, 3.115, -0.008, 6.839), (2, 3.237, -0.503, 3.745), (2, 0.768, -0.135, 8.420), (2, 0.410, 3.974, 33.437), (2, 0.238, -0.700, 5.564), (2, 3.619, 0.350, 8.482), (2, 3.563, 3.059, 24.788), (2, 2.916, 3.101, 25.691), (2, 0.144, 3.282, 29.549), (2, 1.288, 2.642, 24.565), (2, -0.859, 0.229, 12.234), (2, 1.507, -0.711, 4.229), (2, -0.634, 2.608, 26.281), (2, 2.054, -0.834, 2.942), (2, 0.453, 1.072, 15.980), (2, 3.914, 1.159, 13.039), (2, 0.254, 1.835, 20.758), (2, 1.577, 0.428, 10.991), (2, 1.990, 3.569, 29.421), (2, 1.584, 1.803, 19.234), (2, 0.835, 3.603, 30.785), (2, 0.900, 3.033, 27.296), (2, 1.180, 0.280, 10.499), (2, 2.400, 2.802, 24.409), (2, 0.924, 2.462, 23.851), (2, 2.138, 0.722, 12.192), (2, -0.253, -0.809, 5.401), (2, 3.570, -0.116, 5.733), (2, 0.201, -0.182, 8.708), (2, 2.457, 0.454, 10.267), (2, -0.053, 0.443, 12.709), (2, 2.108, 2.069, 20.309), (2, -0.964, -0.441, 8.318), (2, 1.802, 0.403, 10.614), (2, 3.704, 3.902, 29.711), (2, 1.904, 2.418, 22.603), (2, 2.965, 3.429, 27.606), (2, -0.801, -0.072, 10.370), (2, 3.009, 0.491, 9.937), (2, 2.781, 1.026, 13.376), (2, -0.421, 0.744, 14.883), (2, 3.639, -0.148, 5.476), (2, 0.584, 2.041, 21.663), (2, 1.547, -0.391, 6.107), (2, -0.204, 0.727, 14.564), (2, 0.372, 0.464, 12.410), (2, 1.185, 1.732, 19.207), (2, 3.574, 0.755, 10.954), (2, 2.164, 1.425, 16.385), (2, 1.895, 1.374, 16.351), (2, 2.352, 2.188, 20.779), (2, 0.187, 0.677, 13.874), (2, -0.589, 3.686, 32.703), (2, 3.081, 0.414, 9.403), (2, 3.341, 3.246, 26.137), (2, 0.617, -0.201, 8.174), (2, 1.518, 3.833, 31.481), (2, 2.613, -0.350, 5.286), (2, 3.426, 0.751, 11.082), (2, 2.726, 3.586, 28.787), (2, 2.834, -0.219, 5.855), (2, 1.038, 3.607, 30.605), (2, 0.479, 1.226, 16.874), (2, 1.729, 0.297, 10.053), (2, 0.050, 1.815, 20.841), (2, -0.554, 3.538, 31.782), (2, 2.773, 0.973, 13.064), (2, -0.239, 3.425, 30.786), (2, 3.611, 3.700, 28.590), (2, 1.418, 3.625, 30.332), (2, 1.599, 1.626, 18.156), (2, 1.841, 1.518, 17.269), (2, 1.119, 1.996, 20.856), (2, 2.810, 2.293, 20.947), (2, 1.174, 2.062, 21.198), (2, -0.326, -0.279, 8.655), (2, -0.365, 0.816, 15.259), (2, 1.296, -0.095, 8.132), (2, -0.263, 0.511, 13.327), (2, 1.757, 3.012, 26.314), (2, 1.849, 1.065, 14.539), (2, 1.651, 2.244, 21.814), (2, 3.942, 1.026, 12.214), (2, 2.314, 1.944, 19.353), (2, 3.055, -0.002, 6.930), (2, 0.402, 1.350, 17.698), (2, 0.004, 2.288, 23.724), (2, 3.265, 2.962, 24.509), (2, 1.044, -0.684, 4.850), (2, -0.280, 2.278, 23.948), (2, 1.216, 0.726, 13.142), (2, 3.181, 3.518, 27.925), (2, 3.199, -0.124, 6.055), (2, 0.510, -0.622, 5.755), (2, 2.920, 1.067, 13.484), (2, 2.573, 1.844, 18.492), (2, 1.155, 3.505, 29.878), (2, 2.033, 1.756, 18.502), (2, 1.312, 0.114, 9.373), (2, -0.823, 3.339, 30.854), (2, 0.287, 3.891, 33.060), (2, -0.621, -0.210, 9.363), (2, 3.734, 1.574, 15.712), (2, -0.932, 0.772, 15.561), (2, -0.719, 1.604, 20.345), (2, -0.555, 0.773, 15.190), (2, -0.744, 3.934, 34.348), (2, 1.671, -0.425, 5.778), (2, 2.754, 2.690, 23.385), (2, 1.826, 2.185, 21.283), (2, 1.970, 0.021, 8.159), (2, 2.882, 3.494, 28.081), (2, 1.668, -0.030, 8.150), (2, 0.472, 2.184, 22.633), (2, 1.656, 3.393, 28.701), (2, -0.069, 2.331, 24.057), (2, 0.075, 1.341, 17.973), (2, 1.836, 0.565, 11.554), (2, -0.235, 0.520, 13.357), (2, 3.620, 3.169, 25.393), (2, 0.401, -0.062, 9.224), (2, 1.503, 1.667, 18.501), (2, 3.727, 1.149, 13.166), (2, 2.777, -0.081, 6.737), (2, 3.914, -0.234, 4.680), (2, 1.765, 0.750, 12.737), (2, 1.746, 1.818, 19.161), (2, 0.019, 2.819, 26.893), (2, 1.068, 1.917, 20.434), (2, 3.035, 3.158, 25.915), (2, 2.012, 0.724, 12.330), (2, 2.597, 2.264, 20.986), (2, 3.428, 3.239, 26.005), (2, -0.016, -0.529, 6.842), (2, 1.314, 0.735, 13.095), (2, 2.832, -0.567, 3.768), (2, -0.296, 2.641, 26.141), (2, 2.863, 3.889, 30.470), (2, 2.849, 3.997, 31.130), (2, 1.660, 1.813, 19.216), (2, 2.798, 0.977, 13.062), (2, 3.935, 0.549, 9.359), (2, 1.002, 3.557, 30.342), (2, 3.052, 2.207, 20.193), (2, 3.455, 0.458, 9.294), (2, 3.312, 2.138, 19.515), (2, 0.292, 0.058, 10.056), (2, 0.050, -0.211, 8.682), (2, -0.215, 1.108, 16.866), (2, -0.169, 0.647, 14.048), (2, 2.546, 0.876, 12.709), (2, -0.911, -0.209, 9.659), (2, 0.950, 2.894, 26.413), (2, -0.512, -0.167, 9.508), (2, 1.821, -0.747, 3.696), (2, 2.257, 3.945, 31.415), (2, 2.398, -0.586, 4.087), (2, 3.051, 0.815, 11.836), (2, 3.399, 2.131, 19.389), (2, 2.982, 1.549, 16.314), (2, -0.790, -0.329, 8.819), (2, 3.797, 0.327, 8.167), (2, 1.838, 0.290, 9.902), (2, 1.906, 1.782, 18.785), (2, 1.330, -0.208, 7.422), (2, -0.217, 0.854, 15.344), (2, 3.310, 1.582, 16.180), (2, 2.965, 0.917, 12.537), (2, 3.558, -0.164, 5.460), (2, -0.841, 2.060, 23.203), (2, 2.892, 2.621, 22.834), (2, -0.011, -0.198, 8.821), (2, -0.430, 2.999, 28.424), (2, -0.584, 0.894, 15.946), (2, 0.033, 1.310, 17.829), (2, 3.044, 0.410, 9.418), (2, 3.932, 0.295, 7.836), (2, 0.394, 1.315, 17.494), (2, 1.424, -0.167, 7.573), (2, 1.676, 1.118, 15.031), (2, 1.821, 0.714, 12.462), (2, 2.688, 1.497, 16.292), (2, 3.960, 2.344, 20.103), (2, -0.787, -0.161, 9.819), (2, 3.538, 3.651, 28.366), (2, -0.338, 0.458, 13.088), (2, -0.146, 3.162, 29.120), (2, 3.124, 3.352, 26.989), (2, -0.189, 3.685, 32.301), (2, 0.396, 1.004, 15.626), (2, -0.171, 2.114, 22.858), (2, 3.736, 0.732, 10.659), (2, 1.259, 2.564, 24.127), (2, -0.263, 2.426, 24.820), (2, 1.558, -0.858, 3.292), (2, 2.882, 1.110, 13.776), (2, 0.039, 1.284, 17.666), (2, 3.074, 2.379, 21.201), (2, -0.523, 0.303, 12.344), (2, 0.363, 1.082, 16.132), (2, 2.925, 2.187, 20.195), (2, 0.595, -0.335, 7.397), (2, 0.062, -0.232, 8.544), (2, 0.877, 2.155, 22.050), (2, -0.256, 2.922, 27.788), (2, 1.813, 3.161, 27.152), (2, 2.177, 2.532, 23.016), (2, -0.051, 0.035, 10.263), (2, 2.688, 3.599, 28.906), (2, 2.539, -0.076, 7.008), (2, 2.563, 1.467, 16.240), (2, -0.755, 2.276, 24.410), (2, 3.092, 0.660, 10.868), (2, 2.403, 2.693, 23.756), (2, -0.170, 2.178, 23.239), (2, 2.672, -0.603, 3.712), (2, -0.077, -0.493, 7.116), (2, 1.997, 1.934, 19.608), (2, 1.913, -0.792, 3.335), (2, 0.171, -0.329, 7.857), (2, 2.488, 0.171, 8.540), (2, -0.514, 0.331, 12.500), (2, -0.201, 2.484, 25.103), (2, 2.436, 0.032, 7.759), (2, -0.094, 2.530, 25.275), (2, 2.186, 2.591, 23.358), (2, 3.171, -0.766, 2.231), (2, 2.410, 0.183, 8.687), (2, -0.699, -0.329, 8.728), (2, 3.285, 2.252, 20.228), (2, 1.928, -0.059, 7.720), (2, 3.460, 0.399, 8.931), (2, 2.542, 0.224, 8.801), (2, 2.902, 2.101, 19.702), (2, 3.808, 2.528, 21.358), (2, 0.330, 0.642, 13.522), (2, -0.088, 1.286, 17.804), (2, 3.025, 2.354, 21.100), (2, 3.306, 2.049, 18.986), (2, 1.477, 1.720, 18.845), (2, 2.676, 3.601, 28.931), (2, 1.577, 0.170, 9.443), (2, 1.362, 3.534, 29.843), (2, 2.616, 3.106, 26.018), (2, 3.773, 0.378, 8.496), (2, -0.125, 2.057, 22.465), (2, 3.174, 1.382, 15.120), (2, 0.844, 2.058, 21.503);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5205', () => {
    const query = `insert into defaults values (1.76210664421617,1.7469706406568504,0.7988286239230257,1.0938642223599824,1.167321139201246,1.7648182796261376,0.909111664354187,0.92,-0.5940592289464697,-0.7274920231630502,-0.952028633990455,-0.8949798182945309,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(0.6276564089897139,-0.06763531281107672,0.7988286239230257,0.5966532121963541,1.167321139201246,0.4551512643242912,0.909111664354187,0.76,-0.5940592289464697,-0.7274920231630502,-0.952028633990455,-0.8949798182945309,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(-0.07046681268810527,-0.5625278455750569,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,-1.0056311758200724,0.909111664354187,0.72,-0.5940592289464697,-0.7274920231630502,-0.952028633990455,-0.8949798182945309,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(0.4531256035702591,0.4272572199529034,-0.0766000050337147,0.09944220203272576,-1.0614543055744028,0.11933920911869125,0.909111664354187,0.8,-0.5940592289464697,-0.7274920231630502,-0.952028633990455,-0.8949798182945309,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(-0.24499761810756004,-0.7274920231630502,-0.952028633990455,-1.3921908284581592,-0.5042604443804907,-0.6530285178541898,-1.0999748867047898,0.65,-0.5940592289464697,-0.7274920231630502,-0.952028633990455,-0.8949798182945309,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(1.1512488252480781,1.2520781078928702,1.674257252879766,1.0938642223599824,-0.5042604443804907,1.244309594057455,0.909111664354187,0.9,-0.5940592289464697,-0.7274920231630502,-0.952028633990455,-0.8949798182945309,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(0.36586020086053167,0.26229304236491,-0.0766000050337147,-0.3977688081309026,0.6101272780073337,-0.6698191206144725,0.909111664354187,0.75,-0.5940592289464697,-0.7274920231630502,-0.952028633990455,-0.8949798182945309,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(-0.7685900343659244,-1.057420378339037,-0.952028633990455,-0.3977688081309026,0.6101272780073337,-1.1735372034228724,-1.0999748867047898,0.68,-0.5940592289464697,-0.7274920231630502,-0.952028633990455,-0.8949798182945309,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(-1.2921824506242887,-0.8924562007510436,-1.8274572629471952,-1.3921908284581592,-2.175842027962227,-1.0056311758200724,-1.0999748867047898,0.5,-0.5940592289464697,-0.7274920231630502,-0.952028633990455,-0.8949798182945309,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(0.5403910062799865,0.09732886477691666,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,0.0018049897967303734,-1.0999748867047898,0.45,-0.5940592289464697,-0.7274920231630502,-0.952028633990455,-0.8949798182945309,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(0.7149218116994412,-0.2325994903990701,-0.0766000050337147,0.09944220203272576,0.6101272780073337,-0.3340070654088696,0.909111664354187,0.52,-0.5940592289464697,-0.7274920231630502,-0.952028633990455,-0.8949798182945309,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(0.889452617118896,0.5922213975408968,0.7988286239230257,0.5966532121963541,1.167321139201246,0.6734291002079332,0.909111664354187,0.84,-0.5940592289464697,-0.7274920231630502,-0.952028633990455,-0.8949798182945309,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(0.9767180198286235,0.7571855751288902,0.7988286239230257,0.5966532121963541,1.167321139201246,0.8413351278107333,0.909111664354187,0.78,-0.5940592289464697,-0.7274920231630502,-0.952028633990455,-0.8949798182945309,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(-0.8558554370756518,0.26229304236491,-0.0766000050337147,0.5966532121963541,-0.5042604443804907,-1.0056311758200724,0.909111664354187,0.62,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,1.0428223609340956,0.909111664354187),(-0.5067938262367422,-0.5625278455750569,-0.0766000050337147,0.09944220203272576,-1.618648166768315,-0.6698191206144725,0.909111664354187,0.61,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,1.0428223609340956,0.909111664354187),(-0.24499761810756004,-0.39756366798706344,-0.0766000050337147,0.09944220203272576,-1.0614543055744028,-0.5019130930116695,-1.0999748867047898,0.54,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,1.0428223609340956,0.909111664354187),(0.016798590021622126,-0.06763531281107672,-0.0766000050337147,0.5966532121963541,-0.5042604443804907,0.16971101739953035,-1.0999748867047898,0.66,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,1.0428223609340956,0.909111664354187),(0.1913293954410769,-0.2325994903990701,-0.0766000050337147,0.5966532121963541,-0.5042604443804907,-1.0056311758200724,0.909111664354187,0.65,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,1.0428223609340956,0.909111664354187),(0.10406399273134952,0.4272572199529034,-0.0766000050337147,0.5966532121963541,-0.5042604443804907,0.3376170450023333,-1.0999748867047898,0.63,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,1.0428223609340956,0.909111664354187),(-1.2049170479145614,-0.8924562007510436,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,-0.1661010378060696,-1.0999748867047898,0.62,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,1.0428223609340956,0.909111664354187),(-0.41952842352701486,-0.06763531281107672,-0.0766000050337147,-0.3977688081309026,-1.618648166768315,-1.1735372034228724,0.909111664354187,0.64,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,1.0428223609340956,0.909111664354187),(0.7149218116994412,1.087113930304877,0.7988286239230257,-0.3977688081309026,-1.618648166768315,-0.3340070654088696,-1.0999748867047898,0.7,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,1.0428223609340956,0.909111664354187),(0.9767180198286235,1.4170422854808635,1.674257252879766,1.5910752325236108,1.724515000395158,1.5129592382219361,0.909111664354187,0.94,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,1.0428223609340956,0.909111664354187),(1.5003104360869879,1.9119348182448437,1.674257252879766,1.5910752325236108,1.167321139201246,1.848771293427536,0.909111664354187,0.95,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,1.0428223609340956,0.909111664354187),(1.6748412415064426,1.9119348182448437,1.674257252879766,0.5966532121963541,0.052933416813421515,2.016677321030339,0.909111664354187,0.97,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,1.0428223609340956,0.909111664354187),(2.023902852345352,2.076898995832837,1.674257252879766,1.0938642223599824,1.167321139201246,1.680865265824736,0.909111664354187,0.94,1.6748412415064426,1.9119348182448437,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.7144464713452956,0.909111664354187),(0.4531256035702591,0.26229304236491,1.674257252879766,1.0938642223599824,0.052933416813421515,0.3376170450023333,-1.0999748867047898,0.76,1.6748412415064426,1.9119348182448437,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.7144464713452956,0.909111664354187),(-1.6412440614631982,-1.5523129111030172,-0.952028633990455,-1.8894018386217877,-1.0614543055744028,-1.8451613138340752,0.909111664354187,0.44,1.6748412415064426,1.9119348182448437,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.7144464713452956,0.909111664354187),(-1.9030402695923805,-2.377133799042984,-1.8274572629471952,-1.3921908284581592,-1.618648166768315,-2.348879396642477,-1.0999748867047898,0.46,1.6748412415064426,1.9119348182448437,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.7144464713452956,0.909111664354187),(-0.5940592289464697,-1.3873487335150236,-0.952028633990455,-1.8894018386217877,-1.618648166768315,-2.180973369039677,-1.0999748867047898,0.54,1.6748412415064426,1.9119348182448437,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.7144464713452956,0.909111664354187),(-1.4667132560437435,-1.7172770886910105,-0.952028633990455,-0.3977688081309026,-0.5042604443804907,-0.8377251482172725,0.909111664354187,0.65,1.6748412415064426,1.9119348182448437,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.7144464713452956,0.909111664354187),(0.889452617118896,-0.7274920231630502,-0.0766000050337147,0.5966532121963541,0.6101272780073337,-0.5019130930116695,0.909111664354187,0.74,1.6748412415064426,1.9119348182448437,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.7144464713452956,0.909111664354187),(1.8493720469258974,1.7469706406568504,0.7988286239230257,-0.3977688081309026,1.167321139201246,1.3450532106191362,0.909111664354187,0.91,1.6748412415064426,1.9119348182448437,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.7144464713452956,0.909111664354187),(2.023902852345352,1.087113930304877,1.674257252879766,0.5966532121963541,0.6101272780073337,1.680865265824736,0.909111664354187,0.9,1.6748412415064426,1.9119348182448437,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.7144464713452956,0.909111664354187),(1.2385142279578056,0.7571855751288902,1.674257252879766,0.5966532121963541,1.724515000395158,2.016677321030339,0.909111664354187,0.94,1.6748412415064426,1.9119348182448437,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.7144464713452956,0.909111664354187),(0.2785947981508043,0.4272572199529034,1.674257252879766,1.5910752325236108,1.724515000395158,1.0092411554135332,0.909111664354187,0.88,1.6748412415064426,1.9119348182448437,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.7144464713452956,0.909111664354187),(-1.553978658753471,-0.2325994903990701,-0.952028633990455,0.5966532121963541,0.6101272780073337,-0.3340070654088696,-1.0999748867047898,0.64,1.6748412415064426,1.9119348182448437,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.7144464713452956,0.909111664354187),(-1.4667132560437435,-0.39756366798706344,-1.8274572629471952,-2.386612848785416,-1.618648166768315,-1.3414432310256739,-1.0999748867047898,0.58,0.36586020086053167,0.26229304236491,-0.0766000050337147,-0.3977688081309026,-0.5042604443804907,-0.0989386267649508,0.909111664354187),(-1.117651645204834,-0.39756366798706344,-1.8274572629471952,-0.3977688081309026,-2.175842027962227,-1.8451613138340752,-1.0999748867047898,0.52,0.36586020086053167,0.26229304236491,-0.0766000050337147,-0.3977688081309026,-0.5042604443804907,-0.0989386267649508,0.909111664354187),(-0.8558554370756518,0.09732886477691666,-0.952028633990455,0.5966532121963541,0.052933416813421515,-1.5093492586284738,-1.0999748867047898,0.48,0.36586020086053167,0.26229304236491,-0.0766000050337147,-0.3977688081309026,-0.5042604443804907,-0.0989386267649508,0.909111664354187),(-0.7685900343659244,0.4272572199529034,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,-1.0056311758200724,0.909111664354187,0.46,0.36586020086053167,0.26229304236491,-0.0766000050337147,-0.3977688081309026,-0.5042604443804907,-0.0989386267649508,0.909111664354187),(-0.07046681268810527,-0.39756366798706344,-0.952028633990455,-0.8949798182945309,-1.0614543055744028,-0.6698191206144725,0.909111664354187,0.49,0.36586020086053167,0.26229304236491,-0.0766000050337147,-0.3977688081309026,-0.5042604443804907,-0.0989386267649508,0.909111664354187),(-0.3322630208172874,-0.06763531281107672,-0.952028633990455,-0.8949798182945309,-1.618648166768315,-0.1661010378060696,0.909111664354187,0.53,0.36586020086053167,0.26229304236491,-0.0766000050337147,-0.3977688081309026,-0.5042604443804907,-0.0989386267649508,0.909111664354187),(1.3257796306675331,1.582006463068857,0.7988286239230257,1.0938642223599824,0.6101272780073337,0.8413351278107333,-1.0999748867047898,0.87,0.36586020086053167,0.26229304236491,-0.0766000050337147,-0.3977688081309026,-0.5042604443804907,-0.0989386267649508,0.909111664354187),(0.8021872144091686,0.9221497527168835,1.674257252879766,1.0938642223599824,0.6101272780073337,1.3450532106191362,0.909111664354187,0.91,0.36586020086053167,0.26229304236491,-0.0766000050337147,-0.3977688081309026,-0.5042604443804907,-0.0989386267649508,0.909111664354187),(0.4531256035702591,0.4272572199529034,1.674257252879766,1.5910752325236108,0.6101272780073337,0.8413351278107333,0.909111664354187,0.88,0.36586020086053167,0.26229304236491,-0.0766000050337147,-0.3977688081309026,-0.5042604443804907,-0.0989386267649508,0.909111664354187),(1.0639834225383509,1.087113930304877,1.674257252879766,0.5966532121963541,1.724515000395158,1.1771471830163363,0.909111664354187,0.86,0.36586020086053167,0.26229304236491,-0.0766000050337147,-0.3977688081309026,-0.5042604443804907,-0.0989386267649508,0.909111664354187),(1.9366374496356247,1.9119348182448437,1.674257252879766,1.0938642223599824,0.6101272780073337,1.848771293427536,-1.0999748867047898,0.89,0.36586020086053167,0.26229304236491,-0.0766000050337147,-0.3977688081309026,-0.5042604443804907,-0.0989386267649508,0.909111664354187),(0.36586020086053167,0.4272572199529034,-0.0766000050337147,0.09944220203272576,1.724515000395158,0.42157005880373183,0.909111664354187,0.82,0.36586020086053167,0.26229304236491,-0.0766000050337147,-0.3977688081309026,-0.5042604443804907,-0.0989386267649508,0.909111664354187),(0.889452617118896,0.5922213975408968,0.7988286239230257,-0.3977688081309026,0.6101272780073337,-0.3340070654088696,0.909111664354187,0.78,0.36586020086053167,0.26229304236491,-0.0766000050337147,-0.3977688081309026,-0.5042604443804907,-0.0989386267649508,0.909111664354187),(-0.3322630208172874,-1.5523129111030172,-0.0766000050337147,-0.8949798182945309,1.167321139201246,-0.5019130930116695,0.909111664354187,0.76,-0.15773221539783266,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(-0.41952842352701486,-1.2223845559270303,-0.952028633990455,-1.8894018386217877,0.052933416813421515,-1.1735372034228724,0.909111664354187,0.56,-0.15773221539783266,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(1.5003104360869879,1.4170422854808635,0.7988286239230257,0.5966532121963541,-0.5042604443804907,-1.0056311758200724,0.909111664354187,0.78,-0.15773221539783266,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(0.6276564089897139,0.7571855751288902,0.7988286239230257,0.5966532121963541,-1.0614543055744028,-0.8377251482172725,0.909111664354187,0.72,-0.15773221539783266,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(0.4531256035702591,0.4272572199529034,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,-1.0056311758200724,-1.0999748867047898,0.7,-0.15773221539783266,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(0.2785947981508043,-0.7274920231630502,-0.0766000050337147,-0.3977688081309026,-0.5042604443804907,-1.5093492586284738,-1.0999748867047898,0.64,-0.15773221539783266,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(-0.07046681268810527,-0.8924562007510436,-0.0766000050337147,-1.3921908284581592,-0.5042604443804907,-2.013067341436875,-1.0999748867047898,0.64,-0.15773221539783266,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(-1.6412440614631982,-1.3873487335150236,-0.952028633990455,0.5966532121963541,-1.618648166768315,-1.6772552862312753,-1.0999748867047898,0.46,-0.15773221539783266,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(-1.4667132560437435,-1.3873487335150236,-1.8274572629471952,-0.3977688081309026,-1.618648166768315,-3.0205035070536796,0.909111664354187,0.36,-0.15773221539783266,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(-0.5067938262367422,-0.5625278455750569,-0.952028633990455,-1.3921908284581592,-1.618648166768315,-0.5019130930116695,-1.0999748867047898,0.42,-0.15773221539783266,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(-0.681324631656197,-1.2223845559270303,-0.952028633990455,-0.3977688081309026,-0.5042604443804907,-0.8377251482172725,-1.0999748867047898,0.48,-0.15773221539783266,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(-0.8558554370756518,-1.057420378339037,-0.0766000050337147,0.5966532121963541,-0.5042604443804907,-0.6698191206144725,-1.0999748867047898,0.47,-0.15773221539783266,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(-1.117651645204834,-0.39756366798706344,-0.952028633990455,-0.3977688081309026,-0.5042604443804907,-0.6698191206144725,0.909111664354187,0.54,-1.117651645204834,-1.057420378339037,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5765116696695942,-1.0999748867047898),(-0.15773221539783266,-0.06763531281107672,-0.952028633990455,0.5966532121963541,-0.5042604443804907,-0.1661010378060696,0.909111664354187,0.56,-1.117651645204834,-1.057420378339037,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5765116696695942,-1.0999748867047898),(0.7149218116994412,0.5922213975408968,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.16971101739953035,-1.0999748867047898,0.52,-1.117651645204834,-1.057420378339037,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5765116696695942,-1.0999748867047898),(0.7149218116994412,0.7571855751288902,0.7988286239230257,0.09944220203272576,0.052933416813421515,0.5391042781256927,-1.0999748867047898,0.55,-1.117651645204834,-1.057420378339037,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5765116696695942,-1.0999748867047898),(0.889452617118896,1.087113930304877,-0.0766000050337147,-0.3977688081309026,-0.5042604443804907,0.7070103057284927,-1.0999748867047898,0.61,-1.117651645204834,-1.057420378339037,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5765116696695942,-1.0999748867047898),(-0.07046681268810527,-0.06763531281107672,-0.952028633990455,0.09944220203272576,0.052933416813421515,0.06896740083785215,0.909111664354187,0.57,-1.117651645204834,-1.057420378339037,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5765116696695942,-1.0999748867047898),(0.10406399273134952,0.26229304236491,-0.0766000050337147,0.09944220203272576,0.6101272780073337,1.0428223609340956,0.909111664354187,0.68,-1.117651645204834,-1.057420378339037,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5765116696695942,-1.0999748867047898),(0.9767180198286235,1.2520781078928702,0.7988286239230257,1.0938642223599824,0.6101272780073337,0.9420787443724145,0.909111664354187,0.78,-1.117651645204834,-1.057420378339037,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5765116696695942,-1.0999748867047898),(1.3257796306675331,1.7469706406568504,1.674257252879766,1.5910752325236108,1.724515000395158,1.7480276768658578,0.909111664354187,0.94,-1.117651645204834,-1.057420378339037,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5765116696695942,-1.0999748867047898),(1.6748412415064426,0.7571855751288902,1.674257252879766,1.5910752325236108,1.724515000395158,1.9495149099892173,0.909111664354187,0.96,-1.117651645204834,-1.057420378339037,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5765116696695942,-1.0999748867047898),(0.36586020086053167,0.5922213975408968,1.674257252879766,1.5910752325236108,1.724515000395158,1.4290062244205346,0.909111664354187,0.93,-1.117651645204834,-1.057420378339037,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5765116696695942,-1.0999748867047898),(-0.24499761810756004,0.09732886477691666,0.7988286239230257,1.0938642223599824,0.6101272780073337,0.7405915112490521,0.909111664354187,0.84,-1.117651645204834,-1.057420378339037,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-1.5765116696695942,-1.0999748867047898),(-0.24499761810756004,-0.2325994903990701,-0.0766000050337147,-0.3977688081309026,1.724515000395158,0.5055230726051333,-1.0999748867047898,0.74,-1.7285094641729257,-1.8822412662790038,-0.952028633990455,-0.8949798182945309,-1.618648166768315,-1.9626955331560363,-1.0999748867047898),(1.0639834225383509,1.087113930304877,-0.952028633990455,-1.3921908284581592,0.6101272780073337,-0.06535742124438843,0.909111664354187,0.72,-1.7285094641729257,-1.8822412662790038,-0.952028633990455,-0.8949798182945309,-1.618648166768315,-1.9626955331560363,-1.0999748867047898),(0.889452617118896,0.7571855751288902,-0.0766000050337147,-0.3977688081309026,-0.5042604443804907,0.20329222292009272,0.909111664354187,0.74,-1.7285094641729257,-1.8822412662790038,-0.952028633990455,-0.8949798182945309,-1.618648166768315,-1.9626955331560363,-1.0999748867047898),(-1.3794478533340162,-1.3873487335150236,-0.952028633990455,-0.3977688081309026,-1.618648166768315,-0.6362379150939101,-1.0999748867047898,0.64,-1.7285094641729257,-1.8822412662790038,-0.952028633990455,-0.8949798182945309,-1.618648166768315,-1.9626955331560363,-1.0999748867047898),(-1.8157748668826532,-2.0472054438669973,-0.952028633990455,-0.3977688081309026,-1.618648166768315,-1.777998902792955,0.909111664354187,0.44,-1.7285094641729257,-1.8822412662790038,-0.952028633990455,-0.8949798182945309,-1.618648166768315,-1.9626955331560363,-1.0999748867047898),(-1.990305672302108,-2.377133799042984,-1.8274572629471952,-1.8894018386217877,-1.618648166768315,-2.0802297524779956,-1.0999748867047898,0.46,-1.7285094641729257,-1.8822412662790038,-0.952028633990455,-0.8949798182945309,-1.618648166768315,-1.9626955331560363,-1.0999748867047898),(-0.41952842352701486,-0.39756366798706344,-0.0766000050337147,-1.3921908284581592,-0.5042604443804907,-0.972049970299513,0.909111664354187,0.5,-1.7285094641729257,-1.8822412662790038,-0.952028633990455,-0.8949798182945309,-1.618648166768315,-1.9626955331560363,-1.0999748867047898),(2.023902852345352,2.076898995832837,0.7988286239230257,1.5910752325236108,1.724515000395158,1.5129592382219361,0.909111664354187,0.96,-1.7285094641729257,-1.8822412662790038,-0.952028633990455,-0.8949798182945309,-1.618648166768315,-1.9626955331560363,-1.0999748867047898),(0.2785947981508043,0.4272572199529034,1.674257252879766,1.5910752325236108,1.167321139201246,1.0428223609340956,0.909111664354187,0.92,-1.7285094641729257,-1.8822412662790038,-0.952028633990455,-0.8949798182945309,-1.618648166768315,-1.9626955331560363,-1.0999748867047898),(0.4531256035702591,1.2520781078928702,1.674257252879766,0.5966532121963541,1.167321139201246,1.2778907995780144,0.909111664354187,0.92,-1.7285094641729257,-1.8822412662790038,-0.952028633990455,-0.8949798182945309,-1.618648166768315,-1.9626955331560363,-1.0999748867047898),(2.023902852345352,1.2520781078928702,1.674257252879766,1.0938642223599824,1.167321139201246,1.4290062244205346,0.909111664354187,0.94,-1.7285094641729257,-1.8822412662790038,-0.952028633990455,-0.8949798182945309,-1.618648166768315,-1.9626955331560363,-1.0999748867047898),(0.1913293954410769,-0.7274920231630502,0.7988286239230257,1.0938642223599824,0.052933416813421515,0.10254860635841155,-1.0999748867047898,0.76,-1.7285094641729257,-1.8822412662790038,-0.952028633990455,-0.8949798182945309,-1.618648166768315,-1.9626955331560363,-1.0999748867047898),(-0.15773221539783266,-0.2325994903990701,-0.0766000050337147,1.0938642223599824,0.052933416813421515,-0.30042585988831016,-1.0999748867047898,0.72,-1.7285094641729257,-1.8822412662790038,-0.952028633990455,-0.8949798182945309,-1.618648166768315,-1.9626955331560363,-1.0999748867047898),(0.016798590021622126,-0.06763531281107672,-0.952028633990455,0.09944220203272576,-0.5042604443804907,-0.535494298532232,-1.0999748867047898,0.66,-2.3393672831410175,-1.2223845559270303,-1.8274572629471952,-1.8894018386217877,-1.618648166768315,-1.7444176972723957,-1.0999748867047898),(-0.24499761810756004,0.09732886477691666,-0.0766000050337147,1.0938642223599824,0.052933416813421515,-0.7705627371761508,-1.0999748867047898,0.64,-2.3393672831410175,-1.2223845559270303,-1.8274572629471952,-1.8894018386217877,-1.618648166768315,-1.7444176972723957,-1.0999748867047898),(-0.07046681268810527,0.26229304236491,0.7988286239230257,1.0938642223599824,0.052933416813421515,0.27045463396121155,0.909111664354187,0.74,-2.3393672831410175,-1.2223845559270303,-1.8274572629471952,-1.8894018386217877,-1.618648166768315,-1.7444176972723957,-1.0999748867047898),(0.10406399273134952,-0.2325994903990701,-0.952028633990455,0.5966532121963541,0.6101272780073337,-1.139955997902313,0.909111664354187,0.64,-2.3393672831410175,-1.2223845559270303,-1.8274572629471952,-1.8894018386217877,-1.618648166768315,-1.7444176972723957,-1.0999748867047898),(-1.553978658753471,-1.7172770886910105,-0.0766000050337147,1.5910752325236108,0.052933416813421515,-1.5765116696695942,-1.0999748867047898,0.38,-2.3393672831410175,-1.2223845559270303,-1.8274572629471952,-1.8894018386217877,-1.618648166768315,-1.7444176972723957,-1.0999748867047898),(-1.6412440614631982,-1.5523129111030172,-0.952028633990455,0.5966532121963541,-0.5042604443804907,-0.9552593675392334,-1.0999748867047898,0.34,-2.3393672831410175,-1.2223845559270303,-1.8274572629471952,-1.8894018386217877,-1.618648166768315,-1.7444176972723957,-1.0999748867047898),(-1.3794478533340162,-1.7172770886910105,-0.952028633990455,-0.3977688081309026,-0.5042604443804907,-1.2071184089434333,0.909111664354187,0.44,-2.3393672831410175,-1.2223845559270303,-1.8274572629471952,-1.8894018386217877,-1.618648166768315,-1.7444176972723957,-1.0999748867047898),(-1.2049170479145614,-1.3873487335150236,-0.0766000050337147,-1.3921908284581592,-1.0614543055744028,-1.5765116696695942,-1.0999748867047898,0.36,-2.3393672831410175,-1.2223845559270303,-1.8274572629471952,-1.8894018386217877,-1.618648166768315,-1.7444176972723957,-1.0999748867047898),(-1.117651645204834,-1.2223845559270303,0.7988286239230257,-1.8894018386217877,-1.0614543055744028,-1.2742808199845537,-1.0999748867047898,0.42,-2.3393672831410175,-1.2223845559270303,-1.8274572629471952,-1.8894018386217877,-1.618648166768315,-1.7444176972723957,-1.0999748867047898),(-0.9431208397853792,-1.2223845559270303,-0.952028633990455,-0.3977688081309026,-0.5042604443804907,-1.0056311758200724,-1.0999748867047898,0.48,-2.3393672831410175,-1.2223845559270303,-1.8274572629471952,-1.8894018386217877,-1.618648166768315,-1.7444176972723957,-1.0999748867047898),(1.2385142279578056,2.076898995832837,-0.0766000050337147,0.5966532121963541,0.6101272780073337,0.6062666891668145,0.909111664354187,0.86,-2.3393672831410175,-1.2223845559270303,-1.8274572629471952,-1.8894018386217877,-1.618648166768315,-1.7444176972723957,-1.0999748867047898),(1.3257796306675331,1.9119348182448437,0.7988286239230257,1.5910752325236108,1.167321139201246,1.076403566454655,0.909111664354187,0.9,-2.3393672831410175,-1.2223845559270303,-1.8274572629471952,-1.8894018386217877,-1.618648166768315,-1.7444176972723957,-1.0999748867047898),(0.5403910062799865,0.9221497527168835,-0.0766000050337147,0.5966532121963541,0.6101272780073337,0.47194186708457386,0.909111664354187,0.79,-1.2049170479145614,-1.5523129111030172,-1.8274572629471952,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(0.4531256035702591,-0.06763531281107672,-0.0766000050337147,0.09944220203272576,0.052933416813421515,-0.2332634488471884,0.909111664354187,0.71,-1.2049170479145614,-1.5523129111030172,-1.8274572629471952,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(-0.41952842352701486,-0.39756366798706344,-0.952028633990455,-0.8949798182945309,-0.5042604443804907,-0.8041439426967131,-1.0999748867047898,0.64,-1.2049170479145614,-1.5523129111030172,-1.8274572629471952,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(-0.24499761810756004,-0.2325994903990701,-0.952028633990455,0.5966532121963541,0.052933416813421515,-0.585866106813071,-1.0999748867047898,0.62,-1.2049170479145614,-1.5523129111030172,-1.8274572629471952,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(0.016798590021622126,-0.5625278455750569,-0.952028633990455,1.0938642223599824,0.6101272780073337,-0.2164728460869087,-1.0999748867047898,0.57,-1.2049170479145614,-1.5523129111030172,-1.8274572629471952,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(0.8021872144091686,0.7571855751288902,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,0.7573821140093348,0.909111664354187,0.74,-1.2049170479145614,-1.5523129111030172,-1.8274572629471952,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(-0.07046681268810527,0.4272572199529034,-0.0766000050337147,0.5966532121963541,1.167321139201246,0.30403583948177093,0.909111664354187,0.69,-1.2049170479145614,-1.5523129111030172,-1.8274572629471952,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(1.0639834225383509,0.5922213975408968,0.7988286239230257,1.0938642223599824,1.167321139201246,0.9756599498929738,0.909111664354187,0.87,-1.2049170479145614,-1.5523129111030172,-1.8274572629471952,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(1.8493720469258974,1.582006463068857,0.7988286239230257,0.09944220203272576,1.167321139201246,1.4457968271808173,0.909111664354187,0.91,-1.2049170479145614,-1.5523129111030172,-1.8274572629471952,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(1.2385142279578056,1.4170422854808635,1.674257252879766,1.5910752325236108,1.724515000395158,1.3114720050985766,0.909111664354187,0.93,-1.2049170479145614,-1.5523129111030172,-1.8274572629471952,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(-1.117651645204834,-0.7274920231630502,1.674257252879766,1.5910752325236108,0.6101272780073337,0.06896740083785215,-1.0999748867047898,0.68,-1.2049170479145614,-1.5523129111030172,-1.8274572629471952,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(-1.0303862424951067,0.09732886477691666,1.674257252879766,-0.3977688081309026,-0.5042604443804907,-0.199682243326629,-1.0999748867047898,0.61,-1.2049170479145614,-1.5523129111030172,-1.8274572629471952,-1.3921908284581592,-1.0614543055744028,-1.5933022724298738,-1.0999748867047898),(0.36586020086053167,0.26229304236491,0.7988286239230257,0.5966532121963541,0.6101272780073337,0.13612981187897094,0.909111664354187,0.69,-0.5067938262367422,-1.3873487335150236,-1.8274572629471952,-0.8949798182945309,-0.5042604443804907,-0.2836352571280305,0.909111664354187),(-1.3794478533340162,-0.06763531281107672,-0.0766000050337147,0.09944220203272576,0.052933416813421515,-0.4347506819705508,0.909111664354187,0.62,-0.5067938262367422,-1.3873487335150236,-1.8274572629471952,-0.8949798182945309,-0.5042604443804907,-0.2836352571280305,0.909111664354187),(0.2785947981508043,0.4272572199529034,-0.952028633990455,0.5966532121963541,0.052933416813421515,-0.06535742124438843,-1.0999748867047898,0.72,-0.5067938262367422,-1.3873487335150236,-1.8274572629471952,-0.8949798182945309,-0.5042604443804907,-0.2836352571280305,0.909111664354187),(-0.5067938262367422,-0.39756366798706344,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,-0.2500540516074711,0.909111664354187,0.59,-0.5067938262367422,-1.3873487335150236,-1.8274572629471952,-0.8949798182945309,-0.5042604443804907,-0.2836352571280305,0.909111664354187),(-0.5940592289464697,-0.2325994903990701,0.7988286239230257,1.0938642223599824,1.167321139201246,0.7405915112490521,0.909111664354187,0.66,-0.5067938262367422,-1.3873487335150236,-1.8274572629471952,-0.8949798182945309,-0.5042604443804907,-0.2836352571280305,0.909111664354187),(-1.553978658753471,-0.8924562007510436,-0.0766000050337147,0.5966532121963541,0.052933416813421515,0.03538619531728977,-1.0999748867047898,0.56,-0.5067938262367422,-1.3873487335150236,-1.8274572629471952,-0.8949798182945309,-0.5042604443804907,-0.2836352571280305,0.909111664354187),(-2.3393672831410175,-0.5625278455750569,0.7988286239230257,-1.3921908284581592,-1.0614543055744028,-1.9123237248751956,-1.0999748867047898,0.45,-0.5067938262367422,-1.3873487335150236,-1.8274572629471952,-0.8949798182945309,-0.5042604443804907,-0.2836352571280305,0.909111664354187),(-1.8157748668826532,-1.3873487335150236,-0.952028633990455,-0.3977688081309026,0.052933416813421515,-2.214554574560236,-1.0999748867047898,0.47,-0.5067938262367422,-1.3873487335150236,-1.8274572629471952,-0.8949798182945309,-0.5042604443804907,-0.2836352571280305,0.909111664354187),(0.889452617118896,-0.5625278455750569,1.674257252879766,-0.3977688081309026,0.052933416813421515,0.4047794560434521,0.909111664354187,0.71,-0.5067938262367422,-1.3873487335150236,-1.8274572629471952,-0.8949798182945309,-0.5042604443804907,-0.2836352571280305,0.909111664354187),(1.5875758387967152,1.582006463068857,1.674257252879766,1.5910752325236108,1.724515000395158,1.6137028547836172,0.909111664354187,0.94,-0.5067938262367422,-1.3873487335150236,-1.8274572629471952,-0.8949798182945309,-0.5042604443804907,-0.2836352571280305,0.909111664354187),(1.5003104360869879,1.9119348182448437,1.674257252879766,1.0938642223599824,1.167321139201246,1.4793780327013768,0.909111664354187,0.94,-0.5067938262367422,-1.3873487335150236,-1.8274572629471952,-0.8949798182945309,-0.5042604443804907,-0.2836352571280305,0.909111664354187),(-0.5940592289464697,-0.2325994903990701,0.7988286239230257,-1.8894018386217877,-1.0614543055744028,-0.40116947644999135,-1.0999748867047898,0.57,-0.5067938262367422,-1.3873487335150236,-1.8274572629471952,-0.8949798182945309,-0.5042604443804907,-0.2836352571280305,0.909111664354187),(-0.7685900343659244,0.09732886477691666,-0.0766000050337147,0.09944220203272576,0.052933416813421515,-0.6362379150939101,-1.0999748867047898,0.61,-0.5067938262367422,-1.3873487335150236,-1.8274572629471952,-0.8949798182945309,-0.5042604443804907,-0.2836352571280305,0.909111664354187),(-1.3794478533340162,-0.2325994903990701,0.7988286239230257,-0.8949798182945309,-0.5042604443804907,-0.2164728460869087,-1.0999748867047898,0.57,0.4531256035702591,-0.5625278455750569,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.4047794560434521,0.909111664354187),(-1.4667132560437435,-1.2223845559270303,-0.0766000050337147,-1.3921908284581592,-0.5042604443804907,0.10254860635841155,0.909111664354187,0.64,0.4531256035702591,-0.5625278455750569,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.4047794560434521,0.909111664354187),(0.5403910062799865,0.9221497527168835,-0.0766000050337147,0.5966532121963541,-0.5042604443804907,1.2107283885368956,0.909111664354187,0.85,0.4531256035702591,-0.5625278455750569,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.4047794560434521,0.909111664354187),(0.1913293954410769,0.7571855751288902,-0.0766000050337147,-0.8949798182945309,-1.618648166768315,0.18650162015981303,0.909111664354187,0.78,0.4531256035702591,-0.5625278455750569,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.4047794560434521,0.909111664354187),(0.8021872144091686,0.7571855751288902,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,0.8413351278107333,0.909111664354187,0.84,0.4531256035702591,-0.5625278455750569,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.4047794560434521,0.909111664354187),(1.4130450333772604,1.7469706406568504,1.674257252879766,1.5910752325236108,1.724515000395158,1.2611001968177347,0.909111664354187,0.92,0.4531256035702591,-0.5625278455750569,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.4047794560434521,0.909111664354187),(1.9366374496356247,1.087113930304877,1.674257252879766,0.5966532121963541,1.167321139201246,1.9495149099892173,0.909111664354187,0.96,0.4531256035702591,-0.5625278455750569,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.4047794560434521,0.909111664354187),(-1.2049170479145614,-0.39756366798706344,1.674257252879766,1.5910752325236108,1.167321139201246,0.08575800359813185,-1.0999748867047898,0.77,0.4531256035702591,-0.5625278455750569,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.4047794560434521,0.909111664354187),(-0.681324631656197,-0.39756366798706344,1.674257252879766,0.09944220203272576,0.052933416813421515,-0.06535742124438843,-1.0999748867047898,0.71,0.4531256035702591,-0.5625278455750569,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.4047794560434521,0.909111664354187),(0.5403910062799865,0.7571855751288902,1.674257252879766,0.5966532121963541,1.167321139201246,0.30403583948177093,-1.0999748867047898,0.79,0.4531256035702591,-0.5625278455750569,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.4047794560434521,0.909111664354187),(1.4130450333772604,0.9221497527168835,1.674257252879766,0.5966532121963541,0.6101272780073337,1.1435659774957738,0.909111664354187,0.89,0.4531256035702591,-0.5625278455750569,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.4047794560434521,0.909111664354187),(-0.24499761810756004,0.26229304236491,0.7988286239230257,0.09944220203272576,0.6101272780073337,0.2872452367214912,0.909111664354187,0.82,0.4531256035702591,-0.5625278455750569,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.4047794560434521,0.909111664354187),(-0.41952842352701486,-0.7274920231630502,-0.0766000050337147,1.5910752325236108,0.6101272780073337,-0.2500540516074711,-1.0999748867047898,0.76,0.1913293954410769,-0.39756366798706344,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.11933920911869125,0.909111664354187),(-0.07046681268810527,-1.2223845559270303,-0.952028633990455,-1.8894018386217877,-0.5042604443804907,-0.7369815316555913,0.909111664354187,0.71,0.1913293954410769,-0.39756366798706344,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.11933920911869125,0.909111664354187),(0.8021872144091686,1.4170422854808635,-0.952028633990455,1.0938642223599824,-0.5042604443804907,0.8077539222901738,0.909111664354187,0.8,0.1913293954410769,-0.39756366798706344,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.11933920911869125,0.909111664354187),(0.10406399273134952,0.26229304236491,-1.8274572629471952,0.09944220203272576,0.052933416813421515,0.8749163333312926,-1.0999748867047898,0.78,0.1913293954410769,-0.39756366798706344,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.11933920911869125,0.909111664354187),(1.0639834225383509,0.4272572199529034,-0.952028633990455,0.5966532121963541,-0.5042604443804907,0.9252881416121347,0.909111664354187,0.84,0.1913293954410769,-0.39756366798706344,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.11933920911869125,0.909111664354187),(1.3257796306675331,1.7469706406568504,-0.952028633990455,1.0938642223599824,0.052933416813421515,1.2778907995780144,0.909111664354187,0.9,0.1913293954410769,-0.39756366798706344,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.11933920911869125,0.909111664354187),(1.2385142279578056,1.2520781078928702,1.674257252879766,0.5966532121963541,0.052933416813421515,1.412215621660255,0.909111664354187,0.92,0.1913293954410769,-0.39756366798706344,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.11933920911869125,0.909111664354187),(2.023902852345352,2.076898995832837,0.7988286239230257,1.0938642223599824,0.6101272780073337,2.2181645541536983,0.909111664354187,0.97,0.1913293954410769,-0.39756366798706344,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.11933920911869125,0.909111664354187),(0.7149218116994412,0.7571855751288902,-0.952028633990455,-0.3977688081309026,0.052933416813421515,0.6062666891668145,0.909111664354187,0.8,0.1913293954410769,-0.39756366798706344,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.11933920911869125,0.909111664354187),(0.2785947981508043,0.9221497527168835,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,0.06896740083785215,0.909111664354187,0.81,0.1913293954410769,-0.39756366798706344,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.11933920911869125,0.909111664354187),(-0.15773221539783266,-0.39756366798706344,-0.0766000050337147,-1.3921908284581592,-1.0614543055744028,-0.199682243326629,-1.0999748867047898,0.75,0.1913293954410769,-0.39756366798706344,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.11933920911869125,0.909111664354187),(0.8021872144091686,1.087113930304877,-0.0766000050337147,-0.3977688081309026,-0.5042604443804907,0.8581257305710129,0.909111664354187,0.83,0.1913293954410769,-0.39756366798706344,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.11933920911869125,0.909111664354187),(1.9366374496356247,1.4170422854808635,0.7988286239230257,0.5966532121963541,0.052933416813421515,2.016677321030339,0.909111664354187,0.96,0.6276564089897139,0.4272572199529034,0.7988286239230257,1.0938642223599824,0.6101272780073337,0.9252881416121347,0.909111664354187),(-0.5067938262367422,-0.2325994903990701,-0.952028633990455,0.09944220203272576,-0.5042604443804907,-0.5690755040527913,0.909111664354187,0.79,0.6276564089897139,0.4272572199529034,0.7988286239230257,1.0938642223599824,0.6101272780073337,0.9252881416121347,0.909111664354187),(1.5003104360869879,1.087113930304877,0.7988286239230257,0.5966532121963541,0.6101272780073337,1.3954250188999753,0.909111664354187,0.93,0.6276564089897139,0.4272572199529034,0.7988286239230257,1.0938642223599824,0.6101272780073337,0.9252881416121347,0.909111664354187),(1.3257796306675331,1.4170422854808635,1.674257252879766,1.5910752325236108,1.724515000395158,1.1435659774957738,0.909111664354187,0.94,0.6276564089897139,0.4272572199529034,0.7988286239230257,1.0938642223599824,0.6101272780073337,0.9252881416121347,0.909111664354187),(0.36586020086053167,0.7571855751288902,1.674257252879766,1.5910752325236108,1.724515000395158,0.7741727167696144,0.909111664354187,0.86,0.6276564089897139,0.4272572199529034,0.7988286239230257,1.0938642223599824,0.6101272780073337,0.9252881416121347,0.909111664354187),(0.6276564089897139,-0.39756366798706344,-0.0766000050337147,-0.3977688081309026,0.6101272780073337,0.25366403120093184,-1.0999748867047898,0.79,0.6276564089897139,0.4272572199529034,0.7988286239230257,1.0938642223599824,0.6101272780073337,0.9252881416121347,0.909111664354187),(0.8021872144091686,0.09732886477691666,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.4887324698448536,-1.0999748867047898,0.8,0.6276564089897139,0.4272572199529034,0.7988286239230257,1.0938642223599824,0.6101272780073337,0.9252881416121347,0.909111664354187),(-0.41952842352701486,0.26229304236491,-0.0766000050337147,-0.3977688081309026,-0.5042604443804907,0.15292041463925066,-1.0999748867047898,0.77,0.6276564089897139,0.4272572199529034,0.7988286239230257,1.0938642223599824,0.6101272780073337,0.9252881416121347,0.909111664354187),(-0.15773221539783266,-0.39756366798706344,-0.0766000050337147,-1.3921908284581592,-1.0614543055744028,-0.4347506819705508,-1.0999748867047898,0.7,0.6276564089897139,0.4272572199529034,0.7988286239230257,1.0938642223599824,0.6101272780073337,0.9252881416121347,0.909111664354187),(-0.681324631656197,-0.5625278455750569,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-0.5690755040527913,-1.0999748867047898,0.65,0.6276564089897139,0.4272572199529034,0.7988286239230257,1.0938642223599824,0.6101272780073337,0.9252881416121347,0.909111664354187),(-0.9431208397853792,-0.2325994903990701,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-0.7705627371761508,-1.0999748867047898,0.61,0.6276564089897139,0.4272572199529034,0.7988286239230257,1.0938642223599824,0.6101272780073337,0.9252881416121347,0.909111664354187),(-1.7285094641729257,-1.2223845559270303,-1.8274572629471952,-1.8894018386217877,-1.618648166768315,-1.1735372034228724,-1.0999748867047898,0.52,0.6276564089897139,0.4272572199529034,0.7988286239230257,1.0938642223599824,0.6101272780073337,0.9252881416121347,0.909111664354187),(-0.15773221539783266,-0.7274920231630502,-1.8274572629471952,-1.8894018386217877,-1.618648166768315,-1.2406996144639928,-1.0999748867047898,0.57,0.6276564089897139,0.4272572199529034,0.7988286239230257,1.0938642223599824,0.6101272780073337,0.9252881416121347,0.909111664354187),(-1.6412440614631982,-1.3873487335150236,-1.8274572629471952,-1.8894018386217877,-0.5042604443804907,-1.9123237248751956,-1.0999748867047898,0.53,-1.4667132560437435,-1.2223845559270303,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,-0.5690755040527913,-1.0999748867047898),(0.10406399273134952,0.26229304236491,-0.0766000050337147,-0.3977688081309026,-0.5042604443804907,-0.1661010378060696,-1.0999748867047898,0.67,-1.4667132560437435,-1.2223845559270303,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,-0.5690755040527913,-1.0999748867047898),(0.016798590021622126,-0.39756366798706344,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,-0.06535742124438843,-1.0999748867047898,0.68,-1.4667132560437435,-1.2223845559270303,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,-0.5690755040527913,-1.0999748867047898),(1.0639834225383509,0.5922213975408968,0.7988286239230257,1.0938642223599824,0.6101272780073337,0.690219702968213,0.909111664354187,0.81,-1.4667132560437435,-1.2223845559270303,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,-0.5690755040527913,-1.0999748867047898),(0.4531256035702591,0.4272572199529034,1.674257252879766,1.0938642223599824,0.6101272780073337,0.6230572919270941,-1.0999748867047898,0.78,-1.4667132560437435,-1.2223845559270303,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,-0.5690755040527913,-1.0999748867047898),(-1.2921824506242887,-0.8924562007510436,-0.0766000050337147,0.09944220203272576,1.724515000395158,-0.45154128473083044,-1.0999748867047898,0.65,-1.4667132560437435,-1.2223845559270303,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,-0.5690755040527913,-1.0999748867047898),(-0.3322630208172874,-0.8924562007510436,-0.0766000050337147,-1.3921908284581592,-0.5042604443804907,-0.5522849012925116,-1.0999748867047898,0.64,-1.4667132560437435,-1.2223845559270303,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,-0.5690755040527913,-1.0999748867047898),(-2.0775710750118352,-1.7172770886910105,-0.952028633990455,-1.3921908284581592,0.6101272780073337,-1.3414432310256739,0.909111664354187,0.64,-1.4667132560437435,-1.2223845559270303,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,-0.5690755040527913,-1.0999748867047898),(-0.5067938262367422,-1.3873487335150236,-0.952028633990455,-0.8949798182945309,-0.5042604443804907,-1.0392123813406318,-1.0999748867047898,0.65,-1.4667132560437435,-1.2223845559270303,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,-0.5690755040527913,-1.0999748867047898),(-0.41952842352701486,-1.057420378339037,-0.952028633990455,-0.8949798182945309,0.052933416813421515,-0.9384687647789537,0.909111664354187,0.68,-1.4667132560437435,-1.2223845559270303,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,-0.5690755040527913,-1.0999748867047898),(1.5003104360869879,1.582006463068857,1.674257252879766,0.5966532121963541,1.167321139201246,0.7909633195298942,0.909111664354187,0.89,-1.4667132560437435,-1.2223845559270303,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,-0.5690755040527913,-1.0999748867047898),(0.4531256035702591,0.4272572199529034,0.7988286239230257,0.5966532121963541,1.724515000395158,0.8917069360915754,0.909111664354187,0.86,-1.4667132560437435,-1.2223845559270303,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,-0.5690755040527913,-1.0999748867047898),(0.5403910062799865,0.9221497527168835,0.7988286239230257,0.5966532121963541,1.167321139201246,1.0596129636943752,0.909111664354187,0.89,2.023902852345352,0.9221497527168835,0.7988286239230257,1.5910752325236108,1.724515000395158,1.915933704468658,0.909111664354187),(0.36586020086053167,0.5922213975408968,0.7988286239230257,0.5966532121963541,0.6101272780073337,0.6230572919270941,0.909111664354187,0.87,2.023902852345352,0.9221497527168835,0.7988286239230257,1.5910752325236108,1.724515000395158,1.915933704468658,0.909111664354187),(0.2785947981508043,0.5922213975408968,0.7988286239230257,1.0938642223599824,0.052933416813421515,0.4551512643242912,0.909111664354187,0.85,2.023902852345352,0.9221497527168835,0.7988286239230257,1.5910752325236108,1.724515000395158,1.915933704468658,0.909111664354187),(1.0639834225383509,1.9119348182448437,0.7988286239230257,1.0938642223599824,1.167321139201246,0.9420787443724145,0.909111664354187,0.9,2.023902852345352,0.9221497527168835,0.7988286239230257,1.5910752325236108,1.724515000395158,1.915933704468658,0.909111664354187),(0.1913293954410769,0.4272572199529034,-0.0766000050337147,0.09944220203272576,0.052933416813421515,0.7405915112490521,-1.0999748867047898,0.82,2.023902852345352,0.9221497527168835,0.7988286239230257,1.5910752325236108,1.724515000395158,1.915933704468658,0.909111664354187),(-0.681324631656197,0.09732886477691666,-0.0766000050337147,-0.8949798182945309,-0.5042604443804907,-0.8041439426967131,-1.0999748867047898,0.72,2.023902852345352,0.9221497527168835,0.7988286239230257,1.5910752325236108,1.724515000395158,1.915933704468658,0.909111664354187),(-0.8558554370756518,-0.8924562007510436,-0.0766000050337147,-0.3977688081309026,-0.5042604443804907,-0.5522849012925116,-1.0999748867047898,0.73,2.023902852345352,0.9221497527168835,0.7988286239230257,1.5910752325236108,1.724515000395158,1.915933704468658,0.909111664354187),(-1.4667132560437435,-0.5625278455750569,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,-0.7369815316555913,-1.0999748867047898,0.71,2.023902852345352,0.9221497527168835,0.7988286239230257,1.5910752325236108,1.724515000395158,1.915933704468658,0.909111664354187),(-1.0303862424951067,-0.06763531281107672,-0.952028633990455,-0.8949798182945309,-1.0614543055744028,-0.30042585988831016,-1.0999748867047898,0.71,2.023902852345352,0.9221497527168835,0.7988286239230257,1.5910752325236108,1.724515000395158,1.915933704468658,0.909111664354187),(-1.553978658753471,-1.2223845559270303,-0.952028633990455,-0.3977688081309026,0.052933416813421515,-1.2071184089434333,-1.0999748867047898,0.68,2.023902852345352,0.9221497527168835,0.7988286239230257,1.5910752325236108,1.724515000395158,1.915933704468658,0.909111664354187),(-0.24499761810756004,0.4272572199529034,-0.0766000050337147,0.5966532121963541,0.6101272780073337,0.3376170450023333,-1.0999748867047898,0.75,2.023902852345352,0.9221497527168835,0.7988286239230257,1.5910752325236108,1.724515000395158,1.915933704468658,0.909111664354187),(-0.07046681268810527,-0.2325994903990701,-0.952028633990455,-0.8949798182945309,0.6101272780073337,-0.46833188749111015,-1.0999748867047898,0.72,2.023902852345352,0.9221497527168835,0.7988286239230257,1.5910752325236108,1.724515000395158,1.915933704468658,0.909111664354187),(0.889452617118896,0.9221497527168835,0.7988286239230257,1.0938642223599824,1.167321139201246,0.8581257305710129,0.909111664354187,0.89,1.5875758387967152,1.582006463068857,1.674257252879766,1.5910752325236108,1.724515000395158,2.0502585265508984,0.909111664354187),(0.016798590021622126,-0.06763531281107672,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,0.13612981187897094,0.909111664354187,0.84,1.5875758387967152,1.582006463068857,1.674257252879766,1.5910752325236108,1.724515000395158,2.0502585265508984,0.909111664354187),(1.5875758387967152,1.7469706406568504,1.674257252879766,1.0938642223599824,0.052933416813421515,1.412215621660255,0.909111664354187,0.93,1.5875758387967152,1.582006463068857,1.674257252879766,1.5910752325236108,1.724515000395158,2.0502585265508984,0.909111664354187),(1.2385142279578056,1.2520781078928702,1.674257252879766,1.0938642223599824,0.052933416813421515,1.2778907995780144,0.909111664354187,0.93,1.5875758387967152,1.582006463068857,1.674257252879766,1.5910752325236108,1.724515000395158,2.0502585265508984,0.909111664354187),(0.6276564089897139,0.7571855751288902,1.674257252879766,1.5910752325236108,1.724515000395158,0.8077539222901738,0.909111664354187,0.88,1.5875758387967152,1.582006463068857,1.674257252879766,1.5910752325236108,1.724515000395158,2.0502585265508984,0.909111664354187),(0.6276564089897139,0.5922213975408968,1.674257252879766,1.0938642223599824,0.6101272780073337,0.9420787443724145,0.909111664354187,0.9,1.5875758387967152,1.582006463068857,1.674257252879766,1.5910752325236108,1.724515000395158,2.0502585265508984,0.909111664354187),(0.5403910062799865,0.4272572199529034,1.674257252879766,0.5966532121963541,1.724515000395158,0.6398478946873739,0.909111664354187,0.87,1.5875758387967152,1.582006463068857,1.674257252879766,1.5910752325236108,1.724515000395158,2.0502585265508984,0.909111664354187),(0.4531256035702591,1.087113930304877,1.674257252879766,1.0938642223599824,0.6101272780073337,0.572685483646252,0.909111664354187,0.86,1.5875758387967152,1.582006463068857,1.674257252879766,1.5910752325236108,1.724515000395158,2.0502585265508984,0.909111664354187),(1.6748412415064426,1.7469706406568504,1.674257252879766,1.0938642223599824,1.724515000395158,1.5633310465027752,0.909111664354187,0.94,1.5875758387967152,1.582006463068857,1.674257252879766,1.5910752325236108,1.724515000395158,2.0502585265508984,0.909111664354187),(-0.07046681268810527,0.26229304236491,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,0.27045463396121155,-1.0999748867047898,0.77,1.5875758387967152,1.582006463068857,1.674257252879766,1.5910752325236108,1.724515000395158,2.0502585265508984,0.909111664354187),(-0.8558554370756518,-0.06763531281107672,-0.952028633990455,-0.3977688081309026,0.052933416813421515,-0.1325198322855102,0.909111664354187,0.78,1.5875758387967152,1.582006463068857,1.674257252879766,1.5910752325236108,1.724515000395158,2.0502585265508984,0.909111664354187),(-0.9431208397853792,-0.39756366798706344,-0.952028633990455,-0.3977688081309026,-1.0614543055744028,-0.5690755040527913,-1.0999748867047898,0.73,1.5875758387967152,1.582006463068857,1.674257252879766,1.5910752325236108,1.724515000395158,2.0502585265508984,0.909111664354187),(-0.5940592289464697,-0.2325994903990701,-0.952028633990455,0.09944220203272576,-1.0614543055744028,-0.45154128473083044,-1.0999748867047898,0.73,1.5875758387967152,1.582006463068857,1.674257252879766,1.5910752325236108,1.724515000395158,2.0502585265508984,0.909111664354187),(-0.5067938262367422,-0.5625278455750569,-0.0766000050337147,1.0938642223599824,1.167321139201246,-0.2836352571280305,-1.0999748867047898,0.7,-1.2921824506242887,-1.057420378339037,-0.952028633990455,-0.8949798182945309,0.052933416813421515,-1.0727935868611929,-1.0999748867047898),(-0.3322630208172874,-0.06763531281107672,-0.0766000050337147,0.5966532121963541,1.167321139201246,0.15292041463925066,-1.0999748867047898,0.72,-1.2921824506242887,-1.057420378339037,-0.952028633990455,-0.8949798182945309,0.052933416813421515,-1.0727935868611929,-1.0999748867047898),(0.016798590021622126,-0.7274920231630502,-0.0766000050337147,-0.8949798182945309,-0.5042604443804907,-0.0989386267649508,0.909111664354187,0.73,-1.2921824506242887,-1.057420378339037,-0.952028633990455,-0.8949798182945309,0.052933416813421515,-1.0727935868611929,-1.0999748867047898),(-0.15773221539783266,0.4272572199529034,-0.952028633990455,0.09944220203272576,-0.5042604443804907,-0.2332634488471884,0.909111664354187,0.72,-1.2921824506242887,-1.057420378339037,-0.952028633990455,-0.8949798182945309,0.052933416813421515,-1.0727935868611929,-1.0999748867047898),(2.023902852345352,2.076898995832837,1.674257252879766,1.0938642223599824,1.167321139201246,2.2013739513934185,0.909111664354187,0.97,-1.2921824506242887,-1.057420378339037,-0.952028633990455,-0.8949798182945309,0.052933416813421515,-1.0727935868611929,-1.0999748867047898),(1.5003104360869879,2.076898995832837,1.674257252879766,0.5966532121963541,1.724515000395158,2.1342115403522968,0.909111664354187,0.97,-1.2921824506242887,-1.057420378339037,-0.952028633990455,-0.8949798182945309,0.052933416813421515,-1.0727935868611929,-1.0999748867047898),(-1.6412440614631982,-0.39756366798706344,-0.0766000050337147,0.09944220203272576,0.6101272780073337,-0.0989386267649508,-1.0999748867047898,0.69,-1.2921824506242887,-1.057420378339037,-0.952028633990455,-0.8949798182945309,0.052933416813421515,-1.0727935868611929,-1.0999748867047898),(-1.9030402695923805,-1.3873487335150236,-0.952028633990455,-0.8949798182945309,-0.5042604443804907,-1.5933022724298738,-1.0999748867047898,0.57,-1.2921824506242887,-1.057420378339037,-0.952028633990455,-0.8949798182945309,0.052933416813421515,-1.0727935868611929,-1.0999748867047898),(-0.15773221539783266,-1.3873487335150236,-0.952028633990455,0.09944220203272576,-0.5042604443804907,-1.1903278061831537,-1.0999748867047898,0.63,-1.2921824506242887,-1.057420378339037,-0.952028633990455,-0.8949798182945309,0.052933416813421515,-1.0727935868611929,-1.0999748867047898),(-0.5940592289464697,-0.8924562007510436,-0.0766000050337147,0.09944220203272576,0.6101272780073337,-0.972049970299513,0.909111664354187,0.66,-1.2921824506242887,-1.057420378339037,-0.952028633990455,-0.8949798182945309,0.052933416813421515,-1.0727935868611929,-1.0999748867047898),(-1.0303862424951067,-0.2325994903990701,-0.952028633990455,-0.3977688081309026,-0.5042604443804907,-0.7369815316555913,-1.0999748867047898,0.64,-1.2921824506242887,-1.057420378339037,-0.952028633990455,-0.8949798182945309,0.052933416813421515,-1.0727935868611929,-1.0999748867047898),(-1.3794478533340162,-0.5625278455750569,-0.0766000050337147,0.09944220203272576,0.6101272780073337,-0.8041439426967131,0.909111664354187,0.68,-1.2921824506242887,-1.057420378339037,-0.952028633990455,-0.8949798182945309,0.052933416813421515,-1.0727935868611929,-1.0999748867047898),(0.7149218116994412,0.09732886477691666,0.7988286239230257,1.0938642223599824,0.6101272780073337,0.7741727167696144,0.909111664354187,0.79,-0.8558554370756518,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,0.052933416813421515,-0.8377251482172725,-1.0999748867047898),(0.9767180198286235,0.4272572199529034,0.7988286239230257,1.5910752325236108,0.6101272780073337,0.908497538851855,0.909111664354187,0.82,-0.8558554370756518,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,0.052933416813421515,-0.8377251482172725,-1.0999748867047898),(1.8493720469258974,2.076898995832837,0.7988286239230257,1.5910752325236108,1.724515000395158,1.7816088823864173,0.909111664354187,0.95,-0.8558554370756518,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,0.052933416813421515,-0.8377251482172725,-1.0999748867047898),(1.4130450333772604,1.9119348182448437,1.674257252879766,1.5910752325236108,1.167321139201246,1.9830961155097766,0.909111664354187,0.96,-0.8558554370756518,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,0.052933416813421515,-0.8377251482172725,-1.0999748867047898),(1.2385142279578056,1.582006463068857,0.7988286239230257,1.0938642223599824,1.724515000395158,1.3786344161396955,0.909111664354187,0.94,-0.8558554370756518,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,0.052933416813421515,-0.8377251482172725,-1.0999748867047898),(1.1512488252480781,1.4170422854808635,1.674257252879766,1.5910752325236108,1.167321139201246,1.2778907995780144,0.909111664354187,0.93,-0.8558554370756518,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,0.052933416813421515,-0.8377251482172725,-1.0999748867047898),(0.4531256035702591,0.7571855751288902,0.7988286239230257,1.0938642223599824,1.167321139201246,1.1099847719752143,0.909111664354187,0.91,-0.8558554370756518,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,0.052933416813421515,-0.8377251482172725,-1.0999748867047898),(0.36586020086053167,0.26229304236491,0.7988286239230257,0.5966532121963541,0.6101272780073337,0.8917069360915754,0.909111664354187,0.85,-0.8558554370756518,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,0.052933416813421515,-0.8377251482172725,-1.0999748867047898),(0.6276564089897139,0.4272572199529034,0.7988286239230257,-0.3977688081309026,0.052933416813421515,0.6230572919270941,0.909111664354187,0.84,-0.8558554370756518,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,0.052933416813421515,-0.8377251482172725,-1.0999748867047898),(-0.41952842352701486,-0.5625278455750569,-0.0766000050337147,0.09944220203272576,0.052933416813421515,-0.30042585988831016,-1.0999748867047898,0.74,-0.8558554370756518,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,0.052933416813421515,-0.8377251482172725,-1.0999748867047898),(-0.3322630208172874,-0.7274920231630502,-0.0766000050337147,0.5966532121963541,0.6101272780073337,0.25366403120093184,-1.0999748867047898,0.76,-0.8558554370756518,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,0.052933416813421515,-0.8377251482172725,-1.0999748867047898),(-0.07046681268810527,0.4272572199529034,-0.0766000050337147,0.09944220203272576,0.6101272780073337,-0.06535742124438843,-1.0999748867047898,0.75,-0.8558554370756518,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,0.052933416813421515,-0.8377251482172725,-1.0999748867047898),(0.6276564089897139,0.9221497527168835,0.7988286239230257,1.0938642223599824,0.6101272780073337,0.32082644224205065,-1.0999748867047898,0.76,-1.8157748668826532,-1.7172770886910105,-0.952028633990455,-1.8894018386217877,-1.618648166768315,-1.3414432310256739,-1.0999748867047898),(-0.7685900343659244,0.26229304236491,-0.952028633990455,-0.3977688081309026,0.6101272780073337,-0.2500540516074711,-1.0999748867047898,0.71,-1.8157748668826532,-1.7172770886910105,-0.952028633990455,-1.8894018386217877,-1.618648166768315,-1.3414432310256739,-1.0999748867047898),(-1.0303862424951067,-0.39756366798706344,-0.952028633990455,-0.3977688081309026,-1.618648166768315,-0.6194473123336305,-1.0999748867047898,0.67,-1.8157748668826532,-1.7172770886910105,-0.952028633990455,-1.8894018386217877,-1.618648166768315,-1.3414432310256739,-1.0999748867047898),(-1.8157748668826532,-1.3873487335150236,-0.952028633990455,-0.8949798182945309,-1.0614543055744028,-0.9552593675392334,-1.0999748867047898,0.61,-1.8157748668826532,-1.7172770886910105,-0.952028633990455,-1.8894018386217877,-1.618648166768315,-1.3414432310256739,-1.0999748867047898),(-0.9431208397853792,0.4272572199529034,-0.952028633990455,0.09944220203272576,0.6101272780073337,-0.2500540516074711,-1.0999748867047898,0.63,-1.8157748668826532,-1.7172770886910105,-0.952028633990455,-1.8894018386217877,-1.618648166768315,-1.3414432310256739,-1.0999748867047898),(-0.41952842352701486,0.4272572199529034,-0.952028633990455,0.09944220203272576,-0.5042604443804907,-0.1157292295252305,-1.0999748867047898,0.64,-1.8157748668826532,-1.7172770886910105,-0.952028633990455,-1.8894018386217877,-1.618648166768315,-1.3414432310256739,-1.0999748867047898),(0.10406399273134952,0.7571855751288902,-0.0766000050337147,0.5966532121963541,0.052933416813421515,0.11933920911869125,-1.0999748867047898,0.71,-1.8157748668826532,-1.7172770886910105,-0.952028633990455,-1.8894018386217877,-1.618648166768315,-1.3414432310256739,-1.0999748867047898),(0.6276564089897139,0.5922213975408968,0.7988286239230257,-0.3977688081309026,-0.5042604443804907,0.690219702968213,0.909111664354187,0.82,-1.8157748668826532,-1.7172770886910105,-0.952028633990455,-1.8894018386217877,-1.618648166768315,-1.3414432310256739,-1.0999748867047898),(-0.3322630208172874,-0.5625278455750569,-0.0766000050337147,0.5966532121963541,1.167321139201246,0.08575800359813185,-1.0999748867047898,0.73,-1.8157748668826532,-1.7172770886910105,-0.952028633990455,-1.8894018386217877,-1.618648166768315,-1.3414432310256739,-1.0999748867047898),(0.1913293954410769,-0.2325994903990701,-0.0766000050337147,0.09944220203272576,-1.0614543055744028,-0.45154128473083044,0.909111664354187,0.74,-1.8157748668826532,-1.7172770886910105,-0.952028633990455,-1.8894018386217877,-1.618648166768315,-1.3414432310256739,-1.0999748867047898),(-0.41952842352701486,-0.06763531281107672,-0.952028633990455,-0.8949798182945309,0.052933416813421515,-0.5522849012925116,-1.0999748867047898,0.69,-1.8157748668826532,-1.7172770886910105,-0.952028633990455,-1.8894018386217877,-1.618648166768315,-1.3414432310256739,-1.0999748867047898),(-1.117651645204834,-1.2223845559270303,-0.952028633990455,-0.8949798182945309,0.052933416813421515,-0.8880969564981116,-1.0999748867047898,0.64,-1.8157748668826532,-1.7172770886910105,-0.952028633990455,-1.8894018386217877,-1.618648166768315,-1.3414432310256739,-1.0999748867047898),(1.1512488252480781,0.9221497527168835,1.674257252879766,1.5910752325236108,0.6101272780073337,1.1939377857766158,0.909111664354187,0.91,-1.8157748668826532,-1.7172770886910105,-0.952028633990455,-1.8894018386217877,-1.618648166768315,-1.3414432310256739,-1.0999748867047898),(0.8021872144091686,0.5922213975408968,1.674257252879766,1.0938642223599824,0.6101272780073337,1.0596129636943752,0.909111664354187,0.88,0.2785947981508043,0.09732886477691666,-0.0766000050337147,0.09944220203272576,0.6101272780073337,-0.2668446543677508,0.909111664354187),(0.7149218116994412,0.7571855751288902,0.7988286239230257,0.5966532121963541,1.167321139201246,0.9588693471326941,0.909111664354187,0.85,0.2785947981508043,0.09732886477691666,-0.0766000050337147,0.09944220203272576,0.6101272780073337,-0.2668446543677508,0.909111664354187),(1.0639834225383509,1.087113930304877,1.674257252879766,1.0938642223599824,1.724515000395158,0.9924505526532535,0.909111664354187,0.86,0.2785947981508043,0.09732886477691666,-0.0766000050337147,0.09944220203272576,0.6101272780073337,-0.2668446543677508,0.909111664354187),(-0.5940592289464697,-0.5625278455750569,-0.0766000050337147,-1.3921908284581592,0.052933416813421515,-0.3843788736897117,-1.0999748867047898,0.7,0.2785947981508043,0.09732886477691666,-0.0766000050337147,0.09944220203272576,0.6101272780073337,-0.2668446543677508,0.909111664354187),(-1.553978658753471,-1.2223845559270303,-1.8274572629471952,-1.8894018386217877,-1.618648166768315,-1.1903278061831537,-1.0999748867047898,0.59,0.2785947981508043,0.09732886477691666,-0.0766000050337147,0.09944220203272576,0.6101272780073337,-0.2668446543677508,0.909111664354187),(-1.8157748668826532,-1.057420378339037,-1.8274572629471952,-0.8949798182945309,-0.5042604443804907,-1.5429304641490347,-1.0999748867047898,0.6,0.2785947981508043,0.09732886477691666,-0.0766000050337147,0.09944220203272576,0.6101272780073337,-0.2668446543677508,0.909111664354187),(0.016798590021622126,-0.7274920231630502,-0.952028633990455,-0.8949798182945309,-1.618648166768315,-0.753772134415871,-1.0999748867047898,0.65,0.2785947981508043,0.09732886477691666,-0.0766000050337147,0.09944220203272576,0.6101272780073337,-0.2668446543677508,0.909111664354187),(0.6276564089897139,1.2520781078928702,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,0.27045463396121155,0.909111664354187,0.7,0.2785947981508043,0.09732886477691666,-0.0766000050337147,0.09944220203272576,0.6101272780073337,-0.2668446543677508,0.909111664354187),(0.7149218116994412,1.087113930304877,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,0.7405915112490521,0.909111664354187,0.76,0.2785947981508043,0.09732886477691666,-0.0766000050337147,0.09944220203272576,0.6101272780073337,-0.2668446543677508,0.909111664354187),(-0.24499761810756004,-0.06763531281107672,-0.952028633990455,-0.8949798182945309,0.6101272780073337,-0.06535742124438843,-1.0999748867047898,0.63,0.2785947981508043,0.09732886477691666,-0.0766000050337147,0.09944220203272576,0.6101272780073337,-0.2668446543677508,0.909111664354187),(0.9767180198286235,0.4272572199529034,0.7988286239230257,0.5966532121963541,-1.0614543055744028,0.7070103057284927,0.909111664354187,0.81,0.2785947981508043,0.09732886477691666,-0.0766000050337147,0.09944220203272576,0.6101272780073337,-0.2668446543677508,0.909111664354187),(-0.07046681268810527,-0.39756366798706344,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.22008282568037243,-1.0999748867047898,0.72,0.2785947981508043,0.09732886477691666,-0.0766000050337147,0.09944220203272576,0.6101272780073337,-0.2668446543677508,0.909111664354187),(-0.5067938262367422,-0.5625278455750569,-0.952028633990455,-0.8949798182945309,0.052933416813421515,-0.199682243326629,-1.0999748867047898,0.71,-0.24499761810756004,-0.8924562007510436,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.4551512643242912,0.909111664354187,0.8,-0.24499761810756004,-0.8924562007510436,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(0.36586020086053167,0.5922213975408968,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.3879888532831724,0.909111664354187,0.77,-0.24499761810756004,-0.8924562007510436,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(0.2785947981508043,-0.5625278455750569,-0.0766000050337147,-0.3977688081309026,-1.0614543055744028,-0.04856681848410872,0.909111664354187,0.74,-0.24499761810756004,-0.8924562007510436,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(-0.07046681268810527,-1.3873487335150236,-0.952028633990455,-0.8949798182945309,-0.5042604443804907,0.6734291002079332,-1.0999748867047898,0.7,-0.24499761810756004,-0.8924562007510436,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(0.10406399273134952,-1.2223845559270303,-0.952028633990455,-0.8949798182945309,0.052933416813421515,-0.0989386267649508,0.909111664354187,0.71,-0.24499761810756004,-0.8924562007510436,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(1.5875758387967152,1.2520781078928702,0.7988286239230257,1.0938642223599824,1.167321139201246,1.8151900879069767,0.909111664354187,0.93,-0.24499761810756004,-0.8924562007510436,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(0.36586020086053167,1.087113930304877,0.7988286239230257,0.5966532121963541,1.724515000395158,0.8749163333312926,-1.0999748867047898,0.85,-0.24499761810756004,-0.8924562007510436,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(-0.8558554370756518,0.4272572199529034,0.7988286239230257,0.5966532121963541,1.167321139201246,-0.3843788736897117,-1.0999748867047898,0.79,-0.24499761810756004,-0.8924562007510436,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(-0.681324631656197,-1.3873487335150236,-0.0766000050337147,0.5966532121963541,0.6101272780073337,-0.06535742124438843,-1.0999748867047898,0.76,-0.24499761810756004,-0.8924562007510436,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(0.6276564089897139,-1.2223845559270303,-0.0766000050337147,0.5966532121963541,1.724515000395158,0.06896740083785215,0.909111664354187,0.78,-0.24499761810756004,-0.8924562007510436,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(0.8021872144091686,-0.8924562007510436,0.7988286239230257,1.5910752325236108,1.724515000395158,0.27045463396121155,0.909111664354187,0.77,-0.24499761810756004,-0.8924562007510436,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-0.6026567095733507,-1.0999748867047898),(1.2385142279578056,1.9119348182448437,0.7988286239230257,1.5910752325236108,1.167321139201246,1.244309594057455,0.909111664354187,0.9,0.10406399273134952,-0.2325994903990701,-0.0766000050337147,-1.3921908284581592,-0.5042604443804907,0.08575800359813185,-1.0999748867047898),(0.889452617118896,0.09732886477691666,1.674257252879766,1.5910752325236108,0.052933416813421515,0.8917069360915754,0.909111664354187,0.87,0.10406399273134952,-0.2325994903990701,-0.0766000050337147,-1.3921908284581592,-0.5042604443804907,0.08575800359813185,-1.0999748867047898),(-0.41952842352701486,-0.5625278455750569,-0.0766000050337147,0.09944220203272576,0.6101272780073337,-0.8545157509775522,-1.0999748867047898,0.71,0.10406399273134952,-0.2325994903990701,-0.0766000050337147,-1.3921908284581592,-0.5042604443804907,0.08575800359813185,-1.0999748867047898),(-0.7685900343659244,-0.7274920231630502,-0.952028633990455,-0.8949798182945309,0.6101272780073337,-0.40116947644999135,0.909111664354187,0.7,0.10406399273134952,-0.2325994903990701,-0.0766000050337147,-1.3921908284581592,-0.5042604443804907,0.08575800359813185,-1.0999748867047898),(0.6276564089897139,0.5922213975408968,-0.0766000050337147,-0.8949798182945309,-2.175842027962227,0.32082644224205065,0.909111664354187,0.7,0.10406399273134952,-0.2325994903990701,-0.0766000050337147,-1.3921908284581592,-0.5042604443804907,0.08575800359813185,-1.0999748867047898),(0.7149218116994412,0.4272572199529034,-0.952028633990455,-0.3977688081309026,-1.0614543055744028,0.27045463396121155,0.909111664354187,0.75,0.10406399273134952,-0.2325994903990701,-0.0766000050337147,-1.3921908284581592,-0.5042604443804907,0.08575800359813185,-1.0999748867047898),(-0.3322630208172874,-0.8924562007510436,-0.0766000050337147,-0.8949798182945309,-1.0614543055744028,0.13612981187897094,-1.0999748867047898,0.71,0.10406399273134952,-0.2325994903990701,-0.0766000050337147,-1.3921908284581592,-0.5042604443804907,0.08575800359813185,-1.0999748867047898),(-0.41952842352701486,-0.39756366798706344,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-0.2500540516074711,-1.0999748867047898,0.72,0.10406399273134952,-0.2325994903990701,-0.0766000050337147,-1.3921908284581592,-0.5042604443804907,0.08575800359813185,-1.0999748867047898),(-0.24499761810756004,-0.06763531281107672,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,-0.7201909288953117,0.909111664354187,0.73,0.10406399273134952,-0.2325994903990701,-0.0766000050337147,-1.3921908284581592,-0.5042604443804907,0.08575800359813185,-1.0999748867047898),(0.889452617118896,0.9221497527168835,0.7988286239230257,1.0938642223599824,1.724515000395158,0.908497538851855,-1.0999748867047898,0.83,0.10406399273134952,-0.2325994903990701,-0.0766000050337147,-1.3921908284581592,-0.5042604443804907,0.08575800359813185,-1.0999748867047898),(-0.7685900343659244,0.09732886477691666,0.7988286239230257,1.0938642223599824,1.724515000395158,-0.4347506819705508,-1.0999748867047898,0.77,0.10406399273134952,-0.2325994903990701,-0.0766000050337147,-1.3921908284581592,-0.5042604443804907,0.08575800359813185,-1.0999748867047898),(-0.9431208397853792,-0.39756366798706344,-0.952028633990455,-0.8949798182945309,-0.5042604443804907,-0.6362379150939101,0.909111664354187,0.72,0.10406399273134952,-0.2325994903990701,-0.0766000050337147,-1.3921908284581592,-0.5042604443804907,0.08575800359813185,-1.0999748867047898),(-1.553978658753471,-1.8822412662790038,-0.952028633990455,-1.8894018386217877,-1.618648166768315,-1.2406996144639928,-1.0999748867047898,0.54,0.10406399273134952,-0.2325994903990701,-0.0766000050337147,-1.3921908284581592,-0.5042604443804907,0.08575800359813185,-1.0999748867047898),(-1.990305672302108,-2.0472054438669973,-1.8274572629471952,-1.8894018386217877,-2.175842027962227,-1.610092875190155,-1.0999748867047898,0.49,0.8021872144091686,0.7571855751288902,0.7988286239230257,0.5966532121963541,0.052933416813421515,0.8749163333312926,0.909111664354187),(-0.41952842352701486,-1.3873487335150236,-1.8274572629471952,-2.386612848785416,-2.175842027962227,-0.9888405730597928,0.909111664354187,0.52,0.8021872144091686,0.7571855751288902,0.7988286239230257,0.5966532121963541,0.052933416813421515,0.8749163333312926,0.909111664354187),(-0.15773221539783266,-1.2223845559270303,-1.8274572629471952,-1.3921908284581592,-1.0614543055744028,-1.0895841896214724,-1.0999748867047898,0.58,0.8021872144091686,0.7571855751288902,0.7988286239230257,0.5966532121963541,0.052933416813421515,0.8749163333312926,0.909111664354187),(0.4531256035702591,0.4272572199529034,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,0.6062666891668145,0.909111664354187,0.78,0.8021872144091686,0.7571855751288902,0.7988286239230257,0.5966532121963541,0.052933416813421515,0.8749163333312926,0.909111664354187),(1.0639834225383509,0.9221497527168835,1.674257252879766,1.5910752325236108,1.167321139201246,1.4290062244205346,0.909111664354187,0.89,0.8021872144091686,0.7571855751288902,0.7988286239230257,0.5966532121963541,0.052933416813421515,0.8749163333312926,0.909111664354187),(0.2785947981508043,-1.057420378339037,-0.952028633990455,-0.8949798182945309,-0.5042604443804907,0.03538619531728977,-1.0999748867047898,0.7,0.8021872144091686,0.7571855751288902,0.7988286239230257,0.5966532121963541,0.052933416813421515,0.8749163333312926,0.909111664354187),(-0.7685900343659244,-0.7274920231630502,-0.952028633990455,-0.3977688081309026,0.052933416813421515,-0.1828916405663493,-1.0999748867047898,0.66,0.8021872144091686,0.7571855751288902,0.7988286239230257,0.5966532121963541,0.052933416813421515,0.8749163333312926,0.909111664354187),(-1.117651645204834,-0.8924562007510436,-0.952028633990455,-0.3977688081309026,0.6101272780073337,0.22008282568037243,-1.0999748867047898,0.67,0.8021872144091686,0.7571855751288902,0.7988286239230257,0.5966532121963541,0.052933416813421515,0.8749163333312926,0.909111664354187),(-0.5067938262367422,-0.8924562007510436,-0.0766000050337147,1.0938642223599824,0.6101272780073337,0.06896740083785215,0.909111664354187,0.68,0.8021872144091686,0.7571855751288902,0.7988286239230257,0.5966532121963541,0.052933416813421515,0.8749163333312926,0.909111664354187),(0.016798590021622126,0.4272572199529034,-0.0766000050337147,0.5966532121963541,1.167321139201246,0.8581257305710129,0.909111664354187,0.8,0.8021872144091686,0.7571855751288902,0.7988286239230257,0.5966532121963541,0.052933416813421515,0.8749163333312926,0.909111664354187),(-0.41952842352701486,-0.2325994903990701,-0.0766000050337147,0.5966532121963541,0.052933416813421515,0.32082644224205065,0.909111664354187,0.81,0.8021872144091686,0.7571855751288902,0.7988286239230257,0.5966532121963541,0.052933416813421515,0.8749163333312926,0.909111664354187),(0.36586020086053167,0.5922213975408968,-0.0766000050337147,-0.8949798182945309,-0.5042604443804907,0.5055230726051333,0.909111664354187,0.8,0.8021872144091686,0.7571855751288902,0.7988286239230257,0.5966532121963541,0.052933416813421515,0.8749163333312926,0.909111664354187),(2.023902852345352,0.7571855751288902,0.7988286239230257,1.5910752325236108,1.167321139201246,1.7816088823864173,0.909111664354187,0.94,0.016798590021622126,-0.5625278455750569,-0.952028633990455,-0.3977688081309026,-0.5042604443804907,0.27045463396121155,-1.0999748867047898),(1.2385142279578056,1.4170422854808635,1.674257252879766,0.5966532121963541,0.6101272780073337,1.1099847719752143,0.909111664354187,0.93,0.016798590021622126,-0.5625278455750569,-0.952028633990455,-0.3977688081309026,-0.5042604443804907,0.27045463396121155,-1.0999748867047898),(1.6748412415064426,1.7469706406568504,1.674257252879766,1.0938642223599824,0.6101272780073337,0.9924505526532535,0.909111664354187,0.92,0.016798590021622126,-0.5625278455750569,-0.952028633990455,-0.3977688081309026,-0.5042604443804907,0.27045463396121155,-1.0999748867047898),(0.6276564089897139,1.087113930304877,1.674257252879766,1.5910752325236108,1.167321139201246,0.8077539222901738,0.909111664354187,0.89,0.016798590021622126,-0.5625278455750569,-0.952028633990455,-0.3977688081309026,-0.5042604443804907,0.27045463396121155,-1.0999748867047898),(-0.24499761810756004,-0.5625278455750569,0.7988286239230257,1.5910752325236108,1.724515000395158,0.7070103057284927,-1.0999748867047898,0.82,0.016798590021622126,-0.5625278455750569,-0.952028633990455,-0.3977688081309026,-0.5042604443804907,0.27045463396121155,-1.0999748867047898),(-0.3322630208172874,0.26229304236491,-0.0766000050337147,0.5966532121963541,0.052933416813421515,0.6734291002079332,-1.0999748867047898,0.79,0.016798590021622126,-0.5625278455750569,-0.952028633990455,-0.3977688081309026,-0.5042604443804907,0.27045463396121155,-1.0999748867047898),(-0.8558554370756518,-0.39756366798706344,-0.952028633990455,-0.8949798182945309,-0.5042604443804907,-1.5933022724298738,-1.0999748867047898,0.58,0.016798590021622126,-0.5625278455750569,-0.952028633990455,-0.3977688081309026,-0.5042604443804907,0.27045463396121155,-1.0999748867047898),(-1.4667132560437435,-0.8924562007510436,-0.952028633990455,-1.8894018386217877,-1.618648166768315,-1.223909011703713,-1.0999748867047898,0.56,0.016798590021622126,-0.5625278455750569,-0.952028633990455,-0.3977688081309026,-0.5042604443804907,0.27045463396121155,-1.0999748867047898),(-1.2921824506242887,-1.3873487335150236,-0.952028633990455,-2.386612848785416,-1.618648166768315,-1.056002984100913,-1.0999748867047898,0.56,0.016798590021622126,-0.5625278455750569,-0.952028633990455,-0.3977688081309026,-0.5042604443804907,0.27045463396121155,-1.0999748867047898),(-0.41952842352701486,-1.5523129111030172,-1.8274572629471952,0.09944220203272576,-0.5042604443804907,-0.7034003261350319,0.909111664354187,0.64,0.016798590021622126,-0.5625278455750569,-0.952028633990455,-0.3977688081309026,-0.5042604443804907,0.27045463396121155,-1.0999748867047898),(-0.07046681268810527,-1.057420378339037,-0.952028633990455,-0.8949798182945309,-1.618648166768315,-0.46833188749111015,0.909111664354187,0.61,0.016798590021622126,-0.5625278455750569,-0.952028633990455,-0.3977688081309026,-0.5042604443804907,0.27045463396121155,-1.0999748867047898),(0.016798590021622126,-1.2223845559270303,-0.952028633990455,-0.3977688081309026,-1.0614543055744028,-0.04856681848410872,-1.0999748867047898,0.68,0.016798590021622126,-0.5625278455750569,-0.952028633990455,-0.3977688081309026,-0.5042604443804907,0.27045463396121155,-1.0999748867047898),(-0.5940592289464697,-0.06763531281107672,-0.0766000050337147,0.09944220203272576,0.052933416813421515,0.11933920911869125,-1.0999748867047898,0.76,1.0639834225383509,0.5922213975408968,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.0596129636943752,0.909111664354187),(0.2785947981508043,2.076898995832837,-0.0766000050337147,0.5966532121963541,1.167321139201246,0.8581257305710129,-1.0999748867047898,0.86,1.0639834225383509,0.5922213975408968,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.0596129636943752,0.909111664354187),(1.1512488252480781,1.087113930304877,-0.0766000050337147,1.0938642223599824,1.167321139201246,1.076403566454655,0.909111664354187,0.9,1.0639834225383509,0.5922213975408968,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.0596129636943752,0.909111664354187),(-1.0303862424951067,0.7571855751288902,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.08575800359813185,-1.0999748867047898,0.71,1.0639834225383509,0.5922213975408968,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.0596129636943752,0.909111664354187),(-0.681324631656197,-0.2325994903990701,-0.952028633990455,-0.8949798182945309,-1.0614543055744028,-1.0056311758200724,-1.0999748867047898,0.62,1.0639834225383509,0.5922213975408968,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.0596129636943752,0.909111664354187),(0.1913293954410769,0.09732886477691666,-0.952028633990455,-0.8949798182945309,-0.5042604443804907,0.27045463396121155,-1.0999748867047898,0.66,1.0639834225383509,0.5922213975408968,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.0596129636943752,0.909111664354187),(0.4531256035702591,-0.39756366798706344,-0.952028633990455,-0.3977688081309026,-0.5042604443804907,-0.2500540516074711,0.909111664354187,0.65,1.0639834225383509,0.5922213975408968,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.0596129636943752,0.909111664354187),(0.5403910062799865,-0.06763531281107672,-0.0766000050337147,0.09944220203272576,0.052933416813421515,-0.08214802400466813,0.909111664354187,0.73,1.0639834225383509,0.5922213975408968,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.0596129636943752,0.909111664354187),(-0.3322630208172874,-0.2325994903990701,-0.952028633990455,-0.8949798182945309,-1.618648166768315,-0.2836352571280305,-1.0999748867047898,0.62,1.0639834225383509,0.5922213975408968,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.0596129636943752,0.909111664354187),(0.36586020086053167,0.26229304236491,-0.0766000050337147,0.09944220203272576,0.052933416813421515,0.3376170450023333,0.909111664354187,0.74,1.0639834225383509,0.5922213975408968,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.0596129636943752,0.909111664354187),(0.5403910062799865,0.4272572199529034,-0.0766000050337147,0.5966532121963541,0.052933416813421515,0.8413351278107333,0.909111664354187,0.79,1.0639834225383509,0.5922213975408968,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.0596129636943752,0.909111664354187),(0.7149218116994412,0.7571855751288902,0.7988286239230257,0.5966532121963541,0.6101272780073337,0.6734291002079332,0.909111664354187,0.8,1.0639834225383509,0.5922213975408968,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.0596129636943752,0.909111664354187),(-0.41952842352701486,0.09732886477691666,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,-0.1157292295252305,-1.0999748867047898,0.69,1.0639834225383509,0.5922213975408968,0.7988286239230257,1.0938642223599824,0.6101272780073337,1.0596129636943752,0.909111664354187),(-0.7685900343659244,0.4272572199529034,0.7988286239230257,0.09944220203272576,-0.5042604443804907,0.0018049897967303734,-1.0999748867047898,0.7,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,0.052933416813421515,0.7405915112490521,0.909111664354187),(0.2785947981508043,-0.5625278455750569,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.23687342844065212,0.909111664354187,0.76,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,0.052933416813421515,0.7405915112490521,0.909111664354187),(0.9767180198286235,0.09732886477691666,0.7988286239230257,1.0938642223599824,0.6101272780073337,0.9756599498929738,0.909111664354187,0.84,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,0.052933416813421515,0.7405915112490521,0.909111664354187),(-0.5067938262367422,-0.06763531281107672,0.7988286239230257,1.0938642223599824,1.167321139201246,0.6734291002079332,0.909111664354187,0.78,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,0.052933416813421515,0.7405915112490521,0.909111664354187),(-1.3794478533340162,-1.2223845559270303,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,-0.9384687647789537,-1.0999748867047898,0.67,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,0.052933416813421515,0.7405915112490521,0.909111664354187),(-1.0303862424951067,-0.39756366798706344,-0.952028633990455,-0.3977688081309026,0.6101272780073337,-0.7873533399364304,-1.0999748867047898,0.66,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,0.052933416813421515,0.7405915112490521,0.909111664354187),(-0.7685900343659244,-0.5625278455750569,-0.952028633990455,-0.8949798182945309,-0.5042604443804907,-0.8880969564981116,-1.0999748867047898,0.65,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,0.052933416813421515,0.7405915112490521,0.909111664354187),(-1.6412440614631982,-1.057420378339037,-0.952028633990455,-1.8894018386217877,-1.618648166768315,-1.2406996144639928,-1.0999748867047898,0.54,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,0.052933416813421515,0.7405915112490521,0.909111664354187),(-1.4667132560437435,-1.3873487335150236,-1.8274572629471952,-2.386612848785416,-1.0614543055744028,-0.9888405730597928,-1.0999748867047898,0.58,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,0.052933416813421515,0.7405915112490521,0.909111664354187),(0.6276564089897139,0.5922213975408968,-0.0766000050337147,-0.8949798182945309,-1.618648166768315,0.3376170450023333,0.909111664354187,0.79,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,0.052933416813421515,0.7405915112490521,0.909111664354187),(0.889452617118896,0.9221497527168835,0.7988286239230257,0.09944220203272576,-0.5042604443804907,0.15292041463925066,0.909111664354187,0.8,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,0.052933416813421515,0.7405915112490521,0.909111664354187),(0.016798590021622126,-0.2325994903990701,-0.0766000050337147,0.5966532121963541,0.052933416813421515,-0.1661010378060696,0.909111664354187,0.75,0.6276564089897139,0.4272572199529034,-0.0766000050337147,0.09944220203272576,0.052933416813421515,0.7405915112490521,0.909111664354187),(0.5403910062799865,-0.5625278455750569,-0.0766000050337147,0.5966532121963541,0.6101272780073337,-0.2668446543677508,0.909111664354187,0.73,0.7149218116994412,-0.06763531281107672,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.8581257305710129,0.909111664354187),(-0.24499761810756004,-0.06763531281107672,-0.952028633990455,-0.8949798182945309,0.6101272780073337,-0.5522849012925116,-1.0999748867047898,0.72,0.7149218116994412,-0.06763531281107672,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.8581257305710129,0.909111664354187),(-1.0303862424951067,-0.8924562007510436,-0.952028633990455,-1.3921908284581592,-1.0614543055744028,-0.7034003261350319,-1.0999748867047898,0.62,0.7149218116994412,-0.06763531281107672,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.8581257305710129,0.909111664354187),(-0.15773221539783266,-0.5625278455750569,-0.0766000050337147,-0.3977688081309026,-1.0614543055744028,-0.45154128473083044,-1.0999748867047898,0.67,0.7149218116994412,-0.06763531281107672,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.8581257305710129,0.909111664354187),(0.8021872144091686,1.4170422854808635,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.908497538851855,0.909111664354187,0.81,0.7149218116994412,-0.06763531281107672,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.8581257305710129,0.909111664354187),(-1.553978658753471,-1.2223845559270303,-0.0766000050337147,-1.3921908284581592,-1.618648166768315,-0.972049970299513,-1.0999748867047898,0.63,0.7149218116994412,-0.06763531281107672,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.8581257305710129,0.909111664354187),(-1.9030402695923805,-1.057420378339037,-0.952028633990455,-0.8949798182945309,-1.618648166768315,-1.2406996144639928,-1.0999748867047898,0.69,0.7149218116994412,-0.06763531281107672,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.8581257305710129,0.909111664354187),(0.6276564089897139,0.7571855751288902,0.7988286239230257,0.5966532121963541,0.052933416813421515,0.2872452367214912,0.909111664354187,0.8,0.7149218116994412,-0.06763531281107672,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.8581257305710129,0.909111664354187),(-1.7285094641729257,-1.8822412662790038,-0.952028633990455,-0.8949798182945309,-2.175842027962227,-1.1903278061831537,-1.0999748867047898,0.43,0.7149218116994412,-0.06763531281107672,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.8581257305710129,0.909111664354187),(0.889452617118896,0.9221497527168835,-0.0766000050337147,0.09944220203272576,-0.5042604443804907,0.10254860635841155,0.909111664354187,0.8,0.7149218116994412,-0.06763531281107672,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.8581257305710129,0.909111664354187),(-0.5067938262367422,-0.39756366798706344,-0.952028633990455,-0.3977688081309026,-1.618648166768315,-0.8041439426967131,0.909111664354187,0.73,0.7149218116994412,-0.06763531281107672,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.8581257305710129,0.909111664354187),(-0.7685900343659244,-0.2325994903990701,-0.0766000050337147,0.09944220203272576,-1.0614543055744028,-0.6530285178541898,0.909111664354187,0.75,0.7149218116994412,-0.06763531281107672,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,0.8581257305710129,0.909111664354187),(0.1913293954410769,0.09732886477691666,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,-0.0989386267649508,0.909111664354187,0.71,1.1512488252480781,1.4170422854808635,0.7988286239230257,1.5910752325236108,1.167321139201246,1.4290062244205346,0.909111664354187),(-0.41952842352701486,-0.06763531281107672,0.7988286239230257,1.0938642223599824,0.6101272780073337,0.08575800359813185,0.909111664354187,0.73,1.1512488252480781,1.4170422854808635,0.7988286239230257,1.5910752325236108,1.167321139201246,1.4290062244205346,0.909111664354187),(0.7149218116994412,0.5922213975408968,0.7988286239230257,0.5966532121963541,1.167321139201246,0.8581257305710129,0.909111664354187,0.83,1.1512488252480781,1.4170422854808635,0.7988286239230257,1.5910752325236108,1.167321139201246,1.4290062244205346,0.909111664354187),(0.1913293954410769,0.4272572199529034,-0.0766000050337147,-0.3977688081309026,-1.0614543055744028,0.32082644224205065,-1.0999748867047898,0.72,1.1512488252480781,1.4170422854808635,0.7988286239230257,1.5910752325236108,1.167321139201246,1.4290062244205346,0.909111664354187),(1.3257796306675331,1.7469706406568504,1.674257252879766,1.5910752325236108,1.724515000395158,1.462587429941097,0.909111664354187,0.94,1.1512488252480781,1.4170422854808635,0.7988286239230257,1.5910752325236108,1.167321139201246,1.4290062244205346,0.909111664354187),(0.5403910062799865,0.09732886477691666,1.674257252879766,0.5966532121963541,0.6101272780073337,0.23687342844065212,0.909111664354187,0.81,1.1512488252480781,1.4170422854808635,0.7988286239230257,1.5910752325236108,1.167321139201246,1.4290062244205346,0.909111664354187),(0.6276564089897139,-0.06763531281107672,1.674257252879766,0.09944220203272576,0.6101272780073337,0.10254860635841155,0.909111664354187,0.81,1.1512488252480781,1.4170422854808635,0.7988286239230257,1.5910752325236108,1.167321139201246,1.4290062244205346,0.909111664354187),(-0.41952842352701486,-0.06763531281107672,-0.0766000050337147,-0.3977688081309026,-0.5042604443804907,-0.2332634488471884,0.909111664354187,0.75,1.1512488252480781,1.4170422854808635,0.7988286239230257,1.5910752325236108,1.167321139201246,1.4290062244205346,0.909111664354187),(0.8021872144091686,0.4272572199529034,-0.0766000050337147,0.09944220203272576,0.052933416813421515,0.27045463396121155,0.909111664354187,0.79,1.1512488252480781,1.4170422854808635,0.7988286239230257,1.5910752325236108,1.167321139201246,1.4290062244205346,0.909111664354187),(-0.7685900343659244,-0.2325994903990701,-0.0766000050337147,-0.3977688081309026,-0.5042604443804907,-0.6026567095733507,-1.0999748867047898,0.58,1.1512488252480781,1.4170422854808635,0.7988286239230257,1.5910752325236108,1.167321139201246,1.4290062244205346,0.909111664354187),(-1.0303862424951067,-0.7274920231630502,-0.952028633990455,-0.8949798182945309,0.052933416813421515,-0.7873533399364304,-1.0999748867047898,0.59,1.1512488252480781,1.4170422854808635,0.7988286239230257,1.5910752325236108,1.167321139201246,1.4290062244205346,0.909111664354187),(-1.9030402695923805,-1.8822412662790038,-0.952028633990455,-1.8894018386217877,-1.618648166768315,-2.1138109579985565,-1.0999748867047898,0.47,1.1512488252480781,1.4170422854808635,0.7988286239230257,1.5910752325236108,1.167321139201246,1.4290062244205346,0.909111664354187),(-0.07046681268810527,-1.5523129111030172,-1.8274572629471952,-1.8894018386217877,-1.618648166768315,-1.9626955331560363,-1.0999748867047898,0.49,1.1512488252480781,1.4170422854808635,0.7988286239230257,1.5910752325236108,1.167321139201246,1.4290062244205346,0.909111664354187),(-1.117651645204834,-1.7172770886910105,-0.952028633990455,-1.8894018386217877,-1.618648166768315,-1.610092875190155,-1.0999748867047898,0.47,-0.41952842352701486,-0.7274920231630502,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.30403583948177093,-1.0999748867047898),(-1.553978658753471,-2.2121696214549904,-1.8274572629471952,-2.386612848785416,-2.7330358891561395,-2.1138109579985565,-1.0999748867047898,0.42,-0.41952842352701486,-0.7274920231630502,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.30403583948177093,-1.0999748867047898),(-1.2921824506242887,-1.3873487335150236,-1.8274572629471952,-1.3921908284581592,-1.618648166768315,-2.2649263828410766,-1.0999748867047898,0.57,-0.41952842352701486,-0.7274920231630502,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.30403583948177093,-1.0999748867047898),(-0.3322630208172874,-1.057420378339037,-0.0766000050337147,-0.8949798182945309,-0.5042604443804907,-0.9384687647789537,-1.0999748867047898,0.62,-0.41952842352701486,-0.7274920231630502,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.30403583948177093,-1.0999748867047898),(0.10406399273134952,-0.06763531281107672,-0.0766000050337147,-0.3977688081309026,0.052933416813421515,-0.5522849012925116,0.909111664354187,0.74,-0.41952842352701486,-0.7274920231630502,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.30403583948177093,-1.0999748867047898),(0.7149218116994412,0.4272572199529034,0.7988286239230257,0.09944220203272576,0.6101272780073337,0.11933920911869125,0.909111664354187,0.73,-0.41952842352701486,-0.7274920231630502,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.30403583948177093,-1.0999748867047898),(-1.2049170479145614,-1.2223845559270303,-0.952028633990455,-0.3977688081309026,0.052933416813421515,-0.9048875592583913,0.909111664354187,0.64,-0.41952842352701486,-0.7274920231630502,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.30403583948177093,-1.0999748867047898),(-1.4667132560437435,-0.8924562007510436,-0.0766000050337147,0.09944220203272576,-1.0614543055744028,-0.7201909288953117,-1.0999748867047898,0.63,-0.41952842352701486,-0.7274920231630502,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.30403583948177093,-1.0999748867047898),(-1.7285094641729257,-1.5523129111030172,-0.952028633990455,-0.8949798182945309,-0.5042604443804907,-1.5597210669093144,-1.0999748867047898,0.59,-0.41952842352701486,-0.7274920231630502,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.30403583948177093,-1.0999748867047898),(0.016798590021622126,-0.2325994903990701,-0.952028633990455,-1.3921908284581592,0.052933416813421515,-0.8041439426967131,-1.0999748867047898,0.73,-0.41952842352701486,-0.7274920231630502,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.30403583948177093,-1.0999748867047898),(0.889452617118896,0.26229304236491,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.2872452367214912,0.909111664354187,0.79,-0.41952842352701486,-0.7274920231630502,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.30403583948177093,-1.0999748867047898),(-1.3794478533340162,-0.5625278455750569,-0.952028633990455,0.09944220203272576,0.052933416813421515,-1.1903278061831537,0.909111664354187,0.68,-0.41952842352701486,-0.7274920231630502,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.30403583948177093,-1.0999748867047898),(-0.24499761810756004,-0.39756366798706344,-0.952028633990455,-0.8949798182945309,-1.618648166768315,-1.610092875190155,-1.0999748867047898,0.7,1.4130450333772604,1.582006463068857,0.7988286239230257,1.5910752325236108,0.6101272780073337,1.7816088823864173,0.909111664354187),(0.36586020086053167,-0.06763531281107672,-0.952028633990455,-1.3921908284581592,-2.175842027962227,-0.2668446543677508,-1.0999748867047898,0.81,1.4130450333772604,1.582006463068857,0.7988286239230257,1.5910752325236108,0.6101272780073337,1.7816088823864173,0.909111664354187),(0.4531256035702591,0.4272572199529034,-0.0766000050337147,0.5966532121963541,1.724515000395158,0.06896740083785215,0.909111664354187,0.85,1.4130450333772604,1.582006463068857,0.7988286239230257,1.5910752325236108,0.6101272780073337,1.7816088823864173,0.909111664354187),(1.5003104360869879,1.4170422854808635,0.7988286239230257,0.5966532121963541,0.052933416813421515,1.580121649263055,0.909111664354187,0.93,1.4130450333772604,1.582006463068857,0.7988286239230257,1.5910752325236108,0.6101272780073337,1.7816088823864173,0.909111664354187),(1.8493720469258974,1.2520781078928702,1.674257252879766,1.0938642223599824,1.724515000395158,1.0596129636943752,0.909111664354187,0.91,1.4130450333772604,1.582006463068857,0.7988286239230257,1.5910752325236108,0.6101272780073337,1.7816088823864173,0.909111664354187),(-0.9431208397853792,-0.7274920231630502,-0.952028633990455,-0.8949798182945309,-0.5042604443804907,-0.40116947644999135,-1.0999748867047898,0.69,1.4130450333772604,1.582006463068857,0.7988286239230257,1.5910752325236108,0.6101272780073337,1.7816088823864173,0.909111664354187),(-0.3322630208172874,-0.8924562007510436,-0.0766000050337147,0.09944220203272576,0.6101272780073337,0.5055230726051333,0.909111664354187,0.77,1.4130450333772604,1.582006463068857,0.7988286239230257,1.5910752325236108,0.6101272780073337,1.7816088823864173,0.909111664354187),(1.1512488252480781,1.087113930304877,0.7988286239230257,1.0938642223599824,-0.5042604443804907,0.9588693471326941,0.909111664354187,0.86,1.4130450333772604,1.582006463068857,0.7988286239230257,1.5910752325236108,0.6101272780073337,1.7816088823864173,0.909111664354187),(0.2785947981508043,-0.5625278455750569,-0.0766000050337147,0.09944220203272576,1.167321139201246,-0.4347506819705508,0.909111664354187,0.74,1.4130450333772604,1.582006463068857,0.7988286239230257,1.5910752325236108,0.6101272780073337,1.7816088823864173,0.909111664354187),(-0.5067938262367422,-1.5523129111030172,-1.8274572629471952,-2.386612848785416,-1.0614543055744028,-1.9123237248751956,-1.0999748867047898,0.57,1.4130450333772604,1.582006463068857,0.7988286239230257,1.5910752325236108,0.6101272780073337,1.7816088823864173,0.909111664354187),(-1.6412440614631982,-2.5420979766309775,-1.8274572629471952,-1.3921908284581592,-1.618648166768315,-1.2071184089434333,-1.0999748867047898,0.51,1.4130450333772604,1.582006463068857,0.7988286239230257,1.5910752325236108,0.6101272780073337,1.7816088823864173,0.909111664354187),(-1.3794478533340162,-1.5523129111030172,-1.8274572629471952,-1.3921908284581592,-0.5042604443804907,-0.9552593675392334,0.909111664354187,0.67,1.4130450333772604,1.582006463068857,0.7988286239230257,1.5910752325236108,0.6101272780073337,1.7816088823864173,0.909111664354187);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5206', () => {
    const query = `insert into defaults values (1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2),(1,2,1,-1,-2),(-1,-2,-1,1,2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5207', () => {
    const query = `INSERT INTO single_column_bloom_filter SELECT number AS u64, number AS i32, number AS i64 FROM system.numbers LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5208', () => {
    const query = `INSERT INTO bloom_filter_types_test SELECT number AS order_key, toInt8(number) AS i8, toInt16(number) AS i16, toInt32(number) AS i32, toInt64(number) AS i64, toUInt8(number) AS u8, toUInt16(number) AS u16, toUInt32(number) AS u32, toUInt64(number) AS u64, toFloat32(number) AS f32, toFloat64(number) AS f64, toDate(number, 'Asia/Istanbul') AS date, toDateTime(number, 'Asia/Istanbul') AS date_time, toString(number) AS str, toFixedString(toString(number), 5) AS fixed_string FROM system.numbers LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5209', () => {
    const query = `INSERT INTO bloom_filter_array_types_test SELECT groupArray(number) AS order_key, groupArray(toInt8(number)) AS i8, groupArray(toInt16(number)) AS i16, groupArray(toInt32(number)) AS i32, groupArray(toInt64(number)) AS i64, groupArray(toUInt8(number)) AS u8, groupArray(toUInt16(number)) AS u16, groupArray(toUInt32(number)) AS u32, groupArray(toUInt64(number)) AS u64, groupArray(toFloat32(number)) AS f32, groupArray(toFloat64(number)) AS f64, groupArray(toDate(number, 'Asia/Istanbul')) AS date, groupArray(toDateTime(number, 'Asia/Istanbul')) AS date_time, groupArray(toString(number)) AS str, groupArray(toFixedString(toString(number), 5)) AS fixed_string FROM (SELECT number FROM system.numbers LIMIT 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5210', () => {
    const query = `INSERT INTO bloom_filter_array_types_test SELECT groupArray(number) AS order_key, groupArray(toInt8(number)) AS i8, groupArray(toInt16(number)) AS i16, groupArray(toInt32(number)) AS i32, groupArray(toInt64(number)) AS i64, groupArray(toUInt8(number)) AS u8, groupArray(toUInt16(number)) AS u16, groupArray(toUInt32(number)) AS u32, groupArray(toUInt64(number)) AS u64, groupArray(toFloat32(number)) AS f32, groupArray(toFloat64(number)) AS f64, groupArray(toDate(number, 'Asia/Istanbul')) AS date, groupArray(toDateTime(number, 'Asia/Istanbul')) AS date_time, groupArray(toString(number)) AS str, groupArray(toFixedString(toString(number), 5)) AS fixed_string FROM (SELECT number FROM system.numbers WHERE number >= 5 LIMIT 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5211', () => {
    const query = `INSERT INTO bloom_filter_array_types_test SELECT groupArray(number) AS order_key, groupArray(toInt8(number)) AS i8, groupArray(toInt16(number)) AS i16, groupArray(toInt32(number)) AS i32, groupArray(toInt64(number)) AS i64, groupArray(toUInt8(number)) AS u8, groupArray(toUInt16(number)) AS u16, groupArray(toUInt32(number)) AS u32, groupArray(toUInt64(number)) AS u64, groupArray(toFloat32(number)) AS f32, groupArray(toFloat64(number)) AS f64, groupArray(toDate(number, 'Asia/Istanbul')) AS date, groupArray(toDateTime(number, 'Asia/Istanbul')) AS date_time, groupArray(toString(number)) AS str, groupArray(toFixedString(toString(number), 5)) AS fixed_string FROM (SELECT number FROM system.numbers WHERE number >= 10 LIMIT 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5212', () => {
    const query = `INSERT INTO bloom_filter_null_types_test SELECT number AS order_key, toInt8(number) AS i8, toInt16(number) AS i16, toInt32(number) AS i32, toInt64(number) AS i64, toUInt8(number) AS u8, toUInt16(number) AS u16, toUInt32(number) AS u32, toUInt64(number) AS u64, toFloat32(number) AS f32, toFloat64(number) AS f64, toDate(number, 'Asia/Istanbul') AS date, toDateTime(number, 'Asia/Istanbul') AS date_time, toString(number) AS str, toFixedString(toString(number), 5) AS fixed_string FROM system.numbers LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5213', () => {
    const query = `INSERT INTO bloom_filter_null_types_test SELECT 0 AS order_key, NULL AS i8, NULL AS i16, NULL AS i32, NULL AS i64, NULL AS u8, NULL AS u16, NULL AS u32, NULL AS u64, NULL AS f32, NULL AS f64, NULL AS date, NULL AS date_time, NULL AS str, NULL AS fixed_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5214', () => {
    const query = `INSERT INTO bloom_filter_lc_null_types_test SELECT number AS order_key, toString(number) AS str, toFixedString(toString(number), 5) AS fixed_string FROM system.numbers LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5215', () => {
    const query = `INSERT INTO bloom_filter_lc_null_types_test SELECT 0 AS order_key, NULL AS str, NULL AS fixed_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5216', () => {
    const query = `INSERT INTO bloom_filter_array_lc_null_types_test SELECT groupArray(number) AS order_key,
groupArray(toInt8(number)) AS i8,
groupArray(toInt16(number)) AS i16,
groupArray(toInt32(number)) AS i32,
groupArray(toInt64(number)) AS i64,
groupArray(toUInt8(number)) AS u8,
groupArray(toUInt16(number)) AS u16,
groupArray(toUInt32(number)) AS u32,
groupArray(toUInt64(number)) AS u64,
groupArray(toFloat32(number)) AS f32,
groupArray(toFloat64(number)) AS f64,
groupArray(toDate(number, 'Asia/Istanbul')) AS date,
groupArray(toDateTime(number, 'Asia/Istanbul')) AS date_time,
groupArray(toString(number)) AS str,
groupArray(toFixedString(toString(number), 5)) AS fixed_string
FROM (SELECT number FROM system.numbers LIMIT 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5217', () => {
    const query = `INSERT INTO bloom_filter_array_lc_null_types_test SELECT groupArray(number) AS order_key, groupArray(toInt8(number)) AS i8, groupArray(toInt16(number)) AS i16, groupArray(toInt32(number)) AS i32, groupArray(toInt64(number)) AS i64, groupArray(toUInt8(number)) AS u8, groupArray(toUInt16(number)) AS u16, groupArray(toUInt32(number)) AS u32, groupArray(toUInt64(number)) AS u64, groupArray(toFloat32(number)) AS f32, groupArray(toFloat64(number)) AS f64, groupArray(toDate(number, 'Asia/Istanbul')) AS date, groupArray(toDateTime(number, 'Asia/Istanbul')) AS date_time, groupArray(toString(number)) AS str, groupArray(toFixedString(toString(number), 5)) AS fixed_string FROM (SELECT number FROM system.numbers WHERE number >= 5 LIMIT 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5218', () => {
    const query = `INSERT INTO bloom_filter_array_lc_null_types_test SELECT groupArray(number) AS order_key, groupArray(toInt8(number)) AS i8, groupArray(toInt16(number)) AS i16, groupArray(toInt32(number)) AS i32, groupArray(toInt64(number)) AS i64, groupArray(toUInt8(number)) AS u8, groupArray(toUInt16(number)) AS u16, groupArray(toUInt32(number)) AS u32, groupArray(toUInt64(number)) AS u64, groupArray(toFloat32(number)) AS f32, groupArray(toFloat64(number)) AS f64, groupArray(toDate(number, 'Asia/Istanbul')) AS date, groupArray(toDateTime(number, 'Asia/Istanbul')) AS date_time, groupArray(toString(number)) AS str, groupArray(toFixedString(toString(number), 5)) AS fixed_string FROM (SELECT number FROM system.numbers WHERE number >= 10 LIMIT 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5219', () => {
    const query = `INSERT INTO bloom_filter_array_lc_null_types_test SELECT n AS order_key, n AS i8, n AS i16, n AS i32, n AS i64, n AS u8, n AS u16, n AS u32, n AS u64, n AS f32, n AS f64, n AS date, n AS date_time, n AS str, n AS fixed_string FROM (SELECT [NULL] AS n);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5220', () => {
    const query = `INSERT INTO bloom_filter_array_lc_null_types_test SELECT [NULL, n] AS order_key, [NULL, toInt8(n)] AS i8, [NULL, toInt16(n)] AS i16, [NULL, toInt32(n)] AS i32, [NULL, toInt64(n)] AS i64, [NULL, toUInt8(n)] AS u8, [NULL, toUInt16(n)] AS u16, [NULL, toUInt32(n)] AS u32, [NULL, toUInt64(n)] AS u64, [NULL, toFloat32(n)] AS f32, [NULL, toFloat64(n)] AS f64, [NULL, toDate(n, 'Asia/Istanbul')] AS date, [NULL, toDateTime(n, 'Asia/Istanbul')] AS date_time, [NULL, toString(n)] AS str, [NULL, toFixedString(toString(n), 5)] AS fixed_string FROM (SELECT 100 as n);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5221', () => {
    const query = `INSERT INTO bloom_filter_array_offsets_lc_str SELECT number AS i, if(i%2, ['value'], []) FROM system.numbers LIMIT 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5222', () => {
    const query = `INSERT INTO bloom_filter_array_offsets_str SELECT number AS i, if(i%2, ['value'], []) FROM system.numbers LIMIT 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5223', () => {
    const query = `INSERT INTO bloom_filter_array_offsets_i SELECT number AS i, if(i%2, [99999], []) FROM system.numbers LIMIT 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5224', () => {
    const query = `INSERT INTO test_bf_indexOf VALUES (1, ['value1', 'value2']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5225', () => {
    const query = `INSERT INTO test_bf_indexOf VALUES (2, ['value3']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5226', () => {
    const query = `insert into defaults values (-3.273, -1.452, 4.267, 20.0, 40.0), (0.121, -0.615, 4.290, 20.0, 40.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5227', () => {
    const query = `INSERT INTO min_max_with_nullable_string(t) VALUES (now()) (now());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5228', () => {
    const query = `INSERT INTO min_max_with_nullable_string(t, nullable_str) VALUES (now(), '.') (now(), '.');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5229', () => {
    const query = `INSERT INTO min_max_with_nullable_string(t, nullable_str) VALUES (now(), NULL) (now(), '.') (now(), NULL) (now(), '.') (now(), NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5230', () => {
    const query = `INSERT INTO src VALUES (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5231', () => {
    const query = `INSERT INTO src_00942 VALUES (1), (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5232', () => {
    const query = `INSERT INTO pk_order SELECT number % 10 + 1, number % 6 + 1 from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5233', () => {
    const query = `INSERT INTO max_parts_in_total SELECT number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5234', () => {
    const query = `INSERT INTO max_parts_in_total SELECT 123; -- { serverError TOO_MANY_PARTS } drop table max_parts_in_total;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5235', () => {
    const query = `INSERT INTO nullt VALUES (1, 'abc'), (2, NULL), (NULL, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5236', () => {
    const query = `insert into limit_by values(1, 100), (1, 110), (1, 120), (1, 130), (2, 200), (2, 210), (2, 220), (3, 300);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5237', () => {
    const query = `INSERT INTO retention_test SELECT '2018-08-06', number FROM numbers(8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5238', () => {
    const query = `INSERT INTO retention_test SELECT '2018-08-07', number FROM numbers(6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5239', () => {
    const query = `INSERT INTO retention_test SELECT '2018-08-08', number FROM numbers(7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5240', () => {
    const query = `INSERT INTO ipv6_range (ip, cidr) VALUES ('2001:0db8:0000:85a3:0000:0000:ac1f:8001', 0), ('2001:0db8:0000:85a3:ffff:ffff:ffff:ffff', 32), ('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff', 16), ('2001:df8:0:85a3::ac1f:8001', 32), ('2001:0db8:85a3:85a3:0000:0000:ac1f:8001', 16), ('0000:0000:0000:0000:0000:0000:0000:0000', 8), ('ffff:0000:0000:0000:0000:0000:0000:0000', 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5241', () => {
    const query = `INSERT INTO ipv4_range (ip, cidr) VALUES (toIPv4('192.168.5.2'), 0), (toIPv4('192.168.5.20'), 32), (toIPv4('255.255.255.255'), 16), (toIPv4('192.142.32.2'), 32), (toIPv4('192.172.5.2'), 16), (toIPv4('0.0.0.0'), 8), (toIPv4('255.0.0.0'), 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5242', () => {
    const query = `INSERT INTO samples VALUES (1, 1)(2, 2)(3, 3)(4, 4)(5, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5243', () => {
    const query = `INSERT INTO table1 VALUES('qwerty', 'string');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5244', () => {
    const query = `INSERT INTO table1 VALUES('qqq', 'aaa');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5245', () => {
    const query = `INSERT INTO table1 VALUES('aasq', 'xxz');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5246', () => {
    const query = `INSERT INTO table1 VALUES('zxcqwer', '');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5247', () => {
    const query = `INSERT INTO table1 VALUES('', '');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5248', () => {
    const query = `insert into ttl_00933_2 values (toDateTime('2000-10-10 00:00:00'), 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5249', () => {
    const query = `insert into ttl_00933_2 values (toDateTime('2000-10-10 00:00:00'), 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5250', () => {
    const query = `insert into ttl_00933_2 values (toDateTime('2100-10-10 00:00:00'), 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5251', () => {
    const query = `insert into ttl_00933_2 values (toDateTime('2100-10-10 00:00:00'), 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5252', () => {
    const query = `insert into ttl_00933_2 values (toDateTime('2000-10-10 00:00:00'), 1, 100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5253', () => {
    const query = `insert into ttl_00933_2 values (toDateTime('2000-10-10 00:00:00'), 2, 200);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5254', () => {
    const query = `insert into ttl_00933_2 values (toDateTime('2100-10-10 00:00:00'), 3, 300);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5255', () => {
    const query = `insert into ttl_00933_2 values (toDateTime('2100-10-10 00:00:00'), 4, 400);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5256', () => {
    const query = `insert into ttl_00933_2 values (toDateTime('2000-10-10 00:00:00'), 1, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5257', () => {
    const query = `insert into ttl_00933_2 values (toDateTime('2000-10-10 00:00:00'), 2, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5258', () => {
    const query = `insert into ttl_00933_2 values (toDateTime('2100-10-10 00:00:00'), 3, 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5259', () => {
    const query = `insert into ttl_00933_2 values (toDateTime('2100-10-10 00:00:00'), 4, 20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5260', () => {
    const query = `insert into ttl_00933_1 values (now(), 1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5261', () => {
    const query = `insert into ttl_00933_1 values (now(), 3, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5262', () => {
    const query = `insert into ttl_00933_1 values (now() + 1000, 5, 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5263', () => {
    const query = `insert into ttl_00933_1 values (toDateTime('2000-10-10 00:00:00'), 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5264', () => {
    const query = `insert into ttl_00933_1 values (toDateTime('2000-10-10 00:00:00'), 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5265', () => {
    const query = `insert into ttl_00933_1 values (toDateTime('2000-10-10 00:00:00'), 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5266', () => {
    const query = `insert into ttl_00933_1 values (toDateTime('2100-10-10 00:00:00'), 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5267', () => {
    const query = `insert into ttl_00933_1 values (toDate('2000-10-10'), 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5268', () => {
    const query = `insert into ttl_00933_1 values (toDate('2100-10-10'), 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5269', () => {
    const query = `insert into ttl_00933_1 values (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5270', () => {
    const query = `insert into geohash_test_data values (-25.427, -49.315, '6'), (-25.427, -49.315, '6g'), (-25.427, -49.315, '6gk'), (-25.427, -49.315, '6gkz'), (-25.427, -49.315, '6gkzm'), (-25.427, -49.315, '6gkzmg'), (-25.427, -49.315, '6gkzmg1'), (-25.427, -49.315, '6gkzmg1u'), (-25.383, -49.266, '6'), (-25.383, -49.266, '6g'), (-25.383, -49.266, '6gk'), (-25.383, -49.266, '6gkz'), (-25.383, -49.266, '6gkzw'), (-25.383, -49.266, '6gkzwg'), (-25.383, -49.266, '6gkzwgj'), (-25.383, -49.266, '6gkzwgjt'), (-25.382708, -49.265506, '6'), (-25.382708, -49.265506, '6g'), (-25.382708, -49.265506, '6gk'), (-25.382708, -49.265506, '6gkz'), (-25.382708, -49.265506, '6gkzw'), (-25.382708, -49.265506, '6gkzwg'), (-25.382708, -49.265506, '6gkzwgj'), (-25.382708, -49.265506, '6gkzwgjz'), (-25.382708, -49.265506, '6gkzwgjzn'), (-25.382708, -49.265506, '6gkzwgjzn8'), (-25.382708, -49.265506, '6gkzwgjzn82'), (-25.382708, -49.265506, '6gkzwgjzn820'), (-0.1, -0.1, '7'), (-0.1, -0.1, '7z'), (-0.1, -0.1, '7zz'), (-0.1, -0.1, '7zzz'), (-0.1, -0.1, '7zzzm'), (-0.1, -0.01, '7'), (-0.1, -0.01, '7z'), (-0.1, -0.01, '7zz'), (-0.1, -0.01, '7zzz'), (-0.1, -0.01, '7zzzr'), (-0.1, -0.01, '7zzzrv'), (-0.1, -0.01, '7zzzrvb'), (-0.1, 0, 'k'), (-0.1, 0, 'kp'), (-0.1, 0, 'kpb'), (-0.1, 0, 'kpbp'), (-0.1, 0, 'kpbp2'), (-0.1, 0.01, 'k'), (-0.1, 0.01, 'kp'), (-0.1, 0.01, 'kpb'), (-0.1, 0.01, 'kpbp'), (-0.1, 0.01, 'kpbp2'), (-0.1, 0.01, 'kpbp2j'), (-0.1, 0.01, 'kpbp2jz'), (-0.1, 0.1, 'k'), (-0.1, 0.1, 'kp'), (-0.1, 0.1, 'kpb'), (-0.1, 0.1, 'kpbp'), (-0.1, 0.1, 'kpbp6'), (-0.01, -0.1, '7'), (-0.01, -0.1, '7z'), (-0.01, -0.1, '7zz'), (-0.01, -0.1, '7zzz'), (-0.01, -0.1, '7zzzv'), (-0.01, -0.1, '7zzzvw'), (-0.01, -0.01, '7'), (-0.01, -0.01, '7z'), (-0.01, -0.01, '7zz'), (-0.01, -0.01, '7zzz'), (-0.01, -0.01, '7zzzz'), (-0.01, -0.01, '7zzzzy'), (-0.01, -0.01, '7zzzzy0'), (-0.01, 0, 'k'), (-0.01, 0, 'kp'), (-0.01, 0, 'kpb'), (-0.01, 0, 'kpbp'), (-0.01, 0, 'kpbpb'), (-0.01, 0, 'kpbpbn'), (-0.01, 0.01, 'k'), (-0.01, 0.01, 'kp'), (-0.01, 0.01, 'kpb'), (-0.01, 0.01, 'kpbp'), (-0.01, 0.01, 'kpbpb'), (-0.01, 0.01, 'kpbpbn'), (-0.01, 0.01, 'kpbpbnp'), (-0.01, 0.1, 'k'), (-0.01, 0.1, 'kp'), (-0.01, 0.1, 'kpb'), (-0.01, 0.1, 'kpbp'), (-0.01, 0.1, 'kpbpf'), (-0.01, 0.1, 'kpbpfq'), (0, -0.1, 'e'), (0, -0.1, 'eb'), (0, -0.1, 'ebp'), (0, -0.1, 'ebpb'), (0, -0.1, 'ebpbj'), (0, -0.01, 'e'), (0, -0.01, 'eb'), (0, -0.01, 'ebp'), (0, -0.01, 'ebpb'), (0, -0.01, 'ebpbp'), (0, -0.01, 'ebpbpb'), (0, -0.01, 'ebpbpb0'), (0, 0, 's'), (0, 0, 's0'), (0, 0, 's00'), (0, 0, 's000'), (0, 0.01, 's'), (0, 0.01, 's0'), (0, 0.01, 's00'), (0, 0.01, 's000'), (0, 0.01, 's0000'), (0, 0.01, 's00000'), (0, 0.01, 's00000p'), (0, 0.1, 's'), (0, 0.1, 's0'), (0, 0.1, 's00'), (0, 0.1, 's000'), (0, 0.1, 's0004'), (0.01, -0.1, 'e'), (0.01, -0.1, 'eb'), (0.01, -0.1, 'ebp'), (0.01, -0.1, 'ebpb'), (0.01, -0.1, 'ebpbj'), (0.01, -0.1, 'ebpbj9'), (0.01, -0.01, 'e'), (0.01, -0.01, 'eb'), (0.01, -0.01, 'ebp'), (0.01, -0.01, 'ebpb'), (0.01, -0.01, 'ebpbp'), (0.01, -0.01, 'ebpbpc'), (0.01, -0.01, 'ebpbpcb'), (0.01, 0, 's'), (0.01, 0, 's0'), (0.01, 0, 's00'), (0.01, 0, 's000'), (0.01, 0, 's0000'), (0.01, 0, 's00001'), (0.01, 0.01, 's'), (0.01, 0.01, 's0'), (0.01, 0.01, 's00'), (0.01, 0.01, 's000'), (0.01, 0.01, 's0000'), (0.01, 0.01, 's00001'), (0.01, 0.01, 's00001z'), (0.01, 0.1, 's'), (0.01, 0.1, 's0'), (0.01, 0.1, 's00'), (0.01, 0.1, 's000'), (0.01, 0.1, 's0004'), (0.01, 0.1, 's00043'), (0.1, -0.1, 'e'), (0.1, -0.1, 'eb'), (0.1, -0.1, 'ebp'), (0.1, -0.1, 'ebpb'), (0.1, -0.1, 'ebpbt'), (0.1, -0.01, 'e'), (0.1, -0.01, 'eb'), (0.1, -0.01, 'ebp'), (0.1, -0.01, 'ebpb'), (0.1, -0.01, 'ebpbx'), (0.1, -0.01, 'ebpbxf'), (0.1, -0.01, 'ebpbxf0'), (0.1, 0, 's'), (0.1, 0, 's0'), (0.1, 0, 's00'), (0.1, 0, 's000'), (0.1, 0, 's0008'), (0.1, 0.01, 's'), (0.1, 0.01, 's0'), (0.1, 0.01, 's00'), (0.1, 0.01, 's000'), (0.1, 0.01, 's0008'), (0.1, 0.01, 's00084'), (0.1, 0.01, 's00084p'), (0.1, 0.1, 's'), (0.1, 0.1, 's0'), (0.1, 0.1, 's00'), (0.1, 0.1, 's000'), (0.1, 0.1, 's000d'), (7.880886, 98.3640363, 'w'), (7.880886, 98.3640363, 'w1'), (7.880886, 98.3640363, 'w1m'), (7.880886, 98.3640363, 'w1mu'), (7.880886, 98.3640363, 'w1muy'), (7.880886, 98.3640363, 'w1muy6'), (7.880886, 98.3640363, 'w1muy6d'), (7.880886, 98.3640363, 'w1muy6dt'), (7.880886, 98.3640363, 'w1muy6dt2'), (7.880886, 98.3640363, 'w1muy6dt2p'), (7.880886, 98.3640363, 'w1muy6dt2pt'), (7.880886, 98.3640363, 'w1muy6dt2ptk'), (51.523242, -0.07914, 'g'), (51.523242, -0.07914, 'gc'), (51.523242, -0.07914, 'gcp'), (51.523242, -0.07914, 'gcpv'), (51.523242, -0.07914, 'gcpvn'), (51.523242, -0.07914, 'gcpvn5'), (51.523242, -0.07914, 'gcpvn5w'), (51.523242, -0.07914, 'gcpvn5w2'), (51.523242, -0.07914, 'gcpvn5w2e'), (51.523242, -0.07914, 'gcpvn5w2eu'), (51.523242, -0.07914, 'gcpvn5w2euk'), (51.523242, -0.07914, 'gcpvn5w2euky'), (53.923107, 27.606682, 'u'), (53.923107, 27.606682, 'u9'), (53.923107, 27.606682, 'u9e'), (53.923107, 27.606682, 'u9ed'), (53.923107, 27.606682, 'u9edu'), (53.923107, 27.606682, 'u9edu0'), (53.923107, 27.606682, 'u9edu0q'), (53.923107, 27.606682, 'u9edu0qs'), (53.923107, 27.606682, 'u9edu0qsf'), (53.923107, 27.606682, 'u9edu0qsf7'), (53.923107, 27.606682, 'u9edu0qsf7d'), (53.923107, 27.606682, 'u9edu0qsf7dn');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5271', () => {
    const query = `insert into test_in values ('a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5272', () => {
    const query = `INSERT INTO lc_00931 SELECT number, if (number < 10000 OR number > 100000,
[toString(number)],
emptyArrayString())
FROM system.numbers LIMIT 200000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5273', () => {
    const query = `INSERT INTO lc SELECT '2019-01-01', null, 0 FROM numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5274', () => {
    const query = `INSERT INTO partitions SELECT * FROM system.numbers LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5275', () => {
    const query = `INSERT INTO partitions SELECT * FROM system.numbers LIMIT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5276', () => {
    const query = `INSERT INTO partitions SELECT * FROM system.numbers LIMIT 2; -- { serverError TOO_MANY_PARTS } DROP TABLE partitions;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5277', () => {
    const query = `insert into array_intersect values ('2019-01-01', [1,2,3]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5278', () => {
    const query = `insert into array_intersect values ('2019-01-01', [1,2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5279', () => {
    const query = `insert into array_intersect values ('2019-01-01', [1]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5280', () => {
    const query = `insert into array_intersect values ('2019-01-01', []);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5281', () => {
    const query = `INSERT INTO md(key,t,bid,ask) VALUES (1,20,7,8),(1,5,1,2),(1,10,11,12),(1,15,5,6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5282', () => {
    const query = `INSERT INTO md(key,t,bid,ask) VALUES (2,20,17,18),(2,5,11,12),(2,10,21,22),(2,15,5,6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5283', () => {
    const query = `INSERT INTO tv(key,t,tv) VALUES (1,5,1.5),(1,6,1.51),(1,10,11.5),(1,11,11.51),(1,15,5.5),(1,16,5.6),(1,20,7.5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5284', () => {
    const query = `INSERT INTO tv(key,t,tv) VALUES (2,5,2.5),(2,6,2.51),(2,10,12.5),(2,11,12.51),(2,15,6.5),(2,16,5.6),(2,20,8.5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5285', () => {
    const query = `INSERT INTO A(k,t,a) VALUES (1,1,1),(1,2,2),(1,3,3),(1,4,4),(1,5,5);  -- multiple joined values INSERT INTO A(k,t,a) VALUES (2,1,1),(2,2,2),(2,3,3),(2,4,4),(2,5,5);  -- one joined value
INSERT INTO A(k,t,a) VALUES (3,1,1),(3,2,2),(3,3,3),(3,4,4),(3,5,5);  -- no joined values
CREATE TABLE B(k UInt32, t DateTime, b Float64) ENGINE = MergeTree() ORDER BY (k, t);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5286', () => {
    const query = `INSERT INTO B(k,t,b) VALUES (1,2,2),(1,4,4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5287', () => {
    const query = `INSERT INTO B(k,t,b) VALUES (2,3,3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5288', () => {
    const query = `INSERT INTO tvs(k,t,tv) SELECT k, t, t FROM (SELECT toUInt32(number) AS k FROM numbers(1000)) keys
CROSS JOIN (SELECT toUInt32(number * 3) as t FROM numbers(10000)) tv_times
SETTINGS join_algorithm = 'hash';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5289', () => {
    const query = `INSERT INTO A(k,t,a) VALUES (1,101,1),(1,102,2),(1,103,3),(1,104,4),(1,105,5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5290', () => {
    const query = `INSERT INTO B1(k,t,b) VALUES (1,102,2), (1,104,4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5291', () => {
    const query = `INSERT INTO B2(k,t,b) VALUES (1,102,2), (1,104,4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5292', () => {
    const query = `INSERT INTO B3(k,t,b) VALUES (1,102,2), (1,104,4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5293', () => {
    const query = `INSERT INTO zero_rows_per_granule1 (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5294', () => {
    const query = `INSERT INTO zero_rows_per_granule2 (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-19', 8, 7000, 8000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5295', () => {
    const query = `INSERT INTO four_rows_per_granule1 (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5296', () => {
    const query = `INSERT INTO four_rows_per_granule2 (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-19', 8, 7000, 8000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5297', () => {
    const query = `INSERT INTO adaptive_granularity_alter1 (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5298', () => {
    const query = `INSERT INTO adaptive_granularity_alter1 (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 5, 3000, 4000), ('2018-05-17', 6, 5000, 6000), ('2018-05-19', 42, 42, 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5299', () => {
    const query = `INSERT INTO adaptive_granularity_alter1 (p, k, v1, v2) VALUES ('2018-05-15', 100, 1000, 'aaaa'), ('2018-05-16', 101, 3000, 'bbbb'), ('2018-05-17', 102, 5000, 'cccc'), ('2018-05-19', 103, 7000, 'dddd');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5300', () => {
    const query = `INSERT INTO table1 VALUES(55.77922738, 37.63098076, 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5301', () => {
    const query = `INSERT INTO table1 VALUES(55.76324100, 37.66018300, 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5302', () => {
    const query = `INSERT INTO table1 VALUES(55.72076200, 37.59813500, 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5303', () => {
    const query = `INSERT INTO table1 VALUES(55.72076201, 37.59813500, 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5304', () => {
    const query = `INSERT INTO table1 VALUES(55.72076200, 37.59813500, 14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5305', () => {
    const query = `INSERT INTO zero_rows_per_granule (p, k, v1, v2, Sign, Version) VALUES ('2018-05-15', 1, 1000, 2000, 1, 1), ('2018-05-16', 2, 3000, 4000, 1, 1), ('2018-05-17', 3, 5000, 6000, 1, 1), ('2018-05-18', 4, 7000, 8000, 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5306', () => {
    const query = `INSERT INTO zero_rows_per_granule (p, k, v1, v2, Sign, Version) VALUES ('2018-05-15', 5, 1000, 2000, 1, 1), ('2018-05-16', 6, 3000, 4000, 1, 1), ('2018-05-17', 7, 5000, 6000, 1, 1), ('2018-05-19', 8, 7000, 8000, 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5307', () => {
    const query = `INSERT INTO four_rows_per_granule (p, k, v1, v2, Sign, Version) VALUES ('2018-05-15', 1, 1000, 2000, 1, 1), ('2018-05-16', 2, 3000, 4000, 1, 1), ('2018-05-17', 3, 5000, 6000, 1, 1), ('2018-05-18', 4, 7000, 8000, 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5308', () => {
    const query = `INSERT INTO four_rows_per_granule (p, k, v1, v2, Sign, Version) VALUES ('2018-05-15', 1, 1000, 2000, -1, 1), ('2018-05-16', 2, 3000, 4000, -1, 1), ('2018-05-17', 3, 5000, 6000, -1, 1), ('2018-05-18', 4, 7000, 8000, -1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5309', () => {
    const query = `INSERT INTO four_rows_per_granule (p, k, v1, v2, Sign, Version) VALUES ('2018-05-15', 5, 1000, 2000, 1, 1), ('2018-05-16', 6, 3000, 4000, 1, 1), ('2018-05-17', 7, 5000, 6000, 1, 1), ('2018-05-18', 8, 7000, 8000, 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5310', () => {
    const query = `INSERT INTO four_rows_per_granule (p, k, v1, v2, Sign, Version) VALUES ('2018-05-15', 5, 1000, 2000, -1, 1), ('2018-05-17', 7, 5000, 6000, -1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5311', () => {
    const query = `INSERT INTO six_rows_per_granule (p, k, v1, v2, Sign, Version) VALUES ('2018-05-15', 1, 1000, 2000, 1, 1), ('2018-05-16', 1, 1000, 2000, -1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5312', () => {
    const query = `INSERT INTO six_rows_per_granule (p, k, v1, v2, Sign, Version) VALUES ('2018-05-15', 2, 1000, 2000, 1, 1), ('2018-05-16', 2, 1000, 2000, -1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5313', () => {
    const query = `INSERT INTO six_rows_per_granule (p, k, v1, v2, Sign, Version) VALUES ('2018-05-15', 3, 1000, 2000, 1, 1), ('2018-05-16', 3, 1000, 2000, -1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5314', () => {
    const query = `INSERT INTO six_rows_per_granule (p, k, v1, v2, Sign, Version) VALUES ('2018-05-15', 1, 1000, 2000, -1, 1), ('2018-05-16', 1, 1000, 2000, 1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5315', () => {
    const query = `INSERT INTO six_rows_per_granule (p, k, v1, v2, Sign, Version) VALUES ('2018-05-15', 2, 1000, 2000, -1, 1), ('2018-05-16', 2, 1000, 2000, 1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5316', () => {
    const query = `INSERT INTO six_rows_per_granule (p, k, v1, v2, Sign, Version) VALUES ('2018-05-15', 3, 1000, 2000, -1, 1), ('2018-05-16', 3, 1000, 2000, 1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5317', () => {
    const query = `INSERT INTO zero_rows_per_granule (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5318', () => {
    const query = `INSERT INTO zero_rows_per_granule (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-19', 8, 7000, 8000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5319', () => {
    const query = `INSERT INTO two_rows_per_granule (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5320', () => {
    const query = `INSERT INTO two_rows_per_granule (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-19', 8, 7000, 8000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5321', () => {
    const query = `INSERT INTO four_rows_per_granule (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5322', () => {
    const query = `INSERT INTO four_rows_per_granule (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-19', 8, 7000, 8000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5323', () => {
    const query = `INSERT INTO huge_granularity_small_blocks (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5324', () => {
    const query = `INSERT INTO huge_granularity_small_blocks (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-19', 8, 7000, 8000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5325', () => {
    const query = `INSERT INTO adaptive_granularity_alter (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5326', () => {
    const query = `INSERT INTO adaptive_granularity_alter (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-19', 42, 42, 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5327', () => {
    const query = `INSERT INTO adaptive_granularity_alter (p, k, v1, v2) VALUES ('2018-05-15', 100, 1000, 'aaaa'), ('2018-05-16', 101, 3000, 'bbbb'), ('2018-05-17', 102, 5000, 'cccc'), ('2018-05-19', 103, 7000, 'dddd');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5328', () => {
    const query = `INSERT INTO merge_tree VALUES (0), (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5329', () => {
    const query = `INSERT INTO large_alter_table_00926 SELECT toDate('2019-01-01'), number, toString(number + rand()) FROM system.numbers LIMIT 300000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5330', () => {
    const query = `INSERT INTO store_of_hash_00926 SELECT sum(cityHash64(*)) FROM large_alter_table_00926;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5331', () => {
    const query = `INSERT INTO huge_granularity_small_blocks (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 5, 3000, 4000), ('2018-05-17', 6, 5000, 6000), ('2018-05-19', 7, 7000, 8000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5332', () => {
    const query = `INSERT INTO adaptive_granularity_alter (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 5, 3000, 4000), ('2018-05-17', 6, 5000, 6000), ('2018-05-19', 42, 42, 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5333', () => {
    const query = `INSERT INTO zero_rows_per_granule (p, k, v1, v2, Sign) VALUES ('2018-05-15', 1, 1000, 2000, 1), ('2018-05-16', 2, 3000, 4000, 1), ('2018-05-17', 3, 5000, 6000, 1), ('2018-05-18', 4, 7000, 8000, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5334', () => {
    const query = `INSERT INTO zero_rows_per_granule (p, k, v1, v2, Sign) VALUES ('2018-05-15', 5, 1000, 2000, 1), ('2018-05-16', 6, 3000, 4000, 1), ('2018-05-17', 7, 5000, 6000, 1), ('2018-05-19', 8, 7000, 8000, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5335', () => {
    const query = `INSERT INTO four_rows_per_granule (p, k, v1, v2, Sign) VALUES ('2018-05-15', 1, 1000, 2000, 1), ('2018-05-16', 2, 3000, 4000, 1), ('2018-05-17', 3, 5000, 6000, 1), ('2018-05-18', 4, 7000, 8000, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5336', () => {
    const query = `INSERT INTO four_rows_per_granule (p, k, v1, v2, Sign) VALUES ('2018-05-15', 1, 1000, 2000, -1), ('2018-05-16', 2, 3000, 4000, -1), ('2018-05-17', 3, 5000, 6000, -1), ('2018-05-18', 4, 7000, 8000, -1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5337', () => {
    const query = `INSERT INTO four_rows_per_granule (p, k, v1, v2, Sign) VALUES ('2018-05-15', 5, 1000, 2000, 1), ('2018-05-16', 6, 3000, 4000, 1), ('2018-05-17', 7, 5000, 6000, 1), ('2018-05-18', 8, 7000, 8000, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5338', () => {
    const query = `INSERT INTO four_rows_per_granule (p, k, v1, v2, Sign) VALUES ('2018-05-15', 5, 1000, 2000, -1), ('2018-05-17', 7, 5000, 6000, -1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5339', () => {
    const query = `INSERT INTO A(t) VALUES ('2019-05-03 11:25:25.123456789');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5340', () => {
    const query = `insert into simple select number,number from system.numbers limit 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5341', () => {
    const query = `insert into simple values(1,'1','1','1.1.1.1', 1, ([1,2], [1,1]), ([1,2], [1,1]), ([1,2], [1,1]), [1,2], [1,2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5342', () => {
    const query = `insert into simple values(1,null,'2','2.2.2.2', 2, ([1,3], [1,1]), ([1,3], [2,2]), ([1,3], [2,2]), [2,3,4], [2,3,4]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5343', () => {
    const query = `insert into simple values(10,'10','10','10.10.10.10', 4, ([2,3], [1,1]), ([2,3], [3,3]), ([2,3], [3,3]), [], []);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5344', () => {
    const query = `insert into simple values(10,'2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222','20','20.20.20.20', 1, ([2, 4], [1,1]), ([2, 4], [4,4]), ([2, 4], [4,4]), [], []);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5345', () => {
    const query = `insert into with_overflow select 1, 1 from numbers(256);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5346', () => {
    const query = `insert into table1 values('a1','b1','2019-02-05 16:50:00'),('a1','b1','2019-02-05 16:55:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5347', () => {
    const query = `insert into table2 values('b1','2019-02-05 16:50:00'),('b1','2019-02-05 16:55:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5348', () => {
    const query = `INSERT INTO t SELECT * FROM system.numbers LIMIT 1500;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5349', () => {
    const query = `INSERT INTO alter_compression_codec1 VALUES('2018-01-01', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5350', () => {
    const query = `INSERT INTO alter_compression_codec1 VALUES('2018-01-01', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5351', () => {
    const query = `INSERT INTO alter_compression_codec1 VALUES('2018-01-01', 3, '3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5352', () => {
    const query = `INSERT INTO alter_compression_codec1 VALUES('2018-01-01', 4, '4');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5353', () => {
    const query = `INSERT INTO alter_compression_codec2 VALUES('2018-01-01', 5, '5');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5354', () => {
    const query = `INSERT INTO alter_compression_codec2 VALUES('2018-01-01', 6, '6');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5355', () => {
    const query = `INSERT INTO alter_compression_codec1 VALUES('2018-01-01', 7, '7');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5356', () => {
    const query = `INSERT INTO alter_compression_codec2 VALUES('2018-01-01', 8, '8');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5357', () => {
    const query = `INSERT INTO compression_codec_replicated1 VALUES(1, 'hello', toDate('2018-12-14'), 1.1, 'aaa', 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5358', () => {
    const query = `INSERT INTO compression_codec_replicated1 VALUES(2, 'world', toDate('2018-12-15'), 2.2, 'bbb', 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5359', () => {
    const query = `INSERT INTO compression_codec_replicated1 VALUES(3, '!', toDate('2018-12-16'), 3.3, 'ccc', 7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5360', () => {
    const query = `INSERT INTO compression_codec_replicated1 VALUES(2, '', toDate('2018-12-13'), 4.4, 'ddd', 8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5361', () => {
    const query = `INSERT INTO compression_codec_multiple_replicated2 VALUES (1, 'world', toDate('2018-10-05'), 1.1), (2, 'hello', toDate('2018-10-01'), 2.2), (3, 'buy', toDate('2018-10-11'), 3.3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5362', () => {
    const query = `INSERT INTO compression_codec_multiple_replicated1 select modulo(number, 100), toString(number), toDate('2018-12-01'), 5.5 * number FROM system.numbers limit 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5363', () => {
    const query = `INSERT INTO compression_codec_multiple_more_types_replicated VALUES(1.5555555555555, 'hello world!', [77], ['John']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5364', () => {
    const query = `INSERT INTO compression_codec_multiple_more_types_replicated VALUES(7.1, 'xxxxxxxxxxxx', [127], ['Henry']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5365', () => {
    const query = `INSERT INTO compression_codec_multiple_with_key_replicated VALUES(toDate('2018-10-12'), 100000, 'hello'), (toDate('2018-10-12'), 100002, 'world'), (toDate('2018-10-12'), 1111, '!');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5366', () => {
    const query = `INSERT INTO compression_codec_multiple_with_key_replicated SELECT toDate('2018-10-12'), number, toString(number) FROM system.numbers LIMIT 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5367', () => {
    const query = `INSERT INTO sensor_value (received_at, device_id, sensor_id, value, low_warning, low_critical, high_warning, high_critical) VALUES ('2018-12-18 00:16:07', 'a4d92414-09aa-4dbd-80b2-124ddaacf333', 'ed87e57c-9331-462a-80b4-9f0c005e88c8', '0.4400', '-10000000.0000', '-10000000.0000', '10000000.0000', '10000000.0000');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5368', () => {
    const query = `INSERT INTO buf VALUES (1, '2019-03-01 10:00:00', 0.5), (2, '2019-03-02 10:00:00', 0.15), (1, '2019-03-03 10:00:00', 0.25);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5369', () => {
    const query = `INSERT INTO arrays_test VALUES ([1,2,3], [2,2,1], [[1,2,3,4],[2,2,1],[3]], [[1,2,4,4],[2,2,1],[3]]), ([21,22,24], [22,22,21], [[21,22,23,24],[22,22,21],[23]], [[21,22,25,24],[22,22,21],[23]]), ([31,32,33], [32,32,31], [[31,32,33,34],[32,32,31],[33]], [[31,32,34,34],[32,32,31],[33]]), ([41,42,43], [42,42,41], [[41,42,43,44],[42,42,41],[43]], [[41,42,44,44],[42,42,41],[43]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5370', () => {
    const query = `INSERT INTO arrays_test VALUES ([1,1,1], [1,1,1], [[1,1,1],[1,1,1],[1]], [[1,1,1],[1,1,1],[1]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5371', () => {
    const query = `INSERT INTO arrays_test VALUES ([1,2,3], [4,5,6], [[7,8,9],[10,11,12],[13]], [[14,15,16],[17,18,19],[20]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5372', () => {
    const query = `INSERT INTO arrays_test VALUES ([[]], [[]]), ([[1,2]], [[3,4]]), ([[5,6]], [[7,8]]), ([[]], [[]]), ([[9,10]], [[11,12]]), ([[13,14]], [[15,16]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5373', () => {
    const query = `INSERT INTO arrays_test VALUES ([[]], [[]]), ([[1,1]], [[1,1]]), ([[1,1]], [[1,1]]), ([[]], [[]]), ([[1,1]], [[1,1]]), ([[1,1]], [[1,1]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5374', () => {
    const query = `INSERT INTO arrays_test VALUES ([], []),([10], [11]), ([], []), ([12], [13]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5375', () => {
    const query = `INSERT INTO arrays_test VALUES ([], []),([1], [1]), ([], []), ([1], [1]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5376', () => {
    const query = `INSERT INTO arrays_test VALUES ([], []), ([1,2], [3,4]), ([5,6], [7,8]), ([], []), ([9,10], [11,12]), ([13,14], [15,16]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5377', () => {
    const query = `INSERT INTO arrays_test VALUES ([], []), ([1,1], [1,1]), ([1,1], [1,1]), ([], []), ([1,1], [1,1]), ([1,1], [1,1]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5378', () => {
    const query = `insert into arr_tests_visits (CounterID, StartDate, Sign, VisitID, UserID, VisitVersion, \`Test.BannerID\`, \`Test.Load\`, \`Test.PuidKey\`, \`Test.PuidVal\`) values (1, toDate('2019-06-06'), 1, 1, 1, 1, [1], [1], [[]], [[]]),       (1, toDate('2019-06-06'), -1, 1, 1, 1, [1], [1], [[]], [[]]),       (1, toDate('2019-06-06'), 1, 1, 1, 2, [1,2], [1,1], [[],[1,2,3,4]], [[],[1001, 1002, 1003, 1004]]),       (1, toDate('2019-06-06'), 1, 2, 1, 1, [3], [1], [[3,4,5]], [[2001, 2002, 2003]]),       (1, toDate('2019-06-06'), 1, 3, 2, 1, [4, 5], [1, 0], [[5,6],[]], [[3001, 3002],[]]),       (1, toDate('2019-06-06'), 1, 4, 2, 1, [5, 5, 6], [1, 0, 0], [[1,2], [1, 2], [3]], [[1001, 1002],[1002, 1003], [2001]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5379', () => {
    const query = `INSERT INTO null_lc_set_index VALUES (1550883010, 'subscribe', 'alice');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5380', () => {
    const query = `INSERT INTO null_lc_set_index VALUES (1550883020, 'follow', 'bob');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5381', () => {
    const query = `insert into nullable_set_index values (1, 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5382', () => {
    const query = `insert into nullable_set_index values (2, 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5383', () => {
    const query = `insert into nullable_set_index values (1, 'a'), (2, 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5384', () => {
    const query = `INSERT INTO lc VALUES ('a', 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5385', () => {
    const query = `INSERT INTO lc VALUES ('c', 'd');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5386', () => {
    const query = `insert into lc_00906 select '0123456789' from numbers(100000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5387', () => {
    const query = `INSERT INTO foo_c VALUES ('2019-02-06 01:01:01'),('2019-02-07 01:01:01'),('2019-02-08 01:01:01'),('2021-02-06 01:01:01'),('2093-05-29 01:01:01'),('2100-06-06 01:01:01'),('2100-10-14 01:01:01'),('2100-11-01 01:01:01'),('2100-11-15 01:01:01'),('2100-11-30 01:01:01'),('2100-12-11 01:01:01'),('2100-12-21 01:01:01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5388', () => {
    const query = `insert into defaults values ('ba'), ('aa'), ('ba'), ('b'), ('ba'), ('aa');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5389', () => {
    const query = `insert into defaults values (0), (0), (1), (0), (0), (0), (1), (2), (3), (5), (3), (1), (1), (4), (5), (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5390', () => {
    const query = `insert into defaults values (0), (0), (-1), (0), (0), (0), (-1), (2), (3), (5), (3), (-1), (-1), (4), (5), (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5391', () => {
    const query = `insert into defaults values (toDateTime('2016-06-15 23:00:00')), (toDateTime('2016-06-15 23:00:00')), (toDateTime('2016-06-15 23:00:00')), (toDateTime('2016-06-15 23:00:00')), (toDateTime('2016-06-15 24:00:00')), (toDateTime('2016-06-15 24:00:00')), (toDateTime('2016-06-15 24:00:00')), (toDateTime('2017-06-15 24:00:00')), (toDateTime('2017-06-15 24:00:00')), (toDateTime('2018-06-15 24:00:00')), (toDateTime('2018-06-15 24:00:00')), (toDateTime('2019-06-15 24:00:00'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5392', () => {
    const query = `INSERT INTO index_memory SELECT * FROM system.numbers LIMIT 5000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5393', () => {
    const query = `insert into t values (1,1), (2,2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5394', () => {
    const query = `insert into s values (1,1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5395', () => {
    const query = `insert into y values (1,1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5396', () => {
    const query = `INSERT INTO t1 SELECT toString(number), toDecimal64(number, 8) FROM system.numbers LIMIT 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5397', () => {
    const query = `INSERT INTO t2 SELECT toString(number), toDecimal64(number, 8) FROM system.numbers LIMIT 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5398', () => {
    const query = `INSERT INTO t (x) VALUES ('id'), ('1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5399', () => {
    const query = `INSERT INTO nt (x) VALUES ('id'), (NULL), ('1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5400', () => {
    const query = `INSERT INTO ntxy (x, y) VALUES ('id', 'id'), (NULL, NULL), ('1', '1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5401', () => {
    const query = `INSERT INTO nt (x) SELECT NULL as x FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5402', () => {
    const query = `insert into t values (1,1.1), (1,1.2), (2,2.1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5403', () => {
    const query = `INSERT INTO t64 values ('1970-01-01', '1970-01-01', '1970-01-01', '1970-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5404', () => {
    const query = `INSERT INTO t64 values ('2149-06-06', '2149-06-06', '2149-06-06', '2149-06-06');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5405', () => {
    const query = `INSERT INTO t64 values ('2149-06-08', '2149-06-08', '2149-06-08', '2149-06-08');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5406', () => {
    const query = `INSERT INTO t64 values ('1950-01-01', '1950-01-01', '1950-01-01', '1950-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5407', () => {
    const query = `INSERT INTO t64 SELECT number AS x, x, x, x, x, x, x, x FROM numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5408', () => {
    const query = `INSERT INTO t64 SELECT number AS x, x, x, x, x, x, x, x FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5409', () => {
    const query = `INSERT INTO t64 SELECT 42 AS x, x, x, x, x, x, x, x FROM numbers(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5410', () => {
    const query = `INSERT INTO t64 SELECT number AS x, x, x, x, x, x, x, x FROM numbers(intExp2(8));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5411', () => {
    const query = `INSERT INTO t64 SELECT number AS x, x, x, x, x, x, x, x FROM numbers(intExp2(9));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5412', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(16) - 10 + number) AS x, x, x, x, x, x, x, x FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5413', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(16) - 10 + number) AS x, x, x, x, x, x, x, x FROM numbers(11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5414', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(16) - 64 + number) AS x, x, x, x, x, x, x, x FROM numbers(64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5415', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(16) - 64 + number) AS x, x, x, x, x, x, x, x FROM numbers(65);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5416', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(16) - 1 + number) AS x, x, x, x, x, x, x, x FROM numbers(65);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5417', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(24) - 10 + number) AS x, x, x, x, x, x, x, x FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5418', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(24) - 10 + number) AS x, x, x, x, x, x, x, x FROM numbers(11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5419', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(24) - 64 + number) AS x, x, x, x, x, x, x, x FROM numbers(128);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5420', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(24) - 64 + number) AS x, x, x, x, x, x, x, x FROM numbers(129);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5421', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(24) - 1 + number) AS x, x, x, x, x, x, x, x FROM numbers(129);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5422', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(32) - 10 + number) AS x, x, x, x, x, x, x, x FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5423', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(32) - 10 + number) AS x, x, x, x, x, x, x, x FROM numbers(20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5424', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(32) - 64 + number) AS x, x, x, x, x, x, x, x FROM numbers(256);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5425', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(32) - 64 + number) AS x, x, x, x, x, x, x, x FROM numbers(257);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5426', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(32) - 1 + number) AS x, x, x, x, x, x, x, x FROM numbers(257);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5427', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(40) - 10 + number) AS x, x, x, x, x, x, x, x FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5428', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(40) - 10 + number) AS x, x, x, x, x, x, x, x FROM numbers(20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5429', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(40) - 64 + number) AS x, x, x, x, x, x, x, x FROM numbers(512);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5430', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(40) - 64 + number) AS x, x, x, x, x, x, x, x FROM numbers(513);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5431', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(40) - 1 + number) AS x, x, x, x, x, x, x, x FROM numbers(513);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5432', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(48) - 10 + number) AS x, x, x, x, x, x, x, x FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5433', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(48) - 10 + number) AS x, x, x, x, x, x, x, x FROM numbers(20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5434', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(48) - 64 + number) AS x, x, x, x, x, x, x, x FROM numbers(1024);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5435', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(48) - 64 + number) AS x, x, x, x, x, x, x, x FROM numbers(1025);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5436', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(48) - 1 + number) AS x, x, x, x, x, x, x, x FROM numbers(1025);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5437', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(56) - 10 + number) AS x, x, x, x, x, x, x, x FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5438', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(56) - 10 + number) AS x, x, x, x, x, x, x, x FROM numbers(20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5439', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(56) - 64 + number) AS x, x, x, x, x, x, x, x FROM numbers(2048);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5440', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(56) - 64 + number) AS x, x, x, x, x, x, x, x FROM numbers(2049);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5441', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(56) - 1 + number) AS x, x, x, x, x, x, x, x FROM numbers(2049);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5442', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(63) + number * intExp2(62)) AS x, x, x, x, x, x, x, x FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5443', () => {
    const query = `INSERT INTO t64 SELECT toInt32(number)-1 AS x, x, x, x, x, x, x, x FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5444', () => {
    const query = `INSERT INTO t64 SELECT toInt32(number)-1 AS x, x, x, x, x, x, x, x FROM numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5445', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(8) - 10 + number) AS x, x, x, x, x, x, x, x FROM numbers(20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5446', () => {
    const query = `INSERT INTO t64 SELECT (10 - toInt64(intExp2(16)) + number) AS x, x, x, x, x, x, x, x FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5447', () => {
    const query = `INSERT INTO t64 SELECT (10 - toInt64(intExp2(16)) + number) AS x, x, x, x, x, x, x, x FROM numbers(11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5448', () => {
    const query = `INSERT INTO t64 SELECT (64 - toInt64(intExp2(16)) + number) AS x, x, x, x, x, x, x, x FROM numbers(64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5449', () => {
    const query = `INSERT INTO t64 SELECT (64 - toInt64(intExp2(16)) + number) AS x, x, x, x, x, x, x, x FROM numbers(65);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5450', () => {
    const query = `INSERT INTO t64 SELECT (1 - toInt64(intExp2(16)) + number) AS x, x, x, x, x, x, x, x FROM numbers(65);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5451', () => {
    const query = `INSERT INTO t64 SELECT (10 - toInt64(intExp2(24)) + number) AS x, x, x, x, x, x, x, x FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5452', () => {
    const query = `INSERT INTO t64 SELECT (10 - toInt64(intExp2(24)) + number) AS x, x, x, x, x, x, x, x FROM numbers(11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5453', () => {
    const query = `INSERT INTO t64 SELECT (64 - toInt64(intExp2(24)) + number) AS x, x, x, x, x, x, x, x FROM numbers(128);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5454', () => {
    const query = `INSERT INTO t64 SELECT (64 - toInt64(intExp2(24)) + number) AS x, x, x, x, x, x, x, x FROM numbers(129);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5455', () => {
    const query = `INSERT INTO t64 SELECT (1 - toInt64(intExp2(24)) + number) AS x, x, x, x, x, x, x, x FROM numbers(129);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5456', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(32) - 2 + number) AS x, x, x, x, x, x, x, x FROM numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5457', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(32) - 2 + number) AS x, x, x, x, x, x, x, x FROM numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5458', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(32) - 64 + number) AS x, x, x, x, x, x, x, x FROM numbers(64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5459', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(32) - 64 + number) AS x, x, x, x, x, x, x, x FROM numbers(65);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5460', () => {
    const query = `INSERT INTO t64 SELECT (intExp2(32) - 1 + number) AS x, x, x, x, x, x, x, x FROM numbers(65);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5461', () => {
    const query = `INSERT INTO t64 SELECT (10 - toInt64(intExp2(32)) + number) AS x, x, x, x, x, x, x, x FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5462', () => {
    const query = `INSERT INTO t64 SELECT (10 - toInt64(intExp2(32)) + number) AS x, x, x, x, x, x, x, x FROM numbers(11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5463', () => {
    const query = `INSERT INTO t64 SELECT (64 - toInt64(intExp2(32)) + number) AS x, x, x, x, x, x, x, x FROM numbers(64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5464', () => {
    const query = `INSERT INTO t64 SELECT (64 - toInt64(intExp2(32)) + number) AS x, x, x, x, x, x, x, x FROM numbers(65);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5465', () => {
    const query = `INSERT INTO t64 SELECT (1 - toInt64(intExp2(32)) + number) AS x, x, x, x, x, x, x, x FROM numbers(65);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5466', () => {
    const query = `INSERT INTO t64 SELECT (10 - toInt64(intExp2(40)) + number) AS x, x, x, x, x, x, x, x FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5467', () => {
    const query = `INSERT INTO t64 SELECT (10 - toInt64(intExp2(40)) + number) AS x, x, x, x, x, x, x, x FROM numbers(20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5468', () => {
    const query = `INSERT INTO t64 SELECT (64 - toInt64(intExp2(40)) + number) AS x, x, x, x, x, x, x, x FROM numbers(512);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5469', () => {
    const query = `INSERT INTO t64 SELECT (64 - toInt64(intExp2(40)) + number) AS x, x, x, x, x, x, x, x FROM numbers(513);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5470', () => {
    const query = `INSERT INTO t64 SELECT (1 - toInt64(intExp2(40)) + number) AS x, x, x, x, x, x, x, x FROM numbers(513);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5471', () => {
    const query = `INSERT INTO t64 SELECT (10 - toInt64(intExp2(48)) + number) AS x, x, x, x, x, x, x, x FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5472', () => {
    const query = `INSERT INTO t64 SELECT (10 - toInt64(intExp2(48)) + number) AS x, x, x, x, x, x, x, x FROM numbers(20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5473', () => {
    const query = `INSERT INTO t64 SELECT (64 - toInt64(intExp2(48)) + number) AS x, x, x, x, x, x, x, x FROM numbers(1024);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5474', () => {
    const query = `INSERT INTO t64 SELECT (64 - toInt64(intExp2(48)) + number) AS x, x, x, x, x, x, x, x FROM numbers(1025);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5475', () => {
    const query = `INSERT INTO t64 SELECT (1 - toInt64(intExp2(48)) + number) AS x, x, x, x, x, x, x, x FROM numbers(1025);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5476', () => {
    const query = `INSERT INTO t64 SELECT (10 - toInt64(intExp2(56)) + number) AS x, x, x, x, x, x, x, x FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5477', () => {
    const query = `INSERT INTO t64 SELECT (10 - toInt64(intExp2(56)) + number) AS x, x, x, x, x, x, x, x FROM numbers(20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5478', () => {
    const query = `INSERT INTO t64 SELECT (64 - toInt64(intExp2(56)) + number) AS x, x, x, x, x, x, x, x FROM numbers(2048);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5479', () => {
    const query = `INSERT INTO t64 SELECT (64 - toInt64(intExp2(56)) + number) AS x, x, x, x, x, x, x, x FROM numbers(2049);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5480', () => {
    const query = `INSERT INTO t64 SELECT (1 - toInt64(intExp2(56)) + number) AS x, x, x, x, x, x, x, x FROM numbers(2049);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5481', () => {
    const query = `insert into test1_00863 (id, code) select number, toString(number) FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5482', () => {
    const query = `insert into test3_00863 (id, code) select number, toString(number) FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5483', () => {
    const query = `insert into test2_00863 (id, code, test1_id, test3_id) select number, toString(number), number, number FROM numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5484', () => {
    const query = `INSERT INTO temp VALUES (32, 32), (64, 64), (128, 128), (256, 256);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5485', () => {
    const query = `INSERT INTO test_00861 FORMAT CSV "1","1","1","1" INSERT INTO test_00861 FORMAT CSV "2","-1","-1","-1"
INSERT INTO test_00861 FORMAT CSV "3","1.0","1.0","1.0"
INSERT INTO test_00861 FORMAT CSV "4","-0.1","-0.1","-0.1"
INSERT INTO test_00861 FORMAT CSV "5","0.010","0.010","0.010"
SELECT * FROM test_00861 ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5486', () => {
    const query = `INSERT INTO appointment_events (_appointment_id, _set_at, _status) values (1, 1, 'Created'), (2, 2, 'Created');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5487', () => {
    const query = `insert into fooL select number, 'L'  || toString(number) from numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5488', () => {
    const query = `insert into fooL select number, 'LL' || toString(number) from numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5489', () => {
    const query = `insert into fooR select number, 'R'  || toString(number) from numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5490', () => {
    const query = `insert into shard1 (id) values (0), (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5491', () => {
    const query = `insert into shard2 (id) values (1), (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5492', () => {
    const query = `INSERT INTO local_table VALUES(1, 'One', now(), 100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5493', () => {
    const query = `INSERT INTO local_table VALUES(2, 'Two', now(), 200);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5494', () => {
    const query = `INSERT INTO other_table VALUES(100, 'One Hundred', now(), 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5495', () => {
    const query = `INSERT INTO other_table VALUES(200, 'Two Hundred', now(), 2000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5496', () => {
    const query = `INSERT INTO f VALUES ([1, 2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5497', () => {
    const query = `INSERT INTO d VALUES (2, 'a2'), (3, 'a3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5498', () => {
    const query = `INSERT INTO table_a VALUES (1, 'foo', 'foo'), (2, 'foo', 'foo'), (3, 'bar', 'bar');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5499', () => {
    const query = `INSERT INTO table_b VALUES (1, 'bar', 'bar'), (2, 'bar', 'bar'), (3, 'test', 'test'), (4, NULL, '');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5500', () => {
    const query = `insert into table1 values ('1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5501', () => {
    const query = `INSERT INTO t_local VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5502', () => {
    const query = `INSERT INTO t1 values (1,1), (2,2), (3,3), (4,4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5503', () => {
    const query = `INSERT INTO t2 values (1,1), (1, Null);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5504', () => {
    const query = `INSERT INTO t3 values (1,1), (1, Null);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5505', () => {
    const query = `INSERT INTO t4 values (1,1), (1, Null);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5506', () => {
    const query = `insert into t1_00848 values ('l');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5507', () => {
    const query = `insert into t3_00848 (id) values ('r');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5508', () => {
    const query = `INSERT INTO table1 SELECT number, number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5509', () => {
    const query = `INSERT INTO table2 SELECT number * 2, number * 20 FROM numbers(6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5510', () => {
    const query = `insert into t1_00844 values(1,'1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5511', () => {
    const query = `insert into t2_00844 values('1','name1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5512', () => {
    const query = `INSERT INTO test1_00843 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5513', () => {
    const query = `INSERT INTO t1_00841 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5514', () => {
    const query = `INSERT INTO file VALUES ('hello', 1), ('world', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5515', () => {
    const query = `INSERT INTO minmax_idx VALUES (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5516', () => {
    const query = `INSERT INTO minmax_idx VALUES (1, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5517', () => {
    const query = `INSERT INTO minmax_idx_r VALUES (3, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5518', () => {
    const query = `INSERT INTO minmax_idx VALUES (1, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5519', () => {
    const query = `INSERT INTO minmax_idx_r VALUES (65, 75);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5520', () => {
    const query = `INSERT INTO minmax_idx VALUES (19, 9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5521', () => {
    const query = `INSERT INTO minmax_idx2 VALUES (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5522', () => {
    const query = `INSERT INTO minmax_idx2_r VALUES (1, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5523', () => {
    const query = `INSERT INTO kv VALUES (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5524', () => {
    const query = `INSERT INTO kv VALUES (1, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5525', () => {
    const query = `INSERT INTO kv_overwrite VALUES (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5526', () => {
    const query = `INSERT INTO kv_overwrite VALUES (1, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5527', () => {
    const query = `INSERT INTO t2 VALUES (1, 2), (1, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5528', () => {
    const query = `INSERT INTO bitmap_test SELECT '2019-01-01', 1, number FROM numbers(1,50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5529', () => {
    const query = `INSERT INTO bitmap_test SELECT '2019-01-02', 1, number FROM numbers(11,60);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5530', () => {
    const query = `INSERT INTO bitmap_test SELECT '2019-01-03', 2, number FROM numbers(1,10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5531', () => {
    const query = `INSERT INTO bitmap_state_test SELECT pickup_date,
city_id,
groupBitmapState(uid) AS uv
FROM bitmap_test
GROUP BY pickup_date, city_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5532', () => {
    const query = `INSERT INTO bitmap_column_expr_test VALUES (now(), bitmapBuild(cast([3,19,47] as Array(UInt32))));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5533', () => {
    const query = `INSERT INTO bitmap_column_expr_test2 VALUES ('tag1', bitmapBuild(cast([1,2,3,4,5,6,7,8,9,10] as Array(UInt32))));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5534', () => {
    const query = `INSERT INTO bitmap_column_expr_test2 VALUES ('tag2', bitmapBuild(cast([6,7,8,9,10,11,12,13,14,15] as Array(UInt32))));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5535', () => {
    const query = `INSERT INTO bitmap_column_expr_test2 VALUES ('tag3', bitmapBuild(cast([2,4,6,8,10,12] as Array(UInt32))));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5536', () => {
    const query = `INSERT INTO bitmap_column_expr_test3(tag_id, z, replace.from, replace.to) SELECT 'tag1', groupBitmapState(toUInt64(number)), cast([] as Array(UInt16)), cast([] as Array(UInt64)) FROM numbers10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5537', () => {
    const query = `INSERT INTO bitmap_column_expr_test3(tag_id, z, replace.from, replace.to) SELECT 'tag2', groupBitmapState(toUInt64(number)), cast([0] as Array(UInt16)), cast([2] as Array(UInt64)) FROM numbers10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5538', () => {
    const query = `INSERT INTO bitmap_column_expr_test3(tag_id, z, replace.from, replace.to) SELECT 'tag3', groupBitmapState(toUInt64(number)), cast([0,7] as Array(UInt16)), cast([3,101] as Array(UInt64)) FROM numbers10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5539', () => {
    const query = `INSERT INTO bitmap_column_expr_test3(tag_id, z, replace.from, replace.to) SELECT 'tag4', groupBitmapState(toUInt64(number)), cast([5,999,2] as Array(UInt16)), cast([2,888,20] as Array(UInt64)) FROM numbers10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5540', () => {
    const query = `INSERT INTO bitmap_test SELECT '2019-01-01', 1, 4294967295 + number FROM numbers(1,100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5541', () => {
    const query = `INSERT INTO bitmap_test SELECT '2019-01-02', 1, 4294967295 + number FROM numbers(90,110);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5542', () => {
    const query = `INSERT INTO bitmap_test SELECT '2019-01-03', 2, 4294967295 + number FROM numbers(1,210);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5543', () => {
    const query = `INSERT INTO bitmap_state_test SELECT pickup_date,
city_id,
groupBitmapState(uid) AS uv
FROM bitmap_test
GROUP BY pickup_date, city_id
ORDER BY pickup_date, city_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5544', () => {
    const query = `INSERT INTO t1_00826 values (1,1), (2,2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5545', () => {
    const query = `INSERT INTO t2_00826 values (1,1), (1,2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5546', () => {
    const query = `INSERT INTO t2_00826 (a) values (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5547', () => {
    const query = `INSERT INTO sequence SELECT 1, number = 0 ? 'A' : (number < 1000000 ? 'B' : 'C'), number FROM numbers(1000001);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5548', () => {
    const query = `INSERT INTO sequence SELECT 1, 'D', 1e14;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5549', () => {
    const query = `INSERT INTO table1 SELECT number FROM numbers(21);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5550', () => {
    const query = `INSERT INTO table2 SELECT number * 2, number * 20 FROM numbers(11);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5551', () => {
    const query = `INSERT INTO table3 SELECT number * 30, number * 300 FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5552', () => {
    const query = `INSERT INTO table5 SELECT number * 5, number * 50, number * 500 FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5553', () => {
    const query = `INSERT INTO table_set VALUES (0), (1), (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5554', () => {
    const query = `insert into t_00818 values(1,1,'a'), (2,2,'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5555', () => {
    const query = `insert into s_00818 values(1,1,'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5556', () => {
    const query = `INSERT INTO test_00818 (field, not_field) VALUES ('123', '456');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5557', () => {
    const query = `INSERT INTO t1_00816 VALUES (1, 123);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5558', () => {
    const query = `INSERT INTO t2_00816 VALUES (1, 456);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5559', () => {
    const query = `INSERT INTO fact_cpc_clicks VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5560', () => {
    const query = `INSERT INTO dim_model VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5561', () => {
    const query = `INSERT INTO compression_codec VALUES(1, 'hello', toDate('2018-12-14'), toDate32('2018-12-14'), 1.1, 'aaa', 5, [1,2,3], map('k1',1,'k2',2), tuple(1,2));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5562', () => {
    const query = `INSERT INTO compression_codec VALUES(2, 'world', toDate('2018-12-15'), toDate32('2018-12-15'), 2.2, 'bbb', 6, [4,5,6], map('k3',3,'k4',4), tuple(3,4));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5563', () => {
    const query = `INSERT INTO compression_codec VALUES(3, '!', toDate('2018-12-16'), toDate32('2018-12-16'), 3.3, 'ccc', 7, [7,8,9], map('k5',5,'k6',6), tuple(5,6));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5564', () => {
    const query = `INSERT INTO compression_codec VALUES(2, '', toDate('2018-12-13'), toDate32('2018-12-13'), 4.4, 'ddd', 8, [10,11,12], map('k7',7,'k8',8), tuple(7,8));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5565', () => {
    const query = `INSERT INTO compression_codec SELECT 3, '!', toDate('2018-12-16'), toDate32('2018-12-16'), 3.3, 'ccc', 7, [7,8,9], map('k5',5,'k6',6), tuple(5,6) FROM system.numbers LIMIT 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5566', () => {
    const query = `INSERT INTO delta_codec_synthetic SELECT number FROM system.numbers LIMIT 5000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5567', () => {
    const query = `INSERT INTO default_codec_synthetic SELECT number FROM system.numbers LIMIT 5000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5568', () => {
    const query = `INSERT INTO delta_codec_float SELECT number FROM numbers(1547510400, 500000) WHERE number % 3 == 0 OR number % 5 == 0 OR number % 7 == 0 OR number % 11 == 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5569', () => {
    const query = `INSERT INTO default_codec_float SELECT * from delta_codec_float;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5570', () => {
    const query = `INSERT INTO delta_codec_string SELECT concat(toString(number), toString(number % 100)) FROM numbers(1547510400, 500000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5571', () => {
    const query = `INSERT INTO default_codec_string SELECT * from delta_codec_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5572', () => {
    const query = `INSERT INTO compression_codec_log VALUES(1, 'hello', toDate('2018-12-14'), 1.1, 'aaa', 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5573', () => {
    const query = `INSERT INTO compression_codec_log VALUES(2, 'world', toDate('2018-12-15'), 2.2, 'bbb', 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5574', () => {
    const query = `INSERT INTO compression_codec_log VALUES(3, '!', toDate('2018-12-16'), 3.3, 'ccc', 7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5575', () => {
    const query = `INSERT INTO compression_codec_log VALUES(2, '', toDate('2018-12-13'), 4.4, 'ddd', 8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5576', () => {
    const query = `INSERT INTO compression_codec_multiple_log VALUES (1, 'world', toDate('2018-10-05'), 1.1), (2, 'hello', toDate('2018-10-01'), 2.2), (3, 'buy', toDate('2018-10-11'), 3.3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5577', () => {
    const query = `INSERT INTO compression_codec_multiple_log select modulo(number, 100), toString(number), toDate('2018-12-01'), 5.5 * number FROM system.numbers limit 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5578', () => {
    const query = `INSERT INTO compression_codec_tiny_log VALUES(1, 'hello', toDate('2018-12-14'), 1.1, 'aaa', 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5579', () => {
    const query = `INSERT INTO compression_codec_tiny_log VALUES(2, 'world', toDate('2018-12-15'), 2.2, 'bbb', 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5580', () => {
    const query = `INSERT INTO compression_codec_tiny_log VALUES(3, '!', toDate('2018-12-16'), 3.3, 'ccc', 7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5581', () => {
    const query = `INSERT INTO compression_codec_tiny_log VALUES(2, '', toDate('2018-12-13'), 4.4, 'ddd', 8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5582', () => {
    const query = `INSERT INTO compression_codec_multiple_tiny_log VALUES (1, 'world', toDate('2018-10-05'), 1.1), (2, 'hello', toDate('2018-10-01'), 2.2), (3, 'buy', toDate('2018-10-11'), 3.3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5583', () => {
    const query = `INSERT INTO compression_codec_multiple_tiny_log select modulo(number, 100), toString(number), toDate('2018-12-01'), 5.5 * number FROM system.numbers limit 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5584', () => {
    const query = `INSERT INTO compression_codec VALUES(1, 'hello', toDate('2018-12-14'), 1.1, 'aaa', 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5585', () => {
    const query = `INSERT INTO compression_codec VALUES(2, 'world', toDate('2018-12-15'), 2.2, 'bbb', 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5586', () => {
    const query = `INSERT INTO compression_codec VALUES(3, '!', toDate('2018-12-16'), 3.3, 'ccc', 7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5587', () => {
    const query = `INSERT INTO compression_codec VALUES(2, '', toDate('2018-12-13'), 4.4, 'ddd', 8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5588', () => {
    const query = `INSERT INTO compression_codec_multiple VALUES (1, 'world', toDate('2018-10-05'), 1.1), (2, 'hello', toDate('2018-10-01'), 2.2), (3, 'buy', toDate('2018-10-11'), 3.3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5589', () => {
    const query = `INSERT INTO compression_codec_multiple select modulo(number, 100), toString(number), toDate('2018-12-01'), 5.5 * number FROM system.numbers limit 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5590', () => {
    const query = `INSERT INTO compression_codec_multiple_more_types VALUES(1.5555555555555, 'hello world!', [77], ['John']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5591', () => {
    const query = `INSERT INTO compression_codec_multiple_more_types VALUES(7.1, 'xxxxxxxxxxxx', [127], ['Henry']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5592', () => {
    const query = `INSERT INTO compression_codec_multiple_with_key VALUES(toDate('2018-10-12'), 100000, 'hello'), (toDate('2018-10-12'), 100002, 'world'), (toDate('2018-10-12'), 1111, '!');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5593', () => {
    const query = `INSERT INTO compression_codec_multiple_with_key SELECT toDate('2018-10-12'), number, toString(number) FROM system.numbers LIMIT 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5594', () => {
    const query = `INSERT INTO compression_codec_multiple_with_key VALUES(toDate('2018-10-13'), 100001, 'hello1'), (toDate('2018-10-14'), 100003, 'world1'), (toDate('2018-10-15'), 2222, '!ZSTD');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5595', () => {
    const query = `INSERT INTO alter_compression_codec VALUES('2018-01-01', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5596', () => {
    const query = `INSERT INTO alter_compression_codec VALUES('2018-01-01', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5597', () => {
    const query = `INSERT INTO alter_compression_codec VALUES('2018-01-01', 3, '3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5598', () => {
    const query = `INSERT INTO alter_compression_codec VALUES('2018-01-01', 4, '4');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5599', () => {
    const query = `INSERT INTO alter_compression_codec VALUES('2018-01-01', 5, '5');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5600', () => {
    const query = `INSERT INTO alter_compression_codec VALUES('2018-01-01', 6, '6');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5601', () => {
    const query = `INSERT INTO alter_compression_codec VALUES('2018-01-01', 7, '7');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5602', () => {
    const query = `INSERT INTO alter_compression_codec VALUES('2018-01-01', 8, '8');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5603', () => {
    const query = `INSERT INTO large_alter_table_00804 SELECT toDate('2019-01-01'), number, toString(number + rand()) FROM system.numbers LIMIT 300000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5604', () => {
    const query = `INSERT INTO store_of_hash_00804 SELECT sum(cityHash64(*)) FROM large_alter_table_00804;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5605', () => {
    const query = `INSERT INTO datetime_table VALUES ('2016-01-01 00:00:00','name1',2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5606', () => {
    const query = `INSERT INTO datetime_table VALUES ('2016-01-02 00:00:00','name2',2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5607', () => {
    const query = `INSERT INTO datetime_table VALUES ('2016-01-03 00:00:00','name1',4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5608', () => {
    const query = `INSERT INTO datetime_table VALUES ('2016-01-01 02:00:00','name1',3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5609', () => {
    const query = `INSERT INTO datetime_table VALUES ('2016-01-02 01:00:00','name2',2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5610', () => {
    const query = `INSERT INTO datetime_table VALUES ('2016-01-02 23:00:00','name2',5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5611', () => {
    const query = `INSERT INTO datetime_table VALUES ('2016-01-03 04:00:00','name1',4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5612', () => {
    const query = `INSERT INTO datetime_table VALUES (1451606400,'name1',2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5613', () => {
    const query = `INSERT INTO datetime_table VALUES (1451613600,'name1',3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5614', () => {
    const query = `INSERT INTO datetime_table VALUES (1451696400,'name2',2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5615', () => {
    const query = `INSERT INTO datetime_table VALUES (1451775600,'name2',5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5616', () => {
    const query = `INSERT INTO datetime_table VALUES (1451793600,'name1',4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5617', () => {
    const query = `INSERT INTO join_any_inner VALUES ('abc', [0], 1), ('def', [1, 2], 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5618', () => {
    const query = `INSERT INTO join_any_left VALUES ('abc', [0], 1), ('def', [1, 2], 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5619', () => {
    const query = `INSERT INTO join_all_inner VALUES ('abc', [0], 1), ('def', [1, 2], 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5620', () => {
    const query = `INSERT INTO join_all_left VALUES ('abc', [0], 1), ('def', [1, 2], 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5621', () => {
    const query = `INSERT INTO join_any_left_null VALUES ('abc', 1), ('def', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5622', () => {
    const query = `INSERT INTO join_string_key VALUES ('abc', [0], 1), ('def', [1, 2], 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5623', () => {
    const query = `insert into lc_00800_1 values ([]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5624', () => {
    const query = `insert into lc_00800_1 select emptyArrayString();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5625', () => {
    const query = `INSERT INTO low_cardinality_all (d,x,s) VALUES ('2018-11-12',1,'123');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5626', () => {
    const query = `insert into lc_00800_2 select number % 123 from system.numbers limit 100000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5627', () => {
    const query = `insert into table1 (dt, id, arr) values ('2019-01-14', 1, ['aaa']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5628', () => {
    const query = `insert into table2 (dt, id, arr) values ('2019-01-14', 1, ['aaa','bbb','ccc']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5629', () => {
    const query = `INSERT INTO bm VALUES (0.3,'2018-11-19 13:00:00'), (0.3,'2018-11-19 13:05:00'), (0.4,'2018-11-19 13:10:00'), (0.5,'2018-11-19 13:15:00'), (0.6,'2018-11-19 13:20:00'), (0.7,'2018-11-19 13:25:00'), (0.8,'2018-11-19 13:30:00'), (0.9,'2018-11-19 13:45:00'), (0.5,'2018-11-19 13:50:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5630', () => {
    const query = `INSERT INTO source_table (date, datetime, zoneId) VALUES ('2018-12-10', '2018-12-10 23:59:59', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5631', () => {
    const query = `INSERT INTO defaults FORMAT JSONEachRow {"x":1, "y":1};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5632', () => {
    const query = `INSERT INTO defaults (x, y) SELECT x, y FROM defaults LIMIT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5633', () => {
    const query = `INSERT INTO defaults FORMAT JSONEachRow {"x":2, "y":2, "c":2};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5634', () => {
    const query = `INSERT INTO defaults FORMAT JSONEachRow {"x":3, "y":3, "a":3, "b":3, "c":3};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5635', () => {
    const query = `INSERT INTO defaults FORMAT JSONEachRow {"x":4} {"y":5, "c":5} {"a":6, "b":6, "c":6};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5636', () => {
    const query = `INSERT INTO defaults FORMAT JSONEachRow {"x":7, "y":7, "n.a":[1,2], "n.b":["a","b"]};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5637', () => {
    const query = `INSERT INTO defaults FORMAT JSONEachRow {"x":8, "y":8, "n.a":[3,4], "n.b":["c","d"]};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5638', () => {
    const query = `INSERT INTO defaults FORMAT JSONEachRow {"x":9, "y":9};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5639', () => {
    const query = `INSERT INTO auto_assign_enum VALUES('a'), ('b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5640', () => {
    const query = `INSERT INTO auto_assign_enum1 VALUES('a'), ('b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5641', () => {
    const query = `INSERT INTO auto_assign_enum2 VALUES('7F');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5642', () => {
    const query = `INSERT INTO size_hint SELECT arrayMap(x -> 'Hello', range(1000)) FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5643', () => {
    const query = `INSERT INTO summing_r1(x, y, z, val) values (1, 2, 0, 10), (1, 2, 1, 30), (1, 2, 2, 40);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5644', () => {
    const query = `INSERT INTO summing_r1(x, y, z, val) values (1, 2, 0, 20), (1, 2, 2, 50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5645', () => {
    const query = `INSERT INTO summing(x, y, z, val) values (1, 2, 0, 10), (1, 2, 1, 30), (1, 2, 2, 40);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5646', () => {
    const query = `INSERT INTO summing(x, y, z, val) values (1, 2, 0, 20), (1, 2, 2, 50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5647', () => {
    const query = `INSERT INTO alter_column (x, y) SELECT number AS x, -number AS y FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5648', () => {
    const query = `INSERT INTO check_system_tables VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5649', () => {
    const query = `INSERT INTO check_system_tables SELECT * FROM numbers_mt(50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5650', () => {
    const query = `INSERT INTO check_system_tables SELECT * FROM numbers_mt(101); -- direct block write (due to min_rows exceeded) SELECT lifetime_bytes, lifetime_rows FROM system.tables WHERE name = 'check_system_tables' AND database = currentDatabase();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5651', () => {
    const query = `INSERT INTO check_system_tables SELECT number+50 FROM numbers(50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5652', () => {
    const query = `INSERT INTO datetime(d) VALUES(toDateTime('2016-06-15 23:00:00', 'UTC'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5653', () => {
    const query = `INSERT INTO check_system_tables SELECT * FROM numbers(1) SETTINGS prefer_localhost_replica=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5654', () => {
    const query = `INSERT INTO buffer_00753 VALUES (1, 100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5655', () => {
    const query = `INSERT INTO buffer_00753 VALUES (2, 200);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5656', () => {
    const query = `INSERT INTO buffer_00753 VALUES (3, 300);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5657', () => {
    const query = `INSERT INTO buffer_00753 VALUES (4, 400);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5658', () => {
    const query = `INSERT INTO detach_all_no_partition VALUES (1, 1), (2, 1), (3, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5659', () => {
    const query = `INSERT INTO replicated_table_detach_all1 VALUES (1, '1'), (2, '2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5660', () => {
    const query = `INSERT INTO partition_all VALUES (4, 1, 2), (5, 1, 3), (3, 1, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5661', () => {
    const query = `INSERT INTO partition_all2 VALUES (4, 1, 2), (5, 1, 3), (3, 1, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5662', () => {
    const query = `INSERT INTO partition_attach_all VALUES (1, 1), (2, 2), (3, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5663', () => {
    const query = `INSERT INTO replicated_partition_attach_all VALUES (1, 1), (2, 2), (3, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5664', () => {
    const query = `insert into lc_perm values (1, 'w'), (10, 'x'), (3, 'y'), (8, 'z'), (4, 'w'), (6, 'y'), (11, 'x'), (0, 'z'), (12, 'a'), (13, 'b'), (14, 'c'), (15, 'd'), (16, 'e'), (17, 'f'), (18, 'g'), (19, 'h');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5665', () => {
    const query = `insert into radacct values (1, 'a', 'b', 'c', 'd', 'e', 2, 'a', 'b', 'c', 'd', 'e', 'f', 3, 4, 5, 6, 7, 'a', 'Stop', 'c', 'd', 'e', 'f', 'g', 'h', '2018-10-10 15:54:21', '2018-10-10 15:54:21', 8, 'a', 9, 10, 'a', 'b', '2018-10-10 15:54:21', 'a', 'b', 11, 12, '2018-10-10', 'a', 'b', 'c', 'd', 'e');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5666', () => {
    const query = `insert into lc_00752 values ('a'), ('bbb'), ('ab'), ('accccc'), ('baasddas'), ('bcde');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5667', () => {
    const query = `insert into lc_left_aj values (['a', 'b'], ['c', Null], [1, 2.0], [3., Null]), ([], ['c', Null], [1, 2.0], [3., Null]), (['a', 'b'], [], [1, 2.0], [3., Null]), (['a', 'b'], ['c', Null], [], [3., Null]), (['a', 'b'], ['c', Null], [1, 2.0], []);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5668', () => {
    const query = `insert into lc_lambda select range(number) from system.numbers limit 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5669', () => {
    const query = `insert into test_array values (['a']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5670', () => {
    const query = `INSERT INTO low_null_float (a) SELECT if(number % 3 == 0, Null, number)  FROM system.numbers LIMIT 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5671', () => {
    const query = `INSERT INTO u_00751 VALUES ('b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5672', () => {
    const query = `INSERT INTO v_00751 VALUES ('b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5673', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.t_00751 VALUES ('2000-01-01', 'a', 'a') ('2000-01-02', 'b', 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5674', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.u_00751 VALUES ('a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5675', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.v_00751 VALUES ('a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5676', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.t_00751 VALUES ('2000-01-03', 'a', 'a') ('2000-01-04', 'b', 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5677', () => {
    const query = `INSERT INTO sample_merge_tree VALUES (toDateTime('2018-10-31 05:05:00'), 0), (toDateTime('2018-10-31 06:06:00'), 10), (toDateTime('2018-10-28 10:00:00'), 20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5678', () => {
    const query = `INSERT INTO left_table VALUES(1, 'somestr');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5679', () => {
    const query = `INSERT INTO right_table VALUES(1, 'hello'), (2, 'WORLD');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5680', () => {
    const query = `INSERT INTO arraytest (created_at, strings) VALUES (now(), ['aaaaa', 'bbbbb', 'ccccc']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5681', () => {
    const query = `INSERT INTO arraytest (created_at, strings) VALUES (now(), ['aaaaa', 'bbbbb', null]); -- { clientError CANNOT_INSERT_NULL_IN_ORDINARY_COLUMN } SELECT strings from arraytest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5682', () => {
    const query = `INSERT INTO time_table VALUES (now() - 5, 5), (now() - 3, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5683', () => {
    const query = `INSERT INTO time_table VALUES (now(), 101);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5684', () => {
    const query = `INSERT INTO dt VALUES (300000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5685', () => {
    const query = `INSERT INTO testx VALUES (100000, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5686', () => {
    const query = `INSERT INTO dt VALUES (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5687', () => {
    const query = `INSERT INTO test_00744 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5688', () => {
    const query = `INSERT INTO commententry1 VALUES ('2016-01-01', 'xyz', 'cpp');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5689', () => {
    const query = `insert into wups (a) values(['foo']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5690', () => {
    const query = `insert into wups (a) values([]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5691', () => {
    const query = `INSERT INTO sites VALUES (1,[1],[[]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5692', () => {
    const query = `INSERT INTO sites VALUES (2,[1],[['2018-06-22']]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5693', () => {
    const query = `INSERT INTO decimal VALUES (1,1,1), (1,1,2), (1,1,3), (1,1,4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5694', () => {
    const query = `insert into bug values(1,21),(1,22),(1,23),(2,21),(2,22),(2,23),(3,21),(3,22),(3,23);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5695', () => {
    const query = `INSERT INTO or_expr_bug VALUES(1,21),(1,22),(1,23),(2,21),(2,22),(2,23),(3,21),(3,22),(3,23);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5696', () => {
    const query = `INSERT INTO quorum1 VALUES (3, '2018-11-15');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5697', () => {
    const query = `INSERT INTO quorum1 VALUES (4, '2018-11-15');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5698', () => {
    const query = `INSERT INTO quorum2 VALUES (4, toDate('2020-12-16')); -- { serverError UNKNOWN_STATUS_OF_INSERT } SELECT x FROM quorum1 ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5699', () => {
    const query = `INSERT INTO quorum2 VALUES (1, '2018-11-15'); -- { serverError UNKNOWN_STATUS_OF_INSERT } SELECT count(*) FROM quorum1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5700', () => {
    const query = `INSERT INTO quorum2 VALUES (4, toDate('2018-12-16')); -- { serverError UNKNOWN_STATUS_OF_INSERT } SELECT x FROM quorum1 ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5701', () => {
    const query = `INSERT INTO quorum1 VALUES (4, '1990-11-15');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5702', () => {
    const query = `INSERT INTO quorum1 VALUES (5, '1990-11-15');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5703', () => {
    const query = `INSERT INTO quorum1 VALUES (6, '2020-12-16');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5704', () => {
    const query = `INSERT INTO decimal_sum VALUES ('2001-01-01', 1, 1, -1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5705', () => {
    const query = `INSERT INTO decimal_sum VALUES ('2001-01-01', 1, -1, -1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5706', () => {
    const query = `INSERT INTO decimal_sum VALUES ('2001-01-01', -2, 1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5707', () => {
    const query = `INSERT INTO decimal_sum VALUES ('2001-01-01', 0, -1, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5708', () => {
    const query = `INSERT INTO unicode VALUES ('Hola', 'B!Este cC3digo es editable y ejecutable!');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5709', () => {
    const query = `INSERT INTO unicode VALUES ('Bonjour', 'Ce code est modifiable et exC)cutable !');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5710', () => {
    const query = `INSERT INTO unicode VALUES ('Ciao', 'Questo codice C( modificabile ed eseguibile!');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5711', () => {
    const query = `INSERT INTO unicode VALUES ('OlC!', 'Este cC3digo C) editC!vel e executC!vel!');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5712', () => {
    const query = `INSERT INTO unicode VALUES ('Hallo', 'Dieser Code kann bearbeitet und ausgefC<hrt werden!');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5713', () => {
    const query = `INSERT INTO unicode VALUES ('Hej', 'Den hC\$r koden kan redigeras och kC6ras!');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5714', () => {
    const query = `INSERT INTO unicode VALUES ('Ahoj', 'Tento kC3d mE/E>ete upravit a spustit');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5715', () => {
    const query = `INSERT INTO unicode VALUES ('Tabs \\t Tabs', 'Non-first \\t Tabs');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5716', () => {
    const query = `INSERT INTO unicode VALUES ('Control characters \\x1f\\x1f\\x1f\\x1f with zero width', 'Invalid UTF-8 which eats pending characters \\xf0, or invalid by itself \\x80 with zero width');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5717', () => {
    const query = `insert into t1_00729 (id,val,nid,eDate) values (1,['background','foreground','heading','image'],1,'2018-09-27');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5718', () => {
    const query = `insert into t1_00729 (id,val,nid,eDate) values (2,['background','foreground','heading','image'],1,'2018-09-27');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5719', () => {
    const query = `insert into t1_00729 (id,val,nid,eDate) values (2,[],2,'2018-09-27');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5720', () => {
    const query = `insert into t1_00729 (id,val,nid,eDate) values (3,[],4,'2018-09-27');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5721', () => {
    const query = `insert into t1_00729 (id,val,nid,eDate) values (3,[],5,'2018-09-27');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5722', () => {
    const query = `insert into t1_00729 (id,val,nid,eDate) values (3,[],6,'2018-09-27');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5723', () => {
    const query = `insert into t1_00729 (id,val,nid,eDate) values (3,[],7,'2018-09-27');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5724', () => {
    const query = `insert into t1_00729 (id,val,nid,eDate) values (3,[],8,'2018-09-27');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5725', () => {
    const query = `INSERT INTO concat_saf_test VALUES (42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5726', () => {
    const query = `INSERT INTO concat_saf_test SELECT max(number) FROM numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5727', () => {
    const query = `INSERT INTO concat_nested_test VALUES (['foo', 'bar'], ['qaz', 'qux']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5728', () => {
    const query = `INSERT INTO src_00726 VALUES (1), (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5729', () => {
    const query = `INSERT INTO src_00726 VALUES (3), (4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5730', () => {
    const query = `insert into t_00725_4 values(1,1,'a'),(2,2,'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5731', () => {
    const query = `insert into s_00725_4 values(1,1,'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5732', () => {
    const query = `insert into t_00725_3 values(1,1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5733', () => {
    const query = `insert into t_00725_3 values(2,2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5734', () => {
    const query = `insert into z_00725_3 values(1,1,1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5735', () => {
    const query = `insert into t_00725_2 values(1,1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5736', () => {
    const query = `insert into t_00725_2 values(2,2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5737', () => {
    const query = `insert into s_00725_2 values(1,1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5738', () => {
    const query = `INSERT INTO a1 VALUES (1, 1), (1, 2), (2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5739', () => {
    const query = `INSERT INTO a2 VALUES (1, 2), (1, 3), (1, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5740', () => {
    const query = `INSERT INTO ipv4_test (ipv4_) VALUES ('0.0.0.0'), ('255.255.255.255'), ('192.168.0.91'), ('127.0.0.1'), ('8.8.8.8');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5741', () => {
    const query = `INSERT INTO ipv6_test VALUES ('::'), ('0:0:0:0:0:0:0:0'), ('FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF'), ('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), ('0000:0000:0000:0000:0000:FFFF:C1FC:110A'), ('::ffff:127.0.0.1'), ('::ffff:8.8.8.8');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5742', () => {
    const query = `INSERT INTO test_00724 VALUES (toDateTime('2000-01-01 01:02:03'), toDate('2000-01-01'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5743', () => {
    const query = `INSERT INTO byte_identical_r1(x) VALUES (1), (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5744', () => {
    const query = `INSERT INTO cube VALUES ('a', 1, 10), ('a', 1, 15), ('a', 2, 20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5745', () => {
    const query = `INSERT INTO cube VALUES ('a', 2, 25), ('b', 1, 10), ('b', 1, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5746', () => {
    const query = `INSERT INTO cube VALUES ('b', 2, 20), ('b', 2, 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5747', () => {
    const query = `insert into tab_00718 values ('a', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5748', () => {
    const query = `INSERT INTO test_local_1 VALUES ('2018-08-01',100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5749', () => {
    const query = `INSERT INTO test_local_2 VALUES ('2018-08-01',200);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5750', () => {
    const query = `INSERT INTO test_s64_local VALUES ('2018-08-01', -1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5751', () => {
    const query = `INSERT INTO test_u64_local VALUES ('2018-08-01', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5752', () => {
    const query = `insert into tab_00717 values ('a_1', 'b_1'), ('a_2', 'b_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5753', () => {
    const query = `INSERT INTO dist_00717 (a) SELECT number FROM system.numbers LIMIT 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5754', () => {
    const query = `INSERT INTO default_join1 VALUES(1, 1), (2, 2), (3, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5755', () => {
    const query = `INSERT INTO default_join2 VALUES(3, 3), (4, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5756', () => {
    const query = `insert into rate_test values (0,1000),(1,1001),(2,1002),(3,1003),(4,1004),(5,1005),(6,1006),(7,1007),(8,1008);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5757', () => {
    const query = `insert into rate_test2(timestamp, event) values ('2018-01-01 01:01:01',1001),('2018-01-01 01:01:02',1002),('2018-01-01 01:01:03',1003),('2018-01-01 01:01:04',1004),('2018-01-01 01:01:05',1005),('2018-01-01 01:01:06',1006),('2018-01-01 01:01:07',1007),('2018-01-01 01:01:08',1008);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5758', () => {
    const query = `INSERT INTO uuid VALUES ('2018-01-01 01:02:03', '00000000-0000-05f8-9cb8-cb1b82fb3900', '00000000-0000-06f8-9cb8-cb1b82fb3900');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5759', () => {
    const query = `INSERT INTO collapsing VALUES ('k1', 'k1v1', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5760', () => {
    const query = `INSERT INTO collapsing VALUES ('k1', 'k1v1', -1), ('k1', 'k1v2', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5761', () => {
    const query = `INSERT INTO collapsing VALUES ('k2', 'k2v1', 1), ('k2', 'k2v1', -1), ('k3', 'k3v1', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5762', () => {
    const query = `INSERT INTO collapsing VALUES ('k4', 'k4v1', -1), ('k4', 'k4v2', 1), ('k4', 'k4v2', -1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5763', () => {
    const query = `insert into t_00712_2 values ('2018-01-01', 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5764', () => {
    const query = `insert into tab_00712_2 values (1, 2), (1, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5765', () => {
    const query = `insert into t_00712_1 values (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5766', () => {
    const query = `INSERT INTO mergetree_00712 VALUES (1, 'Hello, world!');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5767', () => {
    const query = `INSERT INTO mergetree_00712 VALUES (2, 'Goodbye.', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5768', () => {
    const query = `insert into trepl values ('2018-09-19', 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5769', () => {
    const query = `insert into versioned_collapsing values ('2018-09-19', 123, 1, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5770', () => {
    const query = `insert into prewhere_alias values(1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5771', () => {
    const query = `insert into tab_00712_1 values (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5772', () => {
    const query = `insert into prewhere_alias values (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5773', () => {
    const query = `INSERT INTO partition_id VALUES (100, 1), (200, 2), (300, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5774', () => {
    const query = `INSERT INTO test_00707 FORMAT CSV 123.456,789.012,345678,Hello SET format_csv_delimiter = ';';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5775', () => {
    const query = `INSERT INTO test_00707 FORMAT CSV 123.456;789.012;345678;Hello SET format_csv_delimiter = ':';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5776', () => {
    const query = `INSERT INTO test_00707 FORMAT CSV 123.456:789.012:345678:Hello SET format_csv_delimiter = '|';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5777', () => {
    const query = `INSERT INTO test_00707 FORMAT CSV 123.456|789.012|345678|Hello SELECT * FROM test_00707;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5778', () => {
    const query = `INSERT INTO add_aggregate VALUES(1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5779', () => {
    const query = `INSERT INTO add_aggregate VALUES(3, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5780', () => {
    const query = `INSERT INTO test VALUES ([1, -3, 0, 1], [1.0, 0.4, -0.1], [1, 3, 1]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5781', () => {
    const query = `insert into tab1_copy values (2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5782', () => {
    const query = `INSERT INTO where_qualified VALUES(1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5783', () => {
    const query = `INSERT INTO where_qualified VALUES(2, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5784', () => {
    const query = `insert into X (id, x_name) values (1, 'A'), (2, 'B'), (2, 'C'), (3, 'D'), (4, 'E'), (4, 'F'), (5, 'G'), (8, 'H'), (9, 'I');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5785', () => {
    const query = `insert into Y (id, y_name) values (1, 'a'), (1, 'b'), (2, 'c'), (3, 'd'), (3, 'e'), (4, 'f'), (6, 'g'), (7, 'h'), (9, 'i');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5786', () => {
    const query = `INSERT INTO using1 VALUES (1, 1) (2, 2) (3, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5787', () => {
    const query = `INSERT INTO using2 VALUES (4, 4) (2, 2) (3, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5788', () => {
    const query = `insert into persons (id, name) values ('1', 'John'), ('2', 'Jack'), ('3', 'Daniel'), ('4', 'James'), ('5', 'Amanda');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5789', () => {
    const query = `insert into children (id, childName) values ('1', 'Robert'), ('1', 'Susan'), ('3', 'Sarah'), ('4', 'David'), ('4', 'Joseph'), ('5', 'Robert');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5790', () => {
    const query = `insert into X (id, x_a, x_b) values (1, 'l1', 1), (2, 'l2', 2), (2, 'l3', 3), (3, 'l4', 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5791', () => {
    const query = `insert into X (id, x_a) values      (4, 'l5'), (4, 'l6'), (5, 'l7'), (8, 'l8'), (9, 'l9');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5792', () => {
    const query = `insert into Y (id, y_a) values      (1, 'r1'), (1, 'r2'), (2, 'r3'), (3, 'r4'), (3, 'r5');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5793', () => {
    const query = `insert into Y (id, y_a, y_b) values (4, 'r6', 'nr6'), (6, 'r7', 'nr7'), (7, 'r8', 'nr8'), (9, 'r9', 'nr9');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5794', () => {
    const query = `INSERT INTO rollup VALUES ('a', 1, 10), ('a', 1, 15), ('a', 2, 20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5795', () => {
    const query = `INSERT INTO rollup VALUES ('a', 2, 25), ('b', 1, 10), ('b', 1, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5796', () => {
    const query = `INSERT INTO rollup VALUES ('b', 2, 20), ('b', 2, 15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5797', () => {
    const query = `INSERT INTO a1 VALUES (1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5798', () => {
    const query = `INSERT INTO a1 VALUES (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5799', () => {
    const query = `INSERT INTO a1 VALUES (1, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5800', () => {
    const query = `INSERT INTO a2 VALUES (1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5801', () => {
    const query = `INSERT INTO a2 VALUES (1, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5802', () => {
    const query = `INSERT INTO a2 VALUES (1, 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5803', () => {
    const query = `INSERT INTO decimal (d1, d2, d3) VALUES (4.2, 4.2, 4.2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5804', () => {
    const query = `INSERT INTO decimal (a, b, c, d, e, f) VALUES (1.1, 1.1, 1.1, 1.1, 1.1, 1.1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5805', () => {
    const query = `INSERT INTO decimal (a, b, c, d) VALUES (2.2, 2.2, 2.2, 2.2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5806', () => {
    const query = `INSERT INTO decimal (a, b, c, e) VALUES (3.3, 3.3, 3.3, 3.3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5807', () => {
    const query = `INSERT INTO decimal (a, b, c, f) VALUES (4.4, 4.4, 4.4, 4.4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5808', () => {
    const query = `INSERT INTO decimal (a, b, c) VALUES (5.5, 5.5, 5.5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5809', () => {
    const query = `INSERT INTO decimal (d1, d2, d3) SELECT toDecimal32(number % 10, 8), toDecimal64(number, 8), toDecimal128(number, 8) FROM system.numbers LIMIT 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5810', () => {
    const query = `INSERT INTO decimal (a, b, c) VALUES (42.0, -42.0, 42) (0.42, -0.42, .42) (42.42, -42.42, 42.42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5811', () => {
    const query = `INSERT INTO decimal (a, b, c) FORMAT JSONEachRow {"a":1.1, "b":-1.1, "c":1.1} {"a":1.0, "b":-1.0, "c":1} {"a":0.1, "b":-0.1, "c":.1};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5812', () => {
    const query = `INSERT INTO decimal (a, b, c) FORMAT CSV 2.0,-2.0,2 INSERT INTO decimal (a, b, c) FORMAT CSV 0.2 ,-0.2 ,.2
INSERT INTO decimal (a, b, c) FORMAT CSV 2.2 , -2.2 , 2.2
INSERT INTO decimal (a, b, c) FORMAT TabSeparated 3.3	-3.3	3.3
INSERT INTO decimal (a, b, c) FORMAT TabSeparated 3.0	-3.0	3
INSERT INTO decimal (a, b, c) FORMAT TabSeparated 0.3	-0.3	.3
INSERT INTO decimal (a, b, c) FORMAT CSV 4.4E+5,-4E+8,.4E+20
INSERT INTO decimal (a, b, c) FORMAT CSV 5.5e-2, -5e-9 ,.5e-17
SELECT * FROM decimal ORDER BY a FORMAT JSONEachRow;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5813', () => {
    const query = `INSERT INTO decimal (a) VALUES (0), (1), (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5814', () => {
    const query = `INSERT INTO decimal (a, b, c, nest.a, nest.b, nest.c, tup) VALUES ([0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9], [1.1, 1.2], [2.1, 2.2], [3.1, 3.2], (9.1, 9.2, 9.3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5815', () => {
    const query = `INSERT INTO decimal (a, b, c, d, e, f, g, h, i, j) VALUES (42, 42, 42, 0.42, 0.42, 0.42, 42.42, 42.42, 42.42, 42.42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5816', () => {
    const query = `INSERT INTO decimal (a, b, c, d, e, f, g, h, i, j) VALUES (-42, -42, -42, -0.42, -0.42, -0.42, -42.42, -42.42, -42.42, -42.42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5817', () => {
    const query = `INSERT INTO decimal (a) VALUES (1000000000); -- { clientError ARGUMENT_OUT_OF_BOUND } INSERT INTO decimal (a) VALUES (-1000000000); -- { clientError ARGUMENT_OUT_OF_BOUND }
INSERT INTO decimal (b) VALUES (1000000000000000000); -- { clientError ARGUMENT_OUT_OF_BOUND }
INSERT INTO decimal (b) VALUES (-1000000000000000000); -- { clientError ARGUMENT_OUT_OF_BOUND }
INSERT INTO decimal (c) VALUES (100000000000000000000000000000000000000); -- { clientError ARGUMENT_OUT_OF_BOUND }
INSERT INTO decimal (c) VALUES (-100000000000000000000000000000000000000); -- { clientError ARGUMENT_OUT_OF_BOUND }
INSERT INTO decimal (d) VALUES (1); -- { clientError ARGUMENT_OUT_OF_BOUND }
INSERT INTO decimal (d) VALUES (-1); -- { clientError ARGUMENT_OUT_OF_BOUND }
INSERT INTO decimal (e) VALUES (1000000000000000000); -- { clientError ARGUMENT_OUT_OF_BOUND }
INSERT INTO decimal (e) VALUES (-1000000000000000000); -- { clientError ARGUMENT_OUT_OF_BOUND }
INSERT INTO decimal (f) VALUES (1); -- { clientError ARGUMENT_OUT_OF_BOUND }
INSERT INTO decimal (f) VALUES (-1); -- { clientError ARGUMENT_OUT_OF_BOUND }
INSERT INTO decimal (g) VALUES (10000); -- { clientError ARGUMENT_OUT_OF_BOUND }
INSERT INTO decimal (g) VALUES (-10000); -- { clientError ARGUMENT_OUT_OF_BOUND }
INSERT INTO decimal (h) VALUES (1000000000); -- { clientError ARGUMENT_OUT_OF_BOUND }
INSERT INTO decimal (h) VALUES (-1000000000); -- { clientError ARGUMENT_OUT_OF_BOUND }
INSERT INTO decimal (i) VALUES (100000000000000000000); -- { clientError ARGUMENT_OUT_OF_BOUND }
INSERT INTO decimal (i) VALUES (-100000000000000000000); -- { clientError ARGUMENT_OUT_OF_BOUND }
INSERT INTO decimal (j) VALUES (10); -- { clientError ARGUMENT_OUT_OF_BOUND }
INSERT INTO decimal (j) VALUES (-10); -- { clientError ARGUMENT_OUT_OF_BOUND }
INSERT INTO decimal (a) VALUES (0.1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5818', () => {
    const query = `INSERT INTO decimal (a) VALUES (-0.1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5819', () => {
    const query = `INSERT INTO decimal (b) VALUES (0.1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5820', () => {
    const query = `INSERT INTO decimal (b) VALUES (-0.1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5821', () => {
    const query = `INSERT INTO decimal (c) VALUES (0.1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5822', () => {
    const query = `INSERT INTO decimal (c) VALUES (-0.1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5823', () => {
    const query = `INSERT INTO decimal (d) VALUES (0.0000000001);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5824', () => {
    const query = `INSERT INTO decimal (d) VALUES (-0.0000000001);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5825', () => {
    const query = `INSERT INTO decimal (e) VALUES (0.0000000000000000001);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5826', () => {
    const query = `INSERT INTO decimal (e) VALUES (-0.0000000000000000001);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5827', () => {
    const query = `INSERT INTO decimal (f) VALUES (0.000000000000000000000000000000000000001);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5828', () => {
    const query = `INSERT INTO decimal (f) VALUES (-0.000000000000000000000000000000000000001);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5829', () => {
    const query = `INSERT INTO decimal (g) VALUES (0.000001);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5830', () => {
    const query = `INSERT INTO decimal (g) VALUES (-0.000001);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5831', () => {
    const query = `INSERT INTO decimal (h) VALUES (0.0000000001);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5832', () => {
    const query = `INSERT INTO decimal (h) VALUES (-0.0000000001);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5833', () => {
    const query = `INSERT INTO decimal (i) VALUES (0.0000000000000000001);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5834', () => {
    const query = `INSERT INTO decimal (i) VALUES (-0.0000000000000000001);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5835', () => {
    const query = `INSERT INTO decimal (j) VALUES (0.1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5836', () => {
    const query = `INSERT INTO decimal (j) VALUES (-0.1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5837', () => {
    const query = `INSERT INTO decimal (a, b, d, g) VALUES (999999999, 999999999999999999, 0.999999999, 9999.99999);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5838', () => {
    const query = `INSERT INTO decimal (a, b, d, g) VALUES (-999999999, -999999999999999999, -0.999999999, -9999.99999);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5839', () => {
    const query = `INSERT INTO decimal (c) VALUES (99999999999999999999999999999999999999);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5840', () => {
    const query = `INSERT INTO decimal (c) VALUES (-99999999999999999999999999999999999999);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5841', () => {
    const query = `INSERT INTO decimal (f) VALUES (0.99999999999999999999999999999999999999);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5842', () => {
    const query = `INSERT INTO decimal (f) VALUES (-0.99999999999999999999999999999999999999);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5843', () => {
    const query = `INSERT INTO decimal (e, h) VALUES (0.999999999999999999, 999999999.999999999);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5844', () => {
    const query = `INSERT INTO decimal (e, h) VALUES (-0.999999999999999999, -999999999.999999999);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5845', () => {
    const query = `INSERT INTO decimal (i) VALUES (99999999999999999999.999999999999999999);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5846', () => {
    const query = `INSERT INTO decimal (i) VALUES (-99999999999999999999.999999999999999999);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5847', () => {
    const query = `INSERT INTO decimal (a, b, c, d, g, j, h) VALUES (1, 1, 1, 0.000000001, 0.00001, 1, 0.000000001);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5848', () => {
    const query = `INSERT INTO decimal (a, b, c, d, g, j, h) VALUES (-1, -1, -1, -0.000000001, -0.00001, -1, -0.000000001);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5849', () => {
    const query = `INSERT INTO decimal (e, f) VALUES (0.000000000000000001, 0.00000000000000000000000000000000000001);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5850', () => {
    const query = `INSERT INTO decimal (e, f) VALUES (-0.000000000000000001, -0.00000000000000000000000000000000000001);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5851', () => {
    const query = `INSERT INTO decimal (i) VALUES (0.000000000000000001);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5852', () => {
    const query = `INSERT INTO decimal (i) VALUES (-0.000000000000000001);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5853', () => {
    const query = `INSERT INTO decimal (a, b, c, d, e, f, g, h, i, j) VALUES (0, 0, 0, 0, 0, 0, 0, 0, 0, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5854', () => {
    const query = `INSERT INTO decimal (a, b, c, d, e, f, g, h, i, j) VALUES (-0, -0, -0, -0, -0, -0, -0, -0, -0, -0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5855', () => {
    const query = `INSERT INTO decimal (a, b, c, d, e, f, g, h, i, j) VALUES (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5856', () => {
    const query = `INSERT INTO decimal (a, b, c, d, e, f, g, h, i, j) VALUES (-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5857', () => {
    const query = `INSERT INTO decimal (a, b, g) VALUES ('42.00000', 42.0000000000000000000000000000000, '0.999990');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5858', () => {
    const query = `INSERT INTO decimal (a) VALUES ('-9x'); -- { clientError CANNOT_PARSE_TEXT } INSERT INTO decimal (a) VALUES ('0x1'); -- { clientError CANNOT_PARSE_TEXT }
INSERT INTO decimal (a, b, c, d, e, f) VALUES ('0.9e9', '0.9e18', '0.9e38', '9e-9', '9e-18', '9e-38');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5859', () => {
    const query = `INSERT INTO decimal (a, b, c, d, e, f) VALUES ('-0.9e9', '-0.9e18', '-0.9e38', '-9e-9', '-9e-18', '-9e-38');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5860', () => {
    const query = `INSERT INTO decimal (a, b, c, d, e, f) VALUES ('1e9', '1e18', '1e38', '1e-10', '1e-19', '1e-39'); -- { clientError ARGUMENT_OUT_OF_BOUND } INSERT INTO decimal (a, b, c, d, e, f) VALUES ('-1e9', '-1e18', '-1e38', '-1e-10', '-1e-19', '-1e-39'); -- { clientError ARGUMENT_OUT_OF_BOUND }
SELECT * FROM decimal ORDER BY a, b, c, d, e, f, g, h, i, j;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5861', () => {
    const query = `INSERT INTO decimal (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) VALUES (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5862', () => {
    const query = `INSERT INTO decimal (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) VALUES (42, 42, 42, 0.42, 0.42, 0.42, 42.42, 42.42, 42.42, 42.42, 42.42, 42.42, 42.42, 42.42, 42.42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5863', () => {
    const query = `INSERT INTO decimal (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) VALUES (-42, -42, -42, -0.42, -0.42, -0.42, -42.42, -42.42, -42.42, -42.42, -42.42, -42.42, -42.42, -42.42, -42.42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5864', () => {
    const query = `INSERT INTO Issue_2231_Invalid_Nested_Columns_Size VALUES (today(), [2,2], [1]), (today(), [2,2], [1, 1]); -- { serverError SIZES_OF_ARRAYS_DONT_MATCH } SELECT * FROM Issue_2231_Invalid_Nested_Columns_Size;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5865', () => {
    const query = `INSERT INTO mergetree_00698 VALUES (3, [], [1, 2, 3]), (1, [111], []), (2, [], []); -- { serverError SIZES_OF_ARRAYS_DONT_MATCH } SELECT * FROM mergetree_00698;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5866', () => {
    const query = `INSERT INTO mergetree_00698 VALUES (3, [4, 5, 6], [1, 2, 3]), (1, [111], [222]), (2, [], []);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5867', () => {
    const query = `insert into lc_str_0 select 'a';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5868', () => {
    const query = `insert into lc_null_str_0 select 'a';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5869', () => {
    const query = `insert into lc_int8_0 select 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5870', () => {
    const query = `insert into lc_null_int8_0 select 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5871', () => {
    const query = `insert into lc_fix_str_0 select 'ab';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5872', () => {
    const query = `insert into lc_null_fix_str_0 select 'ab';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5873', () => {
    const query = `insert into lc_str_uuid values ('61f0c404-5cb3-11e7-907b-a6006ad3dba0', '61f0c404-5cb3-11e7-907b-a6006ad3dba0', '61f0c404-5cb3-11e7-907b-a6006ad3dba0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5874', () => {
    const query = `insert into lc_small_dict select toString(number % 1000) from system.numbers limit 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5875', () => {
    const query = `insert into lc_big_dict select toString(number) from system.numbers limit 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5876', () => {
    const query = `insert into lc_prewhere select number, if(number < 10 or number > 8192 * 9, 1, 0), toString(number) as s, s from system.numbers limit 100000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5877', () => {
    const query = `insert into lc_null_int8_defnull values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5878', () => {
    const query = `insert into lc_null_int8_defnull values (2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5879', () => {
    const query = `insert into lc_00688 values ('a', 1), ('b', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5880', () => {
    const query = `INSERT INTO ary_lc_null VALUES (1, ['1']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5881', () => {
    const query = `insert into lc_dict_reading select number, if(number < 8192 * 4, number % 100, number) as s, s from system.numbers limit 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5882', () => {
    const query = `insert into cardinality (x) select concat('v', toString(number)) from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5883', () => {
    const query = `INSERT INTO test_00688 VALUES (1), (2), (1), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5884', () => {
    const query = `INSERT INTO retention_test SELECT '2018-08-06', number FROM numbers(80);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5885', () => {
    const query = `INSERT INTO retention_test SELECT '2018-08-07', number FROM numbers(50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5886', () => {
    const query = `INSERT INTO retention_test SELECT '2018-08-08', number FROM numbers(60);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5887', () => {
    const query = `insert into test_00687 values ('stest'), ('stest');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5888', () => {
    const query = `INSERT INTO test_00681 VALUES (123);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5889', () => {
    const query = `INSERT INTO uuid (created_at, id) VALUES ('2018-01-01 01:02:03', '00000000-0000-03f8-9cb8-cb1b82fb3900');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5890', () => {
    const query = `INSERT INTO remote_test SELECT toString(number) AS uid, number % 3 AS its, toString(number % 3) AS action_code, '2000-01-01' FROM system.numbers LIMIT 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5891', () => {
    const query = `INSERT INTO FUNCTION remote('127.0.0.1', currentDatabase(), remote_test) VALUES(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5892', () => {
    const query = `INSERT INTO FUNCTION remote('127.0.0.1', currentDatabase(), remote_test) VALUES(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5893', () => {
    const query = `INSERT INTO FUNCTION remote('127.0.0.1', currentDatabase(), remote_test) VALUES(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5894', () => {
    const query = `INSERT INTO FUNCTION remote('127.0.0.1', currentDatabase(), remote_test) VALUES(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5895', () => {
    const query = `INSERT INTO mergetree_00673 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5896', () => {
    const query = `INSERT INTO arrayDistinct_test values ([1, 2, 3], ['a', 'b', 'c']), ([21, 21, 21, 21], ['123', '123', '123']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5897', () => {
    const query = `INSERT INTO test1_00671(start,end) VALUES (1,3),(3,5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5898', () => {
    const query = `INSERT INTO test2_00671(start,end) VALUES (3,5),(1,3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5899', () => {
    const query = `insert into test_00670 values(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5900', () => {
    const query = `INSERT INTO array(arr) values ([1,2]),([3,4]),([5,6]),([7,8]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5901', () => {
    const query = `INSERT INTO alter_00665 (\`boolean_false\`) VALUES (NULL), (''), ('123');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5902', () => {
    const query = `INSERT INTO data SELECT * FROM empty;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5903', () => {
    const query = `INSERT INTO data SELECT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5904', () => {
    const query = `INSERT INTO 00662_has_nullable VALUES (1), (Null);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5905', () => {
    const query = `INSERT INTO 00662_has_nullable VALUES (0), (1), (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5906', () => {
    const query = `INSERT INTO 00662_has_nullable VALUES (0), (Null), (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5907', () => {
    const query = `INSERT INTO 00662_has_nullable VALUES (0), (Null);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5908', () => {
    const query = `INSERT INTO partitioned_by_tuple_replica1_00661 VALUES ('2000-01-02', 1, 'first', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5909', () => {
    const query = `INSERT INTO partitioned_by_tuple_replica1_00661 VALUES ('2000-01-01', 2, 'first', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5910', () => {
    const query = `INSERT INTO partitioned_by_tuple_replica1_00661 VALUES ('2000-01-01', 1, 'first', 1), ('2000-01-01', 1, 'first', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5911', () => {
    const query = `INSERT INTO has_function(arr) values ([null, 'str1', 'str2']),(['str1', 'str2']), ([]), ([]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5912', () => {
    const query = `INSERT INTO partitioned_by_tuple VALUES ('2000-01-02', 1, 'first', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5913', () => {
    const query = `INSERT INTO partitioned_by_tuple VALUES ('2000-01-01', 2, 'first', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5914', () => {
    const query = `INSERT INTO partitioned_by_tuple VALUES ('2000-01-01', 1, 'first', 1), ('2000-01-01', 1, 'first', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5915', () => {
    const query = `insert into \`table_00653\` values (-2), (0), (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5916', () => {
    const query = `insert into tab_00650 values (1, [1, 2, 1, 1, 2, 1], ['a', 'a', 'b', 'a', 'b', 'b']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5917', () => {
    const query = `insert into tab_00650 values (1, [1, Null, 2, 1, 1, 2, 1, Null, Null], ['a', 'a', 'a', 'b', 'a', 'b', 'b', 'b', 'a']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5918', () => {
    const query = `INSERT INTO final_test (id, version) VALUES ('2018-01-01', '2018-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5919', () => {
    const query = `INSERT INTO mult_aggregation VALUES(1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5920', () => {
    const query = `INSERT INTO mult_aggregation VALUES(1, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5921', () => {
    const query = `insert into histogram values(-1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5922', () => {
    const query = `INSERT INTO weird_mmx SELECT range(number % 10) FROM system.numbers LIMIT 915;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5923', () => {
    const query = `INSERT INTO test_00645 VALUES ('2018-06-08T01:02:03.000Z');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5924', () => {
    const query = `INSERT INTO cast1 (x) VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5925', () => {
    const query = `INSERT INTO cast (x) VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5926', () => {
    const query = `INSERT INTO endsWith_test values ('11', '22', '33'), ('a', 'a', 'bb'), ('abc', 'bc', '23');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5927', () => {
    const query = `INSERT INTO startsWith_test values ('11', '22', '33'), ('a', 'a', 'bb'), ('abc', 'ab', '23');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5928', () => {
    const query = `INSERT INTO data VALUES ('hello', 0, 0), ('world', 0, 0), ('hello', 1, -1), ('world', -1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5929', () => {
    const query = `insert into orin_test values(1), (100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5930', () => {
    const query = `INSERT INTO sample_00632 (x) SELECT toUInt16(number) AS x FROM system.numbers LIMIT 65536;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5931', () => {
    const query = `insert into funnel_test values (0,1000),(1,1001),(2,1002),(3,1003),(4,1004),(5,1005),(6,1006),(7,1007),(8,1008);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5932', () => {
    const query = `insert into funnel_test2(timestamp, event) values  ('2018-01-01 01:01:01',1001),('2018-01-01 01:01:02',1002),('2018-01-01 01:01:03',1003),('2018-01-01 01:01:04',1004),('2018-01-01 01:01:05',1005),('2018-01-01 01:01:06',1006),('2018-01-01 01:01:07',1007),('2018-01-01 01:01:08',1008);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5933', () => {
    const query = `insert into funnel_test_u64(timestamp, event) values  ( 1e14 + 1 ,1001),(1e14 + 2,1002),(1e14 + 3,1003),(1e14 + 4,1004),(1e14 + 5,1005),(1e14 + 6,1006),(1e14 + 7,1007),(1e14 + 8,1008);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5934', () => {
    const query = `insert into funnel_test_strict values (00,1000),(10,1001),(20,1002),(30,1003),(40,1004),(50,1005),(51,1005),(60,1006),(70,1007),(80,1008);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5935', () => {
    const query = `insert into funnel_test_strict_order values (1, 1, 'a') (2, 1, 'b') (3, 1, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5936', () => {
    const query = `insert into funnel_test_strict_order values (1, 2, 'a') (2, 2, 'd') (3, 2, 'b') (4, 2, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5937', () => {
    const query = `insert into funnel_test_strict_order values (1, 3, 'a') (2, 3, 'a') (3, 3, 'b') (4, 3, 'b') (5, 3, 'c') (6, 3, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5938', () => {
    const query = `insert into funnel_test_strict_order values (1, 4, 'a') (2, 4, 'a') (3, 4, 'a') (4, 4, 'a') (5, 4, 'b') (6, 4, 'b') (7, 4, 'c') (8, 4, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5939', () => {
    const query = `insert into funnel_test_strict_order values (1, 5, 'a') (2, 5, 'a') (3, 5, 'b') (4, 5, 'b') (5, 5, 'd') (6, 5, 'c') (7, 5, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5940', () => {
    const query = `insert into funnel_test_strict_order values (1, 6, 'c') (2, 6, 'c') (3, 6, 'b') (4, 6, 'b') (5, 6, 'a') (6, 6, 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5941', () => {
    const query = `insert into funnel_test_strict_order values (1, 7, 'a') (2, 7, 'c') (3, 7, 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5942', () => {
    const query = `insert into strict_BiteTheDDDD values (1,'a') (2,'b') (3,'c') (4,'b') (5,'d');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5943', () => {
    const query = `insert into funnel_test_non_null values (1, 1, 'a1', 'b1') (2, 1, 'a2', 'b2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5944', () => {
    const query = `insert into funnel_test_non_null values (1, 2, 'a1', null) (2, 2, 'a2', null);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5945', () => {
    const query = `insert into funnel_test_non_null values (1, 3, null, null);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5946', () => {
    const query = `insert into funnel_test_non_null values (1, 4, null, 'b1') (2, 4, 'a2', null) (3, 4, null, 'b3');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5947', () => {
    const query = `insert into funnel_test_strict_increase values (0,1000),(1,1001),(1,1002),(1,1003),(2,1004);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5948', () => {
    const query = `insert into test_in_tuple_1 values (1, 1, [1, 2], [1, 2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5949', () => {
    const query = `insert into test_in_tuple_2 values (2, 1, [1, 2], [1, 2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5950', () => {
    const query = `INSERT INTO test_block_numbers SELECT max(max_block_number) AS m FROM system.parts WHERE database=currentDatabase() AND  table='dst' AND active AND name LIKE '1_%';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5951', () => {
    const query = `INSERT INTO src VALUES (2, '2', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5952', () => {
    const query = `INSERT INTO src VALUES (3, '3', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5953', () => {
    const query = `INSERT INTO dst VALUES (1, '1', 2), (1, '2', 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5954', () => {
    const query = `INSERT INTO tab_00625 SELECT today(),
number,
[toUInt16(number)],
[number]
FROM system.numbers
LIMIT 8190;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5955', () => {
    const query = `INSERT INTO tab_00625 SELECT today(),
number + 8190,
[toUInt16(number)],
[number + 8190]
FROM system.numbers
LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5956', () => {
    const query = `INSERT INTO nested VALUES (['Hello', 'World'], [['a'], ['b', 'c']], [['PU', 'US'], ['OTHER']]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5957', () => {
    const query = `INSERT INTO nested VALUES (['GoodBye'], [['1', '2']], [['PU', 'US', 'OTHER']]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5958', () => {
    const query = `INSERT INTO truncate_test_set VALUES(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5959', () => {
    const query = `INSERT INTO truncate_test_log VALUES(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5960', () => {
    const query = `INSERT INTO truncate_test_memory VALUES(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5961', () => {
    const query = `INSERT INTO truncate_test_tiny_log VALUES(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5962', () => {
    const query = `INSERT INTO truncate_test_stripe_log VALUES(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5963', () => {
    const query = `INSERT INTO truncate_test_merge_tree VALUES('2000-01-01', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5964', () => {
    const query = `INSERT INTO truncate_test_materialized_depend VALUES('2000-01-01', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5965', () => {
    const query = `INSERT INTO replicated_truncate1 VALUES ('2015-01-01', 10, 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5966', () => {
    const query = `INSERT INTO regression_for_in_operator SELECT today(), toString(number % 10), number FROM system.numbers limit 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5967', () => {
    const query = `INSERT INTO rename1 VALUES (0, 1, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5968', () => {
    const query = `INSERT INTO rename1 VALUES (0, 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5969', () => {
    const query = `INSERT INTO rename1 VALUES (0, 1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5970', () => {
    const query = `insert into Orders values (1,   'Jarlsberg Cheese',    toDateTime('2008-10-11 13:23:44'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5971', () => {
    const query = `INSERT INTO test_array_ops(arr) values ([null, 10, -20]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5972', () => {
    const query = `INSERT INTO test_array_ops(arr) values ([10, -20]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5973', () => {
    const query = `INSERT INTO test_array_ops(arr) values ([]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5974', () => {
    const query = `INSERT INTO test_00616 VALUES ('2018-03-21', 1, 1), ('2018-03-21', 1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5975', () => {
    const query = `INSERT INTO test_00615 (dt,id, key,data) VALUES ('2000-01-01', 100, 'key', 100500);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5976', () => {
    const query = `insert into tab values ('2018-01-21','2018-01-21 15:12:13','test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5977', () => {
    const query = `INSERT INTO test VALUES ('2017-09-10', [1, 2, 3, 4, 5, 6, 7, NULL]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5978', () => {
    const query = `INSERT INTO count SELECT * FROM numbers(1234567);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5979', () => {
    const query = `insert into tab_00612 values (1, [1]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5980', () => {
    const query = `insert into tab_00612 values (2, [2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5981', () => {
    const query = `insert into tab_00612 values ( -1, 1, 0 );`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5982', () => {
    const query = `INSERT INTO dist_00612 VALUES(1, 1), (2, 2), (3, 3), (4, 4), (5, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5983', () => {
    const query = `INSERT INTO tab_00610 VALUES ('2018-01-01', 1), ('2018-01-01', 2), ('2018-02-01', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5984', () => {
    const query = `insert into \`table_00609\` select number, number / 8192 from system.numbers limit 100000; `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5985', () => {
    const query = `insert into test_00609 values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5986', () => {
    const query = `INSERT INTO mergetree_00609 VALUES (1, 'hello'), (2, 'world');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5987', () => {
    const query = `INSERT INTO test(start,end) VALUES (1,3),(2,7),(3,999),(4,7),(5,8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5988', () => {
    const query = `INSERT INTO t3 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5989', () => {
    const query = `INSERT INTO t4 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5990', () => {
    const query = `INSERT INTO FUNCTION remote('127.0.0.2', currentDatabase(), t1) VALUES (2, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5991', () => {
    const query = `INSERT INTO FUNCTION remote('127.0.0.2', currentDatabase(), t2) VALUES (2, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5992', () => {
    const query = `INSERT INTO FUNCTION remote('127.0.0.2', currentDatabase(), t4) VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5993', () => {
    const query = `INSERT INTO temporary_table VALUES (1), (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5994', () => {
    const query = `INSERT INTO test_00597 VALUES('2000-01-01', 1, 'test string 1', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5995', () => {
    const query = `INSERT INTO test_00597 VALUES('2000-01-01', 2, 'test string 2', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5996', () => {
    const query = `INSERT INTO alias_local10 (Id, EventDate, field1, field2) VALUES (1, '2000-01-01', 1, '12345'), (2, '2000-01-01', 2, '54321'), (3, '2000-01-01', 0, '');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5997', () => {
    const query = `INSERT INTO columns VALUES (1, 2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5998', () => {
    const query = `INSERT INTO mergetree_00588 VALUES (1, 'hello'), (2, 'world');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 5999', () => {
    const query = `INSERT INTO local_statements FORMAT CSV "2b3b04ee-0bb8-4200-906f-d47c48e56bd0","2016-08-25","2016-08-25 14:00:00","2016-08-25 14:43:34","http://adlnet.gov/expapi/verbs/passed","https://crmm.ru/xapi/courses/spp/2/0/3/2/8",0,1,"c13d788c-26e0-40e3-bacb-a1ff78ee1518",100,0,0,0,0,0,"","https://sberbank-school.ru/xapi/accounts/userid/94312","6f696f938a69b5e173093718e1c2bbf2",0 SELECT avg(diff)
FROM
(
SELECT *
FROM
(
SELECT
learnerHash,
passed - eventTime AS diff
FROM statements
GLOBAL SEMI LEFT JOIN
(
SELECT
learnerHash,
argMax(eventTime, resultScoreRaw) AS passed
FROM
(
SELECT
learnerHash,
eventTime,
resultScoreRaw
FROM statements
WHERE (courseId = 1) AND (onCourse = 0)
AND (verb = 'http://adlnet.gov/expapi/verbs/passed') AND (objectId = 'https://crmm.ru/xapi/courses/spp/1/1/0-1')
ORDER BY eventTime ASC
)
GROUP BY learnerHash
) USING (learnerHash)
WHERE (courseId = 1) AND (onCourse = 0)
AND (verb = 'http://adlnet.gov/expapi/verbs/interacted') AND (eventTime <= passed) AND (diff > 0)
ORDER BY eventTime DESC
LIMIT 1 BY learnerHash
)
ORDER BY diff DESC
LIMIT 7, 126
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6000', () => {
    const query = `INSERT INTO clicks VALUES ('facebook.com'), ('meta.ua'), ('google.com');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6001', () => {
    const query = `INSERT INTO transactions VALUES ('facebook.com'), ('meta.ua'), ('baidu.com');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6002', () => {
    const query = `INSERT INTO Test_00584 VALUES ('2000-01-01', 'hello', 'A', 123);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6003', () => {
    const query = `INSERT INTO t SELECT * FROM system.numbers LIMIT 11;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6004', () => {
    const query = `INSERT INTO sample_00579_1 (x) SELECT number AS x FROM system.numbers LIMIT 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6005', () => {
    const query = `INSERT INTO sample_00579_2 (x) SELECT number AS x FROM system.numbers LIMIT 2000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6006', () => {
    const query = `INSERT INTO partition_and_primary_keys_using_same_expression VALUES ('2018-02-19 12:00:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6007', () => {
    const query = `INSERT INTO partition_and_primary_keys_using_same_expression VALUES ('2018-02-20 12:00:00'), ('2018-02-21 12:00:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6008', () => {
    const query = `INSERT INTO unsorted VALUES (1, 'a'), (5, 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6009', () => {
    const query = `INSERT INTO unsorted VALUES (2, 'c'), (4, 'd');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6010', () => {
    const query = `INSERT INTO unsorted VALUES (3, 'e');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6011', () => {
    const query = `INSERT INTO unsorted_replacing VALUES (1, 'a', 5), (5, 'b', 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6012', () => {
    const query = `INSERT INTO unsorted_replacing VALUES (2, 'c', 3), (4, 'd', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6013', () => {
    const query = `INSERT INTO unsorted_replacing VALUES (3, 'e', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6014', () => {
    const query = `INSERT INTO unsorted_collapsing VALUES (1, 'a', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6015', () => {
    const query = `INSERT INTO unsorted_collapsing VALUES (1, 'a', -1), (2, 'b', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6016', () => {
    const query = `INSERT INTO unsorted_collapsing VALUES (2, 'b', -1), (3, 'c', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6017', () => {
    const query = `insert into tab_00577 values ('2018-01-01', 2, 2), ('2018-01-01', 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6018', () => {
    const query = `insert into tab_00577 values ('2018-01-01', 0, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6019', () => {
    const query = `INSERT INTO nested SELECT number, number % 2, range(number % 10) FROM system.numbers LIMIT 100000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6020', () => {
    const query = `insert into t_00575 values ('2018-02-20');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6021', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.test_00571 VALUES('2018-02-16', 'a', 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6022', () => {
    const query = `INSERT INTO nullable_00571 VALUES ('hello'), ('world');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6023', () => {
    const query = `INSERT INTO defaulted SELECT toFixedString('::0', 16) FROM numbers(32768);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6024', () => {
    const query = `INSERT INTO t VALUES ('2000-01-02 03:04:05'), ('1234567890'), (1111111111);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6025', () => {
    const query = `insert into mult_tab select '2018-01-31', 'str_' || toString(number), 0, if(number % 2, 1, -1) from system.numbers limit 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6026', () => {
    const query = `insert into mult_tab select '2018-01-31', 'str_' || toString(number), 0, if(number % 2, -1, 1) from system.numbers limit 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6027', () => {
    const query = `insert into mult_tab select '2018-01-31', 'str_' || toString(number), 1, if(number % 2, -1, 1) from system.numbers limit 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6028', () => {
    const query = `insert into mult_tab select '2018-01-31', 'str_' || toString(number), 1, if(number % 3 = 0, 1, -1) from system.numbers limit 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6029', () => {
    const query = `insert into mult_tab select '2018-01-31', 'str_' || toString(number), 1, if(number % 3 = 1, 1, -1) from system.numbers limit 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6030', () => {
    const query = `insert into mult_tab select '2018-01-31', 'str_' || toString(number), 1, if(number % 3 = 2, 1, -1) from system.numbers limit 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6031', () => {
    const query = `insert into mult_tab select '2018-01-31', 'str_' || toString(number), 0, if(number % 2, 1, -1) from system.numbers limit 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6032', () => {
    const query = `insert into mult_tab select '2018-01-31', 'str_' || toString(number), 0, if(number % 2, -1, 1) from system.numbers limit 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6033', () => {
    const query = `insert into mult_tab select '2018-01-31', number, number, 0, if(number < 64, 1, -1) from system.numbers limit 128;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6034', () => {
    const query = `insert into mult_tab select '2018-01-31', number, number + 128, 0, if(number < 64, -1, 1) from system.numbers limit 128;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6035', () => {
    const query = `INSERT INTO test(id, track, codec) VALUES(1, 0, 'h264');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6036', () => {
    const query = `INSERT INTO test(id, track, codec, content) VALUES(2, 0, 'h264', 'CONTENT');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6037', () => {
    const query = `insert into function remote('127.0.0.2', currentDatabase(), tab) values (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6038', () => {
    const query = `insert into function remote('127.0.0.{2|3}', currentDatabase(), tab) values (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6039', () => {
    const query = `insert into function remote('127.0.0.{2|3|4}', currentDatabase(), tab) values (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6040', () => {
    const query = `INSERT INTO TABLE FUNCTION remote('127.0.0.2', currentDatabase(), 'simple') VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6041', () => {
    const query = `INSERT INTO TABLE FUNCTION remote('127.0.0.2', currentDatabase(), 'simple') VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6042', () => {
    const query = `INSERT INTO test_00563 (dt,site_id, site_key) VALUES ('2018-1-29', 100, 'key');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6043', () => {
    const query = `INSERT INTO join_with_index VALUES (1, 0), (2, 99);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6044', () => {
    const query = `INSERT INTO test_00562 VALUES('test_string', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6045', () => {
    const query = `insert into joinbug (id, id2, val, val2, created) values (1,11,91,81,123456), (2,22,92,82,123457);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6046', () => {
    const query = `insert into joinbug_join (id, id2, val, val2, created) select id, id2, val, val2, created
from joinbug;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6047', () => {
    const query = `INSERT INTO test_float FORMAT TabSeparated 1.075e+06 SELECT * FROM test_float;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6048', () => {
    const query = `INSERT INTO nested VALUES (1, [2, 3], ['Hello', 'World']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6049', () => {
    const query = `INSERT INTO nested VALUES (4, [5], ['Goodbye']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6050', () => {
    const query = `INSERT INTO nums_buf (n) VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6051', () => {
    const query = `INSERT INTO nums_buf (n) VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6052', () => {
    const query = `INSERT INTO nums_buf (n) VALUES (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6053', () => {
    const query = `INSERT INTO nums_buf (n) VALUES (4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6054', () => {
    const query = `INSERT INTO nums_buf (n) VALUES (5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6055', () => {
    const query = `INSERT INTO test VALUES(1), (0), (null);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6056', () => {
    const query = `INSERT INTO null_00549 SELECT k,
a,
b
FROM
(
SELECT
number AS k,
toString(number) AS a
FROM system.numbers
LIMIT 2
) js1
ANY LEFT JOIN
(
SELECT
number AS k,
toString(number) AS b
FROM system.numbers
LIMIT 1, 2
) js2 USING (k)
ORDER BY k ASC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6057', () => {
    const query = `INSERT INTO test WITH number * 2 AS num2 SELECT number, num2 FROM system.numbers LIMIT 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6058', () => {
    const query = `insert into test (dt, id, val) values ('2017-01-01', 1, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6059', () => {
    const query = `insert into test (dt, id, val) values ('2017-01-01', 1, null);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6060', () => {
    const query = `insert into test (dt, id, val) values ('2017-01-01', 1, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6061', () => {
    const query = `INSERT INTO x VALUES (today(), now());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6062', () => {
    const query = `INSERT INTO readonly00542 (ID) VALUES (1), (2), (3), (4), (5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6063', () => {
    const query = `INSERT INTO readonly00542 (ID) SELECT CAST(number * 10 AS Int) FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6064', () => {
    const query = `INSERT INTO float VALUES (1e7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6065', () => {
    const query = `INSERT INTO agg_over_nullable(partition, timestamp, user_id, description) VALUES(now(), now(), 1, 'ss');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6066', () => {
    const query = `INSERT INTO agg_over_nullable(partition, timestamp, user_id, description) VALUES(now(), now(), 1, NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6067', () => {
    const query = `INSERT INTO agg_over_nullable(partition, timestamp, user_id, description) VALUES(now(), now(), 1, 'aa');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6068', () => {
    const query = `INSERT INTO arr SELECT [], NULL, [[], [NULL], [NULL, 'Hello']];`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6069', () => {
    const query = `INSERT INTO multidimensional VALUES (1, [['Hello', 'World'], ['Goodbye'], []]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6070', () => {
    const query = `INSERT INTO multidimensional (t) VALUES (('Hello', ['World', NULL], (123, '2000-01-01')));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6071', () => {
    const query = `INSERT INTO multidimensional VALUES (1, [['Hello', 'World'], ['Goodbye'], []], ('Hello', ['World', NULL], (123, '2000-01-01')));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6072', () => {
    const query = `INSERT INTO tuple VALUES ((concat('2000', '-01-01'),  12+3, 45+6));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6073', () => {
    const query = `INSERT INTO tuple VALUES (('2000-01-01', 123, 456));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6074', () => {
    const query = `INSERT INTO date VALUES ('2017-01-02'), ('2017-1-02'), ('2017-01-2'), ('2017-1-2'), ('2017/01/02'), ('2017/1/02'), ('2017/01/2'), ('2017/1/2'), ('2017-11-12');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6075', () => {
    const query = `INSERT INTO date FORMAT JSONEachRow {"d": "2017-01-02"}, {"d": "2017-1-02"}, {"d": "2017-01-2"}, {"d": "2017-1-2"}, {"d": "2017/01/02"}, {"d": "2017/1/02"}, {"d": "2017/01/2"}, {"d": "2017/1/2"}, {"d": "2017-11-12"};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6076', () => {
    const query = `INSERT INTO deduplication_by_partition VALUES ('2000-01-01', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6077', () => {
    const query = `INSERT INTO deduplication_by_partition VALUES ('2000-01-01', 2), ('2000-01-01', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6078', () => {
    const query = `INSERT INTO deduplication_by_partition VALUES ('2000-02-01', 3), ('2000-02-01', 4), ('2000-02-01', 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6079', () => {
    const query = `INSERT INTO deduplication_by_partition VALUES ('2000-01-01', 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6080', () => {
    const query = `INSERT INTO deduplication_by_partition VALUES ('2000-02-01', 6), ('2000-02-01', 7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6081', () => {
    const query = `INSERT INTO tab VALUES (42, 'Asia/Singapore') (43, 'Asia/Tokyo');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6082', () => {
    const query = `INSERT INTO with_deduplication VALUES (42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6083', () => {
    const query = `INSERT INTO with_deduplication VALUES (43);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6084', () => {
    const query = `INSERT INTO without_deduplication VALUES (42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6085', () => {
    const query = `INSERT INTO without_deduplication VALUES (43);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6086', () => {
    const query = `INSERT INTO \`.inner_id.00000510-1000-4000-8000-000000000001\` SELECT 0 AS dummy, arrayReduce('countState', [toUInt32(42)]) AS cnt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6087', () => {
    const query = `INSERT INTO \`.inner_id.00000510-1000-4000-8000-000000000002\` SELECT 0 AS dummy, arrayReduce('countState', [toUInt32(42)]) AS cnt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6088', () => {
    const query = `INSERT INTO replicated_with_sampling VALUES (1), (128);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6089', () => {
    const query = `INSERT INTO replacing VALUES ('2017-10-23', 1, 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6090', () => {
    const query = `INSERT INTO replacing VALUES ('2017-10-23', 1, 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6091', () => {
    const query = `INSERT INTO replacing VALUES ('2017-10-23', 1, 'c');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6092', () => {
    const query = `INSERT INTO replicated_collapsing VALUES ('2017-10-23', 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6093', () => {
    const query = `INSERT INTO replicated_collapsing VALUES ('2017-10-23', 1, -1), ('2017-10-23', 2, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6094', () => {
    const query = `INSERT INTO replicated_versioned_collapsing VALUES ('2017-10-23', 1, 1, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6095', () => {
    const query = `INSERT INTO replicated_versioned_collapsing VALUES ('2017-10-23', 1, -1, 0), ('2017-10-23', 2, 1, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6096', () => {
    const query = `INSERT INTO replicated_versioned_collapsing VALUES ('2017-10-23', 1, -1, 1), ('2017-10-23', 2, 1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6097', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.src VALUES (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6098', () => {
    const query = `INSERT INTO union1 VALUES (1,  2, 3, 4, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6099', () => {
    const query = `INSERT INTO union1 VALUES (11,12,13,14,15);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6100', () => {
    const query = `INSERT INTO union2 VALUES (21,22,23,24,25);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6101', () => {
    const query = `INSERT INTO union3 VALUES (31,32,33,34,35);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6102', () => {
    const query = `INSERT INTO globalin VALUES (34, toDate('2017-10-02')), (42, toDate('2017-10-02')), (55, toDate('2017-10-01'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6103', () => {
    const query = `INSERT INTO union_bug VALUES ('A', 1), ('B', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6104', () => {
    const query = `insert into test_ins_arr select toDate('2017-10-02'), [number, 42] from system.numbers limit 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6105', () => {
    const query = `insert into test_ins_null select toDate('2017-10-02'), if(number % 2, number, Null) from system.numbers limit 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6106', () => {
    const query = `insert into test_ins_arr_null select toDate('2017-10-02'), [if(number % 2, number, Null), number, Null] from system.numbers limit 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6107', () => {
    const query = `insert into test_ins_arr_arr select toDate('2017-10-02'), [[number],[number + 1, number + 2]] from system.numbers limit 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6108', () => {
    const query = `insert into test_ins_arr_arr_null select toDate('2017-10-02'), [[1, Null, number], [3, Null, number]] from system.numbers limit 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6109', () => {
    const query = `insert into test_ins_arr_arr_arr select toDate('2017-10-02'), [[[number]],[[number + 1], [number + 2, number + 3]]] from system.numbers limit 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6110', () => {
    const query = `INSERT INTO sum_map VALUES ('2000-01-01', '2000-01-01 00:00:00', [1, 2, 3], [10, 10, 10]), ('2000-01-01', '2000-01-01 00:00:00', [3, 4, 5], [10, 10, 10]), ('2000-01-01', '2000-01-01 00:01:00', [4, 5, 6], [10, 10, 10]), ('2000-01-01', '2000-01-01 00:01:00', [6, 7, 8], [10, 10, 10]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6111', () => {
    const query = `INSERT INTO sum_map_decimal VALUES ([1, 2, 3], [1.0, 2.0, 3.0]), ([3, 4, 5], [3.0, 4.0, 5.0]), ([4, 5, 6], [4.0, 5.0, 6.0]), ([6, 7, 8], [6.0, 7.0, 8.0]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6112', () => {
    const query = `INSERT INTO sum_map_decimal_nullable VALUES ([1, 2, 3], [1.0, 2.0, 3.0]), ([3, 4, 5], [3.0, 4.0, 5.0]), ([4, 5, 6], [4.0, 5.0, 6.0]), ([6, 7, 8], [6.0, 7.0, 8.0]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6113', () => {
    const query = `INSERT INTO not_partitioned_replica1_00502 VALUES (1), (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6114', () => {
    const query = `INSERT INTO not_partitioned_replica1_00502 VALUES (4), (5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6115', () => {
    const query = `INSERT INTO partitioned_by_week_replica1 VALUES ('2000-01-01', 1), ('2000-01-02', 2), ('2000-01-03', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6116', () => {
    const query = `INSERT INTO partitioned_by_week_replica1 VALUES ('2000-01-03', 4), ('2000-01-03', 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6117', () => {
    const query = `INSERT INTO partitioned_by_tuple_replica1_00502 VALUES ('2000-01-01', 1, 1), ('2000-01-01', 2, 2), ('2000-01-02', 1, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6118', () => {
    const query = `INSERT INTO partitioned_by_tuple_replica1_00502 VALUES ('2000-01-02', 1, 4), ('2000-01-01', 1, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6119', () => {
    const query = `INSERT INTO partitioned_by_string_replica1 VALUES ('aaa', 1), ('aaa', 2), ('bbb', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6120', () => {
    const query = `INSERT INTO partitioned_by_string_replica1 VALUES ('bbb', 4), ('aaa', 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6121', () => {
    const query = `INSERT INTO without_fixed_size_columns_replica1 VALUES ('a'), ('aa'), ('b'), ('cc');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6122', () => {
    const query = `INSERT INTO not_partitioned VALUES (1), (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6123', () => {
    const query = `INSERT INTO not_partitioned VALUES (4), (5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6124', () => {
    const query = `INSERT INTO partitioned_by_week VALUES ('2000-01-01', 1), ('2000-01-02', 2), ('2000-01-03', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6125', () => {
    const query = `INSERT INTO partitioned_by_week VALUES ('2000-01-03', 4), ('2000-01-03', 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6126', () => {
    const query = `INSERT INTO partitioned_by_tuple VALUES ('2000-01-01', 1, 1), ('2000-01-01', 2, 2), ('2000-01-02', 1, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6127', () => {
    const query = `INSERT INTO partitioned_by_tuple VALUES ('2000-01-02', 1, 4), ('2000-01-01', 1, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6128', () => {
    const query = `INSERT INTO partitioned_by_string VALUES ('aaa', 1), ('aaa', 2), ('bbb', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6129', () => {
    const query = `INSERT INTO partitioned_by_string VALUES ('bbb', 4), ('aaa', 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6130', () => {
    const query = `INSERT INTO without_fixed_size_columns VALUES ('a'), ('aa'), ('b'), ('cc');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6131', () => {
    const query = `INSERT INTO polygons VALUES (1, [(0, 0), (10, 0), (10, 10), (0, 10)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6132', () => {
    const query = `INSERT INTO polygons VALUES (2, [(-5, -5), (5, -5), (5, 5), (-5, 5)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6133', () => {
    const query = `INSERT INTO polygons VALUES (1, (-9, 0), [(0, 0), (10, 0), (10, 10), (0, 10)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6134', () => {
    const query = `INSERT INTO polygons VALUES (2, (-9, 0), [(-5, -5), (5, -5), (5, 5), (-5, 5)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6135', () => {
    const query = `INSERT INTO polygons VALUES (3, (0, -9), [(0, 0), (10, 0), (10, 10), (0, 10)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6136', () => {
    const query = `INSERT INTO polygons VALUES (4, (0, -9), [(-5, -5), (5, -5), (5, 5), (-5, 5)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6137', () => {
    const query = `INSERT INTO polygons VALUES (5, (-4, -4), [(0, 0), (10, 0), (10, 10), (0, 10)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6138', () => {
    const query = `INSERT INTO polygons VALUES (6, (-4, -4), [(-5, -5), (5, -5), (5, 5), (-5, 5)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6139', () => {
    const query = `INSERT INTO polygons VALUES (7, (0, 0), [(0, 0), (10, 0), (10, 10), (0, 10)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6140', () => {
    const query = `INSERT INTO polygons VALUES (8, (0, 0), [(-5, -5), (5, -5), (5, 5), (-5, 5)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6141', () => {
    const query = `INSERT INTO polygons VALUES (9, (4, 4), [(0, 0), (10, 0), (10, 10), (0, 10)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6142', () => {
    const query = `INSERT INTO polygons VALUES (10, (4, 4), [(-5, -5), (5, -5), (5, 5), (-5, 5)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6143', () => {
    const query = `INSERT INTO polygons VALUES (11, (9, 9), [(0, 0), (10, 0), (10, 10), (0, 10)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6144', () => {
    const query = `INSERT INTO polygons VALUES (12, (9, 9), [(-5, -5), (5, -5), (5, 5), (-5, 5)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6145', () => {
    const query = `INSERT INTO polygons VALUES (13, (9, 4), [(0, 0), (10, 0), (10, 10), (0, 10)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6146', () => {
    const query = `INSERT INTO polygons VALUES (14, (9, 4), [(-5, -5), (5, -5), (5, 5), (-5, 5)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6147', () => {
    const query = `INSERT INTO polygons VALUES (15, (4, 9), [(0, 0), (10, 0), (10, 10), (0, 10)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6148', () => {
    const query = `INSERT INTO polygons VALUES (16, (4, 9), [(-5, -5), (5, -5), (5, 5), (-5, 5)]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6149', () => {
    const query = `INSERT INTO polygons VALUES (1, [[(0, 0), (10, 0), (10, 10), (0, 10)], [(4, 4), (6, 4), (6, 6), (4, 6)]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6150', () => {
    const query = `INSERT INTO polygons VALUES (2, [[(-5, -5), (5, -5), (5, 5), (-5, 5)], [(-1, -1), (1, -1), (1, 1), (-1, 1)]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6151', () => {
    const query = `INSERT INTO polygons VALUES (1, (-9, 0), [[(0, 0), (10, 0), (10, 10), (0, 10)], [(4, 4), (6, 4), (6, 6), (4, 6)]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6152', () => {
    const query = `INSERT INTO polygons VALUES (2, (-9, 0), [[(-5, -5), (5, -5), (5, 5), (-5, 5)], [(-1, -1), (1, -1), (1, 1), (-1, 1)]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6153', () => {
    const query = `INSERT INTO polygons VALUES (3, (0, -9), [[(0, 0), (10, 0), (10, 10), (0, 10)], [(4, 4), (6, 4), (6, 6), (4, 6)]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6154', () => {
    const query = `INSERT INTO polygons VALUES (4, (0, -9), [[(-5, -5), (5, -5), (5, 5), (-5, 5)], [(-1, -1), (1, -1), (1, 1), (-1, 1)]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6155', () => {
    const query = `INSERT INTO polygons VALUES (5, (-4, -4), [[(0, 0), (10, 0), (10, 10), (0, 10)], [(4, 4), (6, 4), (6, 6), (4, 6)]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6156', () => {
    const query = `INSERT INTO polygons VALUES (6, (-4, -4), [[(-5, -5), (5, -5), (5, 5), (-5, 5)], [(-1, -1), (1, -1), (1, 1), (-1, 1)]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6157', () => {
    const query = `INSERT INTO polygons VALUES (7, (0, 0), [[(0, 0), (10, 0), (10, 10), (0, 10)], [(4, 4), (6, 4), (6, 6), (4, 6)]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6158', () => {
    const query = `INSERT INTO polygons VALUES (8, (0, 0), [[(-5, -5), (5, -5), (5, 5), (-5, 5)], [(-1, -1), (1, -1), (1, 1), (-1, 1)]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6159', () => {
    const query = `INSERT INTO polygons VALUES (9, (4, 4), [[(0, 0), (10, 0), (10, 10), (0, 10)], [(4, 4), (6, 4), (6, 6), (4, 6)]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6160', () => {
    const query = `INSERT INTO polygons VALUES (10, (4, 4), [[(-5, -5), (5, -5), (5, 5), (-5, 5)], [(-1, -1), (1, -1), (1, 1), (-1, 1)]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6161', () => {
    const query = `INSERT INTO polygons VALUES (11, (9, 9), [[(0, 0), (10, 0), (10, 10), (0, 10)], [(4, 4), (6, 4), (6, 6), (4, 6)]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6162', () => {
    const query = `INSERT INTO polygons VALUES (12, (9, 9), [[(-5, -5), (5, -5), (5, 5), (-5, 5)], [(-1, -1), (1, -1), (1, 1), (-1, 1)]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6163', () => {
    const query = `INSERT INTO polygons VALUES (13, (9, 4), [[(0, 0), (10, 0), (10, 10), (0, 10)], [(4, 4), (6, 4), (6, 6), (4, 6)]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6164', () => {
    const query = `INSERT INTO polygons VALUES (14, (9, 4), [[(-5, -5), (5, -5), (5, 5), (-5, 5)], [(-1, -1), (1, -1), (1, 1), (-1, 1)]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6165', () => {
    const query = `INSERT INTO polygons VALUES (15, (4, 9), [[(0, 0), (10, 0), (10, 10), (0, 10)], [(4, 4), (6, 4), (6, 6), (4, 6)]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6166', () => {
    const query = `INSERT INTO polygons VALUES (16, (4, 9), [[(-5, -5), (5, -5), (5, 5), (-5, 5)], [(-1, -1), (1, -1), (1, 1), (-1, 1)]]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6167', () => {
    const query = `insert into coords values (-81.7897198,29.4292161), (-81.7886889,29.4292222), (-81.787658,29.4292283), (-81.7866341,29.4301369), (-81.7866271,29.4292344), (-81.7856171,29.4319479), (-81.7856101,29.4310454), (-81.7856032,29.430143), (-81.7855962,29.4292405), (-81.7845931,29.4328564), (-81.7845862,29.4319539), (-81.7845792,29.4310515), (-81.7845723,29.430149), (-81.7845654,29.4292466), (-81.7835622,29.4328625), (-81.7835553,29.43196), (-81.7835483,29.4310576), (-81.7835414,29.4301551), (-81.7835345,29.4292527), (-81.7825382,29.433771), (-81.7825313,29.4328685), (-81.7825243,29.4319661), (-81.7825174,29.4310636), (-81.7825105,29.4301612), (-81.7825036,29.4292587), (-81.7815142,29.4346795), (-81.7815073,29.433777), (-81.7815003,29.4328746), (-81.7814934,29.4319721), (-81.7814865,29.4310697), (-81.7814796,29.4301672), (-81.7814727,29.4292648), (-81.7804832,29.4346855), (-81.7804763,29.4337831), (-81.7804694,29.4328806), (-81.7804625,29.4319782), (-81.7804556,29.4310757), (-81.7804487,29.4301733), (-81.7804418,29.4292708), (-81.7794592,29.435594), (-81.7794523,29.4346916), (-81.7794454,29.4337891), (-81.7794385,29.4328867), (-81.7794316,29.4319842), (-81.7794247,29.4310818), (-81.7794178,29.4301793), (-81.7794109,29.4292768), (-81.7784282,29.4356001), (-81.7784213,29.4346976), (-81.7784145,29.4337952), (-81.7784076,29.4328927), (-81.7784007,29.4319902), (-81.7783938,29.4310878), (-81.7783869,29.4301853), (-81.77838,29.4292829), (-81.7773973,29.4356061), (-81.7773904,29.4347036), (-81.7773835,29.4338012), (-81.7773766,29.4328987), (-81.7773698,29.4319963), (-81.7773629,29.4310938), (-81.777356,29.4301914), (-81.7773492,29.4292889), (-81.7763732,29.4365146), (-81.7763663,29.4356121), (-81.7763594,29.4347096), (-81.7763526,29.4338072), (-81.7763457,29.4329047), (-81.7763389,29.4320023), (-81.776332,29.4310998), (-81.7763251,29.4301974), (-81.7763183,29.4292949), (-81.7753422,29.4365206), (-81.7753354,29.4356181), (-81.7753285,29.4347156), (-81.7753217,29.4338132), (-81.7753148,29.4329107), (-81.7753079,29.4320083), (-81.7753011,29.4311058), (-81.7752942,29.4302034), (-81.7752874,29.4293009), (-81.7742496,29.4284045), (-81.7742428,29.427502), (-81.774236,29.426599500000002), (-81.7742291,29.4256971), (-81.7742223,29.4247946), (-81.7742154,29.4238922), (-81.7742086,29.4229897), (-81.7742017,29.4220873), (-81.7741949,29.4211848), (-81.774188,29.4202823), (-81.7741812,29.4193799), (-81.7741744,29.4184774), (-81.7741675,29.417575), (-81.7741607,29.4166725), (-81.7741538,29.4157701), (-81.774147,29.4148676), (-81.7741402,29.4139651), (-81.7741333,29.4130627), (-81.7741265,29.4121602), (-81.7741196,29.4112578), (-81.7741128,29.4103553), (-81.774106,29.4094528), (-81.7740991,29.4085504), (-81.7740923,29.4076479), (-81.7740855,29.4067455), (-81.7740786,29.405843), (-81.7740718,29.4049405), (-81.7740649,29.4040381), (-81.7740581,29.4031356), (-81.7740513,29.4022332), (-81.7740444,29.4013307), (-81.7740376,29.4004282), (-81.7740308,29.3995258), (-81.7740239,29.3986233), (-81.7740171,29.3977209), (-81.7740103,29.3968184), (-81.7740034,29.3959159), (-81.7739966,29.3950135), (-81.7739898,29.394111), (-81.7739829,29.3932086), (-81.7739761,29.3923061), (-81.7739693,29.3914036), (-81.7739624,29.3905012), (-81.7739556,29.3895987), (-81.7739488,29.3886963), (-81.7739419,29.3877938), (-81.7739351,29.3868913), (-81.7739283,29.3859889), (-81.7732188,29.4284104), (-81.7732119,29.427508), (-81.7732051,29.4266055), (-81.7731983,29.4257031), (-81.7731914,29.4248006), (-81.7731846,29.4238982), (-81.7731778,29.4229957), (-81.7731709,29.4220932), (-81.7731641,29.4211908), (-81.7731573,29.4202883), (-81.7731504,29.4193859), (-81.7731436,29.4184834), (-81.7731368,29.417581), (-81.7731299,29.4166785), (-81.7731231,29.415776), (-81.7731163,29.4148736), (-81.7731094,29.4139711), (-81.7731026,29.4130687), (-81.7730958,29.4121662), (-81.7730889,29.4112637), (-81.7730821,29.4103613), (-81.7730753,29.4094588), (-81.7730684,29.4085564), (-81.7730616,29.4076539), (-81.7730548,29.4067514), (-81.773048,29.405849), (-81.7730411,29.4049465), (-81.7730343,29.4040441), (-81.7730275,29.4031416), (-81.7730207,29.4022391), (-81.7730138,29.4013367), (-81.773007,29.4004342), (-81.7730002,29.3995318), (-81.7729933,29.3986293), (-81.7729865,29.3977268), (-81.7729797,29.3968244), (-81.7729729,29.3959219), (-81.772966,29.3950195), (-81.7729592,29.394117), (-81.7729524,29.3932145), (-81.7729456,29.3923121), (-81.7729388,29.3914096), (-81.7729319,29.3905072), (-81.7729251,29.3896047), (-81.7729183,29.3887022), (-81.7729115,29.3877998), (-81.7729046,29.3868973), (-81.7728978,29.3859948), (-81.772891,29.3850924), (-81.7728842,29.3841899), (-81.7728774,29.3832875), (-81.7728705,29.382385), (-81.7728637,29.3814825), (-81.7721879,29.4284164), (-81.7721811,29.427514), (-81.7721742,29.4266115), (-81.7721674,29.4257091), (-81.7721606,29.4248066), (-81.7721537,29.4239041), (-81.7721469,29.4230017), (-81.7721401,29.4220992), (-81.7721333,29.4211968), (-81.7721265,29.4202943), (-81.7721196,29.4193918), (-81.7721128,29.4184894), (-81.772106,29.4175869), (-81.7720992,29.4166845), (-81.7720923,29.415782), (-81.7720855,29.4148796), (-81.7720787,29.4139771), (-81.7720719,29.4130746), (-81.772065,29.4121722), (-81.7720582,29.4112697), (-81.7720514,29.4103673), (-81.7720446,29.4094648), (-81.7720378,29.4085623), (-81.7720309,29.4076599), (-81.7720241,29.4067574), (-81.7720173,29.405855), (-81.7720105,29.4049525), (-81.7720037,29.40405), (-81.7719969,29.4031476), (-81.77199,29.402245100000002), (-81.7719832,29.4013427), (-81.7719764,29.4004402), (-81.7719696,29.3995377), (-81.7719628,29.3986353), (-81.771956,29.3977328), (-81.7719491,29.3968304), (-81.7719423,29.3959279), (-81.7719355,29.3950254), (-81.7719287,29.394123), (-81.7719219,29.393220499999998), (-81.7719151,29.3923181), (-81.7719082,29.3914156), (-81.7719014,29.3905131), (-81.7718946,29.3896107), (-81.7718878,29.3887082), (-81.771881,29.3878057), (-81.7718742,29.3869033), (-81.7718674,29.3860008), (-81.7718606,29.3850984), (-81.7718537,29.3841959), (-81.7718469,29.3832934), (-81.7718401,29.382391), (-81.7718333,29.3814885), (-81.771157,29.4284224), (-81.7711502,29.4275199), (-81.7711434,29.4266175), (-81.7711365,29.425715), (-81.7711297,29.4248126), (-81.7711229,29.4239101), (-81.7711161,29.4230077), (-81.7711093,29.4221052), (-81.7711025,29.4212027), (-81.7710957,29.4203003), (-81.7710888,29.4193978), (-81.771082,29.4184954), (-81.7710752,29.4175929), (-81.7710684,29.4166904), (-81.7710616,29.415788), (-81.7710548,29.4148855), (-81.771048,29.4139831), (-81.7710411,29.4130806), (-81.7710343,29.4121781), (-81.7710275,29.4112757), (-81.7710207,29.4103732), (-81.7710139,29.4094708), (-81.7710071,29.4085683), (-81.7710003,29.4076659), (-81.7709935,29.4067634), (-81.7709867,29.4058609), (-81.7709798,29.4049585), (-81.770973,29.404056), (-81.7709662,29.4031536), (-81.7709594,29.4022511), (-81.7709526,29.4013486), (-81.7709458,29.4004462), (-81.770939,29.3995437), (-81.7709322,29.3986412), (-81.7709254,29.3977388), (-81.7709186,29.3968363), (-81.7709118,29.3959339), (-81.770905,29.3950314), (-81.7708982,29.3941289), (-81.7708913,29.3932265), (-81.7708845,29.392324), (-81.7708777,29.3914216), (-81.7708709,29.3905191), (-81.7708641,29.3896166), (-81.7708573,29.3887142), (-81.7708505,29.3878117), (-81.7708437,29.3869092), (-81.7708369,29.3860068), (-81.7708301,29.3851043), (-81.7708233,29.3842019), (-81.7708165,29.3832994), (-81.7708097,29.3823969), (-81.7708029,29.3814945), (-81.7701329,29.4293308), (-81.7701261,29.4284284), (-81.7701193,29.4275259), (-81.7701125,29.4266234), (-81.7701057,29.425721), (-81.7700989,29.4248185), (-81.7700921,29.4239161), (-81.7700853,29.4230136), (-81.7700785,29.4221112), (-81.7700717,29.4212087), (-81.7700649,29.4203062), (-81.770058,29.4194038), (-81.7700512,29.4185013), (-81.7700444,29.4175989), (-81.7700376,29.4166964), (-81.7700308,29.4157939), (-81.770024,29.4148915), (-81.7700172,29.413989), (-81.7700104,29.4130866), (-81.7700036,29.4121841), (-81.7699968,29.4112816), (-81.76999,29.4103792), (-81.7699832,29.4094767), (-81.7699764,29.4085743), (-81.7699696,29.4076718), (-81.7699628,29.4067694), (-81.769956,29.4058669), (-81.7699492,29.4049644), (-81.7699424,29.404062), (-81.7699356,29.4031595), (-81.7699288,29.402257), (-81.769922,29.4013546), (-81.7699152,29.4004521), (-81.7699084,29.3995497), (-81.7699016,29.3986472), (-81.7698948,29.3977447), (-81.769888,29.3968423), (-81.7698812,29.3959398), (-81.7698744,29.3950374), (-81.7698676,29.3941349), (-81.7698608,29.3932324), (-81.769854,29.39233), (-81.7698472,29.3914275), (-81.7698404,29.390525), (-81.7698336,29.3896226), (-81.7698268,29.3887201), (-81.76982,29.3878177), (-81.7698133,29.3869152), (-81.7698065,29.3860127), (-81.7697997,29.3851103), (-81.7697929,29.3842078), (-81.7697861,29.3833053), (-81.7697793,29.3824029), (-81.7697725,29.3815004), (-81.769102,29.4293368), (-81.7690952,29.4284343), (-81.7690884,29.4275319), (-81.7690816,29.4266294), (-81.7690748,29.4257269), (-81.769068,29.4248245), (-81.7690612,29.423922), (-81.7690544,29.4230196), (-81.7690476,29.4221171), (-81.7690409,29.4212147), (-81.7690341,29.4203122), (-81.7690273,29.4194097), (-81.7690205,29.4185073), (-81.7690137,29.4176048), (-81.7690069,29.4167024), (-81.7690001,29.4157999), (-81.7689933,29.4148974), (-81.7689865,29.413995), (-81.7689797,29.4130925), (-81.7689729,29.4121901), (-81.7689661,29.4112876), (-81.7689593,29.4103851), (-81.7689525,29.4094827), (-81.7689457,29.4085802), (-81.7689389,29.4076778), (-81.7689321,29.4067753), (-81.7689253,29.4058728), (-81.7689186,29.4049704), (-81.7689118,29.4040679), (-81.768905,29.4031655), (-81.7688982,29.402263), (-81.7688914,29.4013605), (-81.7688846,29.4004581), (-81.7688778,29.3995556), (-81.768871,29.3986532), (-81.7688642,29.3977507), (-81.7688574,29.3968482), (-81.7688507,29.3959458), (-81.7688439,29.3950433), (-81.7688371,29.3941408), (-81.7688303,29.3932384), (-81.7688235,29.3923359), (-81.7688167,29.3914335), (-81.7688099,29.390531), (-81.7688031,29.3896285), (-81.7687964,29.3887261), (-81.7687896,29.3878236), (-81.7687828,29.3869211), (-81.768776,29.3860187), (-81.7687692,29.3851162), (-81.7687624,29.3842138), (-81.7687557,29.3833113), (-81.7687489,29.3824088), (-81.7687421,29.3815064), (-81.7680711,29.4293427), (-81.7680644,29.4284403), (-81.7680576,29.4275378), (-81.7680508,29.4266353), (-81.768044,29.4257329), (-81.7680372,29.4248304), (-81.7680304,29.423928), (-81.7680236,29.4230255), (-81.7680168,29.4221231), (-81.76801,29.4212206), (-81.7680033,29.4203181), (-81.7679965,29.4194157), (-81.7679897,29.4185132), (-81.7679829,29.4176108), (-81.7679761,29.4167083), (-81.7679693,29.4158058), (-81.7679625,29.4149034), (-81.7679557,29.4140009), (-81.767949,29.4130985), (-81.7679422,29.412196), (-81.7679354,29.4112935), (-81.7679286,29.4103911), (-81.7679218,29.4094886), (-81.767915,29.4085862), (-81.7679083,29.4076837), (-81.7679015,29.4067812), (-81.7678947,29.4058788), (-81.7678879,29.4049763), (-81.7678811,29.4040739), (-81.7678743,29.4031714), (-81.7678676,29.4022689), (-81.7678608,29.4013665), (-81.767854,29.400464), (-81.7678472,29.3995616), (-81.7678404,29.3986591), (-81.7678337,29.3977566), (-81.7678269,29.3968542), (-81.7678201,29.3959517), (-81.7678133,29.3950492), (-81.7678065,29.3941468), (-81.7677998,29.3932443), (-81.767793,29.3923419), (-81.7677862,29.3914394), (-81.7677794,29.3905369), (-81.7677727,29.3896345), (-81.7677659,29.388732), (-81.7677591,29.3878295), (-81.7677523,29.3869271), (-81.7677456,29.3860246), (-81.7677388,29.3851222), (-81.767732,29.3842197), (-81.7677252,29.3833172), (-81.7677185,29.3824148), (-81.7677117,29.3815123), (-81.7670403,29.4293487), (-81.7670335,29.4284462), (-81.7670267,29.4275437), (-81.7670199,29.4266413), (-81.7670131,29.4257388), (-81.7670063,29.4248364), (-81.7669996,29.4239339), (-81.7669928,29.4230315), (-81.766986,29.422128999999998), (-81.7669792,29.4212265), (-81.7669725,29.4203241), (-81.7669657,29.4194216), (-81.7669589,29.4185192), (-81.7669521,29.4176167), (-81.7669453,29.4167142), (-81.7669386,29.4158118), (-81.7669318,29.4149093), (-81.766925,29.4140069), (-81.7669182,29.4131044), (-81.7669115,29.4122019), (-81.7669047,29.4112995), (-81.7668979,29.410397), (-81.7668911,29.4094946), (-81.7668844,29.4085921), (-81.7668776,29.4076896), (-81.7668708,29.4067872), (-81.766864,29.4058847), (-81.7668573,29.4049823), (-81.7668505,29.4040798), (-81.7668437,29.4031773), (-81.7668369,29.4022749), (-81.7668302,29.4013724), (-81.7668234,29.40047), (-81.7668166,29.3995675), (-81.7668099,29.398665), (-81.7668031,29.3977626), (-81.7667963,29.3968601), (-81.7667895,29.3959576), (-81.7667828,29.3950552), (-81.766776,29.3941527), (-81.7667692,29.3932503), (-81.7667625,29.3923478), (-81.7667557,29.3914453), (-81.7667489,29.3905429), (-81.7667422,29.3896404), (-81.7667354,29.3887379), (-81.7667286,29.3878355), (-81.7667219,29.386933), (-81.7667151,29.3860305), (-81.7667083,29.3851281), (-81.7667016,29.3842256), (-81.7666948,29.3833232), (-81.766688,29.3824207), (-81.7666813,29.3815182), (-81.7660094,29.4293546), (-81.7660026,29.4284521), (-81.7659958,29.4275497), (-81.765989,29.4266472), (-81.7659823,29.4257448), (-81.7659755,29.4248423), (-81.7659687,29.4239398), (-81.765962,29.4230374), (-81.7659552,29.4221349), (-81.7659484,29.4212325), (-81.7659417,29.42033), (-81.7659349,29.4194275), (-81.7659281,29.4185251), (-81.7659213,29.4176226), (-81.7659146,29.4167202), (-81.7659078,29.4158177), (-81.765901,29.4149153), (-81.7658943,29.4140128), (-81.7658875,29.4131103), (-81.7658807,29.4122079), (-81.765874,29.4113054), (-81.7658672,29.4104029), (-81.7658604,29.4095005), (-81.7658537,29.408598), (-81.7658469,29.4076956), (-81.7658401,29.4067931), (-81.7658334,29.4058906), (-81.7658266,29.4049882), (-81.7658199,29.4040857), (-81.7658131,29.4031833), (-81.7658063,29.4022808), (-81.7657996,29.4013783), (-81.7657928,29.4004759), (-81.765786,29.3995734), (-81.7657793,29.398671), (-81.7657725,29.3977685), (-81.7657658,29.396866), (-81.765759,29.3959636), (-81.7657522,29.3950611), (-81.7657455,29.3941586), (-81.7657387,29.3932562), (-81.765732,29.3923537), (-81.7657252,29.3914513), (-81.7657184,29.3905488), (-81.7657117,29.3896463), (-81.7657049,29.3887439), (-81.7656982,29.3878414), (-81.7656914,29.3869389), (-81.7656846,29.3860365), (-81.7656779,29.385134), (-81.7656711,29.3842315), (-81.7656644,29.3833291), (-81.7656576,29.3824266), (-81.7656509,29.3815241), (-81.7649785,29.4293605), (-81.7649717,29.4284581), (-81.7649649,29.4275556), (-81.7649582,29.4266531), (-81.7649514,29.4257507), (-81.7649447,29.4248482), (-81.7649379,29.4239458), (-81.7649311,29.4230433), (-81.7649244,29.4221408), (-81.7649176,29.4212384), (-81.7649109,29.4203359), (-81.7649041,29.4194335), (-81.7648973,29.418531), (-81.7648906,29.4176286), (-81.7648838,29.416726099999998), (-81.7648771,29.4158236), (-81.7648703,29.4149212), (-81.7648635,29.4140187), (-81.7648568,29.4131163), (-81.76485,29.4122138), (-81.7648433,29.4113113), (-81.7648365,29.4104089), (-81.7648298,29.4095064), (-81.764823,29.4086039), (-81.7648162,29.4077015), (-81.7648095,29.406799), (-81.7648027,29.4058966), (-81.764796,29.4049941), (-81.7647892,29.4040916), (-81.7647825,29.4031892), (-81.7647757,29.4022867), (-81.764769,29.4013843), (-81.7647622,29.4004818), (-81.7647554,29.3995793), (-81.7647487,29.3986769), (-81.7647419,29.3977744), (-81.7647352,29.3968719), (-81.7647284,29.3959695), (-81.7647217,29.395067), (-81.7647149,29.3941646), (-81.7647082,29.3932621), (-81.7647014,29.3923596), (-81.7646947,29.3914572), (-81.7646879,29.3905547), (-81.7646812,29.3896522), (-81.7646744,29.3887498), (-81.7646677,29.3878473), (-81.7646609,29.3869448), (-81.7646542,29.3860424), (-81.7646474,29.3851399), (-81.7646407,29.3842375), (-81.7646339,29.383335), (-81.7646272,29.3824325), (-81.7646204,29.3815301), (-81.7639476,29.4293664), (-81.7639408,29.428464), (-81.7639341,29.4275615), (-81.7639273,29.4266591), (-81.7639206,29.4257566), (-81.7639138,29.4248541), (-81.7639071,29.4239517), (-81.7639003,29.4230492), (-81.7638936,29.4221468), (-81.7638868,29.4212443), (-81.7638801,29.4203418), (-81.7638733,29.4194394), (-81.7638666,29.4185369), (-81.7638598,29.4176345), (-81.763853,29.416732), (-81.7638463,29.4158295), (-81.7638396,29.4149271), (-81.7638328,29.4140246), (-81.7638261,29.4131222), (-81.7638193,29.4122197), (-81.7638126,29.4113172), (-81.7638058,29.4104148), (-81.7637991,29.4095123), (-81.7637923,29.4086099), (-81.7637856,29.4077074), (-81.7637788,29.4068049), (-81.7637721,29.4059025), (-81.7637653,29.405), (-81.7637586,29.4040976), (-81.7637518,29.4031951), (-81.7637451,29.4022926), (-81.7637383,29.4013902), (-81.7637316,29.4004877), (-81.7637249,29.3995852), (-81.7637181,29.3986828), (-81.7637114,29.3977803), (-81.7637046,29.3968779), (-81.7636979,29.3959754), (-81.7636911,29.3950729), (-81.7636844,29.3941705), (-81.7636777,29.393268), (-81.7636709,29.3923655), (-81.7636642,29.3914631), (-81.7636574,29.3905606), (-81.7636507,29.3896581), (-81.763644,29.3887557), (-81.7636372,29.3878532), (-81.7636305,29.3869508), (-81.7636237,29.3860483), (-81.763617,29.3851458), (-81.7636103,29.3842434), (-81.7636035,29.3833409), (-81.7635968,29.3824384), (-81.76359,29.381536), (-81.7629167,29.4293723), (-81.7629099,29.4284699), (-81.7629032,29.4275674), (-81.7628965,29.426665), (-81.7628897,29.4257625), (-81.762883,29.42486), (-81.7628762,29.4239576), (-81.7628695,29.4230551), (-81.7628627,29.4221527), (-81.762856,29.4212502), (-81.7628493,29.4203478), (-81.7628425,29.4194453), (-81.7628358,29.4185428), (-81.762829,29.4176404), (-81.7628223,29.4167379), (-81.7628155,29.4158355), (-81.7628088,29.414933), (-81.7628021,29.4140305), (-81.7627953,29.4131281), (-81.7627886,29.4122256), (-81.7627818,29.4113231), (-81.7627751,29.4104207), (-81.7627684,29.4095182), (-81.7627616,29.4086158), (-81.7627549,29.4077133), (-81.7627482,29.4068108), (-81.7627414,29.4059084), (-81.7627347,29.4050059), (-81.7627279,29.4041035), (-81.7627212,29.403201), (-81.7627145,29.4022985), (-81.76270769999999,29.4013961), (-81.762701,29.4004936), (-81.7626943,29.3995911), (-81.7626875,29.3986887), (-81.7626808,29.3977862), (-81.7626741,29.3968838), (-81.7626673,29.3959813), (-81.7626606,29.3950788), (-81.7626539,29.3941764), (-81.7626471,29.3932739), (-81.7626404,29.3923714), (-81.7626337,29.391469), (-81.7626269,29.3905665), (-81.7626202,29.389664), (-81.7626135,29.3887616), (-81.7626067,29.3878591), (-81.7626,29.3869567), (-81.7625933,29.3860542), (-81.7625865,29.3851517), (-81.7625798,29.3842493), (-81.7625731,29.383346799999998), (-81.7625664,29.3824443), (-81.7625596,29.3815419), (-81.7618858,29.4293782), (-81.7618791,29.4284758), (-81.7618723,29.4275733), (-81.7618656,29.4266709), (-81.7618589,29.4257684), (-81.7618521,29.4248659), (-81.7618454,29.4239635), (-81.7618386,29.423061), (-81.7618319,29.4221586), (-81.7618252,29.4212561), (-81.7618184,29.4203537), (-81.7618117,29.4194512), (-81.761805,29.4185487), (-81.7617983,29.4176463), (-81.7617915,29.4167438), (-81.7617848,29.4158413), (-81.7617781,29.4149389), (-81.7617713,29.4140364), (-81.7617646,29.413134), (-81.7617579,29.4122315), (-81.7617511,29.411329), (-81.7617444,29.4104266), (-81.7617377,29.4095241), (-81.7617309,29.4086217), (-81.7617242,29.4077192), (-81.7617175,29.4068167), (-81.7617108,29.4059143), (-81.761704,29.4050118), (-81.7616973,29.404109300000002), (-81.7616906,29.4032069), (-81.7616839,29.4023044), (-81.7616771,29.401402), (-81.7616704,29.4004995), (-81.7616637,29.399597), (-81.7616569,29.3986946), (-81.7616502,29.3977921), (-81.7616435,29.3968896), (-81.7616368,29.3959872), (-81.76163,29.3950847), (-81.7616233,29.3941823), (-81.7616166,29.3932798), (-81.7616099,29.3923773), (-81.7616032,29.3914749), (-81.7615964,29.3905724), (-81.7615897,29.3896699), (-81.761583,29.3887675), (-81.7615763,29.387865), (-81.7615695,29.3869625), (-81.7615628,29.3860601), (-81.7615561,29.3851576), (-81.7615494,29.3842551), (-81.7615427,29.3833527), (-81.7615359,29.3824502), (-81.7615292,29.3815478), (-81.7608549,29.4293841), (-81.7608482,29.4284817), (-81.7608414,29.4275792), (-81.7608347,29.4266768), (-81.760828,29.4257743), (-81.7608213,29.4248718), (-81.7608145,29.4239694), (-81.7608078,29.4230669), (-81.7608011,29.4221645), (-81.7607944,29.421262), (-81.7607876,29.4203595), (-81.7607809,29.4194571), (-81.7607742,29.4185546), (-81.7607675,29.4176522), (-81.7607608,29.4167497), (-81.760754,29.4158472), (-81.7607473,29.4149448), (-81.7607406,29.4140423), (-81.7607339,29.4131399), (-81.7607271,29.4122374), (-81.7607204,29.4113349), (-81.7607137,29.4104325), (-81.760707,29.40953), (-81.7607003,29.4086275), (-81.7606935,29.4077251), (-81.7606868,29.4068226), (-81.7606801,29.4059202), (-81.7606734,29.4050177), (-81.7606667,29.4041152), (-81.76066,29.4032128), (-81.7606532,29.4023103), (-81.76064650000001,29.4014078), (-81.7606398,29.4005054), (-81.7606331,29.3996029), (-81.7606264,29.3987005), (-81.7606196,29.397798), (-81.7606129,29.3968955), (-81.7606062,29.3959931), (-81.7605995,29.3950906), (-81.7605928,29.3941881), (-81.7605861,29.3932857), (-81.7605794,29.3923832), (-81.7605726,29.3914807), (-81.7605659,29.3905783), (-81.7605592,29.3896758), (-81.7605525,29.3887734), (-81.7605458,29.3878709), (-81.7605391,29.3869684), (-81.7605324,29.386066), (-81.7605257,29.3851635), (-81.7605189,29.384261), (-81.7605122,29.3833586), (-81.7605055,29.3824561), (-81.7604988,29.3815536), (-81.759824,29.42939), (-81.7598173,29.4284876), (-81.7598106,29.4275851), (-81.7598039,29.4266826), (-81.7597971,29.4257802), (-81.7597904,29.4248777), (-81.7597837,29.4239753), (-81.759777,29.4230728), (-81.7597703,29.4221703), (-81.7597636,29.4212679), (-81.7597568,29.4203654), (-81.7597501,29.419463), (-81.7597434,29.4185605), (-81.7597367,29.417658), (-81.75973,29.4167556), (-81.7597233,29.4158531), (-81.7597166,29.4149507), (-81.7597098,29.4140482), (-81.7597031,29.4131457), (-81.7596964,29.4122433), (-81.7596897,29.4113408), (-81.759683,29.4104384), (-81.7596763,29.4095359), (-81.7596696,29.4086334), (-81.7596629,29.407731), (-81.7596562,29.4068285), (-81.7596494,29.405926), (-81.7596427,29.4050236), (-81.759636,29.4041211), (-81.7596293,29.4032187), (-81.7596226,29.4023162), (-81.7596159,29.4014137), (-81.7596092,29.4005113), (-81.7596025,29.3996088), (-81.7595958,29.3987063), (-81.7595891,29.3978039), (-81.7595824,29.3969014), (-81.7595757,29.3959989), (-81.759569,29.3950965), (-81.7595622,29.394194), (-81.7595555,29.3932916), (-81.7595488,29.3923891), (-81.7595421,29.3914866), (-81.7595354,29.3905842), (-81.7595287,29.3896817), (-81.759522,29.3887792), (-81.7595153,29.3878768), (-81.7595086,29.3869743), (-81.7595019,29.3860718), (-81.7594952,29.3851694), (-81.7594885,29.3842669), (-81.7594818,29.3833644), (-81.7594751,29.382462), (-81.7594684,29.3815595), (-81.7587931,29.4293959), (-81.7587864,29.4284934), (-81.7587797,29.427591), (-81.758773,29.4266885), (-81.7587663,29.4257861), (-81.7587596,29.4248836), (-81.7587529,29.4239811), (-81.7587462,29.4230787), (-81.7587395,29.4221762), (-81.7587327,29.4212738), (-81.758726,29.4203713), (-81.7587193,29.4194688), (-81.7587126,29.4185664), (-81.7587059,29.4176639), (-81.7586992,29.4167615), (-81.7586925,29.415859), (-81.7586858,29.4149565), (-81.7586791,29.4140541), (-81.7586724,29.4131516), (-81.7586657,29.4122491), (-81.758659,29.4113467), (-81.7586523,29.4104442), (-81.7586456,29.4095418), (-81.7586389,29.4086393), (-81.7586322,29.4077368), (-81.7586255,29.4068344), (-81.7586188,29.4059319), (-81.7586121,29.4050294), (-81.7586054,29.404127), (-81.7585987,29.4032245), (-81.758592,29.4023221), (-81.7585853,29.4014196), (-81.7585786,29.4005171), (-81.7585719,29.3996147), (-81.7585652,29.3987122), (-81.7585585,29.3978097), (-81.7585518,29.3969073), (-81.7585451,29.3960048), (-81.7585384,29.3951024), (-81.7585317,29.3941999), (-81.758525,29.3932974), (-81.7585183,29.392395), (-81.7585116,29.3914925), (-81.7585049,29.39059), (-81.7584982,29.3896876), (-81.7584915,29.3887851), (-81.7584848,29.3878826), (-81.7584781,29.3869802), (-81.7584715,29.3860777), (-81.7584648,29.3851752), (-81.7584581,29.3842728), (-81.7584514,29.3833703), (-81.7584447,29.3824678), (-81.758438,29.3815654), (-81.7577622,29.4294018), (-81.7577555,29.4284993), (-81.7577488,29.4275968), (-81.7577421,29.4266944), (-81.7577354,29.4257919), (-81.7577287,29.4248895), (-81.757722,29.423987), (-81.7577153,29.4230845), (-81.7577086,29.4221821), (-81.7577019,29.4212796), (-81.7576952,29.4203772), (-81.7576885,29.4194747), (-81.7576818,29.4185722), (-81.7576752,29.4176698), (-81.7576685,29.4167673), (-81.7576618,29.4158649), (-81.7576551,29.4149624), (-81.7576484,29.4140599), (-81.7576417,29.4131575), (-81.757635,29.412255), (-81.7576283,29.4113525), (-81.7576216,29.4104501), (-81.7576149,29.4095476), (-81.75760819999999,29.4086452), (-81.7576015,29.4077427), (-81.7575948,29.4068402), (-81.7575881,29.4059378), (-81.7575814,29.4050353), (-81.7575748,29.4041328), (-81.7575681,29.403230399999998), (-81.7575614,29.4023279), (-81.7575547,29.4014255), (-81.757548,29.400523), (-81.7575413,29.3996205), (-81.7575346,29.3987181), (-81.7575279,29.3978156), (-81.7575212,29.3969131), (-81.7575145,29.3960107), (-81.7575079,29.3951082), (-81.7575012,29.3942057), (-81.7574945,29.3933033), (-81.7574878,29.3924008), (-81.7574811,29.3914984), (-81.7574744,29.3905959), (-81.7574677,29.3896934), (-81.7574611,29.388791), (-81.7574544,29.3878885), (-81.7574477,29.386986), (-81.757441,29.3860836), (-81.7574343,29.3851811), (-81.7574276,29.384278600000002), (-81.7574209,29.3833762), (-81.7574143,29.3824737), (-81.7574076,29.3815712), (-81.7567313,29.4294076), (-81.7567246,29.4285052), (-81.7567179,29.4276027), (-81.7567113,29.4267002), (-81.7567046,29.4257978), (-81.7566979,29.4248953), (-81.7566912,29.423992900000002), (-81.7566845,29.4230904), (-81.7566778,29.4221879), (-81.7566711,29.4212855), (-81.7566644,29.420383), (-81.7566577,29.4194806), (-81.7566511,29.4185781), (-81.7566444,29.4176756), (-81.7566377,29.4167732), (-81.756631,29.4158707), (-81.7566243,29.4149683), (-81.7566176,29.4140658), (-81.7566109,29.4131633), (-81.7566043,29.4122609), (-81.7565976,29.4113584), (-81.7565909,29.4104559), (-81.7565842,29.4095535), (-81.7565775,29.408651), (-81.7565708,29.4077486), (-81.7565642,29.4068461), (-81.7565575,29.4059436), (-81.7565508,29.4050412), (-81.7565441,29.4041387), (-81.7565374,29.4032362), (-81.7565308,29.4023338), (-81.75652410000001,29.4014313), (-81.7565174,29.4005288), (-81.7565107,29.3996264), (-81.756504,29.3987239), (-81.7564973,29.3978215), (-81.7564907,29.396919), (-81.756484,29.3960165), (-81.7564773,29.3951141), (-81.7564706,29.3942116), (-81.756464,29.3933091), (-81.7564573,29.3924067), (-81.7564506,29.3915042), (-81.7564439,29.3906017), (-81.7564372,29.3896993), (-81.7564306,29.3887968), (-81.7564239,29.3878943), (-81.7564172,29.3869919), (-81.7564105,29.3860894), (-81.7564039,29.3851869), (-81.7563972,29.3842845), (-81.7563905,29.383382), (-81.7563838,29.3824795), (-81.7563772,29.3815771), (-81.7557004,29.4294135), (-81.7556937,29.428511), (-81.7556871,29.4276086), (-81.7556804,29.4267061), (-81.7556737,29.4258036), (-81.755667,29.4249012), (-81.7556603,29.4239987), (-81.7556537,29.4230963), (-81.755647,29.4221938), (-81.7556403,29.4212913), (-81.7556336,29.4203889), (-81.755627,29.4194864), (-81.7556203,29.418584), (-81.7556136,29.4176815), (-81.7556069,29.416779), (-81.7556002,29.4158766), (-81.7555936,29.4149741), (-81.7555869,29.4140716), (-81.7555802,29.4131692), (-81.7555735,29.4122667), (-81.7555669,29.4113643), (-81.7555602,29.4104618), (-81.7555535,29.4095593), (-81.7555468,29.4086569), (-81.7555402,29.4077544), (-81.7555335,29.4068519), (-81.7555268,29.4059495), (-81.7555201,29.405047), (-81.7555135,29.4041446), (-81.7555068,29.4032421), (-81.7555001,29.4023396), (-81.7554935,29.4014372), (-81.7554868,29.4005347), (-81.7554801,29.3996322), (-81.7554734,29.3987298), (-81.7554668,29.3978273), (-81.7554601,29.3969248), (-81.7554534,29.3960224), (-81.7554468,29.3951199), (-81.7554401,29.3942174), (-81.7554334,29.393315), (-81.7554268,29.3924125), (-81.7554201,29.39151), (-81.7554134,29.3906076), (-81.7554067,29.3897051), (-81.7554001,29.3888027), (-81.7553934,29.3879002), (-81.7553867,29.3869977), (-81.7553801,29.3860953), (-81.7553734,29.3851928), (-81.7553667,29.3842903), (-81.7553601,29.3833879), (-81.7553534,29.3824854), (-81.7553468,29.3815829), (-81.7546695,29.4294193), (-81.7546629,29.428516899999998), (-81.7546562,29.4276144), (-81.7546495,29.4267119), (-81.7546428,29.4258095), (-81.7546362,29.424907), (-81.7546295,29.4240046), (-81.7546228,29.4231021), (-81.7546162,29.4221996), (-81.7546095,29.4212972), (-81.7546028,29.4203947), (-81.7545962,29.4194923), (-81.7545895,29.4185898), (-81.7545828,29.4176873), (-81.7545762,29.4167849), (-81.7545695,29.4158824), (-81.7545628,29.4149799), (-81.7545562,29.4140775), (-81.7545495,29.413175), (-81.7545428,29.4122726), (-81.7545362,29.4113701), (-81.7545295,29.4104676), (-81.7545228,29.4095652), (-81.7545162,29.4086627), (-81.7545095,29.4077602), (-81.7545028,29.4068578), (-81.7544962,29.4059553), (-81.7544895,29.4050529), (-81.7544828,29.4041504), (-81.7544762,29.4032479), (-81.7544695,29.4023455), (-81.7544628,29.401443), (-81.7544562,29.4005405), (-81.7544495,29.3996381), (-81.7544429,29.3987356), (-81.7544362,29.3978331), (-81.7544295,29.3969307), (-81.7544229,29.3960282), (-81.7544162,29.3951257), (-81.7544096,29.3942233), (-81.7544029,29.3933208), (-81.7543962,29.3924183), (-81.7543896,29.3915159), (-81.7543829,29.3906134), (-81.7543763,29.389711), (-81.7543696,29.3888085), (-81.7543629,29.387906), (-81.7543563,29.3870036), (-81.7543496,29.3861011), (-81.754343,29.3851986), (-81.7543363,29.3842962), (-81.7543297,29.3833937), (-81.754323,29.3824912), (-81.7543163,29.3815888), (-81.7536386,29.4294252), (-81.753632,29.4285227), (-81.7536253,29.4276202), (-81.7536187,29.4267178), (-81.753612,29.4258153), (-81.7536053,29.4249129), (-81.7535987,29.4240104), (-81.753592,29.4231079), (-81.7535853,29.4222055), (-81.7535787,29.421303), (-81.753572,29.4204006), (-81.7535654,29.4194981), (-81.7535587,29.4185956), (-81.753552,29.4176932), (-81.7535454,29.4167907), (-81.75353870000001,29.4158882), (-81.7535321,29.4149858), (-81.7535254,29.4140833), (-81.7535188,29.4131809), (-81.7535121,29.4122784), (-81.7535054,29.4113759), (-81.7534988,29.4104735), (-81.7534921,29.409571), (-81.7534855,29.4086685), (-81.7534788,29.4077661), (-81.7534722,29.4068636), (-81.7534655,29.4059611), (-81.7534588,29.4050587), (-81.7534522,29.4041562), (-81.7534455,29.4032538), (-81.7534389,29.4023513), (-81.7534322,29.4014488), (-81.7534256,29.4005464), (-81.7534189,29.3996439), (-81.7534123,29.3987414), (-81.7534056,29.397839), (-81.753399,29.3969365), (-81.7533923,29.396034), (-81.7533857,29.3951316), (-81.753379,29.3942291), (-81.7533724,29.3933266), (-81.7533657,29.3924242), (-81.7533591,29.3915217), (-81.7533524,29.3906192), (-81.7533458,29.3897168), (-81.7533391,29.3888143), (-81.7533325,29.3879118), (-81.7533258,29.3870094), (-81.75331919999999,29.3861069), (-81.7533125,29.3852044), (-81.7533059,29.384302), (-81.7532992,29.3833995), (-81.7532926,29.382497), (-81.7532859,29.3815946), (-81.7526077,29.429431), (-81.7526011,29.4285285), (-81.7525944,29.4276261), (-81.7525878,29.4267236), (-81.7525811,29.4258211), (-81.7525745,29.4249187), (-81.7525678,29.4240162), (-81.7525612,29.4231138), (-81.7525545,29.4222113), (-81.7525479,29.4213088), (-81.7525412,29.4204064), (-81.7525346,29.4195039), (-81.7525279,29.4186015), (-81.7525213,29.417699), (-81.7525146,29.4167965), (-81.752508,29.4158941), (-81.7525013,29.4149916), (-81.7524947,29.414089099999998), (-81.752488,29.4131867), (-81.7524814,29.4122842), (-81.7524747,29.4113818), (-81.7524681,29.4104793), (-81.7524614,29.4095768), (-81.7524548,29.4086744), (-81.7524481,29.4077719), (-81.7524415,29.4068694), (-81.7524348,29.405967), (-81.7524282,29.4050645), (-81.7524216,29.404162), (-81.7524149,29.4032596), (-81.7524083,29.4023571), (-81.7524016,29.4014546), (-81.752395,29.4005522), (-81.7523883,29.3996497), (-81.7523817,29.3987473), (-81.752375,29.3978448), (-81.7523684,29.3969423), (-81.7523618,29.3960399), (-81.7523551,29.3951374), (-81.7523485,29.3942349), (-81.7523418,29.3933325), (-81.7523352,29.39243), (-81.7523285,29.3915275), (-81.7523219,29.3906251), (-81.7523153,29.3897226), (-81.7523086,29.3888201), (-81.752302,29.3879177), (-81.7522953,29.3870152), (-81.7522887,29.386112699999998), (-81.7522821,29.3852103), (-81.7522754,29.3843078), (-81.7522688,29.3834053), (-81.7522621,29.3825029), (-81.7522555,29.3816004), (-81.7515768,29.4294368), (-81.7515702,29.4285344), (-81.7515636,29.4276319), (-81.7515569,29.4267294), (-81.7515503,29.425827), (-81.7515436,29.4249245), (-81.751537,29.424022), (-81.7515303,29.4231196), (-81.7515237,29.4222171), (-81.7515171,29.4213147), (-81.7515104,29.4204122), (-81.7515038,29.4195097), (-81.7514971,29.4186073), (-81.7514905,29.4177048), (-81.7514839,29.4168023), (-81.7514772,29.4158999), (-81.7514706,29.4149974), (-81.7514639,29.414095), (-81.7514573,29.4131925), (-81.7514507,29.41229), (-81.751444,29.4113876), (-81.7514374,29.4104851), (-81.7514307,29.4095826), (-81.7514241,29.4086802), (-81.7514175,29.4077777), (-81.7514108,29.4068753), (-81.7514042,29.4059728), (-81.7513975,29.4050703), (-81.7513909,29.4041679), (-81.7513843,29.4032654), (-81.7513776,29.4023629), (-81.751371,29.4014605), (-81.7513644,29.400558), (-81.7513577,29.3996555), (-81.7513511,29.3987531), (-81.7513445,29.3978506), (-81.7513378,29.3969481), (-81.7513312,29.3960457), (-81.7513246,29.3951432), (-81.7513179,29.3942407), (-81.7513113,29.3933383), (-81.7513047,29.3924358), (-81.751298,29.3915333), (-81.7512914,29.3906309), (-81.7512848,29.3897284), (-81.7512781,29.3888259), (-81.7512715,29.3879235), (-81.7512649,29.387021), (-81.7512582,29.3861185), (-81.7512516,29.3852161), (-81.751245,29.3843136), (-81.7512384,29.3834111), (-81.7512317,29.3825087), (-81.7512251,29.3816062);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6168', () => {
    const query = `INSERT INTO s VALUES ('a', 0, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6169', () => {
    const query = `INSERT INTO p VALUES (8, 'a', [[(0, 0), (10, 0), (10, 10), (0, 10)]], 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6170', () => {
    const query = `INSERT INTO json (y) VALUES ('Hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6171', () => {
    const query = `INSERT INTO json (y) FORMAT JSONEachRow {"y": "World 1"};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6172', () => {
    const query = `INSERT INTO json (x, y) FORMAT JSONEachRow {"y": "World 2"};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6173', () => {
    const query = `insert into array_functions values ([], [], 1, Null, 1, Null), ([], [1], 1, Null, 1, Null), ([1, 2, 3, 4, 5], [6, 7], 2, Null, 1, Null), ([1, 2, 3, 4, 5, 6, 7], [8], 2, 2, 3, 3), ([1, 2, 3, 4, 5, 6, 7], [], 2, Null, -3, -3), ([1, 2, 3, 4, 5, 6, 7], [], 2, Null, -3, Null), ([1, 2, 3, 4, 5, 6, 7], [], -5, -5, 4, 4), ([1, 2, 3, 4, 5, 6, 7], [], -5, -5, -3, -3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6174', () => {
    const query = `insert into array_functions values ([], [], 1, Null, 1, Null), ([], [1, Null], 1, Null, 1, Null), ([1, 2, 3, 4, 5], [6, Null], 2, Null, 1, Null), ([1, Null, 3, 4, Null, 6, 7], [8], 2, 2, 3, 3),([1, 2, 3, Null, 5, 6, 7], [Null, 1], 2, Null, -3, -3),([1, 2, 3, 4, 5, Null, 7], [1, Null], 2, Null, -3, Null), ([1, 2, 3, 4, 5, 6, 7], [1, 2], -5, -5, 4, 4),([1, Null, 3, Null, 5, 6, 7], [], -5, -5, -3, -3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6175', () => {
    const query = `insert into array_functions values ([], [], 1, Null, 1, Null), ([], [1, 2], 1, Null, 1, Null), ([1, 2, 3, 4, 5], [6, 7], 2, Null, 1, Null), ([1, Null,3,4, Null, 6, 7], [8], 2, 2, 3, 3),([1, 2, 3, Null, 5, 6, 7], [0, 1], 2, Null, -3, -3),([1, 2, 3, 4, 5, Null, 7], [1, 2], 2, Null, -3, Null),([1, 2, 3,4, 5, 6, 7], [1, 2], -5, -5, 4, 4),([1, Null, 3, Null, 5, 6, 7], [], -5, -5, -3, -3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6176', () => {
    const query = `insert into array_functions values ([], [], '', Null, 1, Null, 1, Null), ([], ['1', '2'], 'a', 'b', 1, Null, 1, Null), (['1', '2', '3', '4', '5'], ['6','7'], 'a', Null, 2, Null, 1, Null), (['1', Null, '3', '4', Null, '6', '7'], ['8'], 'a', 'b', 2, 2, 3, 3),(['1', '2', '3', Null, '5', '6', '7'], ['0','1'], 'a', Null, 2, Null, -3, -3),(['1', '2', '3', '4', '5', Null, '7'], ['1', '2'], 'a', 'b', 2, Null, -3, Null),(['1', '2', '3', '4', '5', '6', '7'],['1', '2'], 'a', Null, -5, -5, 4, 4),(['1', Null, '3', Null, '5', '6', '7'], [], 'a', 'b', -5, -5, -3, -3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6177', () => {
    const query = `insert into one_table select today(), toUInt64(1) from system.numbers limit 100000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6178', () => {
    const query = `INSERT INTO nested VALUES ([1, 2]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6179', () => {
    const query = `INSERT INTO temp_tab SELECT number FROM system.numbers LIMIT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6180', () => {
    const query = `INSERT INTO pk (x, y, z) VALUES (1, 11, 1235), (2, 11, 4395), (3, 22, 3545), (4, 22, 6984), (5, 33, 4596), (61, 11, 4563), (62, 11, 4578), (63, 11, 3572), (64, 22, 5786), (65, 22, 5786), (66, 22, 2791), (67, 22, 2791), (121, 33, 2791), (122, 33, 2791), (123, 33, 1235), (124, 44, 4935), (125, 44, 4578), (126, 55, 5786), (127, 55, 2791), (128, 55, 1235);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6181', () => {
    const query = `INSERT INTO non_ascii VALUES ('hello', 'world');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6182', () => {
    const query = `insert into tab_00484 select today(), number, toFixedString('', 128) from system.numbers limit 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6183', () => {
    const query = `insert into tab_00484 select today(), number, toFixedString('', 128) from system.numbers limit 47;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6184', () => {
    const query = `insert into tab_00484 select today(), number, toFixedString('', 128) from system.numbers limit 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6185', () => {
    const query = `insert into tab_00484 select today(), number, 'abc' from system.numbers limit 81920;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6186', () => {
    const query = `insert into \`table_00483\` select today() as date, [number], [number + 1], toFixedString('', 16) from system.numbers limit 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6187', () => {
    const query = `insert into \`table_00483\` select today() as date, [number], [number + 1], toFixedString('', 16), number from system.numbers limit 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6188', () => {
    const query = `INSERT INTO tab_00481 SELECT today() as date, number as value, '' as s, toFixedString('', 16) as m from system.numbers limit 42;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6189', () => {
    const query = `INSERT INTO null_00481 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6190', () => {
    const query = `INSERT INTO set VALUES ('hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6191', () => {
    const query = `INSERT INTO join VALUES (1, 'hello');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6192', () => {
    const query = `INSERT INTO strings_00469 VALUES ('abcde\\0', 'abcde'), ('aa\\0a', 'aa\\0b'), ('aa', 'aa\\0'), ('a\\0\\0\\0\\0', 'a\\0\\0\\0'), ('a\\0\\0', 'a\\0'), ('a', 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6193', () => {
    const query = `INSERT INTO nested VALUES ([1, 2, 3], [4, 5, 6]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6194', () => {
    const query = `INSERT INTO nested VALUES ([1, 2], ['hello', 'world']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6195', () => {
    const query = `INSERT INTO nullable_00465 (cat) VALUES ('test');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6196', () => {
    const query = `INSERT INTO json FORMAT JSONEachRow {"x": true, "title": "true"}, {"x": false, "title": "false"}, {"x": 0, "title": "0"}, {"x": 1, "title": "1"};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6197', () => {
    const query = `INSERT INTO u32 (x) VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6198', () => {
    const query = `INSERT INTO u64 (x) VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6199', () => {
    const query = `INSERT INTO u32 (x) VALUES (4294967290);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6200', () => {
    const query = `INSERT INTO u64 (x) VALUES (4294967290);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6201', () => {
    const query = `INSERT INTO u64 (x) VALUES (4294967299);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6202', () => {
    const query = `INSERT INTO s64 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6203', () => {
    const query = `INSERT INTO s64 VALUES (-1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6204', () => {
    const query = `INSERT INTO u64 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6205', () => {
    const query = `INSERT INTO one_00458 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6206', () => {
    const query = `INSERT INTO two_00458 VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6207', () => {
    const query = `INSERT INTO one_00458 VALUES (2147483650);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6208', () => {
    const query = `INSERT INTO two_00458 VALUES (2147483650);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6209', () => {
    const query = `INSERT INTO one_00458 VALUES ('1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6210', () => {
    const query = `INSERT INTO two_00458 VALUES ('1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6211', () => {
    const query = `INSERT INTO one_00458 (x, y) VALUES ([1], [0]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6212', () => {
    const query = `INSERT INTO two_00458 (x, y) VALUES ([1], [0]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6213', () => {
    const query = `INSERT INTO one_00458 (x, y) VALUES ([4294967290], [4294967290]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6214', () => {
    const query = `INSERT INTO two_00458 (x, y) VALUES ([4294967290], [4294967290]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6215', () => {
    const query = `INSERT INTO one_00458 (x, y) VALUES ([4294967299], [4294967299]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6216', () => {
    const query = `INSERT INTO two_00458 (x, y) VALUES ([4294967299], [4294967299]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6217', () => {
    const query = `INSERT INTO nullable_00457 SELECT toString(number), number % 3 = 1 ? toString(number) : NULL, arrayMap(x -> x % 2 = 1 ? x : NULL, range(number)) FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6218', () => {
    const query = `INSERT INTO nullable_00457 SELECT toString(number), number % 3 = 1 ? toString(number) : NULL, arrayMap(x -> x % 2 = 1 ? x : NULL, range(number)) FROM system.numbers LIMIT 10, 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6219', () => {
    const query = `INSERT INTO nullable_alter (x) VALUES ('Hello'), ('World');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6220', () => {
    const query = `INSERT INTO nullable_alter (x) VALUES ('xyz'), (NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6221', () => {
    const query = `INSERT INTO cast_enums SELECT 'session' AS type, toDate('2017-01-01') AS date, number AS id FROM system.numbers LIMIT 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6222', () => {
    const query = `INSERT INTO cast_enums SELECT 2 AS type, toDate('2017-01-01') AS date, number AS id FROM system.numbers LIMIT 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6223', () => {
    const query = `INSERT INTO cast_enums VALUES ('wrong_value', '2017-01-02', 7); -- { clientError UNKNOWN_ELEMENT_OF_ENUM } DROP TABLE IF EXISTS cast_enums;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6224', () => {
    const query = `INSERT INTO data VALUES ([-1,-1,-1]), ([4,-1,2]), ([0,25,-1]), ([-1,-1,7]), ([-1,-1,-1]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6225', () => {
    const query = `INSERT INTO clear_column VALUES ('2016-12-12', 1, 'a'), ('2016-11-12', 2, 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6226', () => {
    const query = `INSERT INTO clear_column1 (d) VALUES ('2000-01-01'), ('2000-02-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6227', () => {
    const query = `INSERT INTO clear_column1 VALUES ('2000-01-01', 1, 'a'), ('2000-02-01', 2, 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6228', () => {
    const query = `INSERT INTO clear_column1 VALUES ('2000-01-01', 3, 'c'), ('2000-02-01', 4, 'd');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6229', () => {
    const query = `INSERT INTO nulls SELECT toDate('2000-01-01'), number % 10 != 0 ? number : NULL FROM system.numbers LIMIT 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6230', () => {
    const query = `INSERT INTO agg_func_col (k) VALUES (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6231', () => {
    const query = `INSERT INTO agg_func_col (k, d) SELECT 1 AS k, arrayReduce('sumState', [toUInt64(100)]) AS d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6232', () => {
    const query = `INSERT INTO agg_func_col (k, af_avg1) VALUES (2, arrayReduce('avgState', [101]));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6233', () => {
    const query = `INSERT INTO agg_func_col (k, af_avg1, af_gua) VALUES (3, arrayReduce('avgState', [102, 102]), arrayReduce('groupUniqArrayState', ['igua', 'igua']));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6234', () => {
    const query = `INSERT INTO log VALUES ('Hello'), ('World');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6235', () => {
    const query = `INSERT INTO distinct (Num, Name) VALUES (1, 'John');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6236', () => {
    const query = `INSERT INTO distinct (Num, Name) VALUES (3, 'Mary');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6237', () => {
    const query = `INSERT INTO distinct (Num, Name) VALUES (4, 'Mary');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6238', () => {
    const query = `INSERT INTO distinct (Num, Name) VALUES (5, 'Bill');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6239', () => {
    const query = `INSERT INTO distinct (Num, Name) VALUES (7, 'Bill');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6240', () => {
    const query = `INSERT INTO distinct (Num, Name) VALUES (7, 'Mary');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6241', () => {
    const query = `INSERT INTO distinct (Num, Name) VALUES (7, 'John');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6242', () => {
    const query = `INSERT INTO merge_tree VALUES (1, '2000-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6243', () => {
    const query = `INSERT INTO const_in_const VALUES(1, now(), 1, 'test1', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6244', () => {
    const query = `INSERT INTO const_in_const VALUES(2, now(), 1, 'test2', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6245', () => {
    const query = `INSERT INTO const_in_const VALUES(3, now(), 1, 'test3', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6246', () => {
    const query = `INSERT INTO const_in_const VALUES(4, now(), 2, 'test4', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6247', () => {
    const query = `INSERT INTO const_in_const VALUES(5, now(), 3, 'test5', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6248', () => {
    const query = `INSERT INTO arena SELECT number % 10 AS k, hex(intDiv(number, 10) % 1000) AS d FROM system.numbers LIMIT 10000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6249', () => {
    const query = `INSERT INTO limit_by (Num, Name) VALUES (1, 'John');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6250', () => {
    const query = `INSERT INTO limit_by (Num, Name) VALUES (3, 'Mary');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6251', () => {
    const query = `INSERT INTO limit_by (Num, Name) VALUES (4, 'Mary');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6252', () => {
    const query = `INSERT INTO limit_by (Num, Name) VALUES (5, 'Bill');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6253', () => {
    const query = `INSERT INTO limit_by (Num, Name) VALUES (7, 'Bill');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6254', () => {
    const query = `INSERT INTO limit_by (Num, Name) VALUES (7, 'Mary');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6255', () => {
    const query = `INSERT INTO limit_by (Num, Name) VALUES (7, 'John');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6256', () => {
    const query = `INSERT INTO grop_uniq_array_date VALUES (toDate('2016-12-16'), toDateTime('2016-12-16 12:00:00'), 1) (toDate('2016-12-16'), toDateTime('2016-12-16 12:00:00'), 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6257', () => {
    const query = `INSERT INTO grop_uniq_array_date VALUES (toDate('2016-12-17'), toDateTime('2016-12-17 12:00:00'), 1), (toDate('2016-12-18'), toDateTime('2016-12-18 12:00:00'), 1), (toDate('2016-12-16'), toDateTime('2016-12-16 12:00:00'), 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6258', () => {
    const query = `INSERT INTO test1_00395(col1) VALUES ([1+1]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6259', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES (2,7)(6,9)(5,1)(4,3)(8,2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6260', () => {
    const query = `INSERT INTO test2(col1,col2) SELECT col1,col2 FROM test1_00395;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6261', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES (2,7)(NULL,6)(9,NULL)(NULL,NULL)(5,1)(42,42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6262', () => {
    const query = `INSERT INTO test1_00395 VALUES ('a'), ('b'), ('c'), (NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6263', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES (toInt8(1),toUInt16(2),toFloat32(3))(NULL,toUInt16(1),toFloat32(2))(toInt8(1),NULL,toFloat32(2))(toInt8(1),toUInt16(2),NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6264', () => {
    const query = `INSERT INTO test1_00395(cond1,then1,cond2,then2,then3) VALUES(1,1,1,42,99)(0,7,1,99,42)(NULL,6,2,99,NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6265', () => {
    const query = `INSERT INTO test1_00395(col1) VALUES(1),(2),(3),(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6266', () => {
    const query = `INSERT INTO test1_00395(col1) VALUES([2,3,7,NULL]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6267', () => {
    const query = `INSERT INTO test1_00395(col1) VALUES([NULL,3,7,4]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6268', () => {
    const query = `INSERT INTO test1_00395(col1) VALUES([2,NULL,7,NULL]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6269', () => {
    const query = `INSERT INTO test1_00395(col1) VALUES([2,3,NULL,4]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6270', () => {
    const query = `INSERT INTO test1_00395(col1) VALUES([NULL,NULL,NULL,NULL]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6271', () => {
    const query = `INSERT INTO test1_00395(col1) VALUES(['a','bc','def',NULL]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6272', () => {
    const query = `INSERT INTO test1_00395(col1) VALUES([NULL,'bc','def','ghij']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6273', () => {
    const query = `INSERT INTO test1_00395(col1) VALUES(['a',NULL,'def',NULL]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6274', () => {
    const query = `INSERT INTO test1_00395(col1) VALUES(['a','bc',NULL,'ghij']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6275', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([2,3,7,NULL], 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6276', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([NULL,3,7,4], 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6277', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([2,NULL,7,NULL], 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6278', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([2,3,NULL,4],4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6279', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([NULL,NULL,NULL,NULL],3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6280', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES(['a','bc','def',NULL], 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6281', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([NULL,'bc','def','ghij'], 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6282', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES(['a',NULL,'def','ghij'], 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6283', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES(['a','bc',NULL,'ghij'],4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6284', () => {
    const query = `INSERT INTO test1_00395(col1) VALUES(1),(2),(3),(4),(NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6285', () => {
    const query = `INSERT INTO test1_00395(col1) VALUES('a'),('bc'),('def'),('ghij');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6286', () => {
    const query = `INSERT INTO test1_00395(col1) VALUES('a'),('bc'),('def'),('ghij'),(NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6287', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([2,3,7,NULL], 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6288', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([NULL,3,7,4], 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6289', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([2,NULL,7,NULL], 7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6290', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([2,3,NULL,4],5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6291', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([NULL,NULL,NULL,NULL],NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6292', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES(['a','bc','def',NULL], 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6293', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([NULL,'bc','def','ghij'], 'bc');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6294', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES(['a',NULL,'def','ghij'], 'def');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6295', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES(['a','bc',NULL,'ghij'], 'ghij');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6296', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([NULL,NULL,NULL,NULL], NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6297', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES('A', 0, 'ABCDEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6298', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES('A', 0, 'BACDEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6299', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES('A', 1, 'BCADEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6300', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES('A', 1, 'BCDAEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6301', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES('B', 1, 'BCDEAFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6302', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES('B', 1, 'BCDEFAGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6303', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES('B', 1, 'BCDEFGAH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6304', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES('B', 1, 'BCDEFGHA');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6305', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES('C', 1, 'ACBDEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6306', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES('C', NULL, 'ACDBEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6307', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES('C', NULL, 'ACDEBFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6308', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES('C', NULL, 'ACDEFBGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6309', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES(NULL, 1, 'ACDEFGBH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6310', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES(NULL, NULL, 'ACDEFGHB');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6311', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES('A', 'ABCDEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6312', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES('A', 'BACDEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6313', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES('A', 'BCADEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6314', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES('A', 'BCDAEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6315', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES('B', 'BCDEAFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6316', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES('B', 'BCDEFAGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6317', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES('B', 'BCDEFGAH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6318', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES('B', 'BCDEFGHA');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6319', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES('C', 'ACBDEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6320', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES('C', 'ACDBEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6321', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES('C', 'ACDEBFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6322', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES('C', 'ACDEFBGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6323', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES(NULL, 'ACDEFGBH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6324', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES(NULL, 'ACDEFGHB');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6325', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES(0, 'ABCDEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6326', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES(0, 'BACDEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6327', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES(1, 'BCADEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6328', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES(1, 'BCDAEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6329', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES(1, 'BCDEAFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6330', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES(1, 'BCDEFAGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6331', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES(1, 'BCDEFGAH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6332', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES(1, 'BCDEFGHA');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6333', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES(1, 'ACBDEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6334', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES(NULL, 'ACDBEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6335', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES(NULL, 'ACDEBFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6336', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES(NULL, 'ACDEFBGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6337', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES(0, 2, 'ABCDEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6338', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES(0, 3, 'BACDEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6339', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES(1, 5, 'BCADEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6340', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES(1, 2, 'BCDAEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6341', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES(1, 3, 'BCDEAFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6342', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES(1, 5, 'BCDEFAGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6343', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES(1, 2, 'BCDEFGAH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6344', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES(1, 3, 'BCDEFGHA');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6345', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES(1, 5, 'ACBDEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6346', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES(NULL, 2, 'ACDBEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6347', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES(NULL, 3, 'ACDEBFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6348', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3) VALUES(NULL, 3, 'ACDEFBGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6349', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3,col4) VALUES(0, 2, 1, 'ABCDEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6350', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3,col4) VALUES(0, 3, NULL, 'BACDEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6351', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3,col4) VALUES(1, 5, 1, 'BCADEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6352', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3,col4) VALUES(1, 2, NULL, 'BCDAEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6353', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3,col4) VALUES(1, 3, 1, 'BCDEAFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6354', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3,col4) VALUES(1, 5, NULL, 'BCDEFAGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6355', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3,col4) VALUES(1, 2, 1, 'BCDEFGAH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6356', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3,col4) VALUES(1, 3, NULL, 'BCDEFGHA');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6357', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3,col4) VALUES(1, 5, 1, 'ACBDEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6358', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3,col4) VALUES(NULL, 2, NULL, 'ACDBEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6359', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3,col4) VALUES(NULL, 3, 1, 'ACDEBFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6360', () => {
    const query = `INSERT INTO test1_00395(col1,col2,col3,col4) VALUES(NULL, 3, NULL, 'ACDEFBGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6361', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([0], 'ABCDEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6362', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([0], 'BACDEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6363', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([1], 'BCADEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6364', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([1], 'BCDAEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6365', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([1], 'BCDEAFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6366', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([1], 'BCDEFAGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6367', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([1], 'BCDEFGAH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6368', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([1], 'BCDEFGHA');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6369', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([1], 'ACBDEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6370', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([NULL], 'ACDBEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6371', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([NULL], 'ACDEBFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6372', () => {
    const query = `INSERT INTO test1_00395(col1,col2) VALUES([NULL], 'ACDEFBGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6373', () => {
    const query = `INSERT INTO replaceall VALUES ('foo');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6374', () => {
    const query = `INSERT INTO replaceall VALUES ('boa');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6375', () => {
    const query = `INSERT INTO replaceall VALUES ('bar');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6376', () => {
    const query = `INSERT INTO replaceall VALUES ('bao');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6377', () => {
    const query = `INSERT INTO replaceall (fs) VALUES ('54db0d43009d\\0\\0\\0\\0'), ('fe2b58224766cf10'), ('54db0d43009d\\0\\0\\0\\0'), ('fe2b58224766cf10');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6378', () => {
    const query = `INSERT INTO alter_00394 VALUES ('2015-01-01', 3, 30, [1,2,3], ['1','12','123']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6379', () => {
    const query = `INSERT INTO alter_00394 VALUES ('2015-01-01', 2, 20, [1,2], ['1','12']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6380', () => {
    const query = `INSERT INTO alter_00394 VALUES ('2015-01-01', 1, 10, [1], ['1']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6381', () => {
    const query = `INSERT INTO enum_nested_alter (x, n.e) VALUES (1, ['Hello']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6382', () => {
    const query = `INSERT INTO enum_nested_alter (x, n.e) VALUES (2, ['World']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6383', () => {
    const query = `INSERT INTO enum_nested_alter (x, tasks.errcategory, tasks.status) VALUES (1, ['system', 'rtb.client'], ['hello', 'world']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6384', () => {
    const query = `INSERT INTO enum_nested_alter (x, tasks.errcategory, tasks.status) VALUES (2, ['http.status', 'http.code'], ['hello', 'goodbye']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6385', () => {
    const query = `INSERT INTO enum_nested_alter (x, n.e) VALUES (1, ['Hello.world']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6386', () => {
    const query = `INSERT INTO enum_totals VALUES ('hello'), ('world'), ('world');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6387', () => {
    const query = `INSERT INTO enum_pk (x, d) VALUES ('0', '0')('1', '1')('0', '0')('1', '1')('1', '1')('0', '0')('0', '0')('2', '2')('0', '0')('1', '1')('1', '1')('1', '1')('1', '1')('0', '0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6388', () => {
    const query = `INSERT INTO aggregates SELECT toDate('2016-10-31') AS d, uniqState(toUInt64(arrayJoin(range(100)))) AS s
UNION ALL
SELECT toDate('2016-11-01') AS d, uniqState(toUInt64(arrayJoin(range(100)))) AS s;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6389', () => {
    const query = `INSERT INTO aggregates SELECT toDate('2016-10-31') + number AS d, uniqState(toUInt64(arrayJoin(range(100)))) AS s FROM (SELECT * FROM system.numbers LIMIT 2) GROUP BY d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6390', () => {
    const query = `INSERT INTO aggregates SELECT toDate('2016-12-01') AS d, uniqState(toUInt64(arrayJoin(range(100)))) AS s
UNION ALL
SELECT toDate('2016-12-02') AS d, uniqState(toUInt64(arrayJoin(range(100)))) AS s
UNION ALL
SELECT toDate('2016-12-03') AS d, uniqState(toUInt64(arrayJoin(range(100)))) AS s;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6391', () => {
    const query = `INSERT INTO group_uniq_str SELECT 2 as id, toString(number % 100) as v FROM system.numbers LIMIT 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6392', () => {
    const query = `INSERT INTO group_uniq_str SELECT 5 as id, toString(number % 100) as v FROM system.numbers LIMIT 10000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6393', () => {
    const query = `INSERT INTO prewhere_defaults (x) VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6394', () => {
    const query = `INSERT INTO prewhere_defaults (x) VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6395', () => {
    const query = `INSERT INTO nested1 (x, n.a, n.b) VALUES (1, ['Hello', 'World'], ['abc', 'def']), (2, [], []);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6396', () => {
    const query = `INSERT INTO nested2 SELECT * FROM nested1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6397', () => {
    const query = `insert into index values (1,'1','2016-07-07');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6398', () => {
    const query = `insert into index values (-1,'-1','2016-07-07');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6399', () => {
    const query = `INSERT INTO numbers_squashed SELECT arrayJoin(range(10)) AS number
UNION ALL
SELECT arrayJoin(range(100))
UNION ALL
SELECT arrayJoin(range(10));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6400', () => {
    const query = `INSERT INTO numbers_squashed SELECT arrayJoin(range(100)) AS number
UNION ALL
SELECT arrayJoin(range(10))
UNION ALL
SELECT arrayJoin(range(100));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6401', () => {
    const query = `INSERT INTO numbers_squashed SELECT arrayJoin(range(10)) AS number
UNION ALL
SELECT arrayJoin(range(100))
UNION ALL
SELECT arrayJoin(range(100));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6402', () => {
    const query = `INSERT INTO numbers_squashed SELECT arrayJoin(range(10)) AS number
UNION ALL
SELECT arrayJoin(range(10))
UNION ALL
SELECT arrayJoin(range(10))
UNION ALL
SELECT arrayJoin(range(100))
UNION ALL
SELECT arrayJoin(range(10));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6403', () => {
    const query = `INSERT INTO numbers_squashed SELECT * FROM system.numbers LIMIT 10000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6404', () => {
    const query = `INSERT INTO bad_arrays VALUES ([''],[]),([''],[1]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6405', () => {
    const query = `INSERT INTO bad_arrays VALUES (['abc','def'],[1,2,3]),([],[1,2]),(['a','b'],[]),(['Hello'],[1,2]),([],[]),(['x','y','z'],[4,5,6]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6406', () => {
    const query = `INSERT INTO ontime VALUES ('1987-10-01','AA','2'),('1987-10-01','AA','2'),('1987-10-01','AA','7'),('1987-10-01','AA','7'),('1987-10-01','AA','26'),('1987-10-01','AA','34'),('1987-10-01','AA','36'),('1987-10-01','AA','91'),('1987-10-01','AA','101'),('1987-10-01','AA','101'),('1987-10-01','AA','109'),('1987-10-01','AA','109'),('1987-10-01','AA','112'),('1987-10-01','AA','123'),('1987-10-01','AA','160'),('1987-10-01','AA','165'),('1987-10-01','AA','165'),('1987-10-01','AA','165'),('1987-10-01','AA','176'),('1987-10-01','AA','176'),('1987-10-01','AA','176'),('1987-10-01','AA','176'),('1987-10-01','AA','179'),('1987-10-01','AA','179'),('1987-10-01','AA','215'),('1987-10-01','AA','215'),('1987-10-01','AA','231'),('1987-10-01','AA','231'),('1987-10-01','AA','263'),('1987-10-01','AA','263'),('1987-10-01','AA','268'),('1987-10-01','AA','268'),('1987-10-01','AA','281'),('1987-10-01','AA','287'),('1987-10-01','AA','287'),('1987-10-01','AA','309'),('1987-10-01','AA','309'),('1987-10-01','AA','309'),('1987-10-01','AA','341'),('1987-10-01','AA','344'),('1987-10-01','AA','344'),('1987-10-01','AA','347'),('1987-10-01','AA','347'),('1987-10-01','AA','368'),('1987-10-01','AA','381'),('1987-10-01','AA','381'),('1987-10-01','AA','381'),('1987-10-01','AA','396'),('1987-10-01','AA','396'),('1987-10-01','AA','397'),('1987-10-01','AA','397'),('1987-10-01','AA','417'),('1987-10-01','AA','417'),('1987-10-01','AA','446'),('1987-10-01','AA','451'),('1987-10-01','AA','451'),('1987-10-01','AA','460'),('1987-10-01','AA','460'),('1987-10-01','AA','491'),('1987-10-01','AA','504'),('1987-10-01','AA','504'),('1987-10-01','AA','519'),('1987-10-01','AA','519'),('1987-10-01','AA','523'),('1987-10-01','AA','523'),('1987-10-01','AA','525'),('1987-10-01','AA','525'),('1987-10-01','AA','525'),('1987-10-01','AA','533'),('1987-10-01','AA','533'),('1987-10-01','AA','533'),('1987-10-01','AA','546'),('1987-10-01','AA','546'),('1987-10-01','AA','556'),('1987-10-01','AA','556'),('1987-10-01','AA','556'),('1987-10-01','AA','597'),('1987-10-01','AA','597'),('1987-10-01','AA','597'),('1987-10-01','AA','601'),('1987-10-01','AA','601'),('1987-10-01','AA','627'),('1987-10-01','AA','670'),('1987-10-01','AA','673'),('1987-10-01','AA','673'),('1987-10-01','AA','680'),('1987-10-01','AA','680'),('1987-10-01','AA','817'),('1987-10-01','AA','817'),('1987-10-01','AA','824'),('1987-10-01','AA','824'),('1987-10-01','AA','824'),('1987-10-01','AA','824'),('1987-10-01','AA','832'),('1987-10-01','AA','832'),('1987-10-01','AA','852'),('1987-10-01','AA','852'),('1987-10-01','AA','866'),('1987-10-01','AA','866'),('1987-10-01','AA','871'),('1987-10-01','AA','871'),('1987-10-01','AA','880'),('1987-10-01','AA','880'),('1987-10-01','AA','880'),('1987-10-01','AA','880'),('1987-10-01','AA','883'),('1987-10-01','AA','883'),('1987-10-01','AA','885'),('1987-10-01','AA','885'),('1987-10-01','AA','885'),('1987-10-01','AA','890'),('1987-10-01','AA','893'),('1987-10-01','AA','893'),('1987-10-01','AA','905'),('1987-10-01','AA','905'),('1987-10-01','AA','929'),('1987-10-01','AA','929'),('1987-10-01','AA','936'),('1987-10-01','AA','936'),('1987-10-01','AA','937'),('1987-10-01','AA','937'),('1987-10-01','AA','955'),('1987-10-01','AA','966'),('1987-10-01','AA','1002'),('1987-10-01','AA','1002'),('1987-10-01','AA','1004'),('1987-10-01','AA','1004'),('1987-10-01','AA','1015'),('1987-10-01','AA','1015'),('1987-10-01','AA','1021'),('1987-10-01','AA','1021'),('1987-10-01','AA','1041'),('1987-10-01','AA','1041'),('1987-10-01','AA','1046'),('1987-10-01','AA','1046'),('1987-10-01','AA','1048'),('1987-10-01','AA','1048'),('1987-10-01','AA','1061'),('1987-10-01','AA','1061'),('1987-10-01','AA','1088'),('1987-10-01','AA','1088'),('1987-10-01','AA','2033'),('1987-10-01','AA','2033'),('1987-10-01','AA','2050'),('1987-10-01','AA','2058'),('1987-10-01','AA','2071'),('1987-10-01','AA','2071'),('1987-10-01','AA','2086'),('1987-10-01','AA','2105'),('1987-10-01','AA','2111'),('1987-10-01','AA','2123'),('1987-10-01','AA','2123'),('1987-10-01','AA','2147'),('1987-10-01','AA','2147'),('1987-10-01','AA','2199'),('1987-10-01','AA','2199'),('1987-10-01','AA','2207'),('1987-10-01','AA','2207'),('1987-10-01','AA','2217'),('1987-10-01','AA','2230'),('1987-10-01','AA','2245'),('1987-10-01','AA','2251'),('1987-10-01','AA','2251'),('1987-10-01','AA','2275'),('1987-10-01','AA','2278'),('1987-10-01','AA','2351'),('1987-10-01','AA','2357'),('1987-10-01','AA','2490'),('1987-10-01','AA','2528'),('1987-10-01','AA','2528'),('1987-10-01','AA','2735'),('1987-10-01','AA','2735'),('1987-10-01','AA','2751'),('1987-10-01','AL','2'),('1987-10-01','AL','2'),('1987-10-01','AL','7'),('1987-10-01','AL','7'),('1987-10-01','AL','26'),('1987-10-01','AL','26'),('1987-10-01','AL','34'),('1987-10-01','AL','34'),('1987-10-01','AL','36'),('1987-10-01','AL','36'),('1987-10-01','AL','45'),('1987-10-01','AL','45'),('1987-10-01','AL','45'),('1987-10-01','AL','91'),('1987-10-01','AL','91'),('1987-10-01','AL','104'),('1987-10-01','AL','104'),('1987-10-01','AL','104'),('1987-10-01','AL','109'),('1987-10-01','AL','112'),('1987-10-01','AL','112'),('1987-10-01','AL','123'),('1987-10-01','AL','149'),('1987-10-01','AL','160'),('1987-10-01','AL','160'),('1987-10-01','AL','165'),('1987-10-01','AL','171'),('1987-10-01','AL','171'),('1987-10-01','AL','176'),('1987-10-01','AL','176'),('1987-10-01','AL','179'),('1987-10-01','AL','215'),('1987-10-01','AL','231'),('1987-10-01','AL','263'),('1987-10-01','AL','263'),('1987-10-01','AL','268'),('1987-10-01','AL','268'),('1987-10-01','AL','268'),('1987-10-01','AL','281'),('1987-10-01','AL','281'),('1987-10-01','AL','287'),('1987-10-01','AL','287'),('1987-10-01','AL','309'),('1987-10-01','AL','309'),('1987-10-01','AL','341'),('1987-10-01','AL','344'),('1987-10-01','AL','344'),('1987-10-01','AL','357'),('1987-10-01','AL','357'),('1987-10-01','AL','368'),('1987-10-01','AL','381'),('1987-10-01','AL','396'),('1987-10-01','AL','397'),('1987-10-01','AL','397'),('1987-10-01','AL','416'),('1987-10-01','AL','416'),('1987-10-01','AL','417'),('1987-10-01','AL','438'),('1987-10-01','AL','446'),('1987-10-01','AL','451'),('1987-10-01','AL','451'),('1987-10-01','AL','491'),('1987-10-01','AL','491'),('1987-10-01','AL','523'),('1987-10-01','AL','523'),('1987-10-01','AL','523'),('1987-10-01','AL','525'),('1987-10-01','AL','525'),('1987-10-01','AL','533'),('1987-10-01','AL','533'),('1987-10-01','AL','546'),('1987-10-01','AL','546'),('1987-10-01','AL','556'),('1987-10-01','AL','556'),('1987-10-01','AL','601'),('1987-10-01','AL','601'),('1987-10-01','AL','627'),('1987-10-01','AL','629'),('1987-10-01','AL','670'),('1987-10-01','AL','670'),('1987-10-01','AL','670'),('1987-10-01','AL','673'),('1987-10-01','AL','680'),('1987-10-01','AL','700'),('1987-10-02','AA','2'),('1987-10-02','AA','2'),('1987-10-02','AA','2'),('1987-10-02','AA','7'),('1987-10-02','AA','7'),('1987-10-02','AA','26'),('1987-10-02','AA','34'),('1987-10-02','AA','36'),('1987-10-02','AA','91'),('1987-10-02','AA','101'),('1987-10-02','AA','101'),('1987-10-02','AA','109'),('1987-10-02','AA','109'),('1987-10-02','AA','112'),('1987-10-02','AA','123'),('1987-10-02','AA','123'),('1987-10-02','AA','160'),('1987-10-02','AA','165'),('1987-10-02','AA','165'),('1987-10-02','AA','165'),('1987-10-02','AA','176'),('1987-10-02','AA','176'),('1987-10-02','AA','176'),('1987-10-02','AA','176'),('1987-10-02','AA','179'),('1987-10-02','AA','179'),('1987-10-02','AA','215'),('1987-10-02','AA','215'),('1987-10-02','AA','231'),('1987-10-02','AA','231'),('1987-10-02','AA','263'),('1987-10-02','AA','263'),('1987-10-02','AA','268'),('1987-10-02','AA','281'),('1987-10-02','AA','287'),('1987-10-02','AA','287'),('1987-10-02','AA','309'),('1987-10-02','AA','309'),('1987-10-02','AA','309'),('1987-10-02','AA','341'),('1987-10-02','AA','344'),('1987-10-02','AA','344'),('1987-10-02','AA','347'),('1987-10-02','AA','347'),('1987-10-02','AA','368'),('1987-10-02','AA','381'),('1987-10-02','AA','381'),('1987-10-02','AA','381'),('1987-10-02','AA','396'),('1987-10-02','AA','396'),('1987-10-02','AA','397'),('1987-10-02','AA','397'),('1987-10-02','AA','417'),('1987-10-02','AA','417'),('1987-10-02','AA','446'),('1987-10-02','AA','451'),('1987-10-02','AA','451'),('1987-10-02','AA','460'),('1987-10-02','AA','460'),('1987-10-02','AA','491'),('1987-10-02','AA','504'),('1987-10-02','AA','504'),('1987-10-02','AA','519'),('1987-10-02','AA','519'),('1987-10-02','AA','523'),('1987-10-02','AA','523'),('1987-10-02','AA','525'),('1987-10-02','AA','525'),('1987-10-02','AA','525'),('1987-10-02','AA','533'),('1987-10-02','AA','533'),('1987-10-02','AA','533'),('1987-10-02','AA','546'),('1987-10-02','AA','546'),('1987-10-02','AA','546'),('1987-10-02','AA','546'),('1987-10-02','AA','556'),('1987-10-02','AA','556'),('1987-10-02','AA','556'),('1987-10-02','AA','597'),('1987-10-02','AA','597'),('1987-10-02','AA','597'),('1987-10-02','AA','601'),('1987-10-02','AA','601'),('1987-10-02','AA','627'),('1987-10-02','AA','629'),('1987-10-02','AA','629'),('1987-10-02','AA','670'),('1987-10-02','AA','673'),('1987-10-02','AA','673'),('1987-10-02','AA','680'),('1987-10-02','AA','680'),('1987-10-02','AA','817'),('1987-10-02','AA','817'),('1987-10-02','AA','824'),('1987-10-02','AA','824'),('1987-10-02','AA','824'),('1987-10-02','AA','824'),('1987-10-02','AA','832'),('1987-10-02','AA','832'),('1987-10-02','AA','852'),('1987-10-02','AA','866'),('1987-10-02','AA','866'),('1987-10-02','AA','871'),('1987-10-02','AA','871'),('1987-10-02','AA','880'),('1987-10-02','AA','880'),('1987-10-02','AA','880'),('1987-10-02','AA','880'),('1987-10-02','AA','883'),('1987-10-02','AA','883'),('1987-10-02','AA','885'),('1987-10-02','AA','885'),('1987-10-02','AA','885'),('1987-10-02','AA','890'),('1987-10-02','AA','890'),('1987-10-02','AA','893'),('1987-10-02','AA','893'),('1987-10-02','AA','905'),('1987-10-02','AA','905'),('1987-10-02','AA','915'),('1987-10-02','AA','929'),('1987-10-02','AA','929'),('1987-10-02','AA','936'),('1987-10-02','AA','936'),('1987-10-02','AA','937'),('1987-10-02','AA','937'),('1987-10-02','AA','955'),('1987-10-02','AA','955'),('1987-10-02','AA','966'),('1987-10-02','AA','1002'),('1987-10-02','AA','1002'),('1987-10-02','AA','1004'),('1987-10-02','AA','1004'),('1987-10-02','AA','1015'),('1987-10-02','AA','1015'),('1987-10-02','AA','1021'),('1987-10-02','AA','1021'),('1987-10-02','AA','1041'),('1987-10-02','AA','1041'),('1987-10-02','AA','1046'),('1987-10-02','AA','1046'),('1987-10-02','AA','1048'),('1987-10-02','AA','1048'),('1987-10-02','AA','1061'),('1987-10-02','AA','1061'),('1987-10-02','AA','1088'),('1987-10-02','AA','1088'),('1987-10-02','AA','2033'),('1987-10-02','AA','2033'),('1987-10-02','AA','2050'),('1987-10-02','AA','2058'),('1987-10-02','AA','2071'),('1987-10-02','AA','2071'),('1987-10-02','AA','2086'),('1987-10-02','AA','2105'),('1987-10-02','AA','2111'),('1987-10-02','AA','2123'),('1987-10-02','AA','2123'),('1987-10-02','AA','2147'),('1987-10-02','AA','2147'),('1987-10-02','AA','2199'),('1987-10-02','AA','2199'),('1987-10-02','AA','2207'),('1987-10-02','AA','2207'),('1987-10-02','AA','2217'),('1987-10-02','AA','2230'),('1987-10-02','AA','2245'),('1987-10-02','AA','2251'),('1987-10-02','AA','2251'),('1987-10-02','AA','2275'),('1987-10-02','AA','2278'),('1987-10-02','AA','2351'),('1987-10-02','AA','2357'),('1987-10-02','AA','2361'),('1987-10-02','AA','2490'),('1987-10-02','AA','2528'),('1987-10-02','AA','2528'),('1987-10-02','AA','2735'),('1987-10-02','AA','2735'),('1987-10-02','AA','2751'),('1987-10-02','AL','2'),('1987-10-02','AL','2'),('1987-10-02','AL','7'),('1987-10-02','AL','7'),('1987-10-02','AL','26'),('1987-10-02','AL','26'),('1987-10-02','AL','34'),('1987-10-02','AL','34'),('1987-10-02','AL','36'),('1987-10-02','AL','36'),('1987-10-02','AL','45'),('1987-10-02','AL','45'),('1987-10-02','AL','45'),('1987-10-02','AL','91'),('1987-10-02','AL','91'),('1987-10-02','AL','104'),('1987-10-02','AL','104'),('1987-10-02','AL','104'),('1987-10-02','AL','109'),('1987-10-02','AL','112'),('1987-10-02','AL','112'),('1987-10-02','AL','123'),('1987-10-02','AL','149'),('1987-10-02','AL','160'),('1987-10-02','AL','160'),('1987-10-02','AL','165'),('1987-10-02','AL','171'),('1987-10-02','AL','171'),('1987-10-02','AL','176'),('1987-10-02','AL','176'),('1987-10-02','AL','179'),('1987-10-02','AL','215'),('1987-10-02','AL','231'),('1987-10-02','AL','263'),('1987-10-02','AL','263'),('1987-10-02','AL','268'),('1987-10-02','AL','268'),('1987-10-02','AL','268'),('1987-10-02','AL','281'),('1987-10-02','AL','281'),('1987-10-02','AL','287'),('1987-10-02','AL','287'),('1987-10-02','AL','309'),('1987-10-02','AL','309'),('1987-10-02','AL','341'),('1987-10-02','AL','344'),('1987-10-02','AL','344'),('1987-10-02','AL','357'),('1987-10-02','AL','357'),('1987-10-02','AL','368'),('1987-10-02','AL','381'),('1987-10-02','AL','396'),('1987-10-02','AL','397'),('1987-10-02','AL','397'),('1987-10-02','AL','416'),('1987-10-02','AL','416'),('1987-10-02','AL','417'),('1987-10-02','AL','438'),('1987-10-02','AL','438'),('1987-10-02','AL','446'),('1987-10-02','AL','451'),('1987-10-02','AL','451'),('1987-10-02','AL','491'),('1987-10-02','AL','491'),('1987-10-02','AL','523'),('1987-10-02','AL','523'),('1987-10-02','AL','523'),('1987-10-02','AL','525'),('1987-10-02','AL','525'),('1987-10-02','AL','533'),('1987-10-02','AL','533'),('1987-10-02','AL','546'),('1987-10-02','AL','546'),('1987-10-02','AL','556'),('1987-10-02','AL','556'),('1987-10-02','AL','601'),('1987-10-02','AL','601'),('1987-10-02','AL','627'),('1987-10-02','AL','629'),('1987-10-02','AL','670'),('1987-10-02','AL','670'),('1987-10-02','AL','670'),('1987-10-02','AL','673'),('1987-10-02','AL','680'),('1987-10-03','AA','2'),('1987-10-03','AA','2'),('1987-10-03','AA','2'),('1987-10-03','AA','7'),('1987-10-03','AA','7'),('1987-10-03','AA','26'),('1987-10-03','AA','34'),('1987-10-03','AA','36'),('1987-10-03','AA','91'),('1987-10-03','AA','101'),('1987-10-03','AA','101'),('1987-10-03','AA','109'),('1987-10-03','AA','109'),('1987-10-03','AA','112'),('1987-10-03','AA','123'),('1987-10-03','AA','123'),('1987-10-03','AA','165'),('1987-10-03','AA','165'),('1987-10-03','AA','165'),('1987-10-03','AA','176'),('1987-10-03','AA','176'),('1987-10-03','AA','176'),('1987-10-03','AA','176'),('1987-10-03','AA','179'),('1987-10-03','AA','179'),('1987-10-03','AA','215'),('1987-10-03','AA','215'),('1987-10-03','AA','231'),('1987-10-03','AA','231'),('1987-10-03','AA','263'),('1987-10-03','AA','263'),('1987-10-03','AA','268'),('1987-10-03','AA','281'),('1987-10-03','AA','287'),('1987-10-03','AA','287'),('1987-10-03','AA','309'),('1987-10-03','AA','309'),('1987-10-03','AA','309'),('1987-10-03','AA','341'),('1987-10-03','AA','344'),('1987-10-03','AA','344'),('1987-10-03','AA','347'),('1987-10-03','AA','347'),('1987-10-03','AA','368'),('1987-10-03','AA','381'),('1987-10-03','AA','381'),('1987-10-03','AA','381'),('1987-10-03','AA','396'),('1987-10-03','AA','396'),('1987-10-03','AA','397'),('1987-10-03','AA','397'),('1987-10-03','AA','417'),('1987-10-03','AA','417'),('1987-10-03','AA','446'),('1987-10-03','AA','451'),('1987-10-03','AA','451'),('1987-10-03','AA','460'),('1987-10-03','AA','460'),('1987-10-03','AA','491'),('1987-10-03','AA','491'),('1987-10-03','AA','504'),('1987-10-03','AA','504'),('1987-10-03','AA','519'),('1987-10-03','AA','519'),('1987-10-03','AA','523'),('1987-10-03','AA','523'),('1987-10-03','AA','525'),('1987-10-03','AA','525'),('1987-10-03','AA','525'),('1987-10-03','AA','533'),('1987-10-03','AA','533'),('1987-10-03','AA','546'),('1987-10-03','AA','546'),('1987-10-03','AA','546'),('1987-10-03','AA','546'),('1987-10-03','AA','556'),('1987-10-03','AA','556'),('1987-10-03','AA','556'),('1987-10-03','AA','597'),('1987-10-03','AA','597'),('1987-10-03','AA','597'),('1987-10-03','AA','601'),('1987-10-03','AA','601'),('1987-10-03','AA','627'),('1987-10-03','AA','629'),('1987-10-03','AA','629'),('1987-10-03','AA','670'),('1987-10-03','AA','673'),('1987-10-03','AA','673'),('1987-10-03','AA','680'),('1987-10-03','AA','680'),('1987-10-03','AA','817'),('1987-10-03','AA','817'),('1987-10-03','AA','824'),('1987-10-03','AA','824'),('1987-10-03','AA','824'),('1987-10-03','AA','824'),('1987-10-03','AA','832'),('1987-10-03','AA','832'),('1987-10-03','AA','852'),('1987-10-03','AA','852'),('1987-10-03','AA','866'),('1987-10-03','AA','866'),('1987-10-03','AA','871'),('1987-10-03','AA','871'),('1987-10-03','AA','880'),('1987-10-03','AA','880'),('1987-10-03','AA','880'),('1987-10-03','AA','880'),('1987-10-03','AA','883'),('1987-10-03','AA','883'),('1987-10-03','AA','885'),('1987-10-03','AA','885'),('1987-10-03','AA','885'),('1987-10-03','AA','890'),('1987-10-03','AA','890'),('1987-10-03','AA','893'),('1987-10-03','AA','893'),('1987-10-03','AA','905'),('1987-10-03','AA','905'),('1987-10-03','AA','915'),('1987-10-03','AA','929'),('1987-10-03','AA','929'),('1987-10-03','AA','936'),('1987-10-03','AA','936'),('1987-10-03','AA','937'),('1987-10-03','AA','937'),('1987-10-03','AA','955'),('1987-10-03','AA','955'),('1987-10-03','AA','966'),('1987-10-03','AA','1002'),('1987-10-03','AA','1002'),('1987-10-03','AA','1004'),('1987-10-03','AA','1004'),('1987-10-03','AA','1015'),('1987-10-03','AA','1015'),('1987-10-03','AA','1021'),('1987-10-03','AA','1041'),('1987-10-03','AA','1041'),('1987-10-03','AA','1046'),('1987-10-03','AA','1046'),('1987-10-03','AA','1048'),('1987-10-03','AA','1048'),('1987-10-03','AA','1061'),('1987-10-03','AA','1061'),('1987-10-03','AA','1088'),('1987-10-03','AA','1088'),('1987-10-03','AA','2033'),('1987-10-03','AA','2033'),('1987-10-03','AA','2050'),('1987-10-03','AA','2058'),('1987-10-03','AA','2071'),('1987-10-03','AA','2071'),('1987-10-03','AA','2086'),('1987-10-03','AA','2105'),('1987-10-03','AA','2111'),('1987-10-03','AA','2123'),('1987-10-03','AA','2123'),('1987-10-03','AA','2147'),('1987-10-03','AA','2147'),('1987-10-03','AA','2199'),('1987-10-03','AA','2207'),('1987-10-03','AA','2207'),('1987-10-03','AA','2245'),('1987-10-03','AA','2251'),('1987-10-03','AA','2251'),('1987-10-03','AA','2275'),('1987-10-03','AA','2278'),('1987-10-03','AA','2361'),('1987-10-03','AA','2490'),('1987-10-03','AA','2528'),('1987-10-03','AA','2528'),('1987-10-03','AA','2735'),('1987-10-03','AA','2735'),('1987-10-03','AL','2'),('1987-10-03','AL','2'),('1987-10-03','AL','7'),('1987-10-03','AL','7'),('1987-10-03','AL','26'),('1987-10-03','AL','26'),('1987-10-03','AL','34'),('1987-10-03','AL','34'),('1987-10-03','AL','36'),('1987-10-03','AL','36'),('1987-10-03','AL','45'),('1987-10-03','AL','45'),('1987-10-03','AL','45'),('1987-10-03','AL','91'),('1987-10-03','AL','91'),('1987-10-03','AL','104'),('1987-10-03','AL','104'),('1987-10-03','AL','109'),('1987-10-03','AL','112'),('1987-10-03','AL','112'),('1987-10-03','AL','149'),('1987-10-03','AL','160'),('1987-10-03','AL','160'),('1987-10-03','AL','165'),('1987-10-03','AL','171'),('1987-10-03','AL','171'),('1987-10-03','AL','176'),('1987-10-03','AL','176'),('1987-10-03','AL','179'),('1987-10-03','AL','215'),('1987-10-03','AL','231'),('1987-10-03','AL','263'),('1987-10-03','AL','287'),('1987-10-03','AL','287'),('1987-10-03','AL','309'),('1987-10-03','AL','309'),('1987-10-03','AL','344'),('1987-10-03','AL','344'),('1987-10-03','AL','357'),('1987-10-03','AL','357'),('1987-10-03','AL','381'),('1987-10-03','AL','396'),('1987-10-03','AL','397'),('1987-10-03','AL','397'),('1987-10-03','AL','397'),('1987-10-03','AL','416'),('1987-10-03','AL','417'),('1987-10-03','AL','438'),('1987-10-03','AL','451'),('1987-10-03','AL','451'),('1987-10-03','AL','491'),('1987-10-03','AL','491'),('1987-10-03','AL','523'),('1987-10-03','AL','523'),('1987-10-03','AL','525'),('1987-10-03','AL','525'),('1987-10-03','AL','533'),('1987-10-03','AL','546'),('1987-10-03','AL','546'),('1987-10-03','AL','556'),('1987-10-03','AL','556'),('1987-10-03','AL','601'),('1987-10-03','AL','601'),('1987-10-03','AL','627'),('1987-10-03','AL','670'),('1987-10-03','AL','673'),('1987-10-03','AL','680'),('1987-10-03','AL','905'),('1987-10-03','AL','936'),('1987-10-03','AL','966'),('1987-10-04','AA','2'),('1987-10-04','AA','2'),('1987-10-04','AA','2'),('1987-10-04','AA','7'),('1987-10-04','AA','7'),('1987-10-04','AA','26'),('1987-10-04','AA','34'),('1987-10-04','AA','36'),('1987-10-04','AA','91'),('1987-10-04','AA','101'),('1987-10-04','AA','101'),('1987-10-04','AA','109'),('1987-10-04','AA','109'),('1987-10-04','AA','112'),('1987-10-04','AA','123'),('1987-10-04','AA','123'),('1987-10-04','AA','160'),('1987-10-04','AA','165'),('1987-10-04','AA','165'),('1987-10-04','AA','165'),('1987-10-04','AA','176'),('1987-10-04','AA','176'),('1987-10-04','AA','176'),('1987-10-04','AA','176'),('1987-10-04','AA','179'),('1987-10-04','AA','179'),('1987-10-04','AA','215'),('1987-10-04','AA','215'),('1987-10-04','AA','231'),('1987-10-04','AA','231'),('1987-10-04','AA','263'),('1987-10-04','AA','263'),('1987-10-04','AA','268'),('1987-10-04','AA','268'),('1987-10-04','AA','281'),('1987-10-04','AA','287'),('1987-10-04','AA','287'),('1987-10-04','AA','309'),('1987-10-04','AA','309'),('1987-10-04','AA','309'),('1987-10-04','AA','341'),('1987-10-04','AA','344'),('1987-10-04','AA','344'),('1987-10-04','AA','347'),('1987-10-04','AA','347'),('1987-10-04','AA','381'),('1987-10-04','AA','381'),('1987-10-04','AA','381'),('1987-10-04','AA','396'),('1987-10-04','AA','396'),('1987-10-04','AA','397'),('1987-10-04','AA','397'),('1987-10-04','AA','417'),('1987-10-04','AA','417'),('1987-10-04','AA','446'),('1987-10-04','AA','451'),('1987-10-04','AA','451'),('1987-10-04','AA','460'),('1987-10-04','AA','460'),('1987-10-04','AA','491'),('1987-10-04','AA','491'),('1987-10-04','AA','504'),('1987-10-04','AA','504'),('1987-10-04','AA','519'),('1987-10-04','AA','519'),('1987-10-04','AA','523'),('1987-10-04','AA','523'),('1987-10-04','AA','525'),('1987-10-04','AA','525'),('1987-10-04','AA','525'),('1987-10-04','AA','533'),('1987-10-04','AA','533'),('1987-10-04','AA','533'),('1987-10-04','AA','546'),('1987-10-04','AA','546'),('1987-10-04','AA','546'),('1987-10-04','AA','546'),('1987-10-04','AA','556'),('1987-10-04','AA','556'),('1987-10-04','AA','556'),('1987-10-04','AA','597'),('1987-10-04','AA','597'),('1987-10-04','AA','597'),('1987-10-04','AA','601'),('1987-10-04','AA','601'),('1987-10-04','AA','627'),('1987-10-04','AA','629'),('1987-10-04','AA','629'),('1987-10-04','AA','670'),('1987-10-04','AA','673'),('1987-10-04','AA','673'),('1987-10-04','AA','680'),('1987-10-04','AA','680'),('1987-10-04','AA','817'),('1987-10-04','AA','817'),('1987-10-04','AA','824'),('1987-10-04','AA','824'),('1987-10-04','AA','824'),('1987-10-04','AA','832'),('1987-10-04','AA','832'),('1987-10-04','AA','852'),('1987-10-04','AA','852'),('1987-10-04','AA','866'),('1987-10-04','AA','866'),('1987-10-04','AA','871'),('1987-10-04','AA','871'),('1987-10-04','AA','880'),('1987-10-04','AA','880'),('1987-10-04','AA','880'),('1987-10-04','AA','880'),('1987-10-04','AA','883'),('1987-10-04','AA','883'),('1987-10-04','AA','885'),('1987-10-04','AA','885'),('1987-10-04','AA','890'),('1987-10-04','AA','890'),('1987-10-04','AA','893'),('1987-10-04','AA','893'),('1987-10-04','AA','905'),('1987-10-04','AA','905'),('1987-10-04','AA','915'),('1987-10-04','AA','929'),('1987-10-04','AA','929'),('1987-10-04','AA','936'),('1987-10-04','AA','936'),('1987-10-04','AA','937'),('1987-10-04','AA','937'),('1987-10-04','AA','955'),('1987-10-04','AA','955'),('1987-10-04','AA','966'),('1987-10-04','AA','1002'),('1987-10-04','AA','1002'),('1987-10-04','AA','1004'),('1987-10-04','AA','1004'),('1987-10-04','AA','1015'),('1987-10-04','AA','1021'),('1987-10-04','AA','1021'),('1987-10-04','AA','1041'),('1987-10-04','AA','1041'),('1987-10-04','AA','1046'),('1987-10-04','AA','1046'),('1987-10-04','AA','1048'),('1987-10-04','AA','1048'),('1987-10-04','AA','1061'),('1987-10-04','AA','1061'),('1987-10-04','AA','1088'),('1987-10-04','AA','1088'),('1987-10-04','AA','2033'),('1987-10-04','AA','2033'),('1987-10-04','AA','2050'),('1987-10-04','AA','2058'),('1987-10-04','AA','2071'),('1987-10-04','AA','2071'),('1987-10-04','AA','2086'),('1987-10-04','AA','2111'),('1987-10-04','AA','2123'),('1987-10-04','AA','2123'),('1987-10-04','AA','2147'),('1987-10-04','AA','2147'),('1987-10-04','AA','2199'),('1987-10-04','AA','2199'),('1987-10-04','AA','2207'),('1987-10-04','AA','2207'),('1987-10-04','AA','2230'),('1987-10-04','AA','2245'),('1987-10-04','AA','2251'),('1987-10-04','AA','2251'),('1987-10-04','AA','2275'),('1987-10-04','AA','2278'),('1987-10-04','AA','2357'),('1987-10-04','AA','2361'),('1987-10-04','AA','2490'),('1987-10-04','AA','2528'),('1987-10-04','AA','2528'),('1987-10-04','AA','2735'),('1987-10-04','AA','2735'),('1987-10-04','AA','2751'),('1987-10-04','AL','7'),('1987-10-04','AL','7'),('1987-10-04','AL','26'),('1987-10-04','AL','26'),('1987-10-04','AL','34'),('1987-10-04','AL','34'),('1987-10-04','AL','36'),('1987-10-04','AL','36'),('1987-10-04','AL','45'),('1987-10-04','AL','45'),('1987-10-04','AL','45'),('1987-10-04','AL','91'),('1987-10-04','AL','91'),('1987-10-04','AL','104'),('1987-10-04','AL','123'),('1987-10-04','AL','149'),('1987-10-04','AL','160'),('1987-10-04','AL','160'),('1987-10-04','AL','165'),('1987-10-04','AL','171'),('1987-10-04','AL','171'),('1987-10-04','AL','176'),('1987-10-04','AL','176'),('1987-10-04','AL','179'),('1987-10-04','AL','215'),('1987-10-04','AL','231'),('1987-10-04','AL','263'),('1987-10-04','AL','263'),('1987-10-04','AL','281'),('1987-10-04','AL','281'),('1987-10-04','AL','309'),('1987-10-04','AL','309'),('1987-10-04','AL','341'),('1987-10-04','AL','344'),('1987-10-04','AL','344'),('1987-10-04','AL','357'),('1987-10-04','AL','357'),('1987-10-04','AL','368'),('1987-10-04','AL','416'),('1987-10-04','AL','416'),('1987-10-04','AL','417'),('1987-10-04','AL','438'),('1987-10-04','AL','438'),('1987-10-04','AL','451'),('1987-10-04','AL','491'),('1987-10-04','AL','491'),('1987-10-04','AL','525'),('1987-10-04','AL','525'),('1987-10-04','AL','533'),('1987-10-04','AL','533'),('1987-10-04','AL','546'),('1987-10-04','AL','546'),('1987-10-04','AL','556'),('1987-10-04','AL','556'),('1987-10-04','AL','601'),('1987-10-04','AL','627'),('1987-10-04','AL','629'),('1987-10-04','AL','670'),('1987-10-04','AL','670'),('1987-10-04','AL','670'),('1987-10-04','AL','673'),('1987-10-04','AL','680'),('1987-10-04','AL','937'),('1987-10-04','AL','937'),('1987-10-04','AL','955'),('1987-10-12','AA','2'),('1987-10-12','AA','2'),('1987-10-12','AA','2'),('1987-10-12','AA','7'),('1987-10-12','AA','7'),('1987-10-12','AA','26'),('1987-10-12','AA','34'),('1987-10-12','AA','36'),('1987-10-12','AA','91'),('1987-10-12','AA','101'),('1987-10-12','AA','101'),('1987-10-12','AA','109'),('1987-10-12','AA','109'),('1987-10-12','AA','112'),('1987-10-12','AA','123'),('1987-10-12','AA','123'),('1987-10-12','AA','160'),('1987-10-12','AA','165'),('1987-10-12','AA','165'),('1987-10-12','AA','165'),('1987-10-12','AA','176'),('1987-10-12','AA','176'),('1987-10-12','AA','176'),('1987-10-12','AA','176'),('1987-10-12','AA','179'),('1987-10-12','AA','179'),('1987-10-12','AA','215'),('1987-10-12','AA','215'),('1987-10-12','AA','231'),('1987-10-12','AA','263'),('1987-10-12','AA','263'),('1987-10-12','AA','268'),('1987-10-12','AA','268'),('1987-10-12','AA','281'),('1987-10-12','AA','287'),('1987-10-12','AA','287'),('1987-10-12','AA','309'),('1987-10-12','AA','309'),('1987-10-12','AA','309'),('1987-10-12','AA','341'),('1987-10-12','AA','344'),('1987-10-12','AA','344'),('1987-10-12','AA','347'),('1987-10-12','AA','347'),('1987-10-12','AA','368'),('1987-10-12','AA','381'),('1987-10-12','AA','381'),('1987-10-12','AA','381'),('1987-10-12','AA','396'),('1987-10-12','AA','396'),('1987-10-12','AA','397'),('1987-10-12','AA','397'),('1987-10-12','AA','417'),('1987-10-12','AA','417'),('1987-10-12','AA','446'),('1987-10-12','AA','451'),('1987-10-12','AA','451'),('1987-10-12','AA','460'),('1987-10-12','AA','460'),('1987-10-12','AA','491'),('1987-10-12','AA','504'),('1987-10-12','AA','504'),('1987-10-12','AA','519'),('1987-10-12','AA','523'),('1987-10-12','AA','523'),('1987-10-12','AA','525'),('1987-10-12','AA','525'),('1987-10-12','AA','525'),('1987-10-12','AA','533'),('1987-10-12','AA','533'),('1987-10-12','AA','533'),('1987-10-12','AA','546'),('1987-10-12','AA','546'),('1987-10-12','AA','546'),('1987-10-12','AA','546'),('1987-10-12','AA','556'),('1987-10-12','AA','556'),('1987-10-12','AA','556'),('1987-10-12','AA','597'),('1987-10-12','AA','597'),('1987-10-12','AA','597'),('1987-10-12','AA','601'),('1987-10-12','AA','601'),('1987-10-12','AA','627'),('1987-10-12','AA','629'),('1987-10-12','AA','629'),('1987-10-12','AA','670'),('1987-10-12','AA','673'),('1987-10-12','AA','673'),('1987-10-12','AA','680'),('1987-10-12','AA','680'),('1987-10-12','AA','817'),('1987-10-12','AA','817'),('1987-10-12','AA','824'),('1987-10-12','AA','824'),('1987-10-12','AA','824'),('1987-10-12','AA','824'),('1987-10-12','AA','832'),('1987-10-12','AA','832'),('1987-10-12','AA','852'),('1987-10-12','AA','852'),('1987-10-12','AA','866'),('1987-10-12','AA','866'),('1987-10-12','AA','871'),('1987-10-12','AA','871'),('1987-10-12','AA','880'),('1987-10-12','AA','880'),('1987-10-12','AA','880'),('1987-10-12','AA','880'),('1987-10-12','AA','883'),('1987-10-12','AA','883'),('1987-10-12','AA','885'),('1987-10-12','AA','885'),('1987-10-12','AA','885'),('1987-10-12','AA','890'),('1987-10-12','AA','890'),('1987-10-12','AA','893'),('1987-10-12','AA','893'),('1987-10-12','AA','905'),('1987-10-12','AA','905'),('1987-10-12','AA','915'),('1987-10-12','AA','929'),('1987-10-12','AA','929'),('1987-10-12','AA','936'),('1987-10-12','AA','936'),('1987-10-12','AA','937'),('1987-10-12','AA','937'),('1987-10-12','AA','955'),('1987-10-12','AA','955'),('1987-10-12','AA','966'),('1987-10-12','AA','1002'),('1987-10-12','AA','1002'),('1987-10-12','AA','1004'),('1987-10-12','AA','1015'),('1987-10-12','AA','1015'),('1987-10-12','AA','1021'),('1987-10-12','AA','1021'),('1987-10-12','AA','1041'),('1987-10-12','AA','1041'),('1987-10-12','AA','1046'),('1987-10-12','AA','1046'),('1987-10-12','AA','1048'),('1987-10-12','AA','1048'),('1987-10-12','AA','1061'),('1987-10-12','AA','1061'),('1987-10-12','AA','1088'),('1987-10-12','AA','1088'),('1987-10-12','AA','2033'),('1987-10-12','AA','2033'),('1987-10-12','AA','2050'),('1987-10-12','AA','2058'),('1987-10-12','AA','2071'),('1987-10-12','AA','2071'),('1987-10-12','AA','2086'),('1987-10-12','AA','2105'),('1987-10-12','AA','2111'),('1987-10-12','AA','2123'),('1987-10-12','AA','2123'),('1987-10-12','AA','2147'),('1987-10-12','AA','2147'),('1987-10-12','AA','2199'),('1987-10-12','AA','2199'),('1987-10-12','AA','2207'),('1987-10-12','AA','2207'),('1987-10-12','AA','2217'),('1987-10-12','AA','2230'),('1987-10-12','AA','2245'),('1987-10-12','AA','2251'),('1987-10-12','AA','2251'),('1987-10-12','AA','2275'),('1987-10-12','AA','2278'),('1987-10-12','AA','2351'),('1987-10-12','AA','2357'),('1987-10-12','AA','2361'),('1987-10-12','AA','2490'),('1987-10-12','AA','2528'),('1987-10-12','AA','2528'),('1987-10-12','AA','2735'),('1987-10-12','AA','2735'),('1987-10-12','AA','2751'),('1987-10-12','AL','2'),('1987-10-12','AL','2'),('1987-10-12','AL','7'),('1987-10-12','AL','7'),('1987-10-12','AL','26'),('1987-10-12','AL','26'),('1987-10-12','AL','34'),('1987-10-12','AL','34'),('1987-10-12','AL','36'),('1987-10-12','AL','36'),('1987-10-12','AL','45'),('1987-10-12','AL','45'),('1987-10-12','AL','45'),('1987-10-12','AL','91'),('1987-10-12','AL','91'),('1987-10-12','AL','104'),('1987-10-12','AL','104'),('1987-10-12','AL','104'),('1987-10-12','AL','109'),('1987-10-12','AL','112'),('1987-10-12','AL','112'),('1987-10-12','AL','123'),('1987-10-12','AL','149'),('1987-10-12','AL','160'),('1987-10-12','AL','160'),('1987-10-12','AL','165'),('1987-10-12','AL','171'),('1987-10-12','AL','171'),('1987-10-12','AL','176'),('1987-10-12','AL','176'),('1987-10-12','AL','179'),('1987-10-12','AL','215'),('1987-10-12','AL','231'),('1987-10-12','AL','263'),('1987-10-12','AL','263'),('1987-10-12','AL','268'),('1987-10-12','AL','268'),('1987-10-12','AL','268'),('1987-10-12','AL','281'),('1987-10-12','AL','281'),('1987-10-12','AL','287'),('1987-10-12','AL','287'),('1987-10-12','AL','309'),('1987-10-12','AL','309'),('1987-10-12','AL','341'),('1987-10-12','AL','344'),('1987-10-12','AL','344'),('1987-10-12','AL','357'),('1987-10-12','AL','357'),('1987-10-12','AL','368'),('1987-10-12','AL','381'),('1987-10-12','AL','396'),('1987-10-12','AL','397'),('1987-10-12','AL','397'),('1987-10-12','AL','416'),('1987-10-12','AL','416'),('1987-10-12','AL','417'),('1987-10-12','AL','438'),('1987-10-12','AL','438'),('1987-10-12','AL','446'),('1987-10-12','AL','451'),('1987-10-12','AL','451'),('1987-10-12','AL','491'),('1987-10-12','AL','491'),('1987-10-12','AL','523'),('1987-10-12','AL','523'),('1987-10-12','AL','523'),('1987-10-12','AL','525'),('1987-10-12','AL','525'),('1987-10-12','AL','533'),('1987-10-12','AL','533'),('1987-10-12','AL','546'),('1987-10-12','AL','546'),('1987-10-12','AL','556'),('1987-10-12','AL','556'),('1987-10-12','AL','627'),('1987-10-12','AL','629'),('1987-10-12','AL','670'),('1987-10-12','AL','670'),('1987-10-12','AL','670'),('1987-10-12','AL','673'),('1987-10-13','AA','2'),('1987-10-13','AA','2'),('1987-10-13','AA','2'),('1987-10-13','AA','7'),('1987-10-13','AA','7'),('1987-10-13','AA','26'),('1987-10-13','AA','34'),('1987-10-13','AA','36'),('1987-10-13','AA','91'),('1987-10-13','AA','101'),('1987-10-13','AA','101'),('1987-10-13','AA','109'),('1987-10-13','AA','109'),('1987-10-13','AA','112'),('1987-10-13','AA','123'),('1987-10-13','AA','123'),('1987-10-13','AA','160'),('1987-10-13','AA','165'),('1987-10-13','AA','165'),('1987-10-13','AA','165'),('1987-10-13','AA','176'),('1987-10-13','AA','176'),('1987-10-13','AA','176'),('1987-10-13','AA','176'),('1987-10-13','AA','179'),('1987-10-13','AA','179'),('1987-10-13','AA','215'),('1987-10-13','AA','215'),('1987-10-13','AA','231'),('1987-10-13','AA','231'),('1987-10-13','AA','263'),('1987-10-13','AA','263'),('1987-10-13','AA','268'),('1987-10-13','AA','268'),('1987-10-13','AA','281'),('1987-10-13','AA','287'),('1987-10-13','AA','287'),('1987-10-13','AA','309'),('1987-10-13','AA','309'),('1987-10-13','AA','309'),('1987-10-13','AA','341'),('1987-10-13','AA','344'),('1987-10-13','AA','344'),('1987-10-13','AA','347'),('1987-10-13','AA','347'),('1987-10-13','AA','368'),('1987-10-13','AA','381'),('1987-10-13','AA','381'),('1987-10-13','AA','381'),('1987-10-13','AA','396'),('1987-10-13','AA','396'),('1987-10-13','AA','397'),('1987-10-13','AA','397'),('1987-10-13','AA','417'),('1987-10-13','AA','417'),('1987-10-13','AA','446'),('1987-10-13','AA','451'),('1987-10-13','AA','451'),('1987-10-13','AA','460'),('1987-10-13','AA','460'),('1987-10-13','AA','491'),('1987-10-13','AA','504'),('1987-10-13','AA','504'),('1987-10-13','AA','519'),('1987-10-13','AA','519'),('1987-10-13','AA','523'),('1987-10-13','AA','523'),('1987-10-13','AA','525'),('1987-10-13','AA','525'),('1987-10-13','AA','533'),('1987-10-13','AA','533'),('1987-10-13','AA','533'),('1987-10-13','AA','546'),('1987-10-13','AA','546'),('1987-10-13','AA','546'),('1987-10-13','AA','556'),('1987-10-13','AA','556'),('1987-10-13','AA','556'),('1987-10-13','AA','597'),('1987-10-13','AA','597'),('1987-10-13','AA','597'),('1987-10-13','AA','601'),('1987-10-13','AA','601'),('1987-10-13','AA','627'),('1987-10-13','AA','629'),('1987-10-13','AA','629'),('1987-10-13','AA','673'),('1987-10-13','AA','673'),('1987-10-13','AA','680'),('1987-10-13','AA','817'),('1987-10-13','AA','817'),('1987-10-13','AA','824'),('1987-10-13','AA','824'),('1987-10-13','AA','824'),('1987-10-13','AA','832'),('1987-10-13','AA','832'),('1987-10-13','AA','852'),('1987-10-13','AA','866'),('1987-10-13','AA','866'),('1987-10-13','AA','871'),('1987-10-13','AA','871'),('1987-10-13','AA','880'),('1987-10-13','AA','880'),('1987-10-13','AA','880'),('1987-10-13','AA','880'),('1987-10-13','AA','883'),('1987-10-13','AA','883'),('1987-10-13','AA','885'),('1987-10-13','AA','885'),('1987-10-13','AA','885'),('1987-10-13','AA','890'),('1987-10-13','AA','890'),('1987-10-13','AA','893'),('1987-10-13','AA','893'),('1987-10-13','AA','905'),('1987-10-13','AA','905'),('1987-10-13','AA','915'),('1987-10-13','AA','929'),('1987-10-13','AA','929'),('1987-10-13','AA','936'),('1987-10-13','AA','936'),('1987-10-13','AA','937'),('1987-10-13','AA','937'),('1987-10-13','AA','955'),('1987-10-13','AA','955'),('1987-10-13','AA','966'),('1987-10-13','AA','1002'),('1987-10-13','AA','1002'),('1987-10-13','AA','1004'),('1987-10-13','AA','1004'),('1987-10-13','AA','1015'),('1987-10-13','AA','1015'),('1987-10-13','AA','1021'),('1987-10-13','AA','1021'),('1987-10-13','AA','1041'),('1987-10-13','AA','1041'),('1987-10-13','AA','1046'),('1987-10-13','AA','1046'),('1987-10-13','AA','1048'),('1987-10-13','AA','1048'),('1987-10-13','AA','1061'),('1987-10-13','AA','1061'),('1987-10-13','AA','1088'),('1987-10-13','AA','1088'),('1987-10-13','AA','2033'),('1987-10-13','AA','2050'),('1987-10-13','AA','2071'),('1987-10-13','AA','2071'),('1987-10-13','AA','2086'),('1987-10-13','AA','2105'),('1987-10-13','AA','2111'),('1987-10-13','AA','2123'),('1987-10-13','AA','2123'),('1987-10-13','AA','2147'),('1987-10-13','AA','2147'),('1987-10-13','AA','2199'),('1987-10-13','AA','2199'),('1987-10-13','AA','2207'),('1987-10-13','AA','2207'),('1987-10-13','AA','2217'),('1987-10-13','AA','2230'),('1987-10-13','AA','2245'),('1987-10-13','AA','2251'),('1987-10-13','AA','2251'),('1987-10-13','AA','2275'),('1987-10-13','AA','2351'),('1987-10-13','AA','2357'),('1987-10-13','AA','2361'),('1987-10-13','AA','2490'),('1987-10-13','AA','2528'),('1987-10-13','AA','2528'),('1987-10-13','AA','2735'),('1987-10-13','AA','2735'),('1987-10-13','AA','2751'),('1987-10-13','AL','2'),('1987-10-13','AL','2'),('1987-10-13','AL','7'),('1987-10-13','AL','7'),('1987-10-13','AL','26'),('1987-10-13','AL','26'),('1987-10-13','AL','34'),('1987-10-13','AL','34'),('1987-10-13','AL','36'),('1987-10-13','AL','36'),('1987-10-13','AL','45'),('1987-10-13','AL','45'),('1987-10-13','AL','45'),('1987-10-13','AL','91'),('1987-10-13','AL','91'),('1987-10-13','AL','104'),('1987-10-13','AL','104'),('1987-10-13','AL','104'),('1987-10-13','AL','109'),('1987-10-13','AL','112'),('1987-10-13','AL','112'),('1987-10-13','AL','123'),('1987-10-13','AL','149'),('1987-10-13','AL','160'),('1987-10-13','AL','160'),('1987-10-13','AL','171'),('1987-10-13','AL','171'),('1987-10-13','AL','176'),('1987-10-13','AL','176'),('1987-10-13','AL','179'),('1987-10-13','AL','231'),('1987-10-13','AL','263'),('1987-10-13','AL','263'),('1987-10-13','AL','268'),('1987-10-13','AL','268'),('1987-10-13','AL','268'),('1987-10-13','AL','281'),('1987-10-13','AL','281'),('1987-10-13','AL','287'),('1987-10-13','AL','287'),('1987-10-13','AL','309'),('1987-10-13','AL','309'),('1987-10-13','AL','341'),('1987-10-13','AL','357'),('1987-10-13','AL','357'),('1987-10-13','AL','368'),('1987-10-13','AL','381'),('1987-10-13','AL','396'),('1987-10-13','AL','397'),('1987-10-13','AL','397'),('1987-10-13','AL','416'),('1987-10-13','AL','417'),('1987-10-13','AL','438'),('1987-10-13','AL','438'),('1987-10-13','AL','446'),('1987-10-13','AL','451'),('1987-10-13','AL','451'),('1987-10-13','AL','491'),('1987-10-13','AL','491'),('1987-10-13','AL','523'),('1987-10-13','AL','523'),('1987-10-13','AL','523'),('1987-10-13','AL','525'),('1987-10-13','AL','525'),('1987-10-13','AL','533'),('1987-10-13','AL','533'),('1987-10-13','AL','546'),('1987-10-13','AL','546'),('1987-10-13','AL','556'),('1987-10-13','AL','556'),('1987-10-13','AL','601'),('1987-10-13','AL','601'),('1987-10-13','AL','627'),('1987-10-13','AL','629'),('1987-10-13','AL','670'),('1987-10-13','AL','670'),('1987-10-13','AL','670'),('1987-10-13','AL','673'),('1987-10-13','AL','680'),('1987-10-14','AA','2'),('1987-10-14','AA','2'),('1987-10-14','AA','2'),('1987-10-14','AA','7'),('1987-10-14','AA','7'),('1987-10-14','AA','26'),('1987-10-14','AA','34'),('1987-10-14','AA','36'),('1987-10-14','AA','91'),('1987-10-14','AA','101'),('1987-10-14','AA','101'),('1987-10-14','AA','109'),('1987-10-14','AA','109'),('1987-10-14','AA','112'),('1987-10-14','AA','123'),('1987-10-14','AA','123'),('1987-10-14','AA','160'),('1987-10-14','AA','165'),('1987-10-14','AA','165'),('1987-10-14','AA','176'),('1987-10-14','AA','176'),('1987-10-14','AA','176'),('1987-10-14','AA','176'),('1987-10-14','AA','179'),('1987-10-14','AA','179'),('1987-10-14','AA','215'),('1987-10-14','AA','215'),('1987-10-14','AA','231'),('1987-10-14','AA','231'),('1987-10-14','AA','263'),('1987-10-14','AA','263'),('1987-10-14','AA','268'),('1987-10-14','AA','268'),('1987-10-14','AA','281'),('1987-10-14','AA','287'),('1987-10-14','AA','309'),('1987-10-14','AA','309'),('1987-10-14','AA','309'),('1987-10-14','AA','341'),('1987-10-14','AA','344'),('1987-10-14','AA','344'),('1987-10-14','AA','347'),('1987-10-14','AA','347'),('1987-10-14','AA','368'),('1987-10-14','AA','381'),('1987-10-14','AA','381'),('1987-10-14','AA','381'),('1987-10-14','AA','396'),('1987-10-14','AA','396'),('1987-10-14','AA','397'),('1987-10-14','AA','417'),('1987-10-14','AA','446'),('1987-10-14','AA','451'),('1987-10-14','AA','451'),('1987-10-14','AA','460'),('1987-10-14','AA','460'),('1987-10-14','AA','491'),('1987-10-14','AA','504'),('1987-10-14','AA','519'),('1987-10-14','AA','519'),('1987-10-14','AA','523'),('1987-10-14','AA','523'),('1987-10-14','AA','525'),('1987-10-14','AA','525'),('1987-10-14','AA','533'),('1987-10-14','AA','533'),('1987-10-14','AA','533'),('1987-10-14','AA','546'),('1987-10-14','AA','546'),('1987-10-14','AA','546'),('1987-10-14','AA','546'),('1987-10-14','AA','556'),('1987-10-14','AA','556'),('1987-10-14','AA','556'),('1987-10-14','AA','597'),('1987-10-14','AA','597'),('1987-10-14','AA','597'),('1987-10-14','AA','601'),('1987-10-14','AA','601'),('1987-10-14','AA','627'),('1987-10-14','AA','629'),('1987-10-14','AA','629'),('1987-10-14','AA','670'),('1987-10-14','AA','673'),('1987-10-14','AA','673'),('1987-10-14','AA','680'),('1987-10-14','AA','680'),('1987-10-14','AA','817'),('1987-10-14','AA','817'),('1987-10-14','AA','824'),('1987-10-14','AA','824'),('1987-10-14','AA','824'),('1987-10-14','AA','824'),('1987-10-14','AA','832'),('1987-10-14','AA','832'),('1987-10-14','AA','852'),('1987-10-14','AA','866'),('1987-10-14','AA','866'),('1987-10-14','AA','871'),('1987-10-14','AA','871'),('1987-10-14','AA','880'),('1987-10-14','AA','880'),('1987-10-14','AA','880'),('1987-10-14','AA','883'),('1987-10-14','AA','883'),('1987-10-14','AA','885'),('1987-10-14','AA','885'),('1987-10-14','AA','885'),('1987-10-14','AA','890'),('1987-10-14','AA','890'),('1987-10-14','AA','893'),('1987-10-14','AA','893'),('1987-10-14','AA','905'),('1987-10-14','AA','905'),('1987-10-14','AA','915'),('1987-10-14','AA','929'),('1987-10-14','AA','929'),('1987-10-14','AA','936'),('1987-10-14','AA','936'),('1987-10-14','AA','937'),('1987-10-14','AA','937'),('1987-10-14','AA','955'),('1987-10-14','AA','955'),('1987-10-14','AA','966'),('1987-10-14','AA','1002'),('1987-10-14','AA','1002'),('1987-10-14','AA','1004'),('1987-10-14','AA','1004'),('1987-10-14','AA','1015'),('1987-10-14','AA','1015'),('1987-10-14','AA','1021'),('1987-10-14','AA','1021'),('1987-10-14','AA','1041'),('1987-10-14','AA','1041'),('1987-10-14','AA','1046'),('1987-10-14','AA','1046'),('1987-10-14','AA','1048'),('1987-10-14','AA','1048'),('1987-10-14','AA','1061'),('1987-10-14','AA','1061'),('1987-10-14','AA','1088'),('1987-10-14','AA','1088'),('1987-10-14','AA','2033'),('1987-10-14','AA','2033'),('1987-10-14','AA','2050'),('1987-10-14','AA','2058'),('1987-10-14','AA','2071'),('1987-10-14','AA','2071'),('1987-10-14','AA','2086'),('1987-10-14','AA','2111'),('1987-10-14','AA','2123'),('1987-10-14','AA','2123'),('1987-10-14','AA','2147'),('1987-10-14','AA','2147'),('1987-10-14','AA','2199'),('1987-10-14','AA','2199'),('1987-10-14','AA','2207'),('1987-10-14','AA','2207'),('1987-10-14','AA','2217'),('1987-10-14','AA','2230'),('1987-10-14','AA','2251'),('1987-10-14','AA','2251'),('1987-10-14','AA','2278'),('1987-10-14','AA','2351'),('1987-10-14','AA','2357'),('1987-10-14','AA','2490'),('1987-10-14','AA','2528'),('1987-10-14','AA','2528'),('1987-10-14','AA','2735'),('1987-10-14','AA','2735'),('1987-10-14','AA','2751'),('1987-10-14','AL','2'),('1987-10-14','AL','2'),('1987-10-14','AL','7'),('1987-10-14','AL','7'),('1987-10-14','AL','26'),('1987-10-14','AL','26'),('1987-10-14','AL','34'),('1987-10-14','AL','36'),('1987-10-14','AL','36'),('1987-10-14','AL','45'),('1987-10-14','AL','45'),('1987-10-14','AL','91'),('1987-10-14','AL','91'),('1987-10-14','AL','104'),('1987-10-14','AL','104'),('1987-10-14','AL','104'),('1987-10-14','AL','109'),('1987-10-14','AL','112'),('1987-10-14','AL','112'),('1987-10-14','AL','123'),('1987-10-14','AL','149'),('1987-10-14','AL','160'),('1987-10-14','AL','160'),('1987-10-14','AL','165'),('1987-10-14','AL','171'),('1987-10-14','AL','171'),('1987-10-14','AL','176'),('1987-10-14','AL','176'),('1987-10-14','AL','179'),('1987-10-14','AL','215'),('1987-10-14','AL','231'),('1987-10-14','AL','263'),('1987-10-14','AL','263'),('1987-10-14','AL','268'),('1987-10-14','AL','268'),('1987-10-14','AL','268'),('1987-10-14','AL','281'),('1987-10-14','AL','281'),('1987-10-14','AL','287'),('1987-10-14','AL','287'),('1987-10-14','AL','309'),('1987-10-14','AL','309'),('1987-10-14','AL','341'),('1987-10-14','AL','344'),('1987-10-14','AL','344'),('1987-10-14','AL','357'),('1987-10-14','AL','357'),('1987-10-14','AL','368'),('1987-10-14','AL','381'),('1987-10-14','AL','396'),('1987-10-14','AL','397'),('1987-10-14','AL','397'),('1987-10-14','AL','416'),('1987-10-14','AL','416'),('1987-10-14','AL','417'),('1987-10-14','AL','438'),('1987-10-14','AL','438'),('1987-10-14','AL','446'),('1987-10-14','AL','451'),('1987-10-14','AL','451'),('1987-10-14','AL','491'),('1987-10-14','AL','491'),('1987-10-14','AL','523'),('1987-10-14','AL','523'),('1987-10-14','AL','523'),('1987-10-14','AL','525'),('1987-10-14','AL','525'),('1987-10-14','AL','533'),('1987-10-14','AL','533'),('1987-10-14','AL','546'),('1987-10-14','AL','546'),('1987-10-14','AL','556'),('1987-10-14','AL','556'),('1987-10-14','AL','601'),('1987-10-14','AL','601'),('1987-10-14','AL','627'),('1987-10-14','AL','629'),('1987-10-14','AL','670'),('1987-10-14','AL','670'),('1987-10-14','AL','670'),('1987-10-14','AL','673'),('1987-10-14','AL','680'),('1987-10-15','AA','2'),('1987-10-15','AA','2'),('1987-10-15','AA','2'),('1987-10-15','AA','7'),('1987-10-15','AA','7'),('1987-10-15','AA','26'),('1987-10-15','AA','34'),('1987-10-15','AA','36'),('1987-10-15','AA','91'),('1987-10-15','AA','101'),('1987-10-15','AA','101'),('1987-10-15','AA','109'),('1987-10-15','AA','109'),('1987-10-15','AA','112'),('1987-10-15','AA','123'),('1987-10-15','AA','123'),('1987-10-15','AA','160'),('1987-10-15','AA','165'),('1987-10-15','AA','165'),('1987-10-15','AA','165'),('1987-10-15','AA','176'),('1987-10-15','AA','176'),('1987-10-15','AA','176'),('1987-10-15','AA','176'),('1987-10-15','AA','179'),('1987-10-15','AA','179'),('1987-10-15','AA','215'),('1987-10-15','AA','215'),('1987-10-15','AA','231'),('1987-10-15','AA','263'),('1987-10-15','AA','263'),('1987-10-15','AA','268'),('1987-10-15','AA','268'),('1987-10-15','AA','281'),('1987-10-15','AA','287'),('1987-10-15','AA','287'),('1987-10-15','AA','309'),('1987-10-15','AA','309'),('1987-10-15','AA','309'),('1987-10-15','AA','341'),('1987-10-15','AA','344'),('1987-10-15','AA','344'),('1987-10-15','AA','347'),('1987-10-15','AA','347'),('1987-10-15','AA','368'),('1987-10-15','AA','381'),('1987-10-15','AA','381'),('1987-10-15','AA','396'),('1987-10-15','AA','396'),('1987-10-15','AA','397'),('1987-10-15','AA','397'),('1987-10-15','AA','417'),('1987-10-15','AA','417'),('1987-10-15','AA','446'),('1987-10-15','AA','451'),('1987-10-15','AA','451'),('1987-10-15','AA','460'),('1987-10-15','AA','460'),('1987-10-15','AA','491'),('1987-10-15','AA','504'),('1987-10-15','AA','504'),('1987-10-15','AA','519'),('1987-10-15','AA','519'),('1987-10-15','AA','523'),('1987-10-15','AA','523'),('1987-10-15','AA','525'),('1987-10-15','AA','525'),('1987-10-15','AA','525'),('1987-10-15','AA','533'),('1987-10-15','AA','533'),('1987-10-15','AA','533'),('1987-10-15','AA','546'),('1987-10-15','AA','546'),('1987-10-15','AA','546'),('1987-10-15','AA','546'),('1987-10-15','AA','556'),('1987-10-15','AA','556'),('1987-10-15','AA','556'),('1987-10-15','AA','597'),('1987-10-15','AA','597'),('1987-10-15','AA','597'),('1987-10-15','AA','601'),('1987-10-15','AA','601'),('1987-10-15','AA','629'),('1987-10-15','AA','629'),('1987-10-15','AA','670'),('1987-10-15','AA','673'),('1987-10-15','AA','673'),('1987-10-15','AA','680'),('1987-10-15','AA','680'),('1987-10-15','AA','817'),('1987-10-15','AA','817'),('1987-10-15','AA','824'),('1987-10-15','AA','824'),('1987-10-15','AA','824'),('1987-10-15','AA','824'),('1987-10-15','AA','832'),('1987-10-15','AA','832'),('1987-10-15','AA','852'),('1987-10-15','AA','866'),('1987-10-15','AA','866'),('1987-10-15','AA','871'),('1987-10-15','AA','871'),('1987-10-15','AA','880'),('1987-10-15','AA','880'),('1987-10-15','AA','880'),('1987-10-15','AA','883'),('1987-10-15','AA','883'),('1987-10-15','AA','885'),('1987-10-15','AA','885'),('1987-10-15','AA','885'),('1987-10-15','AA','890'),('1987-10-15','AA','890'),('1987-10-15','AA','893'),('1987-10-15','AA','893'),('1987-10-15','AA','905'),('1987-10-15','AA','905'),('1987-10-15','AA','915'),('1987-10-15','AA','929'),('1987-10-15','AA','929'),('1987-10-15','AA','936'),('1987-10-15','AA','936'),('1987-10-15','AA','937'),('1987-10-15','AA','955'),('1987-10-15','AA','955'),('1987-10-15','AA','966'),('1987-10-15','AA','1002'),('1987-10-15','AA','1002'),('1987-10-15','AA','1004'),('1987-10-15','AA','1004'),('1987-10-15','AA','1015'),('1987-10-15','AA','1015'),('1987-10-15','AA','1021'),('1987-10-15','AA','1021'),('1987-10-15','AA','1041'),('1987-10-15','AA','1041'),('1987-10-15','AA','1046'),('1987-10-15','AA','1046'),('1987-10-15','AA','1048'),('1987-10-15','AA','1048'),('1987-10-15','AA','1061'),('1987-10-15','AA','1061'),('1987-10-15','AA','1088'),('1987-10-15','AA','1088'),('1987-10-15','AA','2033'),('1987-10-15','AA','2033'),('1987-10-15','AA','2050'),('1987-10-15','AA','2058'),('1987-10-15','AA','2071'),('1987-10-15','AA','2071'),('1987-10-15','AA','2086'),('1987-10-15','AA','2105'),('1987-10-15','AA','2111'),('1987-10-15','AA','2123'),('1987-10-15','AA','2123'),('1987-10-15','AA','2147'),('1987-10-15','AA','2147'),('1987-10-15','AA','2199'),('1987-10-15','AA','2199'),('1987-10-15','AA','2207'),('1987-10-15','AA','2207'),('1987-10-15','AA','2217'),('1987-10-15','AA','2230'),('1987-10-15','AA','2245'),('1987-10-15','AA','2251'),('1987-10-15','AA','2251'),('1987-10-15','AA','2275'),('1987-10-15','AA','2278'),('1987-10-15','AA','2351'),('1987-10-15','AA','2357'),('1987-10-15','AA','2361'),('1987-10-15','AA','2490'),('1987-10-15','AA','2528'),('1987-10-15','AA','2528'),('1987-10-15','AA','2735'),('1987-10-15','AA','2735'),('1987-10-15','AA','2751'),('1987-10-15','AL','2'),('1987-10-15','AL','2'),('1987-10-15','AL','7'),('1987-10-15','AL','7'),('1987-10-15','AL','26'),('1987-10-15','AL','26'),('1987-10-15','AL','34'),('1987-10-15','AL','34'),('1987-10-15','AL','36'),('1987-10-15','AL','36'),('1987-10-15','AL','45'),('1987-10-15','AL','45'),('1987-10-15','AL','45'),('1987-10-15','AL','91'),('1987-10-15','AL','91'),('1987-10-15','AL','104'),('1987-10-15','AL','104'),('1987-10-15','AL','104'),('1987-10-15','AL','109'),('1987-10-15','AL','112'),('1987-10-15','AL','112'),('1987-10-15','AL','123'),('1987-10-15','AL','149'),('1987-10-15','AL','160'),('1987-10-15','AL','160'),('1987-10-15','AL','165'),('1987-10-15','AL','171'),('1987-10-15','AL','171'),('1987-10-15','AL','176'),('1987-10-15','AL','176'),('1987-10-15','AL','179'),('1987-10-15','AL','215'),('1987-10-15','AL','231'),('1987-10-15','AL','263'),('1987-10-15','AL','263'),('1987-10-15','AL','268'),('1987-10-15','AL','268'),('1987-10-15','AL','268'),('1987-10-15','AL','281'),('1987-10-15','AL','281'),('1987-10-15','AL','287'),('1987-10-15','AL','287'),('1987-10-15','AL','309'),('1987-10-15','AL','309'),('1987-10-15','AL','341'),('1987-10-15','AL','344'),('1987-10-15','AL','344'),('1987-10-15','AL','357'),('1987-10-15','AL','357'),('1987-10-15','AL','368'),('1987-10-15','AL','381'),('1987-10-15','AL','396'),('1987-10-15','AL','397'),('1987-10-15','AL','397'),('1987-10-15','AL','416'),('1987-10-15','AL','416'),('1987-10-15','AL','417'),('1987-10-15','AL','438'),('1987-10-15','AL','438'),('1987-10-15','AL','446'),('1987-10-15','AL','451'),('1987-10-15','AL','451'),('1987-10-15','AL','491'),('1987-10-15','AL','491'),('1987-10-15','AL','523'),('1987-10-15','AL','523'),('1987-10-15','AL','523'),('1987-10-15','AL','525'),('1987-10-15','AL','525'),('1987-10-15','AL','533'),('1987-10-15','AL','533'),('1987-10-15','AL','546'),('1987-10-15','AL','546'),('1987-10-15','AL','556'),('1987-10-15','AL','556'),('1987-10-15','AL','601'),('1987-10-15','AL','601'),('1987-10-15','AL','627'),('1987-10-15','AL','629'),('1987-10-15','AL','670'),('1987-10-15','AL','670'),('1987-10-15','AL','670'),('1987-10-15','AL','673'),('1987-10-15','AL','680'),('1987-10-16','AA','2'),('1987-10-16','AA','2'),('1987-10-16','AA','2'),('1987-10-16','AA','7'),('1987-10-16','AA','7'),('1987-10-16','AA','26'),('1987-10-16','AA','34'),('1987-10-16','AA','36'),('1987-10-16','AA','91'),('1987-10-16','AA','101'),('1987-10-16','AA','101'),('1987-10-16','AA','109'),('1987-10-16','AA','109'),('1987-10-16','AA','112'),('1987-10-16','AA','123'),('1987-10-16','AA','160'),('1987-10-16','AA','165'),('1987-10-16','AA','165'),('1987-10-16','AA','176'),('1987-10-16','AA','176'),('1987-10-16','AA','176'),('1987-10-16','AA','176'),('1987-10-16','AA','179'),('1987-10-16','AA','179'),('1987-10-16','AA','215'),('1987-10-16','AA','215'),('1987-10-16','AA','231'),('1987-10-16','AA','263'),('1987-10-16','AA','263'),('1987-10-16','AA','268'),('1987-10-16','AA','281'),('1987-10-16','AA','287'),('1987-10-16','AA','287'),('1987-10-16','AA','309'),('1987-10-16','AA','309'),('1987-10-16','AA','309'),('1987-10-16','AA','341'),('1987-10-16','AA','344'),('1987-10-16','AA','344'),('1987-10-16','AA','347'),('1987-10-16','AA','347'),('1987-10-16','AA','368'),('1987-10-16','AA','381'),('1987-10-16','AA','381'),('1987-10-16','AA','381'),('1987-10-16','AA','396'),('1987-10-16','AA','396'),('1987-10-16','AA','397'),('1987-10-16','AA','417'),('1987-10-16','AA','417'),('1987-10-16','AA','446'),('1987-10-16','AA','451'),('1987-10-16','AA','451'),('1987-10-16','AA','460'),('1987-10-16','AA','460'),('1987-10-16','AA','491'),('1987-10-16','AA','504'),('1987-10-16','AA','504'),('1987-10-16','AA','519'),('1987-10-16','AA','519'),('1987-10-16','AA','523'),('1987-10-16','AA','523'),('1987-10-16','AA','525'),('1987-10-16','AA','525'),('1987-10-16','AA','533'),('1987-10-16','AA','533'),('1987-10-16','AA','546'),('1987-10-16','AA','546'),('1987-10-16','AA','546'),('1987-10-16','AA','546'),('1987-10-16','AA','556'),('1987-10-16','AA','556'),('1987-10-16','AA','556'),('1987-10-16','AA','597'),('1987-10-16','AA','597'),('1987-10-16','AA','597'),('1987-10-16','AA','601'),('1987-10-16','AA','601'),('1987-10-16','AA','627'),('1987-10-16','AA','629'),('1987-10-16','AA','629'),('1987-10-16','AA','670'),('1987-10-16','AA','673'),('1987-10-16','AA','673'),('1987-10-16','AA','680'),('1987-10-16','AA','680'),('1987-10-16','AA','817'),('1987-10-16','AA','817'),('1987-10-16','AA','824'),('1987-10-16','AA','824'),('1987-10-16','AA','824'),('1987-10-16','AA','824'),('1987-10-16','AA','832'),('1987-10-16','AA','832'),('1987-10-16','AA','852'),('1987-10-16','AA','866'),('1987-10-16','AA','866'),('1987-10-16','AA','871'),('1987-10-16','AA','871'),('1987-10-16','AA','880'),('1987-10-16','AA','880'),('1987-10-16','AA','880'),('1987-10-16','AA','880'),('1987-10-16','AA','883'),('1987-10-16','AA','883'),('1987-10-16','AA','885'),('1987-10-16','AA','885'),('1987-10-16','AA','885'),('1987-10-16','AA','890'),('1987-10-16','AA','890'),('1987-10-16','AA','893'),('1987-10-16','AA','893'),('1987-10-16','AA','905'),('1987-10-16','AA','905'),('1987-10-16','AA','915'),('1987-10-16','AA','929'),('1987-10-16','AA','929'),('1987-10-16','AA','936'),('1987-10-16','AA','936'),('1987-10-16','AA','937'),('1987-10-16','AA','937'),('1987-10-16','AA','955'),('1987-10-16','AA','955'),('1987-10-16','AA','966'),('1987-10-16','AA','1002'),('1987-10-16','AA','1002'),('1987-10-16','AA','1004'),('1987-10-16','AA','1004'),('1987-10-16','AA','1015'),('1987-10-16','AA','1015'),('1987-10-16','AA','1021'),('1987-10-16','AA','1021'),('1987-10-16','AA','1041'),('1987-10-16','AA','1041'),('1987-10-16','AA','1046'),('1987-10-16','AA','1046'),('1987-10-16','AA','1048'),('1987-10-16','AA','1048'),('1987-10-16','AA','1061'),('1987-10-16','AA','1061'),('1987-10-16','AA','1088'),('1987-10-16','AA','1088'),('1987-10-16','AA','2033'),('1987-10-16','AA','2033'),('1987-10-16','AA','2050'),('1987-10-16','AA','2058'),('1987-10-16','AA','2071'),('1987-10-16','AA','2071'),('1987-10-16','AA','2086'),('1987-10-16','AA','2105'),('1987-10-16','AA','2111'),('1987-10-16','AA','2123'),('1987-10-16','AA','2123'),('1987-10-16','AA','2147'),('1987-10-16','AA','2147'),('1987-10-16','AA','2199'),('1987-10-16','AA','2199'),('1987-10-16','AA','2207'),('1987-10-16','AA','2207'),('1987-10-16','AA','2217'),('1987-10-16','AA','2230'),('1987-10-16','AA','2245'),('1987-10-16','AA','2251'),('1987-10-16','AA','2251'),('1987-10-16','AA','2275'),('1987-10-16','AA','2278'),('1987-10-16','AA','2351'),('1987-10-16','AA','2357'),('1987-10-16','AA','2361'),('1987-10-16','AA','2490'),('1987-10-16','AA','2528'),('1987-10-16','AA','2528'),('1987-10-16','AA','2735'),('1987-10-16','AA','2735'),('1987-10-16','AA','2751'),('1987-10-16','AL','2'),('1987-10-16','AL','2'),('1987-10-16','AL','7'),('1987-10-16','AL','7'),('1987-10-16','AL','26'),('1987-10-16','AL','26'),('1987-10-16','AL','34'),('1987-10-16','AL','36'),('1987-10-16','AL','36'),('1987-10-16','AL','45'),('1987-10-16','AL','45'),('1987-10-16','AL','45'),('1987-10-16','AL','91'),('1987-10-16','AL','91'),('1987-10-16','AL','104'),('1987-10-16','AL','104'),('1987-10-16','AL','109'),('1987-10-16','AL','112'),('1987-10-16','AL','112'),('1987-10-16','AL','123'),('1987-10-16','AL','149'),('1987-10-16','AL','160'),('1987-10-16','AL','160'),('1987-10-16','AL','165'),('1987-10-16','AL','171'),('1987-10-16','AL','171'),('1987-10-16','AL','176'),('1987-10-16','AL','176'),('1987-10-16','AL','179'),('1987-10-16','AL','215'),('1987-10-16','AL','231'),('1987-10-16','AL','263'),('1987-10-16','AL','263'),('1987-10-16','AL','268'),('1987-10-16','AL','268'),('1987-10-16','AL','268'),('1987-10-16','AL','281'),('1987-10-16','AL','281'),('1987-10-16','AL','287'),('1987-10-16','AL','287'),('1987-10-16','AL','309'),('1987-10-16','AL','309'),('1987-10-16','AL','341'),('1987-10-16','AL','344'),('1987-10-16','AL','344'),('1987-10-16','AL','357'),('1987-10-16','AL','357'),('1987-10-16','AL','368'),('1987-10-16','AL','381'),('1987-10-16','AL','396'),('1987-10-16','AL','397'),('1987-10-16','AL','397'),('1987-10-16','AL','416'),('1987-10-16','AL','416'),('1987-10-16','AL','417'),('1987-10-16','AL','438'),('1987-10-16','AL','438'),('1987-10-16','AL','446'),('1987-10-16','AL','451'),('1987-10-16','AL','451'),('1987-10-16','AL','491'),('1987-10-16','AL','491'),('1987-10-16','AL','523'),('1987-10-16','AL','523'),('1987-10-16','AL','523'),('1987-10-16','AL','525'),('1987-10-16','AL','525'),('1987-10-16','AL','533'),('1987-10-16','AL','533'),('1987-10-16','AL','546'),('1987-10-16','AL','546'),('1987-10-16','AL','556'),('1987-10-16','AL','556'),('1987-10-16','AL','601'),('1987-10-16','AL','601'),('1987-10-16','AL','627'),('1987-10-16','AL','629'),('1987-10-16','AL','670'),('1987-10-16','AL','670'),('1987-10-16','AL','670'),('1987-10-16','AL','673'),('1987-10-16','AL','680'),('1987-10-17','AA','2'),('1987-10-17','AA','2'),('1987-10-17','AA','2'),('1987-10-17','AA','7'),('1987-10-17','AA','7'),('1987-10-17','AA','26'),('1987-10-17','AA','36'),('1987-10-17','AA','91'),('1987-10-17','AA','101'),('1987-10-17','AA','101'),('1987-10-17','AA','109'),('1987-10-17','AA','109'),('1987-10-17','AA','112'),('1987-10-17','AA','123'),('1987-10-17','AA','123'),('1987-10-17','AA','160'),('1987-10-17','AA','165'),('1987-10-17','AA','165'),('1987-10-17','AA','165'),('1987-10-17','AA','176'),('1987-10-17','AA','176'),('1987-10-17','AA','176'),('1987-10-17','AA','176'),('1987-10-17','AA','179'),('1987-10-17','AA','179'),('1987-10-17','AA','215'),('1987-10-17','AA','215'),('1987-10-17','AA','231'),('1987-10-17','AA','231'),('1987-10-17','AA','263'),('1987-10-17','AA','263'),('1987-10-17','AA','268'),('1987-10-17','AA','268'),('1987-10-17','AA','281'),('1987-10-17','AA','287'),('1987-10-17','AA','287'),('1987-10-17','AA','309'),('1987-10-17','AA','309'),('1987-10-17','AA','309'),('1987-10-17','AA','341'),('1987-10-17','AA','344'),('1987-10-17','AA','344'),('1987-10-17','AA','347'),('1987-10-17','AA','347'),('1987-10-17','AA','368'),('1987-10-17','AA','381'),('1987-10-17','AA','381'),('1987-10-17','AA','381'),('1987-10-17','AA','396'),('1987-10-17','AA','396'),('1987-10-17','AA','397'),('1987-10-17','AA','417'),('1987-10-17','AA','446'),('1987-10-17','AA','451'),('1987-10-17','AA','451'),('1987-10-17','AA','460'),('1987-10-17','AA','460'),('1987-10-17','AA','491'),('1987-10-17','AA','491'),('1987-10-17','AA','504'),('1987-10-17','AA','504'),('1987-10-17','AA','519'),('1987-10-17','AA','519'),('1987-10-17','AA','523'),('1987-10-17','AA','523'),('1987-10-17','AA','525'),('1987-10-17','AA','525'),('1987-10-17','AA','525'),('1987-10-17','AA','533'),('1987-10-17','AA','533'),('1987-10-17','AA','546'),('1987-10-17','AA','546'),('1987-10-17','AA','546'),('1987-10-17','AA','546'),('1987-10-17','AA','556'),('1987-10-17','AA','556'),('1987-10-17','AA','556'),('1987-10-17','AA','597'),('1987-10-17','AA','597'),('1987-10-17','AA','597'),('1987-10-17','AA','601'),('1987-10-17','AA','627'),('1987-10-17','AA','629'),('1987-10-17','AA','629'),('1987-10-17','AA','670'),('1987-10-17','AA','673'),('1987-10-17','AA','673'),('1987-10-17','AA','680'),('1987-10-17','AA','680'),('1987-10-17','AA','817'),('1987-10-17','AA','817'),('1987-10-17','AA','824'),('1987-10-17','AA','824'),('1987-10-17','AA','824'),('1987-10-17','AA','824'),('1987-10-17','AA','832'),('1987-10-17','AA','832'),('1987-10-17','AA','852'),('1987-10-17','AA','852'),('1987-10-17','AA','866'),('1987-10-17','AA','866'),('1987-10-17','AA','871'),('1987-10-17','AA','871'),('1987-10-17','AA','880'),('1987-10-17','AA','880'),('1987-10-17','AA','880'),('1987-10-17','AA','880'),('1987-10-17','AA','883'),('1987-10-17','AA','883'),('1987-10-17','AA','885'),('1987-10-17','AA','885'),('1987-10-17','AA','885'),('1987-10-17','AA','890'),('1987-10-17','AA','890'),('1987-10-17','AA','893'),('1987-10-17','AA','893'),('1987-10-17','AA','905'),('1987-10-17','AA','905'),('1987-10-17','AA','915'),('1987-10-17','AA','929'),('1987-10-17','AA','936'),('1987-10-17','AA','936'),('1987-10-17','AA','937'),('1987-10-17','AA','937'),('1987-10-17','AA','955'),('1987-10-17','AA','955'),('1987-10-17','AA','966'),('1987-10-17','AA','1002'),('1987-10-17','AA','1002'),('1987-10-17','AA','1004'),('1987-10-17','AA','1004'),('1987-10-17','AA','1015'),('1987-10-17','AA','1015'),('1987-10-17','AA','1021'),('1987-10-17','AA','1021'),('1987-10-17','AA','1041'),('1987-10-17','AA','1041'),('1987-10-17','AA','1046'),('1987-10-17','AA','1046'),('1987-10-17','AA','1048'),('1987-10-17','AA','1048'),('1987-10-17','AA','1061'),('1987-10-17','AA','1061'),('1987-10-17','AA','1088'),('1987-10-17','AA','1088'),('1987-10-17','AA','2033'),('1987-10-17','AA','2033'),('1987-10-17','AA','2050'),('1987-10-17','AA','2058'),('1987-10-17','AA','2071'),('1987-10-17','AA','2086'),('1987-10-17','AA','2105'),('1987-10-17','AA','2111'),('1987-10-17','AA','2123'),('1987-10-17','AA','2123'),('1987-10-17','AA','2147'),('1987-10-17','AA','2147'),('1987-10-17','AA','2199'),('1987-10-17','AA','2199'),('1987-10-17','AA','2207'),('1987-10-17','AA','2207'),('1987-10-17','AA','2217'),('1987-10-17','AA','2230'),('1987-10-17','AA','2251'),('1987-10-17','AA','2251'),('1987-10-17','AA','2275'),('1987-10-17','AA','2278'),('1987-10-17','AA','2351'),('1987-10-17','AA','2357'),('1987-10-17','AA','2361'),('1987-10-17','AA','2490'),('1987-10-17','AA','2528'),('1987-10-17','AA','2528'),('1987-10-17','AA','2735'),('1987-10-17','AA','2735'),('1987-10-17','AL','2'),('1987-10-17','AL','2'),('1987-10-17','AL','7'),('1987-10-17','AL','7'),('1987-10-17','AL','26'),('1987-10-17','AL','26'),('1987-10-17','AL','34'),('1987-10-17','AL','36'),('1987-10-17','AL','36'),('1987-10-17','AL','45'),('1987-10-17','AL','45'),('1987-10-17','AL','45'),('1987-10-17','AL','91'),('1987-10-17','AL','91'),('1987-10-17','AL','104'),('1987-10-17','AL','104'),('1987-10-17','AL','109'),('1987-10-17','AL','112'),('1987-10-17','AL','112'),('1987-10-17','AL','149'),('1987-10-17','AL','160'),('1987-10-17','AL','160'),('1987-10-17','AL','165'),('1987-10-17','AL','171'),('1987-10-17','AL','171'),('1987-10-17','AL','176'),('1987-10-17','AL','176'),('1987-10-17','AL','179'),('1987-10-17','AL','215'),('1987-10-17','AL','231'),('1987-10-17','AL','263'),('1987-10-17','AL','268'),('1987-10-17','AL','268'),('1987-10-17','AL','268'),('1987-10-17','AL','287'),('1987-10-17','AL','287'),('1987-10-17','AL','309'),('1987-10-17','AL','309'),('1987-10-17','AL','344'),('1987-10-17','AL','344'),('1987-10-17','AL','357'),('1987-10-17','AL','357'),('1987-10-17','AL','381'),('1987-10-17','AL','396'),('1987-10-17','AL','397'),('1987-10-17','AL','397'),('1987-10-17','AL','397'),('1987-10-17','AL','416'),('1987-10-17','AL','417'),('1987-10-17','AL','438'),('1987-10-17','AL','438'),('1987-10-17','AL','451'),('1987-10-17','AL','451'),('1987-10-17','AL','491'),('1987-10-17','AL','491'),('1987-10-17','AL','523'),('1987-10-17','AL','523'),('1987-10-17','AL','525'),('1987-10-17','AL','525'),('1987-10-17','AL','533'),('1987-10-17','AL','546'),('1987-10-17','AL','546'),('1987-10-17','AL','556'),('1987-10-17','AL','556'),('1987-10-17','AL','601'),('1987-10-17','AL','601'),('1987-10-17','AL','627'),('1987-10-17','AL','670'),('1987-10-17','AL','673'),('1987-10-17','AL','680'),('1987-10-17','AL','936'),('1987-10-17','AL','966'),('1987-10-18','AA','2'),('1987-10-18','AA','2'),('1987-10-18','AA','2'),('1987-10-18','AA','7'),('1987-10-18','AA','7'),('1987-10-18','AA','26'),('1987-10-18','AA','34'),('1987-10-18','AA','36'),('1987-10-18','AA','91'),('1987-10-18','AA','101'),('1987-10-18','AA','101'),('1987-10-18','AA','109'),('1987-10-18','AA','109'),('1987-10-18','AA','112'),('1987-10-18','AA','123'),('1987-10-18','AA','123'),('1987-10-18','AA','160'),('1987-10-18','AA','165'),('1987-10-18','AA','165'),('1987-10-18','AA','165'),('1987-10-18','AA','176'),('1987-10-18','AA','176'),('1987-10-18','AA','176'),('1987-10-18','AA','176'),('1987-10-18','AA','179'),('1987-10-18','AA','179'),('1987-10-18','AA','215'),('1987-10-18','AA','231'),('1987-10-18','AA','231'),('1987-10-18','AA','263'),('1987-10-18','AA','268'),('1987-10-18','AA','268'),('1987-10-18','AA','281'),('1987-10-18','AA','287'),('1987-10-18','AA','287'),('1987-10-18','AA','309'),('1987-10-18','AA','309'),('1987-10-18','AA','309'),('1987-10-18','AA','341'),('1987-10-18','AA','344'),('1987-10-18','AA','344'),('1987-10-18','AA','347'),('1987-10-18','AA','347'),('1987-10-18','AA','368'),('1987-10-18','AA','381'),('1987-10-18','AA','381'),('1987-10-18','AA','381'),('1987-10-18','AA','396'),('1987-10-18','AA','396'),('1987-10-18','AA','397'),('1987-10-18','AA','397'),('1987-10-18','AA','417'),('1987-10-18','AA','417'),('1987-10-18','AA','451'),('1987-10-18','AA','451'),('1987-10-18','AA','460'),('1987-10-18','AA','491'),('1987-10-18','AA','491'),('1987-10-18','AA','504'),('1987-10-18','AA','504'),('1987-10-18','AA','519'),('1987-10-18','AA','519'),('1987-10-18','AA','523'),('1987-10-18','AA','523'),('1987-10-18','AA','525'),('1987-10-18','AA','525'),('1987-10-18','AA','525'),('1987-10-18','AA','533'),('1987-10-18','AA','533'),('1987-10-18','AA','546'),('1987-10-18','AA','546'),('1987-10-18','AA','546'),('1987-10-18','AA','546'),('1987-10-18','AA','556'),('1987-10-18','AA','556'),('1987-10-18','AA','556'),('1987-10-18','AA','597'),('1987-10-18','AA','597'),('1987-10-18','AA','597'),('1987-10-18','AA','601'),('1987-10-18','AA','601'),('1987-10-18','AA','629'),('1987-10-18','AA','629'),('1987-10-18','AA','670'),('1987-10-18','AA','673'),('1987-10-18','AA','680'),('1987-10-18','AA','680'),('1987-10-18','AA','817'),('1987-10-18','AA','817'),('1987-10-18','AA','824'),('1987-10-18','AA','824'),('1987-10-18','AA','824'),('1987-10-18','AA','824'),('1987-10-18','AA','832'),('1987-10-18','AA','832'),('1987-10-18','AA','852'),('1987-10-18','AA','866'),('1987-10-18','AA','866'),('1987-10-18','AA','871'),('1987-10-18','AA','871'),('1987-10-18','AA','880'),('1987-10-18','AA','880'),('1987-10-18','AA','880'),('1987-10-18','AA','880'),('1987-10-18','AA','883'),('1987-10-18','AA','883'),('1987-10-18','AA','885'),('1987-10-18','AA','885'),('1987-10-18','AA','885'),('1987-10-18','AA','890'),('1987-10-18','AA','890'),('1987-10-18','AA','893'),('1987-10-18','AA','893'),('1987-10-18','AA','905'),('1987-10-18','AA','905'),('1987-10-18','AA','915'),('1987-10-18','AA','929'),('1987-10-18','AA','929'),('1987-10-18','AA','936'),('1987-10-18','AA','936'),('1987-10-18','AA','937'),('1987-10-18','AA','937'),('1987-10-18','AA','955'),('1987-10-18','AA','966'),('1987-10-18','AA','1002'),('1987-10-18','AA','1002'),('1987-10-18','AA','1004'),('1987-10-18','AA','1004'),('1987-10-18','AA','1015'),('1987-10-18','AA','1015'),('1987-10-18','AA','1021'),('1987-10-18','AA','1021'),('1987-10-18','AA','1041'),('1987-10-18','AA','1041'),('1987-10-18','AA','1046'),('1987-10-18','AA','1046'),('1987-10-18','AA','1048'),('1987-10-18','AA','1048'),('1987-10-18','AA','1061'),('1987-10-18','AA','1061'),('1987-10-18','AA','1088'),('1987-10-18','AA','1088'),('1987-10-18','AA','2033'),('1987-10-18','AA','2033'),('1987-10-18','AA','2050'),('1987-10-18','AA','2058'),('1987-10-18','AA','2071'),('1987-10-18','AA','2071'),('1987-10-18','AA','2086'),('1987-10-18','AA','2111'),('1987-10-18','AA','2123'),('1987-10-18','AA','2147'),('1987-10-18','AA','2147'),('1987-10-18','AA','2199'),('1987-10-18','AA','2199'),('1987-10-18','AA','2207'),('1987-10-18','AA','2207'),('1987-10-18','AA','2230'),('1987-10-18','AA','2245'),('1987-10-18','AA','2251'),('1987-10-18','AA','2251'),('1987-10-18','AA','2275'),('1987-10-18','AA','2278'),('1987-10-18','AA','2351'),('1987-10-18','AA','2357'),('1987-10-18','AA','2361'),('1987-10-18','AA','2490'),('1987-10-18','AA','2528'),('1987-10-18','AA','2528'),('1987-10-18','AA','2735'),('1987-10-18','AA','2735'),('1987-10-18','AA','2751'),('1987-10-18','AL','2'),('1987-10-18','AL','2'),('1987-10-18','AL','7'),('1987-10-18','AL','7'),('1987-10-18','AL','26'),('1987-10-18','AL','26'),('1987-10-18','AL','34'),('1987-10-18','AL','34'),('1987-10-18','AL','36'),('1987-10-18','AL','36'),('1987-10-18','AL','45'),('1987-10-18','AL','45'),('1987-10-18','AL','45'),('1987-10-18','AL','91'),('1987-10-18','AL','91'),('1987-10-18','AL','104'),('1987-10-18','AL','104'),('1987-10-18','AL','104'),('1987-10-18','AL','112'),('1987-10-18','AL','123'),('1987-10-18','AL','160'),('1987-10-18','AL','160'),('1987-10-18','AL','165'),('1987-10-18','AL','171'),('1987-10-18','AL','171'),('1987-10-18','AL','176'),('1987-10-18','AL','176'),('1987-10-18','AL','179'),('1987-10-18','AL','215'),('1987-10-18','AL','231'),('1987-10-18','AL','263'),('1987-10-18','AL','263'),('1987-10-18','AL','281'),('1987-10-18','AL','281'),('1987-10-18','AL','309'),('1987-10-18','AL','309'),('1987-10-18','AL','341'),('1987-10-18','AL','344'),('1987-10-18','AL','344'),('1987-10-18','AL','357'),('1987-10-18','AL','357'),('1987-10-18','AL','368'),('1987-10-18','AL','396'),('1987-10-18','AL','416'),('1987-10-18','AL','416'),('1987-10-18','AL','417'),('1987-10-18','AL','438'),('1987-10-18','AL','438'),('1987-10-18','AL','446'),('1987-10-18','AL','451'),('1987-10-18','AL','491'),('1987-10-18','AL','523'),('1987-10-18','AL','523'),('1987-10-18','AL','523'),('1987-10-18','AL','525'),('1987-10-18','AL','525'),('1987-10-18','AL','533'),('1987-10-18','AL','533'),('1987-10-18','AL','546'),('1987-10-18','AL','546'),('1987-10-18','AL','556'),('1987-10-18','AL','601'),('1987-10-18','AL','601'),('1987-10-18','AL','627'),('1987-10-18','AL','629'),('1987-10-18','AL','670'),('1987-10-18','AL','670'),('1987-10-18','AL','670'),('1987-10-18','AL','673'),('1987-10-18','AL','680'),('1987-10-18','AL','937'),('1987-10-18','AL','937'),('1987-10-18','AL','955'),('1987-10-19','AA','2'),('1987-10-19','AA','2'),('1987-10-19','AA','2'),('1987-10-19','AA','7'),('1987-10-19','AA','7'),('1987-10-19','AA','26'),('1987-10-19','AA','34'),('1987-10-19','AA','36'),('1987-10-19','AA','91'),('1987-10-19','AA','101'),('1987-10-19','AA','101'),('1987-10-19','AA','109'),('1987-10-19','AA','109'),('1987-10-19','AA','112'),('1987-10-19','AA','123'),('1987-10-19','AA','123'),('1987-10-19','AA','160'),('1987-10-19','AA','165'),('1987-10-19','AA','165'),('1987-10-19','AA','165'),('1987-10-19','AA','176'),('1987-10-19','AA','176'),('1987-10-19','AA','176'),('1987-10-19','AA','176'),('1987-10-19','AA','179'),('1987-10-19','AA','179'),('1987-10-19','AA','215'),('1987-10-19','AA','215'),('1987-10-19','AA','231'),('1987-10-19','AA','231'),('1987-10-19','AA','263'),('1987-10-19','AA','263'),('1987-10-19','AA','268'),('1987-10-19','AA','268'),('1987-10-19','AA','281'),('1987-10-19','AA','287'),('1987-10-19','AA','287'),('1987-10-19','AA','309'),('1987-10-19','AA','309'),('1987-10-19','AA','341'),('1987-10-19','AA','344'),('1987-10-19','AA','344'),('1987-10-19','AA','347'),('1987-10-19','AA','347'),('1987-10-19','AA','368'),('1987-10-19','AA','381'),('1987-10-19','AA','381'),('1987-10-19','AA','381'),('1987-10-19','AA','396'),('1987-10-19','AA','396'),('1987-10-19','AA','397'),('1987-10-19','AA','397'),('1987-10-19','AA','417'),('1987-10-19','AA','417'),('1987-10-19','AA','446'),('1987-10-19','AA','451'),('1987-10-19','AA','451'),('1987-10-19','AA','491'),('1987-10-19','AA','504'),('1987-10-19','AA','504'),('1987-10-19','AA','519'),('1987-10-19','AA','519'),('1987-10-19','AA','523'),('1987-10-19','AA','523'),('1987-10-19','AA','525'),('1987-10-19','AA','525'),('1987-10-19','AA','525'),('1987-10-19','AA','533'),('1987-10-19','AA','533'),('1987-10-19','AA','546'),('1987-10-19','AA','546'),('1987-10-19','AA','546'),('1987-10-19','AA','546'),('1987-10-19','AA','556'),('1987-10-19','AA','556'),('1987-10-19','AA','556'),('1987-10-19','AA','597'),('1987-10-19','AA','597'),('1987-10-19','AA','597'),('1987-10-19','AA','601'),('1987-10-19','AA','601'),('1987-10-19','AA','627'),('1987-10-19','AA','629'),('1987-10-19','AA','629'),('1987-10-19','AA','670'),('1987-10-19','AA','673'),('1987-10-19','AA','673'),('1987-10-19','AA','680'),('1987-10-19','AA','680'),('1987-10-19','AA','817'),('1987-10-19','AA','817'),('1987-10-19','AA','824'),('1987-10-19','AA','824'),('1987-10-19','AA','824'),('1987-10-19','AA','832'),('1987-10-19','AA','832'),('1987-10-19','AA','852'),('1987-10-19','AA','852'),('1987-10-19','AA','866'),('1987-10-19','AA','866'),('1987-10-19','AA','871'),('1987-10-19','AA','871'),('1987-10-19','AA','880'),('1987-10-19','AA','880'),('1987-10-19','AA','880'),('1987-10-19','AA','880'),('1987-10-19','AA','883'),('1987-10-19','AA','883'),('1987-10-19','AA','885'),('1987-10-19','AA','885'),('1987-10-19','AA','890'),('1987-10-19','AA','890'),('1987-10-19','AA','893'),('1987-10-19','AA','893'),('1987-10-19','AA','905'),('1987-10-19','AA','905'),('1987-10-19','AA','915'),('1987-10-19','AA','929'),('1987-10-19','AA','929'),('1987-10-19','AA','936'),('1987-10-19','AA','936'),('1987-10-19','AA','937'),('1987-10-19','AA','955'),('1987-10-19','AA','955'),('1987-10-19','AA','966'),('1987-10-19','AA','1002'),('1987-10-19','AA','1002'),('1987-10-19','AA','1004'),('1987-10-19','AA','1004'),('1987-10-19','AA','1015'),('1987-10-19','AA','1015'),('1987-10-19','AA','1021'),('1987-10-19','AA','1021'),('1987-10-19','AA','1041'),('1987-10-19','AA','1041'),('1987-10-19','AA','1046'),('1987-10-19','AA','1046'),('1987-10-19','AA','1048'),('1987-10-19','AA','1048'),('1987-10-19','AA','1061'),('1987-10-19','AA','1061'),('1987-10-19','AA','1088'),('1987-10-19','AA','1088'),('1987-10-19','AA','2033'),('1987-10-19','AA','2033'),('1987-10-19','AA','2050'),('1987-10-19','AA','2058'),('1987-10-19','AA','2071'),('1987-10-19','AA','2071'),('1987-10-19','AA','2086'),('1987-10-19','AA','2105'),('1987-10-19','AA','2111'),('1987-10-19','AA','2123'),('1987-10-19','AA','2123'),('1987-10-19','AA','2147'),('1987-10-19','AA','2147'),('1987-10-19','AA','2199'),('1987-10-19','AA','2199'),('1987-10-19','AA','2207'),('1987-10-19','AA','2207'),('1987-10-19','AA','2217'),('1987-10-19','AA','2230'),('1987-10-19','AA','2245'),('1987-10-19','AA','2251'),('1987-10-19','AA','2251'),('1987-10-19','AA','2275'),('1987-10-19','AA','2278'),('1987-10-19','AA','2357'),('1987-10-19','AA','2361'),('1987-10-19','AA','2490'),('1987-10-19','AA','2528'),('1987-10-19','AA','2735'),('1987-10-19','AA','2735'),('1987-10-19','AA','2751'),('1987-10-19','AL','2'),('1987-10-19','AL','2'),('1987-10-19','AL','7'),('1987-10-19','AL','7'),('1987-10-19','AL','26'),('1987-10-19','AL','26'),('1987-10-19','AL','34'),('1987-10-19','AL','34'),('1987-10-19','AL','36'),('1987-10-19','AL','36'),('1987-10-19','AL','45'),('1987-10-19','AL','45'),('1987-10-19','AL','45'),('1987-10-19','AL','91'),('1987-10-19','AL','91'),('1987-10-19','AL','104'),('1987-10-19','AL','104'),('1987-10-19','AL','104'),('1987-10-19','AL','109'),('1987-10-19','AL','112'),('1987-10-19','AL','112'),('1987-10-19','AL','123'),('1987-10-19','AL','149'),('1987-10-19','AL','160'),('1987-10-19','AL','160'),('1987-10-19','AL','165'),('1987-10-19','AL','171'),('1987-10-19','AL','171'),('1987-10-19','AL','176'),('1987-10-19','AL','176'),('1987-10-19','AL','179'),('1987-10-19','AL','215'),('1987-10-19','AL','231'),('1987-10-19','AL','263'),('1987-10-19','AL','263'),('1987-10-19','AL','268'),('1987-10-19','AL','268'),('1987-10-19','AL','268'),('1987-10-19','AL','281'),('1987-10-19','AL','281'),('1987-10-19','AL','287'),('1987-10-19','AL','287'),('1987-10-19','AL','309'),('1987-10-19','AL','309'),('1987-10-19','AL','341'),('1987-10-19','AL','344'),('1987-10-19','AL','344'),('1987-10-19','AL','357'),('1987-10-19','AL','357'),('1987-10-19','AL','368'),('1987-10-19','AL','381'),('1987-10-19','AL','396'),('1987-10-19','AL','416'),('1987-10-19','AL','416'),('1987-10-19','AL','417'),('1987-10-19','AL','438'),('1987-10-19','AL','438'),('1987-10-19','AL','446'),('1987-10-19','AL','451'),('1987-10-19','AL','451'),('1987-10-19','AL','491'),('1987-10-19','AL','491'),('1987-10-19','AL','523'),('1987-10-19','AL','523'),('1987-10-19','AL','523'),('1987-10-19','AL','525'),('1987-10-19','AL','525'),('1987-10-19','AL','533'),('1987-10-19','AL','533'),('1987-10-19','AL','546'),('1987-10-19','AL','546'),('1987-10-19','AL','556'),('1987-10-19','AL','556'),('1987-10-19','AL','601'),('1987-10-19','AL','601'),('1987-10-19','AL','627'),('1987-10-19','AL','629'),('1987-10-19','AL','670'),('1987-10-19','AL','670'),('1987-10-19','AL','670'),('1987-10-20','AA','2'),('1987-10-20','AA','2'),('1987-10-20','AA','2'),('1987-10-20','AA','7'),('1987-10-20','AA','7'),('1987-10-20','AA','34'),('1987-10-20','AA','36'),('1987-10-20','AA','91'),('1987-10-20','AA','101'),('1987-10-20','AA','101'),('1987-10-20','AA','109'),('1987-10-20','AA','109'),('1987-10-20','AA','112'),('1987-10-20','AA','123'),('1987-10-20','AA','123'),('1987-10-20','AA','160'),('1987-10-20','AA','165'),('1987-10-20','AA','165'),('1987-10-20','AA','165'),('1987-10-20','AA','176'),('1987-10-20','AA','176'),('1987-10-20','AA','176'),('1987-10-20','AA','176'),('1987-10-20','AA','179'),('1987-10-20','AA','179'),('1987-10-20','AA','215'),('1987-10-20','AA','215'),('1987-10-20','AA','231'),('1987-10-20','AA','231'),('1987-10-20','AA','263'),('1987-10-20','AA','263'),('1987-10-20','AA','268'),('1987-10-20','AA','268'),('1987-10-20','AA','281'),('1987-10-20','AA','287'),('1987-10-20','AA','287'),('1987-10-20','AA','309'),('1987-10-20','AA','309'),('1987-10-20','AA','309'),('1987-10-20','AA','341'),('1987-10-20','AA','344'),('1987-10-20','AA','344'),('1987-10-20','AA','347'),('1987-10-20','AA','347'),('1987-10-20','AA','368'),('1987-10-20','AA','381'),('1987-10-20','AA','381'),('1987-10-20','AA','381'),('1987-10-20','AA','396'),('1987-10-20','AA','396'),('1987-10-20','AA','397'),('1987-10-20','AA','397'),('1987-10-20','AA','417'),('1987-10-20','AA','417'),('1987-10-20','AA','446'),('1987-10-20','AA','460'),('1987-10-20','AA','460'),('1987-10-20','AA','491'),('1987-10-20','AA','504'),('1987-10-20','AA','504'),('1987-10-20','AA','519'),('1987-10-20','AA','519'),('1987-10-20','AA','523'),('1987-10-20','AA','525'),('1987-10-20','AA','525'),('1987-10-20','AA','525'),('1987-10-20','AA','533'),('1987-10-20','AA','533'),('1987-10-20','AA','533'),('1987-10-20','AA','546'),('1987-10-20','AA','546'),('1987-10-20','AA','546'),('1987-10-20','AA','546'),('1987-10-20','AA','556'),('1987-10-20','AA','556'),('1987-10-20','AA','597'),('1987-10-20','AA','597'),('1987-10-20','AA','601'),('1987-10-20','AA','601'),('1987-10-20','AA','629'),('1987-10-20','AA','670'),('1987-10-20','AA','673'),('1987-10-20','AA','673'),('1987-10-20','AA','680'),('1987-10-20','AA','680'),('1987-10-20','AA','817'),('1987-10-20','AA','824'),('1987-10-20','AA','824'),('1987-10-20','AA','824'),('1987-10-20','AA','832'),('1987-10-20','AA','832'),('1987-10-20','AA','852'),('1987-10-20','AA','852'),('1987-10-20','AA','866'),('1987-10-20','AA','866'),('1987-10-20','AA','871'),('1987-10-20','AA','871'),('1987-10-20','AA','880'),('1987-10-20','AA','880'),('1987-10-20','AA','880'),('1987-10-20','AA','880'),('1987-10-20','AA','883'),('1987-10-20','AA','883'),('1987-10-20','AA','885'),('1987-10-20','AA','885'),('1987-10-20','AA','885'),('1987-10-20','AA','890'),('1987-10-20','AA','890'),('1987-10-20','AA','893'),('1987-10-20','AA','893'),('1987-10-20','AA','905'),('1987-10-20','AA','905'),('1987-10-20','AA','915'),('1987-10-20','AA','929'),('1987-10-20','AA','929'),('1987-10-20','AA','936'),('1987-10-20','AA','937'),('1987-10-20','AA','937'),('1987-10-20','AA','955'),('1987-10-20','AA','955'),('1987-10-20','AA','966'),('1987-10-20','AA','1002'),('1987-10-20','AA','1002'),('1987-10-20','AA','1004'),('1987-10-20','AA','1004'),('1987-10-20','AA','1015'),('1987-10-20','AA','1015'),('1987-10-20','AA','1021'),('1987-10-20','AA','1021'),('1987-10-20','AA','1041'),('1987-10-20','AA','1041'),('1987-10-20','AA','1046'),('1987-10-20','AA','1046'),('1987-10-20','AA','1048'),('1987-10-20','AA','1048'),('1987-10-20','AA','1061'),('1987-10-20','AA','1061'),('1987-10-20','AA','1088'),('1987-10-20','AA','1088'),('1987-10-20','AA','2033'),('1987-10-20','AA','2033'),('1987-10-20','AA','2050'),('1987-10-20','AA','2058'),('1987-10-20','AA','2071'),('1987-10-20','AA','2071'),('1987-10-20','AA','2086'),('1987-10-20','AA','2105'),('1987-10-20','AA','2111'),('1987-10-20','AA','2123'),('1987-10-20','AA','2123'),('1987-10-20','AA','2147'),('1987-10-20','AA','2199'),('1987-10-20','AA','2207'),('1987-10-20','AA','2217'),('1987-10-20','AA','2230'),('1987-10-20','AA','2245'),('1987-10-20','AA','2251'),('1987-10-20','AA','2251'),('1987-10-20','AA','2275'),('1987-10-20','AA','2278'),('1987-10-20','AA','2351'),('1987-10-20','AA','2357'),('1987-10-20','AA','2361'),('1987-10-20','AA','2490'),('1987-10-20','AA','2528'),('1987-10-20','AA','2528'),('1987-10-20','AA','2735'),('1987-10-20','AA','2735'),('1987-10-20','AA','2751'),('1987-10-20','AL','2'),('1987-10-20','AL','2'),('1987-10-20','AL','7'),('1987-10-20','AL','7'),('1987-10-20','AL','26'),('1987-10-20','AL','26'),('1987-10-20','AL','34'),('1987-10-20','AL','34'),('1987-10-20','AL','36'),('1987-10-20','AL','36'),('1987-10-20','AL','45'),('1987-10-20','AL','45'),('1987-10-20','AL','45'),('1987-10-20','AL','104'),('1987-10-20','AL','104'),('1987-10-20','AL','104'),('1987-10-20','AL','109'),('1987-10-20','AL','112'),('1987-10-20','AL','112'),('1987-10-20','AL','123'),('1987-10-20','AL','149'),('1987-10-20','AL','160'),('1987-10-20','AL','160'),('1987-10-20','AL','165'),('1987-10-20','AL','171'),('1987-10-20','AL','171'),('1987-10-20','AL','176'),('1987-10-20','AL','176'),('1987-10-20','AL','179'),('1987-10-20','AL','215'),('1987-10-20','AL','231'),('1987-10-20','AL','263'),('1987-10-20','AL','263'),('1987-10-20','AL','268'),('1987-10-20','AL','268'),('1987-10-20','AL','268'),('1987-10-20','AL','281'),('1987-10-20','AL','281'),('1987-10-20','AL','287'),('1987-10-20','AL','287'),('1987-10-20','AL','309'),('1987-10-20','AL','309'),('1987-10-20','AL','341'),('1987-10-20','AL','344'),('1987-10-20','AL','344'),('1987-10-20','AL','357'),('1987-10-20','AL','357'),('1987-10-20','AL','368'),('1987-10-20','AL','381'),('1987-10-20','AL','396'),('1987-10-20','AL','397'),('1987-10-20','AL','397'),('1987-10-20','AL','416'),('1987-10-20','AL','416'),('1987-10-20','AL','417'),('1987-10-20','AL','438'),('1987-10-20','AL','438'),('1987-10-20','AL','446'),('1987-10-20','AL','451'),('1987-10-20','AL','451'),('1987-10-20','AL','491'),('1987-10-20','AL','491'),('1987-10-20','AL','523'),('1987-10-20','AL','523'),('1987-10-20','AL','523'),('1987-10-20','AL','525'),('1987-10-20','AL','525'),('1987-10-20','AL','533'),('1987-10-20','AL','533'),('1987-10-20','AL','546'),('1987-10-20','AL','546'),('1987-10-20','AL','556'),('1987-10-20','AL','556'),('1987-10-20','AL','601'),('1987-10-20','AL','601'),('1987-10-20','AL','627'),('1987-10-20','AL','629'),('1987-10-20','AL','670'),('1987-10-20','AL','670'),('1987-10-20','AL','670'),('1987-10-20','AL','673'),('1987-10-20','AL','680'),('1987-10-05','AA','2'),('1987-10-05','AA','2'),('1987-10-05','AA','2'),('1987-10-05','AA','7'),('1987-10-05','AA','7'),('1987-10-05','AA','26'),('1987-10-05','AA','34'),('1987-10-05','AA','36'),('1987-10-05','AA','91'),('1987-10-05','AA','101'),('1987-10-05','AA','101'),('1987-10-05','AA','109'),('1987-10-05','AA','109'),('1987-10-05','AA','112'),('1987-10-05','AA','123'),('1987-10-05','AA','123'),('1987-10-05','AA','165'),('1987-10-05','AA','165'),('1987-10-05','AA','165'),('1987-10-05','AA','176'),('1987-10-05','AA','176'),('1987-10-05','AA','176'),('1987-10-05','AA','176'),('1987-10-05','AA','179'),('1987-10-05','AA','179'),('1987-10-05','AA','215'),('1987-10-05','AA','215'),('1987-10-05','AA','231'),('1987-10-05','AA','263'),('1987-10-05','AA','263'),('1987-10-05','AA','281'),('1987-10-05','AA','287'),('1987-10-05','AA','287'),('1987-10-05','AA','309'),('1987-10-05','AA','309'),('1987-10-05','AA','309'),('1987-10-05','AA','341'),('1987-10-05','AA','347'),('1987-10-05','AA','347'),('1987-10-05','AA','368'),('1987-10-05','AA','381'),('1987-10-05','AA','381'),('1987-10-05','AA','381'),('1987-10-05','AA','396'),('1987-10-05','AA','396'),('1987-10-05','AA','397'),('1987-10-05','AA','397'),('1987-10-05','AA','417'),('1987-10-05','AA','417'),('1987-10-05','AA','446'),('1987-10-05','AA','451'),('1987-10-05','AA','451'),('1987-10-05','AA','460'),('1987-10-05','AA','460'),('1987-10-05','AA','491'),('1987-10-05','AA','504'),('1987-10-05','AA','504'),('1987-10-05','AA','519'),('1987-10-05','AA','519'),('1987-10-05','AA','523'),('1987-10-05','AA','523'),('1987-10-05','AA','525'),('1987-10-05','AA','525'),('1987-10-05','AA','525'),('1987-10-05','AA','533'),('1987-10-05','AA','533'),('1987-10-05','AA','533'),('1987-10-05','AA','546'),('1987-10-05','AA','546'),('1987-10-05','AA','546'),('1987-10-05','AA','546'),('1987-10-05','AA','556'),('1987-10-05','AA','556'),('1987-10-05','AA','556'),('1987-10-05','AA','597'),('1987-10-05','AA','597'),('1987-10-05','AA','597'),('1987-10-05','AA','601'),('1987-10-05','AA','601'),('1987-10-05','AA','627'),('1987-10-05','AA','629'),('1987-10-05','AA','629'),('1987-10-05','AA','670'),('1987-10-05','AA','673'),('1987-10-05','AA','673'),('1987-10-05','AA','680'),('1987-10-05','AA','680'),('1987-10-05','AA','817'),('1987-10-05','AA','817'),('1987-10-05','AA','824'),('1987-10-05','AA','824'),('1987-10-05','AA','824'),('1987-10-05','AA','824'),('1987-10-05','AA','832'),('1987-10-05','AA','832'),('1987-10-05','AA','852'),('1987-10-05','AA','852'),('1987-10-05','AA','866'),('1987-10-05','AA','866'),('1987-10-05','AA','871'),('1987-10-05','AA','871'),('1987-10-05','AA','880'),('1987-10-05','AA','880'),('1987-10-05','AA','880'),('1987-10-05','AA','880'),('1987-10-05','AA','883'),('1987-10-05','AA','883'),('1987-10-05','AA','885'),('1987-10-05','AA','885'),('1987-10-05','AA','885'),('1987-10-05','AA','890'),('1987-10-05','AA','890'),('1987-10-05','AA','893'),('1987-10-05','AA','893'),('1987-10-05','AA','905'),('1987-10-05','AA','905'),('1987-10-05','AA','915'),('1987-10-05','AA','929'),('1987-10-05','AA','929'),('1987-10-05','AA','936'),('1987-10-05','AA','936'),('1987-10-05','AA','937'),('1987-10-05','AA','937'),('1987-10-05','AA','955'),('1987-10-05','AA','955'),('1987-10-05','AA','966'),('1987-10-05','AA','1002'),('1987-10-05','AA','1002'),('1987-10-05','AA','1004'),('1987-10-05','AA','1004'),('1987-10-05','AA','1015'),('1987-10-05','AA','1015'),('1987-10-05','AA','1021'),('1987-10-05','AA','1021'),('1987-10-05','AA','1041'),('1987-10-05','AA','1041'),('1987-10-05','AA','1046'),('1987-10-05','AA','1046'),('1987-10-05','AA','1048'),('1987-10-05','AA','1048'),('1987-10-05','AA','1061'),('1987-10-05','AA','1061'),('1987-10-05','AA','1088'),('1987-10-05','AA','1088'),('1987-10-05','AA','2033'),('1987-10-05','AA','2033'),('1987-10-05','AA','2050'),('1987-10-05','AA','2058'),('1987-10-05','AA','2071'),('1987-10-05','AA','2071'),('1987-10-05','AA','2086'),('1987-10-05','AA','2105'),('1987-10-05','AA','2111'),('1987-10-05','AA','2123'),('1987-10-05','AA','2123'),('1987-10-05','AA','2147'),('1987-10-05','AA','2147'),('1987-10-05','AA','2199'),('1987-10-05','AA','2199'),('1987-10-05','AA','2207'),('1987-10-05','AA','2207'),('1987-10-05','AA','2217'),('1987-10-05','AA','2230'),('1987-10-05','AA','2245'),('1987-10-05','AA','2251'),('1987-10-05','AA','2251'),('1987-10-05','AA','2275'),('1987-10-05','AA','2278'),('1987-10-05','AA','2351'),('1987-10-05','AA','2357'),('1987-10-05','AA','2361'),('1987-10-05','AA','2528'),('1987-10-05','AA','2528'),('1987-10-05','AA','2735'),('1987-10-05','AA','2735'),('1987-10-05','AA','2751'),('1987-10-05','AL','2'),('1987-10-05','AL','2'),('1987-10-05','AL','7'),('1987-10-05','AL','7'),('1987-10-05','AL','26'),('1987-10-05','AL','26'),('1987-10-05','AL','36'),('1987-10-05','AL','36'),('1987-10-05','AL','45'),('1987-10-05','AL','45'),('1987-10-05','AL','45'),('1987-10-05','AL','91'),('1987-10-05','AL','91'),('1987-10-05','AL','104'),('1987-10-05','AL','104'),('1987-10-05','AL','104'),('1987-10-05','AL','109'),('1987-10-05','AL','112'),('1987-10-05','AL','112'),('1987-10-05','AL','123'),('1987-10-05','AL','149'),('1987-10-05','AL','160'),('1987-10-05','AL','160'),('1987-10-05','AL','165'),('1987-10-05','AL','171'),('1987-10-05','AL','171'),('1987-10-05','AL','176'),('1987-10-05','AL','176'),('1987-10-05','AL','179'),('1987-10-05','AL','215'),('1987-10-05','AL','231'),('1987-10-05','AL','263'),('1987-10-05','AL','263'),('1987-10-05','AL','268'),('1987-10-05','AL','268'),('1987-10-05','AL','268'),('1987-10-05','AL','281'),('1987-10-05','AL','281'),('1987-10-05','AL','287'),('1987-10-05','AL','287'),('1987-10-05','AL','309'),('1987-10-05','AL','309'),('1987-10-05','AL','341'),('1987-10-05','AL','344'),('1987-10-05','AL','344'),('1987-10-05','AL','357'),('1987-10-05','AL','357'),('1987-10-05','AL','368'),('1987-10-05','AL','381'),('1987-10-05','AL','396'),('1987-10-05','AL','397'),('1987-10-05','AL','397'),('1987-10-05','AL','416'),('1987-10-05','AL','416'),('1987-10-05','AL','417'),('1987-10-05','AL','438'),('1987-10-05','AL','438'),('1987-10-05','AL','446'),('1987-10-05','AL','451'),('1987-10-05','AL','451'),('1987-10-05','AL','491'),('1987-10-05','AL','491'),('1987-10-05','AL','523'),('1987-10-05','AL','523'),('1987-10-05','AL','523'),('1987-10-05','AL','525'),('1987-10-05','AL','525'),('1987-10-05','AL','533'),('1987-10-05','AL','533'),('1987-10-05','AL','546'),('1987-10-05','AL','546'),('1987-10-05','AL','601'),('1987-10-05','AL','601'),('1987-10-05','AL','627'),('1987-10-05','AL','629'),('1987-10-05','AL','670'),('1987-10-05','AL','670'),('1987-10-05','AL','670'),('1987-10-05','AL','673'),('1987-10-05','AL','680'),('1987-10-06','AA','2'),('1987-10-06','AA','2'),('1987-10-06','AA','7'),('1987-10-06','AA','7'),('1987-10-06','AA','34'),('1987-10-06','AA','36'),('1987-10-06','AA','91'),('1987-10-06','AA','101'),('1987-10-06','AA','109'),('1987-10-06','AA','109'),('1987-10-06','AA','112'),('1987-10-06','AA','123'),('1987-10-06','AA','123'),('1987-10-06','AA','165'),('1987-10-06','AA','165'),('1987-10-06','AA','165'),('1987-10-06','AA','176'),('1987-10-06','AA','176'),('1987-10-06','AA','176'),('1987-10-06','AA','176'),('1987-10-06','AA','179'),('1987-10-06','AA','179'),('1987-10-06','AA','215'),('1987-10-06','AA','215'),('1987-10-06','AA','231'),('1987-10-06','AA','231'),('1987-10-06','AA','263'),('1987-10-06','AA','263'),('1987-10-06','AA','268'),('1987-10-06','AA','268'),('1987-10-06','AA','287'),('1987-10-06','AA','287'),('1987-10-06','AA','309'),('1987-10-06','AA','309'),('1987-10-06','AA','309'),('1987-10-06','AA','341'),('1987-10-06','AA','344'),('1987-10-06','AA','344'),('1987-10-06','AA','347'),('1987-10-06','AA','347'),('1987-10-06','AA','368'),('1987-10-06','AA','381'),('1987-10-06','AA','381'),('1987-10-06','AA','381'),('1987-10-06','AA','396'),('1987-10-06','AA','396'),('1987-10-06','AA','397'),('1987-10-06','AA','397'),('1987-10-06','AA','417'),('1987-10-06','AA','417'),('1987-10-06','AA','446'),('1987-10-06','AA','451'),('1987-10-06','AA','451'),('1987-10-06','AA','460'),('1987-10-06','AA','460'),('1987-10-06','AA','491'),('1987-10-06','AA','504'),('1987-10-06','AA','504'),('1987-10-06','AA','519'),('1987-10-06','AA','519'),('1987-10-06','AA','523'),('1987-10-06','AA','523'),('1987-10-06','AA','525'),('1987-10-06','AA','525'),('1987-10-06','AA','525'),('1987-10-06','AA','533'),('1987-10-06','AA','533'),('1987-10-06','AA','533'),('1987-10-06','AA','546'),('1987-10-06','AA','546'),('1987-10-06','AA','546'),('1987-10-06','AA','546'),('1987-10-06','AA','556'),('1987-10-06','AA','556'),('1987-10-06','AA','556'),('1987-10-06','AA','597'),('1987-10-06','AA','597'),('1987-10-06','AA','597'),('1987-10-06','AA','601'),('1987-10-06','AA','601'),('1987-10-06','AA','627'),('1987-10-06','AA','629'),('1987-10-06','AA','629'),('1987-10-06','AA','670'),('1987-10-06','AA','673'),('1987-10-06','AA','673'),('1987-10-06','AA','680'),('1987-10-06','AA','680'),('1987-10-06','AA','817'),('1987-10-06','AA','817'),('1987-10-06','AA','824'),('1987-10-06','AA','824'),('1987-10-06','AA','824'),('1987-10-06','AA','824'),('1987-10-06','AA','832'),('1987-10-06','AA','832'),('1987-10-06','AA','852'),('1987-10-06','AA','852'),('1987-10-06','AA','866'),('1987-10-06','AA','871'),('1987-10-06','AA','871'),('1987-10-06','AA','880'),('1987-10-06','AA','880'),('1987-10-06','AA','880'),('1987-10-06','AA','880'),('1987-10-06','AA','883'),('1987-10-06','AA','883'),('1987-10-06','AA','885'),('1987-10-06','AA','885'),('1987-10-06','AA','885'),('1987-10-06','AA','890'),('1987-10-06','AA','890'),('1987-10-06','AA','893'),('1987-10-06','AA','893'),('1987-10-06','AA','905'),('1987-10-06','AA','905'),('1987-10-06','AA','915'),('1987-10-06','AA','929'),('1987-10-06','AA','929'),('1987-10-06','AA','936'),('1987-10-06','AA','936'),('1987-10-06','AA','937'),('1987-10-06','AA','937'),('1987-10-06','AA','955'),('1987-10-06','AA','955'),('1987-10-06','AA','966'),('1987-10-06','AA','1002'),('1987-10-06','AA','1002'),('1987-10-06','AA','1004'),('1987-10-06','AA','1004'),('1987-10-06','AA','1015'),('1987-10-06','AA','1015'),('1987-10-06','AA','1021'),('1987-10-06','AA','1021'),('1987-10-06','AA','1041'),('1987-10-06','AA','1041'),('1987-10-06','AA','1046'),('1987-10-06','AA','1046'),('1987-10-06','AA','1048'),('1987-10-06','AA','1061'),('1987-10-06','AA','1088'),('1987-10-06','AA','1088'),('1987-10-06','AA','2033'),('1987-10-06','AA','2033'),('1987-10-06','AA','2050'),('1987-10-06','AA','2058'),('1987-10-06','AA','2071'),('1987-10-06','AA','2071'),('1987-10-06','AA','2086'),('1987-10-06','AA','2105'),('1987-10-06','AA','2111'),('1987-10-06','AA','2123'),('1987-10-06','AA','2123'),('1987-10-06','AA','2147'),('1987-10-06','AA','2147'),('1987-10-06','AA','2199'),('1987-10-06','AA','2199'),('1987-10-06','AA','2207'),('1987-10-06','AA','2207'),('1987-10-06','AA','2217'),('1987-10-06','AA','2230'),('1987-10-06','AA','2245'),('1987-10-06','AA','2251'),('1987-10-06','AA','2251'),('1987-10-06','AA','2275'),('1987-10-06','AA','2278'),('1987-10-06','AA','2351'),('1987-10-06','AA','2357'),('1987-10-06','AA','2490'),('1987-10-06','AA','2528'),('1987-10-06','AA','2528'),('1987-10-06','AA','2735'),('1987-10-06','AA','2735'),('1987-10-06','AA','2751'),('1987-10-06','AL','2'),('1987-10-06','AL','2'),('1987-10-06','AL','7'),('1987-10-06','AL','7'),('1987-10-06','AL','26'),('1987-10-06','AL','26'),('1987-10-06','AL','34'),('1987-10-06','AL','34'),('1987-10-06','AL','36'),('1987-10-06','AL','36'),('1987-10-06','AL','45'),('1987-10-06','AL','45'),('1987-10-06','AL','45'),('1987-10-06','AL','91'),('1987-10-06','AL','91'),('1987-10-06','AL','104'),('1987-10-06','AL','104'),('1987-10-06','AL','104'),('1987-10-06','AL','109'),('1987-10-06','AL','112'),('1987-10-06','AL','112'),('1987-10-06','AL','123'),('1987-10-06','AL','149'),('1987-10-06','AL','160'),('1987-10-06','AL','160'),('1987-10-06','AL','165'),('1987-10-06','AL','171'),('1987-10-06','AL','171'),('1987-10-06','AL','176'),('1987-10-06','AL','176'),('1987-10-06','AL','179'),('1987-10-06','AL','231'),('1987-10-06','AL','263'),('1987-10-06','AL','263'),('1987-10-06','AL','268'),('1987-10-06','AL','268'),('1987-10-06','AL','268'),('1987-10-06','AL','281'),('1987-10-06','AL','281'),('1987-10-06','AL','287'),('1987-10-06','AL','287'),('1987-10-06','AL','309'),('1987-10-06','AL','309'),('1987-10-06','AL','341'),('1987-10-06','AL','344'),('1987-10-06','AL','344'),('1987-10-06','AL','357'),('1987-10-06','AL','357'),('1987-10-06','AL','381'),('1987-10-06','AL','397'),('1987-10-06','AL','397'),('1987-10-06','AL','416'),('1987-10-06','AL','416'),('1987-10-06','AL','417'),('1987-10-06','AL','438'),('1987-10-06','AL','438'),('1987-10-06','AL','446'),('1987-10-06','AL','451'),('1987-10-06','AL','451'),('1987-10-06','AL','491'),('1987-10-06','AL','491'),('1987-10-06','AL','523'),('1987-10-06','AL','523'),('1987-10-06','AL','523'),('1987-10-06','AL','525'),('1987-10-06','AL','525'),('1987-10-06','AL','533'),('1987-10-06','AL','533'),('1987-10-06','AL','546'),('1987-10-06','AL','546'),('1987-10-06','AL','601'),('1987-10-06','AL','601'),('1987-10-06','AL','627'),('1987-10-06','AL','629'),('1987-10-06','AL','670'),('1987-10-06','AL','670'),('1987-10-06','AL','670'),('1987-10-06','AL','673'),('1987-10-06','AL','680'),('1987-10-07','AA','2'),('1987-10-07','AA','2'),('1987-10-07','AA','2'),('1987-10-07','AA','7'),('1987-10-07','AA','7'),('1987-10-07','AA','26'),('1987-10-07','AA','34'),('1987-10-07','AA','36'),('1987-10-07','AA','91'),('1987-10-07','AA','101'),('1987-10-07','AA','101'),('1987-10-07','AA','109'),('1987-10-07','AA','112'),('1987-10-07','AA','123'),('1987-10-07','AA','123'),('1987-10-07','AA','160'),('1987-10-07','AA','165'),('1987-10-07','AA','165'),('1987-10-07','AA','165'),('1987-10-07','AA','176'),('1987-10-07','AA','176'),('1987-10-07','AA','176'),('1987-10-07','AA','176'),('1987-10-07','AA','179'),('1987-10-07','AA','179'),('1987-10-07','AA','215'),('1987-10-07','AA','215'),('1987-10-07','AA','231'),('1987-10-07','AA','231'),('1987-10-07','AA','263'),('1987-10-07','AA','263'),('1987-10-07','AA','268'),('1987-10-07','AA','268'),('1987-10-07','AA','281'),('1987-10-07','AA','287'),('1987-10-07','AA','287'),('1987-10-07','AA','309'),('1987-10-07','AA','309'),('1987-10-07','AA','309'),('1987-10-07','AA','341'),('1987-10-07','AA','344'),('1987-10-07','AA','344'),('1987-10-07','AA','347'),('1987-10-07','AA','347'),('1987-10-07','AA','368'),('1987-10-07','AA','381'),('1987-10-07','AA','381'),('1987-10-07','AA','381'),('1987-10-07','AA','396'),('1987-10-07','AA','396'),('1987-10-07','AA','397'),('1987-10-07','AA','397'),('1987-10-07','AA','417'),('1987-10-07','AA','417'),('1987-10-07','AA','446'),('1987-10-07','AA','451'),('1987-10-07','AA','451'),('1987-10-07','AA','460'),('1987-10-07','AA','460'),('1987-10-07','AA','504'),('1987-10-07','AA','504'),('1987-10-07','AA','519'),('1987-10-07','AA','519'),('1987-10-07','AA','523'),('1987-10-07','AA','523'),('1987-10-07','AA','525'),('1987-10-07','AA','525'),('1987-10-07','AA','525'),('1987-10-07','AA','533'),('1987-10-07','AA','533'),('1987-10-07','AA','533'),('1987-10-07','AA','546'),('1987-10-07','AA','546'),('1987-10-07','AA','546'),('1987-10-07','AA','546'),('1987-10-07','AA','556'),('1987-10-07','AA','556'),('1987-10-07','AA','556'),('1987-10-07','AA','597'),('1987-10-07','AA','597'),('1987-10-07','AA','597'),('1987-10-07','AA','601'),('1987-10-07','AA','601'),('1987-10-07','AA','627'),('1987-10-07','AA','629'),('1987-10-07','AA','629'),('1987-10-07','AA','670'),('1987-10-07','AA','673'),('1987-10-07','AA','673'),('1987-10-07','AA','680'),('1987-10-07','AA','680'),('1987-10-07','AA','817'),('1987-10-07','AA','817'),('1987-10-07','AA','824'),('1987-10-07','AA','824'),('1987-10-07','AA','824'),('1987-10-07','AA','824'),('1987-10-07','AA','832'),('1987-10-07','AA','832'),('1987-10-07','AA','852'),('1987-10-07','AA','852'),('1987-10-07','AA','866'),('1987-10-07','AA','866'),('1987-10-07','AA','871'),('1987-10-07','AA','871'),('1987-10-07','AA','880'),('1987-10-07','AA','880'),('1987-10-07','AA','880'),('1987-10-07','AA','880'),('1987-10-07','AA','883'),('1987-10-07','AA','883'),('1987-10-07','AA','885'),('1987-10-07','AA','885'),('1987-10-07','AA','890'),('1987-10-07','AA','890'),('1987-10-07','AA','893'),('1987-10-07','AA','893'),('1987-10-07','AA','905'),('1987-10-07','AA','905'),('1987-10-07','AA','915'),('1987-10-07','AA','929'),('1987-10-07','AA','929'),('1987-10-07','AA','936'),('1987-10-07','AA','936'),('1987-10-07','AA','937'),('1987-10-07','AA','937'),('1987-10-07','AA','955'),('1987-10-07','AA','955'),('1987-10-07','AA','966'),('1987-10-07','AA','1002'),('1987-10-07','AA','1002'),('1987-10-07','AA','1004'),('1987-10-07','AA','1004'),('1987-10-07','AA','1015'),('1987-10-07','AA','1015'),('1987-10-07','AA','1021'),('1987-10-07','AA','1021'),('1987-10-07','AA','1041'),('1987-10-07','AA','1041'),('1987-10-07','AA','1046'),('1987-10-07','AA','1046'),('1987-10-07','AA','1048'),('1987-10-07','AA','1048'),('1987-10-07','AA','1061'),('1987-10-07','AA','1061'),('1987-10-07','AA','1088'),('1987-10-07','AA','1088'),('1987-10-07','AA','2033'),('1987-10-07','AA','2033'),('1987-10-07','AA','2050'),('1987-10-07','AA','2058'),('1987-10-07','AA','2071'),('1987-10-07','AA','2071'),('1987-10-07','AA','2086'),('1987-10-07','AA','2105'),('1987-10-07','AA','2111'),('1987-10-07','AA','2123'),('1987-10-07','AA','2123'),('1987-10-07','AA','2147'),('1987-10-07','AA','2147'),('1987-10-07','AA','2199'),('1987-10-07','AA','2199'),('1987-10-07','AA','2207'),('1987-10-07','AA','2207'),('1987-10-07','AA','2217'),('1987-10-07','AA','2230'),('1987-10-07','AA','2245'),('1987-10-07','AA','2251'),('1987-10-07','AA','2251'),('1987-10-07','AA','2275'),('1987-10-07','AA','2351'),('1987-10-07','AA','2357'),('1987-10-07','AA','2361'),('1987-10-07','AA','2490'),('1987-10-07','AA','2528'),('1987-10-07','AA','2528'),('1987-10-07','AA','2735'),('1987-10-07','AA','2735'),('1987-10-07','AA','2751'),('1987-10-07','AL','2'),('1987-10-07','AL','2'),('1987-10-07','AL','7'),('1987-10-07','AL','7'),('1987-10-07','AL','26'),('1987-10-07','AL','26'),('1987-10-07','AL','34'),('1987-10-07','AL','34'),('1987-10-07','AL','36'),('1987-10-07','AL','36'),('1987-10-07','AL','45'),('1987-10-07','AL','45'),('1987-10-07','AL','45'),('1987-10-07','AL','91'),('1987-10-07','AL','91'),('1987-10-07','AL','104'),('1987-10-07','AL','104'),('1987-10-07','AL','104'),('1987-10-07','AL','109'),('1987-10-07','AL','112'),('1987-10-07','AL','112'),('1987-10-07','AL','123'),('1987-10-07','AL','149'),('1987-10-07','AL','160'),('1987-10-07','AL','160'),('1987-10-07','AL','165'),('1987-10-07','AL','171'),('1987-10-07','AL','171'),('1987-10-07','AL','176'),('1987-10-07','AL','176'),('1987-10-07','AL','179'),('1987-10-07','AL','215'),('1987-10-07','AL','231'),('1987-10-07','AL','263'),('1987-10-07','AL','263'),('1987-10-07','AL','268'),('1987-10-07','AL','268'),('1987-10-07','AL','268'),('1987-10-07','AL','281'),('1987-10-07','AL','281'),('1987-10-07','AL','287'),('1987-10-07','AL','287'),('1987-10-07','AL','309'),('1987-10-07','AL','309'),('1987-10-07','AL','341'),('1987-10-07','AL','344'),('1987-10-07','AL','344'),('1987-10-07','AL','357'),('1987-10-07','AL','357'),('1987-10-07','AL','368'),('1987-10-07','AL','381'),('1987-10-07','AL','396'),('1987-10-07','AL','397'),('1987-10-07','AL','397'),('1987-10-07','AL','416'),('1987-10-07','AL','416'),('1987-10-07','AL','417'),('1987-10-07','AL','438'),('1987-10-07','AL','438'),('1987-10-07','AL','446'),('1987-10-07','AL','451'),('1987-10-07','AL','451'),('1987-10-07','AL','491'),('1987-10-07','AL','491'),('1987-10-07','AL','523'),('1987-10-07','AL','523'),('1987-10-07','AL','523'),('1987-10-07','AL','525'),('1987-10-07','AL','525'),('1987-10-07','AL','533'),('1987-10-07','AL','533'),('1987-10-07','AL','546'),('1987-10-07','AL','546'),('1987-10-07','AL','556'),('1987-10-07','AL','556'),('1987-10-07','AL','601'),('1987-10-07','AL','627'),('1987-10-07','AL','629'),('1987-10-07','AL','670'),('1987-10-07','AL','670'),('1987-10-07','AL','670'),('1987-10-07','AL','673'),('1987-10-07','AL','680'),('1987-10-08','AA','2'),('1987-10-08','AA','2'),('1987-10-08','AA','2'),('1987-10-08','AA','7'),('1987-10-08','AA','7'),('1987-10-08','AA','26'),('1987-10-08','AA','34'),('1987-10-08','AA','36'),('1987-10-08','AA','91'),('1987-10-08','AA','101'),('1987-10-08','AA','101'),('1987-10-08','AA','109'),('1987-10-08','AA','109'),('1987-10-08','AA','112'),('1987-10-08','AA','123'),('1987-10-08','AA','123'),('1987-10-08','AA','160'),('1987-10-08','AA','165'),('1987-10-08','AA','165'),('1987-10-08','AA','165'),('1987-10-08','AA','176'),('1987-10-08','AA','176'),('1987-10-08','AA','176'),('1987-10-08','AA','176'),('1987-10-08','AA','179'),('1987-10-08','AA','179'),('1987-10-08','AA','215'),('1987-10-08','AA','215'),('1987-10-08','AA','231'),('1987-10-08','AA','231'),('1987-10-08','AA','263'),('1987-10-08','AA','263'),('1987-10-08','AA','268'),('1987-10-08','AA','268'),('1987-10-08','AA','281'),('1987-10-08','AA','287'),('1987-10-08','AA','287'),('1987-10-08','AA','309'),('1987-10-08','AA','309'),('1987-10-08','AA','309'),('1987-10-08','AA','344'),('1987-10-08','AA','344'),('1987-10-08','AA','347'),('1987-10-08','AA','347'),('1987-10-08','AA','368'),('1987-10-08','AA','381'),('1987-10-08','AA','381'),('1987-10-08','AA','381'),('1987-10-08','AA','396'),('1987-10-08','AA','396'),('1987-10-08','AA','397'),('1987-10-08','AA','397'),('1987-10-08','AA','417'),('1987-10-08','AA','417'),('1987-10-08','AA','446'),('1987-10-08','AA','451'),('1987-10-08','AA','460'),('1987-10-08','AA','460'),('1987-10-08','AA','491'),('1987-10-08','AA','504'),('1987-10-08','AA','504'),('1987-10-08','AA','519'),('1987-10-08','AA','519'),('1987-10-08','AA','523'),('1987-10-08','AA','525'),('1987-10-08','AA','533'),('1987-10-08','AA','533'),('1987-10-08','AA','533'),('1987-10-08','AA','546'),('1987-10-08','AA','546'),('1987-10-08','AA','546'),('1987-10-08','AA','546'),('1987-10-08','AA','556'),('1987-10-08','AA','556'),('1987-10-08','AA','556'),('1987-10-08','AA','597'),('1987-10-08','AA','597'),('1987-10-08','AA','597'),('1987-10-08','AA','601'),('1987-10-08','AA','601'),('1987-10-08','AA','627'),('1987-10-08','AA','629'),('1987-10-08','AA','629'),('1987-10-08','AA','670'),('1987-10-08','AA','673'),('1987-10-08','AA','673'),('1987-10-08','AA','680'),('1987-10-08','AA','680'),('1987-10-08','AA','817'),('1987-10-08','AA','817'),('1987-10-08','AA','824'),('1987-10-08','AA','824'),('1987-10-08','AA','832'),('1987-10-08','AA','832'),('1987-10-08','AA','852'),('1987-10-08','AA','866'),('1987-10-08','AA','866'),('1987-10-08','AA','871'),('1987-10-08','AA','871'),('1987-10-08','AA','880'),('1987-10-08','AA','880'),('1987-10-08','AA','880'),('1987-10-08','AA','880'),('1987-10-08','AA','883'),('1987-10-08','AA','883'),('1987-10-08','AA','885'),('1987-10-08','AA','885'),('1987-10-08','AA','885'),('1987-10-08','AA','890'),('1987-10-08','AA','890'),('1987-10-08','AA','893'),('1987-10-08','AA','893'),('1987-10-08','AA','905'),('1987-10-08','AA','905'),('1987-10-08','AA','915'),('1987-10-08','AA','929'),('1987-10-08','AA','929'),('1987-10-08','AA','936'),('1987-10-08','AA','936'),('1987-10-08','AA','937'),('1987-10-08','AA','937'),('1987-10-08','AA','955'),('1987-10-08','AA','955'),('1987-10-08','AA','966'),('1987-10-08','AA','1002'),('1987-10-08','AA','1002'),('1987-10-08','AA','1004'),('1987-10-08','AA','1004'),('1987-10-08','AA','1015'),('1987-10-08','AA','1015'),('1987-10-08','AA','1021'),('1987-10-08','AA','1021'),('1987-10-08','AA','1041'),('1987-10-08','AA','1041'),('1987-10-08','AA','1046'),('1987-10-08','AA','1046'),('1987-10-08','AA','1048'),('1987-10-08','AA','1061'),('1987-10-08','AA','1061'),('1987-10-08','AA','1088'),('1987-10-08','AA','1088'),('1987-10-08','AA','2033'),('1987-10-08','AA','2033'),('1987-10-08','AA','2050'),('1987-10-08','AA','2058'),('1987-10-08','AA','2071'),('1987-10-08','AA','2071'),('1987-10-08','AA','2086'),('1987-10-08','AA','2111'),('1987-10-08','AA','2123'),('1987-10-08','AA','2123'),('1987-10-08','AA','2147'),('1987-10-08','AA','2147'),('1987-10-08','AA','2199'),('1987-10-08','AA','2199'),('1987-10-08','AA','2207'),('1987-10-08','AA','2207'),('1987-10-08','AA','2217'),('1987-10-08','AA','2230'),('1987-10-08','AA','2245'),('1987-10-08','AA','2251'),('1987-10-08','AA','2251'),('1987-10-08','AA','2275'),('1987-10-08','AA','2278'),('1987-10-08','AA','2351'),('1987-10-08','AA','2357'),('1987-10-08','AA','2361'),('1987-10-08','AA','2490'),('1987-10-08','AA','2528'),('1987-10-08','AA','2528'),('1987-10-08','AA','2735'),('1987-10-08','AA','2735'),('1987-10-08','AA','2751'),('1987-10-08','AL','2'),('1987-10-08','AL','2'),('1987-10-08','AL','7'),('1987-10-08','AL','7'),('1987-10-08','AL','26'),('1987-10-08','AL','26'),('1987-10-08','AL','34'),('1987-10-08','AL','34'),('1987-10-08','AL','36'),('1987-10-08','AL','36'),('1987-10-08','AL','45'),('1987-10-08','AL','45'),('1987-10-08','AL','45'),('1987-10-08','AL','91'),('1987-10-08','AL','91'),('1987-10-08','AL','104'),('1987-10-08','AL','104'),('1987-10-08','AL','104'),('1987-10-08','AL','109'),('1987-10-08','AL','112'),('1987-10-08','AL','112'),('1987-10-08','AL','123'),('1987-10-08','AL','149'),('1987-10-08','AL','160'),('1987-10-08','AL','160'),('1987-10-08','AL','165'),('1987-10-08','AL','171'),('1987-10-08','AL','171'),('1987-10-08','AL','176'),('1987-10-08','AL','176'),('1987-10-08','AL','179'),('1987-10-08','AL','215'),('1987-10-08','AL','231'),('1987-10-08','AL','263'),('1987-10-08','AL','263'),('1987-10-08','AL','268'),('1987-10-08','AL','268'),('1987-10-08','AL','268'),('1987-10-08','AL','281'),('1987-10-08','AL','281'),('1987-10-08','AL','287'),('1987-10-08','AL','287'),('1987-10-08','AL','309'),('1987-10-08','AL','309'),('1987-10-08','AL','341'),('1987-10-08','AL','344'),('1987-10-08','AL','344'),('1987-10-08','AL','357'),('1987-10-08','AL','357'),('1987-10-08','AL','368'),('1987-10-08','AL','381'),('1987-10-08','AL','396'),('1987-10-08','AL','397'),('1987-10-08','AL','397'),('1987-10-08','AL','416'),('1987-10-08','AL','416'),('1987-10-08','AL','417'),('1987-10-08','AL','438'),('1987-10-08','AL','438'),('1987-10-08','AL','446'),('1987-10-08','AL','451'),('1987-10-08','AL','451'),('1987-10-08','AL','491'),('1987-10-08','AL','491'),('1987-10-08','AL','523'),('1987-10-08','AL','523'),('1987-10-08','AL','523'),('1987-10-08','AL','525'),('1987-10-08','AL','525'),('1987-10-08','AL','533'),('1987-10-08','AL','533'),('1987-10-08','AL','546'),('1987-10-08','AL','546'),('1987-10-08','AL','556'),('1987-10-08','AL','556'),('1987-10-08','AL','601'),('1987-10-08','AL','601'),('1987-10-08','AL','627'),('1987-10-08','AL','629'),('1987-10-08','AL','670'),('1987-10-08','AL','670'),('1987-10-08','AL','670'),('1987-10-08','AL','680'),('1987-10-09','AA','2'),('1987-10-09','AA','2'),('1987-10-09','AA','2'),('1987-10-09','AA','7'),('1987-10-09','AA','7'),('1987-10-09','AA','26'),('1987-10-09','AA','34'),('1987-10-09','AA','36'),('1987-10-09','AA','91'),('1987-10-09','AA','101'),('1987-10-09','AA','101'),('1987-10-09','AA','109'),('1987-10-09','AA','109'),('1987-10-09','AA','112'),('1987-10-09','AA','123'),('1987-10-09','AA','123'),('1987-10-09','AA','160'),('1987-10-09','AA','165'),('1987-10-09','AA','165'),('1987-10-09','AA','176'),('1987-10-09','AA','176'),('1987-10-09','AA','176'),('1987-10-09','AA','176'),('1987-10-09','AA','179'),('1987-10-09','AA','179'),('1987-10-09','AA','215'),('1987-10-09','AA','215'),('1987-10-09','AA','231'),('1987-10-09','AA','263'),('1987-10-09','AA','263'),('1987-10-09','AA','268'),('1987-10-09','AA','268'),('1987-10-09','AA','281'),('1987-10-09','AA','287'),('1987-10-09','AA','309'),('1987-10-09','AA','309'),('1987-10-09','AA','309'),('1987-10-09','AA','344'),('1987-10-09','AA','344'),('1987-10-09','AA','347'),('1987-10-09','AA','347'),('1987-10-09','AA','368'),('1987-10-09','AA','381'),('1987-10-09','AA','381'),('1987-10-09','AA','381'),('1987-10-09','AA','396'),('1987-10-09','AA','396'),('1987-10-09','AA','397'),('1987-10-09','AA','397'),('1987-10-09','AA','417'),('1987-10-09','AA','417'),('1987-10-09','AA','451'),('1987-10-09','AA','451'),('1987-10-09','AA','460'),('1987-10-09','AA','460'),('1987-10-09','AA','491'),('1987-10-09','AA','504'),('1987-10-09','AA','504'),('1987-10-09','AA','519'),('1987-10-09','AA','519'),('1987-10-09','AA','523'),('1987-10-09','AA','523'),('1987-10-09','AA','525'),('1987-10-09','AA','525'),('1987-10-09','AA','525'),('1987-10-09','AA','533'),('1987-10-09','AA','533'),('1987-10-09','AA','533'),('1987-10-09','AA','546'),('1987-10-09','AA','546'),('1987-10-09','AA','546'),('1987-10-09','AA','546'),('1987-10-09','AA','556'),('1987-10-09','AA','556'),('1987-10-09','AA','556'),('1987-10-09','AA','597'),('1987-10-09','AA','597'),('1987-10-09','AA','597'),('1987-10-09','AA','601'),('1987-10-09','AA','601'),('1987-10-09','AA','629'),('1987-10-09','AA','629'),('1987-10-09','AA','670'),('1987-10-09','AA','673'),('1987-10-09','AA','673'),('1987-10-09','AA','680'),('1987-10-09','AA','680'),('1987-10-09','AA','817'),('1987-10-09','AA','824'),('1987-10-09','AA','824'),('1987-10-09','AA','824'),('1987-10-09','AA','824'),('1987-10-09','AA','832'),('1987-10-09','AA','832'),('1987-10-09','AA','852'),('1987-10-09','AA','852'),('1987-10-09','AA','866'),('1987-10-09','AA','866'),('1987-10-09','AA','871'),('1987-10-09','AA','880'),('1987-10-09','AA','880'),('1987-10-09','AA','880'),('1987-10-09','AA','883'),('1987-10-09','AA','883'),('1987-10-09','AA','885'),('1987-10-09','AA','885'),('1987-10-09','AA','885'),('1987-10-09','AA','890'),('1987-10-09','AA','890'),('1987-10-09','AA','893'),('1987-10-09','AA','893'),('1987-10-09','AA','905'),('1987-10-09','AA','905'),('1987-10-09','AA','915'),('1987-10-09','AA','929'),('1987-10-09','AA','929'),('1987-10-09','AA','936'),('1987-10-09','AA','936'),('1987-10-09','AA','937'),('1987-10-09','AA','937'),('1987-10-09','AA','955'),('1987-10-09','AA','955'),('1987-10-09','AA','966'),('1987-10-09','AA','1002'),('1987-10-09','AA','1002'),('1987-10-09','AA','1004'),('1987-10-09','AA','1004'),('1987-10-09','AA','1015'),('1987-10-09','AA','1015'),('1987-10-09','AA','1021'),('1987-10-09','AA','1021'),('1987-10-09','AA','1041'),('1987-10-09','AA','1041'),('1987-10-09','AA','1046'),('1987-10-09','AA','1046'),('1987-10-09','AA','1048'),('1987-10-09','AA','1048'),('1987-10-09','AA','1061'),('1987-10-09','AA','1061'),('1987-10-09','AA','1088'),('1987-10-09','AA','1088'),('1987-10-09','AA','2033'),('1987-10-09','AA','2033'),('1987-10-09','AA','2050'),('1987-10-09','AA','2058'),('1987-10-09','AA','2071'),('1987-10-09','AA','2071'),('1987-10-09','AA','2086'),('1987-10-09','AA','2105'),('1987-10-09','AA','2111'),('1987-10-09','AA','2123'),('1987-10-09','AA','2123'),('1987-10-09','AA','2147'),('1987-10-09','AA','2147'),('1987-10-09','AA','2199'),('1987-10-09','AA','2199'),('1987-10-09','AA','2207'),('1987-10-09','AA','2207'),('1987-10-09','AA','2217'),('1987-10-09','AA','2230'),('1987-10-09','AA','2245'),('1987-10-09','AA','2251'),('1987-10-09','AA','2251'),('1987-10-09','AA','2275'),('1987-10-09','AA','2278'),('1987-10-09','AA','2351'),('1987-10-09','AA','2357'),('1987-10-09','AA','2361'),('1987-10-09','AA','2490'),('1987-10-09','AA','2528'),('1987-10-09','AA','2528'),('1987-10-09','AA','2735'),('1987-10-09','AA','2735'),('1987-10-09','AA','2751'),('1987-10-09','AL','2'),('1987-10-09','AL','2'),('1987-10-09','AL','7'),('1987-10-09','AL','7'),('1987-10-09','AL','26'),('1987-10-09','AL','34'),('1987-10-09','AL','34'),('1987-10-09','AL','36'),('1987-10-09','AL','36'),('1987-10-09','AL','45'),('1987-10-09','AL','45'),('1987-10-09','AL','45'),('1987-10-09','AL','91'),('1987-10-09','AL','91'),('1987-10-09','AL','104'),('1987-10-09','AL','104'),('1987-10-09','AL','104'),('1987-10-09','AL','109'),('1987-10-09','AL','112'),('1987-10-09','AL','112'),('1987-10-09','AL','123'),('1987-10-09','AL','149'),('1987-10-09','AL','160'),('1987-10-09','AL','160'),('1987-10-09','AL','165'),('1987-10-09','AL','171'),('1987-10-09','AL','171'),('1987-10-09','AL','176'),('1987-10-09','AL','176'),('1987-10-09','AL','179'),('1987-10-09','AL','215'),('1987-10-09','AL','231'),('1987-10-09','AL','263'),('1987-10-09','AL','263'),('1987-10-09','AL','268'),('1987-10-09','AL','268'),('1987-10-09','AL','268'),('1987-10-09','AL','281'),('1987-10-09','AL','281'),('1987-10-09','AL','287'),('1987-10-09','AL','287'),('1987-10-09','AL','309'),('1987-10-09','AL','309'),('1987-10-09','AL','341'),('1987-10-09','AL','344'),('1987-10-09','AL','344'),('1987-10-09','AL','368'),('1987-10-09','AL','381'),('1987-10-09','AL','396'),('1987-10-09','AL','397'),('1987-10-09','AL','397'),('1987-10-09','AL','416'),('1987-10-09','AL','416'),('1987-10-09','AL','417'),('1987-10-09','AL','438'),('1987-10-09','AL','438'),('1987-10-09','AL','446'),('1987-10-09','AL','451'),('1987-10-09','AL','491'),('1987-10-09','AL','491'),('1987-10-09','AL','523'),('1987-10-09','AL','523'),('1987-10-09','AL','523'),('1987-10-09','AL','525'),('1987-10-09','AL','525'),('1987-10-09','AL','533'),('1987-10-09','AL','533'),('1987-10-09','AL','546'),('1987-10-09','AL','546'),('1987-10-09','AL','556'),('1987-10-09','AL','556'),('1987-10-09','AL','601'),('1987-10-09','AL','601'),('1987-10-09','AL','627'),('1987-10-09','AL','629'),('1987-10-09','AL','670'),('1987-10-09','AL','670'),('1987-10-09','AL','670'),('1987-10-09','AL','673'),('1987-10-09','AL','680'),('1987-10-10','AA','2'),('1987-10-10','AA','2'),('1987-10-10','AA','2'),('1987-10-10','AA','7'),('1987-10-10','AA','7'),('1987-10-10','AA','26'),('1987-10-10','AA','34'),('1987-10-10','AA','36'),('1987-10-10','AA','91'),('1987-10-10','AA','101'),('1987-10-10','AA','101'),('1987-10-10','AA','109'),('1987-10-10','AA','109'),('1987-10-10','AA','112'),('1987-10-10','AA','123'),('1987-10-10','AA','123'),('1987-10-10','AA','160'),('1987-10-10','AA','165'),('1987-10-10','AA','165'),('1987-10-10','AA','165'),('1987-10-10','AA','176'),('1987-10-10','AA','176'),('1987-10-10','AA','176'),('1987-10-10','AA','176'),('1987-10-10','AA','179'),('1987-10-10','AA','179'),('1987-10-10','AA','215'),('1987-10-10','AA','215'),('1987-10-10','AA','231'),('1987-10-10','AA','263'),('1987-10-10','AA','263'),('1987-10-10','AA','268'),('1987-10-10','AA','268'),('1987-10-10','AA','281'),('1987-10-10','AA','287'),('1987-10-10','AA','287'),('1987-10-10','AA','309'),('1987-10-10','AA','309'),('1987-10-10','AA','309'),('1987-10-10','AA','341'),('1987-10-10','AA','344'),('1987-10-10','AA','344'),('1987-10-10','AA','347'),('1987-10-10','AA','347'),('1987-10-10','AA','368'),('1987-10-10','AA','381'),('1987-10-10','AA','381'),('1987-10-10','AA','381'),('1987-10-10','AA','396'),('1987-10-10','AA','396'),('1987-10-10','AA','397'),('1987-10-10','AA','417'),('1987-10-10','AA','417'),('1987-10-10','AA','446'),('1987-10-10','AA','451'),('1987-10-10','AA','451'),('1987-10-10','AA','460'),('1987-10-10','AA','460'),('1987-10-10','AA','491'),('1987-10-10','AA','491'),('1987-10-10','AA','504'),('1987-10-10','AA','504'),('1987-10-10','AA','519'),('1987-10-10','AA','523'),('1987-10-10','AA','523'),('1987-10-10','AA','525'),('1987-10-10','AA','525'),('1987-10-10','AA','525'),('1987-10-10','AA','533'),('1987-10-10','AA','533'),('1987-10-10','AA','546'),('1987-10-10','AA','546'),('1987-10-10','AA','546'),('1987-10-10','AA','546'),('1987-10-10','AA','556'),('1987-10-10','AA','556'),('1987-10-10','AA','556'),('1987-10-10','AA','597'),('1987-10-10','AA','597'),('1987-10-10','AA','597'),('1987-10-10','AA','601'),('1987-10-10','AA','601'),('1987-10-10','AA','627'),('1987-10-10','AA','629'),('1987-10-10','AA','629'),('1987-10-10','AA','670'),('1987-10-10','AA','673'),('1987-10-10','AA','673'),('1987-10-10','AA','680'),('1987-10-10','AA','680'),('1987-10-10','AA','817'),('1987-10-10','AA','817'),('1987-10-10','AA','824'),('1987-10-10','AA','824'),('1987-10-10','AA','824'),('1987-10-10','AA','824'),('1987-10-10','AA','832'),('1987-10-10','AA','832'),('1987-10-10','AA','852'),('1987-10-10','AA','852'),('1987-10-10','AA','866'),('1987-10-10','AA','866'),('1987-10-10','AA','871'),('1987-10-10','AA','871'),('1987-10-10','AA','880'),('1987-10-10','AA','880'),('1987-10-10','AA','880'),('1987-10-10','AA','880'),('1987-10-10','AA','883'),('1987-10-10','AA','883'),('1987-10-10','AA','885'),('1987-10-10','AA','885'),('1987-10-10','AA','885'),('1987-10-10','AA','890'),('1987-10-10','AA','890'),('1987-10-10','AA','893'),('1987-10-10','AA','893'),('1987-10-10','AA','905'),('1987-10-10','AA','905'),('1987-10-10','AA','915'),('1987-10-10','AA','929'),('1987-10-10','AA','929'),('1987-10-10','AA','936'),('1987-10-10','AA','936'),('1987-10-10','AA','937'),('1987-10-10','AA','955'),('1987-10-10','AA','955'),('1987-10-10','AA','966'),('1987-10-10','AA','1002'),('1987-10-10','AA','1002'),('1987-10-10','AA','1004'),('1987-10-10','AA','1004'),('1987-10-10','AA','1015'),('1987-10-10','AA','1015'),('1987-10-10','AA','1021'),('1987-10-10','AA','1021'),('1987-10-10','AA','1041'),('1987-10-10','AA','1041'),('1987-10-10','AA','1046'),('1987-10-10','AA','1046'),('1987-10-10','AA','1048'),('1987-10-10','AA','1048'),('1987-10-10','AA','1061'),('1987-10-10','AA','1061'),('1987-10-10','AA','1088'),('1987-10-10','AA','1088'),('1987-10-10','AA','2033'),('1987-10-10','AA','2033'),('1987-10-10','AA','2050'),('1987-10-10','AA','2058'),('1987-10-10','AA','2071'),('1987-10-10','AA','2071'),('1987-10-10','AA','2086'),('1987-10-10','AA','2111'),('1987-10-10','AA','2123'),('1987-10-10','AA','2123'),('1987-10-10','AA','2147'),('1987-10-10','AA','2147'),('1987-10-10','AA','2199'),('1987-10-10','AA','2207'),('1987-10-10','AA','2207'),('1987-10-10','AA','2217'),('1987-10-10','AA','2230'),('1987-10-10','AA','2245'),('1987-10-10','AA','2251'),('1987-10-10','AA','2251'),('1987-10-10','AA','2275'),('1987-10-10','AA','2278'),('1987-10-10','AA','2351'),('1987-10-10','AA','2357'),('1987-10-10','AA','2361'),('1987-10-10','AA','2490'),('1987-10-10','AA','2528'),('1987-10-10','AA','2528'),('1987-10-10','AA','2735'),('1987-10-10','AA','2735'),('1987-10-10','AL','2'),('1987-10-10','AL','2'),('1987-10-10','AL','7'),('1987-10-10','AL','7'),('1987-10-10','AL','26'),('1987-10-10','AL','26'),('1987-10-10','AL','34'),('1987-10-10','AL','34'),('1987-10-10','AL','36'),('1987-10-10','AL','36'),('1987-10-10','AL','45'),('1987-10-10','AL','45'),('1987-10-10','AL','45'),('1987-10-10','AL','91'),('1987-10-10','AL','91'),('1987-10-10','AL','104'),('1987-10-10','AL','104'),('1987-10-10','AL','109'),('1987-10-10','AL','112'),('1987-10-10','AL','112'),('1987-10-10','AL','149'),('1987-10-10','AL','160'),('1987-10-10','AL','165'),('1987-10-10','AL','171'),('1987-10-10','AL','171'),('1987-10-10','AL','176'),('1987-10-10','AL','176'),('1987-10-10','AL','179'),('1987-10-10','AL','215'),('1987-10-10','AL','231'),('1987-10-10','AL','263'),('1987-10-10','AL','268'),('1987-10-10','AL','268'),('1987-10-10','AL','268'),('1987-10-10','AL','287'),('1987-10-10','AL','287'),('1987-10-10','AL','309'),('1987-10-10','AL','309'),('1987-10-10','AL','344'),('1987-10-10','AL','344'),('1987-10-10','AL','357'),('1987-10-10','AL','396'),('1987-10-10','AL','397'),('1987-10-10','AL','397'),('1987-10-10','AL','397'),('1987-10-10','AL','416'),('1987-10-10','AL','417'),('1987-10-10','AL','438'),('1987-10-10','AL','438'),('1987-10-10','AL','451'),('1987-10-10','AL','451'),('1987-10-10','AL','491'),('1987-10-10','AL','491'),('1987-10-10','AL','523'),('1987-10-10','AL','523'),('1987-10-10','AL','525'),('1987-10-10','AL','525'),('1987-10-10','AL','533'),('1987-10-10','AL','546'),('1987-10-10','AL','546'),('1987-10-10','AL','556'),('1987-10-10','AL','556'),('1987-10-10','AL','601'),('1987-10-10','AL','601'),('1987-10-10','AL','627'),('1987-10-10','AL','670'),('1987-10-10','AL','673'),('1987-10-10','AL','680'),('1987-10-10','AL','905'),('1987-10-10','AL','936'),('1987-10-10','AL','966'),('1987-10-11','AA','2'),('1987-10-11','AA','2'),('1987-10-11','AA','2'),('1987-10-11','AA','7'),('1987-10-11','AA','7'),('1987-10-11','AA','26'),('1987-10-11','AA','36'),('1987-10-11','AA','91'),('1987-10-11','AA','101'),('1987-10-11','AA','101'),('1987-10-11','AA','109'),('1987-10-11','AA','109'),('1987-10-11','AA','112'),('1987-10-11','AA','123'),('1987-10-11','AA','160'),('1987-10-11','AA','165'),('1987-10-11','AA','165'),('1987-10-11','AA','165'),('1987-10-11','AA','176'),('1987-10-11','AA','176'),('1987-10-11','AA','176'),('1987-10-11','AA','176'),('1987-10-11','AA','179'),('1987-10-11','AA','179'),('1987-10-11','AA','215'),('1987-10-11','AA','215'),('1987-10-11','AA','231'),('1987-10-11','AA','263'),('1987-10-11','AA','263'),('1987-10-11','AA','268'),('1987-10-11','AA','268'),('1987-10-11','AA','281'),('1987-10-11','AA','287'),('1987-10-11','AA','287'),('1987-10-11','AA','309'),('1987-10-11','AA','309'),('1987-10-11','AA','309'),('1987-10-11','AA','341'),('1987-10-11','AA','344'),('1987-10-11','AA','344'),('1987-10-11','AA','347'),('1987-10-11','AA','347'),('1987-10-11','AA','368'),('1987-10-11','AA','381'),('1987-10-11','AA','381'),('1987-10-11','AA','381'),('1987-10-11','AA','396'),('1987-10-11','AA','396'),('1987-10-11','AA','397'),('1987-10-11','AA','397'),('1987-10-11','AA','417'),('1987-10-11','AA','417'),('1987-10-11','AA','446'),('1987-10-11','AA','451'),('1987-10-11','AA','451'),('1987-10-11','AA','460'),('1987-10-11','AA','460'),('1987-10-11','AA','491'),('1987-10-11','AA','491'),('1987-10-11','AA','504'),('1987-10-11','AA','504'),('1987-10-11','AA','519'),('1987-10-11','AA','519'),('1987-10-11','AA','523'),('1987-10-11','AA','523'),('1987-10-11','AA','525'),('1987-10-11','AA','525'),('1987-10-11','AA','525'),('1987-10-11','AA','533'),('1987-10-11','AA','533'),('1987-10-11','AA','533'),('1987-10-11','AA','546'),('1987-10-11','AA','546'),('1987-10-11','AA','546'),('1987-10-11','AA','546'),('1987-10-11','AA','556'),('1987-10-11','AA','556'),('1987-10-11','AA','556'),('1987-10-11','AA','597'),('1987-10-11','AA','597'),('1987-10-11','AA','597'),('1987-10-11','AA','601'),('1987-10-11','AA','601'),('1987-10-11','AA','627'),('1987-10-11','AA','629'),('1987-10-11','AA','629'),('1987-10-11','AA','670'),('1987-10-11','AA','673'),('1987-10-11','AA','673'),('1987-10-11','AA','680'),('1987-10-11','AA','680'),('1987-10-11','AA','817'),('1987-10-11','AA','817'),('1987-10-11','AA','824'),('1987-10-11','AA','824'),('1987-10-11','AA','824'),('1987-10-11','AA','824'),('1987-10-11','AA','832'),('1987-10-11','AA','832'),('1987-10-11','AA','852'),('1987-10-11','AA','852'),('1987-10-11','AA','866'),('1987-10-11','AA','866'),('1987-10-11','AA','871'),('1987-10-11','AA','871'),('1987-10-11','AA','880'),('1987-10-11','AA','880'),('1987-10-11','AA','880'),('1987-10-11','AA','880'),('1987-10-11','AA','883'),('1987-10-11','AA','883'),('1987-10-11','AA','885'),('1987-10-11','AA','885'),('1987-10-11','AA','885'),('1987-10-11','AA','890'),('1987-10-11','AA','890'),('1987-10-11','AA','893'),('1987-10-11','AA','893'),('1987-10-11','AA','905'),('1987-10-11','AA','905'),('1987-10-11','AA','915'),('1987-10-11','AA','929'),('1987-10-11','AA','929'),('1987-10-11','AA','936'),('1987-10-11','AA','936'),('1987-10-11','AA','937'),('1987-10-11','AA','937'),('1987-10-11','AA','955'),('1987-10-11','AA','955'),('1987-10-11','AA','966'),('1987-10-11','AA','1002'),('1987-10-11','AA','1002'),('1987-10-11','AA','1004'),('1987-10-11','AA','1004'),('1987-10-11','AA','1015'),('1987-10-11','AA','1015'),('1987-10-11','AA','1021'),('1987-10-11','AA','1021'),('1987-10-11','AA','1041'),('1987-10-11','AA','1041'),('1987-10-11','AA','1046'),('1987-10-11','AA','1046'),('1987-10-11','AA','1048'),('1987-10-11','AA','1048'),('1987-10-11','AA','1061'),('1987-10-11','AA','1061'),('1987-10-11','AA','1088'),('1987-10-11','AA','1088'),('1987-10-11','AA','2033'),('1987-10-11','AA','2033'),('1987-10-11','AA','2058'),('1987-10-11','AA','2071'),('1987-10-11','AA','2071'),('1987-10-11','AA','2086'),('1987-10-11','AA','2111'),('1987-10-11','AA','2123'),('1987-10-11','AA','2123'),('1987-10-11','AA','2147'),('1987-10-11','AA','2147'),('1987-10-11','AA','2199'),('1987-10-11','AA','2199'),('1987-10-11','AA','2199'),('1987-10-11','AA','2207'),('1987-10-11','AA','2207'),('1987-10-11','AA','2230'),('1987-10-11','AA','2245'),('1987-10-11','AA','2251'),('1987-10-11','AA','2251'),('1987-10-11','AA','2275'),('1987-10-11','AA','2278'),('1987-10-11','AA','2351'),('1987-10-11','AA','2357'),('1987-10-11','AA','2361'),('1987-10-11','AA','2490'),('1987-10-11','AA','2528'),('1987-10-11','AA','2528'),('1987-10-11','AA','2735'),('1987-10-11','AA','2735'),('1987-10-11','AA','2751'),('1987-10-11','AL','2'),('1987-10-11','AL','2'),('1987-10-11','AL','7'),('1987-10-11','AL','7'),('1987-10-11','AL','26'),('1987-10-11','AL','26'),('1987-10-11','AL','34'),('1987-10-11','AL','34'),('1987-10-11','AL','36'),('1987-10-11','AL','36'),('1987-10-11','AL','45'),('1987-10-11','AL','45'),('1987-10-11','AL','45'),('1987-10-11','AL','91'),('1987-10-11','AL','91'),('1987-10-11','AL','104'),('1987-10-11','AL','104'),('1987-10-11','AL','104'),('1987-10-11','AL','112'),('1987-10-11','AL','123'),('1987-10-11','AL','149'),('1987-10-11','AL','160'),('1987-10-11','AL','160'),('1987-10-11','AL','165'),('1987-10-11','AL','171'),('1987-10-11','AL','171'),('1987-10-11','AL','176'),('1987-10-11','AL','176'),('1987-10-11','AL','179'),('1987-10-11','AL','215'),('1987-10-11','AL','231'),('1987-10-11','AL','263'),('1987-10-11','AL','263'),('1987-10-11','AL','281'),('1987-10-11','AL','281'),('1987-10-11','AL','309'),('1987-10-11','AL','309'),('1987-10-11','AL','341'),('1987-10-11','AL','344'),('1987-10-11','AL','344'),('1987-10-11','AL','357'),('1987-10-11','AL','357'),('1987-10-11','AL','368'),('1987-10-11','AL','396'),('1987-10-11','AL','416'),('1987-10-11','AL','416'),('1987-10-11','AL','417'),('1987-10-11','AL','438'),('1987-10-11','AL','438'),('1987-10-11','AL','446'),('1987-10-11','AL','451'),('1987-10-11','AL','491'),('1987-10-11','AL','491'),('1987-10-11','AL','523'),('1987-10-11','AL','523'),('1987-10-11','AL','523'),('1987-10-11','AL','525'),('1987-10-11','AL','525'),('1987-10-11','AL','533'),('1987-10-11','AL','533'),('1987-10-11','AL','546'),('1987-10-11','AL','546'),('1987-10-11','AL','556'),('1987-10-11','AL','556'),('1987-10-11','AL','601'),('1987-10-11','AL','601'),('1987-10-11','AL','627'),('1987-10-11','AL','629'),('1987-10-11','AL','670'),('1987-10-11','AL','670'),('1987-10-11','AL','670'),('1987-10-11','AL','673'),('1987-10-11','AL','680'),('1987-10-11','AL','937'),('1987-10-11','AL','937'),('1987-10-11','AL','955'),('1987-10-21','AA','2'),('1987-10-21','AA','2'),('1987-10-21','AA','2'),('1987-10-21','AA','7'),('1987-10-21','AA','7'),('1987-10-21','AA','26'),('1987-10-21','AA','34'),('1987-10-21','AA','36'),('1987-10-21','AA','91'),('1987-10-21','AA','101'),('1987-10-21','AA','101'),('1987-10-21','AA','109'),('1987-10-21','AA','109'),('1987-10-21','AA','123'),('1987-10-21','AA','123'),('1987-10-21','AA','160'),('1987-10-21','AA','165'),('1987-10-21','AA','165'),('1987-10-21','AA','165'),('1987-10-21','AA','176'),('1987-10-21','AA','176'),('1987-10-21','AA','176'),('1987-10-21','AA','176'),('1987-10-21','AA','179'),('1987-10-21','AA','179'),('1987-10-21','AA','215'),('1987-10-21','AA','231'),('1987-10-21','AA','231'),('1987-10-21','AA','263'),('1987-10-21','AA','263'),('1987-10-21','AA','268'),('1987-10-21','AA','268'),('1987-10-21','AA','281'),('1987-10-21','AA','287'),('1987-10-21','AA','287'),('1987-10-21','AA','309'),('1987-10-21','AA','309'),('1987-10-21','AA','309'),('1987-10-21','AA','341'),('1987-10-21','AA','344'),('1987-10-21','AA','344'),('1987-10-21','AA','347'),('1987-10-21','AA','347'),('1987-10-21','AA','368'),('1987-10-21','AA','381'),('1987-10-21','AA','381'),('1987-10-21','AA','381'),('1987-10-21','AA','396'),('1987-10-21','AA','396'),('1987-10-21','AA','397'),('1987-10-21','AA','397'),('1987-10-21','AA','417'),('1987-10-21','AA','417'),('1987-10-21','AA','446'),('1987-10-21','AA','451'),('1987-10-21','AA','451'),('1987-10-21','AA','460'),('1987-10-21','AA','460'),('1987-10-21','AA','491'),('1987-10-21','AA','504'),('1987-10-21','AA','504'),('1987-10-21','AA','519'),('1987-10-21','AA','519'),('1987-10-21','AA','523'),('1987-10-21','AA','523'),('1987-10-21','AA','525'),('1987-10-21','AA','525'),('1987-10-21','AA','525'),('1987-10-21','AA','533'),('1987-10-21','AA','533'),('1987-10-21','AA','533'),('1987-10-21','AA','546'),('1987-10-21','AA','546'),('1987-10-21','AA','546'),('1987-10-21','AA','546'),('1987-10-21','AA','556'),('1987-10-21','AA','556'),('1987-10-21','AA','556'),('1987-10-21','AA','597'),('1987-10-21','AA','597'),('1987-10-21','AA','597'),('1987-10-21','AA','601'),('1987-10-21','AA','601'),('1987-10-21','AA','627'),('1987-10-21','AA','629'),('1987-10-21','AA','629'),('1987-10-21','AA','673'),('1987-10-21','AA','673'),('1987-10-21','AA','680'),('1987-10-21','AA','680'),('1987-10-21','AA','817'),('1987-10-21','AA','817'),('1987-10-21','AA','824'),('1987-10-21','AA','824'),('1987-10-21','AA','824'),('1987-10-21','AA','832'),('1987-10-21','AA','832'),('1987-10-21','AA','852'),('1987-10-21','AA','866'),('1987-10-21','AA','866'),('1987-10-21','AA','871'),('1987-10-21','AA','871'),('1987-10-21','AA','880'),('1987-10-21','AA','880'),('1987-10-21','AA','880'),('1987-10-21','AA','880'),('1987-10-21','AA','883'),('1987-10-21','AA','883'),('1987-10-21','AA','885'),('1987-10-21','AA','885'),('1987-10-21','AA','885'),('1987-10-21','AA','890'),('1987-10-21','AA','890'),('1987-10-21','AA','893'),('1987-10-21','AA','893'),('1987-10-21','AA','905'),('1987-10-21','AA','905'),('1987-10-21','AA','915'),('1987-10-21','AA','929'),('1987-10-21','AA','929'),('1987-10-21','AA','936'),('1987-10-21','AA','936'),('1987-10-21','AA','937'),('1987-10-21','AA','1002'),('1987-10-21','AA','1002'),('1987-10-21','AA','1004'),('1987-10-21','AA','1004'),('1987-10-21','AA','1015'),('1987-10-21','AA','1021'),('1987-10-21','AA','1021'),('1987-10-21','AA','1041'),('1987-10-21','AA','1041'),('1987-10-21','AA','1046'),('1987-10-21','AA','1046'),('1987-10-21','AA','1048'),('1987-10-21','AA','1048'),('1987-10-21','AA','1061'),('1987-10-21','AA','1061'),('1987-10-21','AA','1088'),('1987-10-21','AA','1088'),('1987-10-21','AA','2033'),('1987-10-21','AA','2033'),('1987-10-21','AA','2050'),('1987-10-21','AA','2071'),('1987-10-21','AA','2086'),('1987-10-21','AA','2105'),('1987-10-21','AA','2111'),('1987-10-21','AA','2123'),('1987-10-21','AA','2123'),('1987-10-21','AA','2147'),('1987-10-21','AA','2147'),('1987-10-21','AA','2199'),('1987-10-21','AA','2199'),('1987-10-21','AA','2207'),('1987-10-21','AA','2207'),('1987-10-21','AA','2217'),('1987-10-21','AA','2230'),('1987-10-21','AA','2245'),('1987-10-21','AA','2251'),('1987-10-21','AA','2251'),('1987-10-21','AA','2275'),('1987-10-21','AA','2278'),('1987-10-21','AA','2351'),('1987-10-21','AA','2357'),('1987-10-21','AA','2361'),('1987-10-21','AA','2490'),('1987-10-21','AA','2528'),('1987-10-21','AA','2528'),('1987-10-21','AA','2735'),('1987-10-21','AA','2735'),('1987-10-21','AA','2751'),('1987-10-21','AL','2'),('1987-10-21','AL','2'),('1987-10-21','AL','7'),('1987-10-21','AL','7'),('1987-10-21','AL','26'),('1987-10-21','AL','26'),('1987-10-21','AL','34'),('1987-10-21','AL','34'),('1987-10-21','AL','36'),('1987-10-21','AL','36'),('1987-10-21','AL','45'),('1987-10-21','AL','45'),('1987-10-21','AL','45'),('1987-10-21','AL','91'),('1987-10-21','AL','91'),('1987-10-21','AL','104'),('1987-10-21','AL','104'),('1987-10-21','AL','104'),('1987-10-21','AL','109'),('1987-10-21','AL','112'),('1987-10-21','AL','112'),('1987-10-21','AL','123'),('1987-10-21','AL','149'),('1987-10-21','AL','160'),('1987-10-21','AL','160'),('1987-10-21','AL','165'),('1987-10-21','AL','171'),('1987-10-21','AL','171'),('1987-10-21','AL','176'),('1987-10-21','AL','176'),('1987-10-21','AL','179'),('1987-10-21','AL','215'),('1987-10-21','AL','263'),('1987-10-21','AL','263'),('1987-10-21','AL','268'),('1987-10-21','AL','268'),('1987-10-21','AL','268'),('1987-10-21','AL','281'),('1987-10-21','AL','281'),('1987-10-21','AL','287'),('1987-10-21','AL','287'),('1987-10-21','AL','309'),('1987-10-21','AL','309'),('1987-10-21','AL','341'),('1987-10-21','AL','344'),('1987-10-21','AL','344'),('1987-10-21','AL','357'),('1987-10-21','AL','357'),('1987-10-21','AL','368'),('1987-10-21','AL','381'),('1987-10-21','AL','396'),('1987-10-21','AL','397'),('1987-10-21','AL','397'),('1987-10-21','AL','416'),('1987-10-21','AL','416'),('1987-10-21','AL','417'),('1987-10-21','AL','438'),('1987-10-21','AL','438'),('1987-10-21','AL','446'),('1987-10-21','AL','451'),('1987-10-21','AL','451'),('1987-10-21','AL','491'),('1987-10-21','AL','491'),('1987-10-21','AL','523'),('1987-10-21','AL','523'),('1987-10-21','AL','523'),('1987-10-21','AL','525'),('1987-10-21','AL','525'),('1987-10-21','AL','533'),('1987-10-21','AL','533'),('1987-10-21','AL','546'),('1987-10-21','AL','546'),('1987-10-21','AL','556'),('1987-10-21','AL','556'),('1987-10-21','AL','601'),('1987-10-21','AL','601'),('1987-10-21','AL','627'),('1987-10-21','AL','629'),('1987-10-21','AL','670'),('1987-10-21','AL','670'),('1987-10-21','AL','670'),('1987-10-21','AL','673'),('1987-10-21','AL','680'),('1987-10-22','AA','2'),('1987-10-22','AA','2'),('1987-10-22','AA','2'),('1987-10-22','AA','7'),('1987-10-22','AA','7'),('1987-10-22','AA','26'),('1987-10-22','AA','34'),('1987-10-22','AA','36'),('1987-10-22','AA','91'),('1987-10-22','AA','101'),('1987-10-22','AA','101'),('1987-10-22','AA','109'),('1987-10-22','AA','109'),('1987-10-22','AA','112'),('1987-10-22','AA','123'),('1987-10-22','AA','123'),('1987-10-22','AA','160'),('1987-10-22','AA','165'),('1987-10-22','AA','165'),('1987-10-22','AA','165'),('1987-10-22','AA','176'),('1987-10-22','AA','176'),('1987-10-22','AA','176'),('1987-10-22','AA','179'),('1987-10-22','AA','215'),('1987-10-22','AA','215'),('1987-10-22','AA','231'),('1987-10-22','AA','231'),('1987-10-22','AA','263'),('1987-10-22','AA','263'),('1987-10-22','AA','268'),('1987-10-22','AA','268'),('1987-10-22','AA','281'),('1987-10-22','AA','287'),('1987-10-22','AA','287'),('1987-10-22','AA','309'),('1987-10-22','AA','309'),('1987-10-22','AA','309'),('1987-10-22','AA','341'),('1987-10-22','AA','344'),('1987-10-22','AA','344'),('1987-10-22','AA','347'),('1987-10-22','AA','368'),('1987-10-22','AA','381'),('1987-10-22','AA','381'),('1987-10-22','AA','381'),('1987-10-22','AA','396'),('1987-10-22','AA','396'),('1987-10-22','AA','397'),('1987-10-22','AA','397'),('1987-10-22','AA','417'),('1987-10-22','AA','417'),('1987-10-22','AA','446'),('1987-10-22','AA','451'),('1987-10-22','AA','451'),('1987-10-22','AA','460'),('1987-10-22','AA','460'),('1987-10-22','AA','491'),('1987-10-22','AA','504'),('1987-10-22','AA','519'),('1987-10-22','AA','519'),('1987-10-22','AA','523'),('1987-10-22','AA','523'),('1987-10-22','AA','525'),('1987-10-22','AA','525'),('1987-10-22','AA','533'),('1987-10-22','AA','533'),('1987-10-22','AA','533'),('1987-10-22','AA','546'),('1987-10-22','AA','546'),('1987-10-22','AA','546'),('1987-10-22','AA','546'),('1987-10-22','AA','556'),('1987-10-22','AA','556'),('1987-10-22','AA','556'),('1987-10-22','AA','597'),('1987-10-22','AA','597'),('1987-10-22','AA','597'),('1987-10-22','AA','601'),('1987-10-22','AA','601'),('1987-10-22','AA','627'),('1987-10-22','AA','629'),('1987-10-22','AA','629'),('1987-10-22','AA','673'),('1987-10-22','AA','673'),('1987-10-22','AA','680'),('1987-10-22','AA','680'),('1987-10-22','AA','817'),('1987-10-22','AA','817'),('1987-10-22','AA','824'),('1987-10-22','AA','824'),('1987-10-22','AA','824'),('1987-10-22','AA','832'),('1987-10-22','AA','832'),('1987-10-22','AA','852'),('1987-10-22','AA','852'),('1987-10-22','AA','866'),('1987-10-22','AA','866'),('1987-10-22','AA','871'),('1987-10-22','AA','871'),('1987-10-22','AA','880'),('1987-10-22','AA','880'),('1987-10-22','AA','880'),('1987-10-22','AA','880'),('1987-10-22','AA','883'),('1987-10-22','AA','883'),('1987-10-22','AA','885'),('1987-10-22','AA','885'),('1987-10-22','AA','885'),('1987-10-22','AA','890'),('1987-10-22','AA','890'),('1987-10-22','AA','893'),('1987-10-22','AA','893'),('1987-10-22','AA','905'),('1987-10-22','AA','905'),('1987-10-22','AA','915'),('1987-10-22','AA','929'),('1987-10-22','AA','929'),('1987-10-22','AA','936'),('1987-10-22','AA','936'),('1987-10-22','AA','937'),('1987-10-22','AA','937'),('1987-10-22','AA','955'),('1987-10-22','AA','955'),('1987-10-22','AA','1002'),('1987-10-22','AA','1002'),('1987-10-22','AA','1004'),('1987-10-22','AA','1015'),('1987-10-22','AA','1015'),('1987-10-22','AA','1021'),('1987-10-22','AA','1021'),('1987-10-22','AA','1041'),('1987-10-22','AA','1041'),('1987-10-22','AA','1046'),('1987-10-22','AA','1046'),('1987-10-22','AA','1048'),('1987-10-22','AA','1048'),('1987-10-22','AA','1061'),('1987-10-22','AA','1061'),('1987-10-22','AA','1088'),('1987-10-22','AA','1088'),('1987-10-22','AA','2033'),('1987-10-22','AA','2058'),('1987-10-22','AA','2071'),('1987-10-22','AA','2071'),('1987-10-22','AA','2086'),('1987-10-22','AA','2105'),('1987-10-22','AA','2111'),('1987-10-22','AA','2147'),('1987-10-22','AA','2147'),('1987-10-22','AA','2199'),('1987-10-22','AA','2207'),('1987-10-22','AA','2207'),('1987-10-22','AA','2217'),('1987-10-22','AA','2230'),('1987-10-22','AA','2245'),('1987-10-22','AA','2251'),('1987-10-22','AA','2251'),('1987-10-22','AA','2275'),('1987-10-22','AA','2278'),('1987-10-22','AA','2351'),('1987-10-22','AA','2357'),('1987-10-22','AA','2361'),('1987-10-22','AA','2490'),('1987-10-22','AA','2528'),('1987-10-22','AA','2528'),('1987-10-22','AA','2735'),('1987-10-22','AA','2735'),('1987-10-22','AA','2751'),('1987-10-22','AL','2'),('1987-10-22','AL','2'),('1987-10-22','AL','7'),('1987-10-22','AL','7'),('1987-10-22','AL','26'),('1987-10-22','AL','26'),('1987-10-22','AL','34'),('1987-10-22','AL','34'),('1987-10-22','AL','36'),('1987-10-22','AL','36'),('1987-10-22','AL','45'),('1987-10-22','AL','45'),('1987-10-22','AL','45'),('1987-10-22','AL','91'),('1987-10-22','AL','91'),('1987-10-22','AL','104'),('1987-10-22','AL','104'),('1987-10-22','AL','104'),('1987-10-22','AL','109'),('1987-10-22','AL','112'),('1987-10-22','AL','112'),('1987-10-22','AL','123'),('1987-10-22','AL','149'),('1987-10-22','AL','160'),('1987-10-22','AL','160'),('1987-10-22','AL','165'),('1987-10-22','AL','171'),('1987-10-22','AL','171'),('1987-10-22','AL','176'),('1987-10-22','AL','176'),('1987-10-22','AL','179'),('1987-10-22','AL','215'),('1987-10-22','AL','231'),('1987-10-22','AL','263'),('1987-10-22','AL','263'),('1987-10-22','AL','268'),('1987-10-22','AL','268'),('1987-10-22','AL','268'),('1987-10-22','AL','281'),('1987-10-22','AL','281'),('1987-10-22','AL','287'),('1987-10-22','AL','287'),('1987-10-22','AL','309'),('1987-10-22','AL','309'),('1987-10-22','AL','341'),('1987-10-22','AL','344'),('1987-10-22','AL','344'),('1987-10-22','AL','357'),('1987-10-22','AL','357'),('1987-10-22','AL','368'),('1987-10-22','AL','381'),('1987-10-22','AL','396'),('1987-10-22','AL','397'),('1987-10-22','AL','397'),('1987-10-22','AL','416'),('1987-10-22','AL','417'),('1987-10-22','AL','438'),('1987-10-22','AL','438'),('1987-10-22','AL','446'),('1987-10-22','AL','451'),('1987-10-22','AL','451'),('1987-10-22','AL','491'),('1987-10-22','AL','491'),('1987-10-22','AL','523'),('1987-10-22','AL','523'),('1987-10-22','AL','523'),('1987-10-22','AL','525'),('1987-10-22','AL','525'),('1987-10-22','AL','533'),('1987-10-22','AL','533'),('1987-10-22','AL','546'),('1987-10-22','AL','546'),('1987-10-22','AL','556'),('1987-10-22','AL','556'),('1987-10-22','AL','601'),('1987-10-22','AL','601'),('1987-10-22','AL','627'),('1987-10-22','AL','629'),('1987-10-22','AL','670'),('1987-10-22','AL','670'),('1987-10-22','AL','670'),('1987-10-22','AL','673'),('1987-10-22','AL','680'),('1987-10-23','AA','2'),('1987-10-23','AA','2'),('1987-10-23','AA','2'),('1987-10-23','AA','7'),('1987-10-23','AA','7'),('1987-10-23','AA','26'),('1987-10-23','AA','34'),('1987-10-23','AA','36'),('1987-10-23','AA','91'),('1987-10-23','AA','101'),('1987-10-23','AA','109'),('1987-10-23','AA','109'),('1987-10-23','AA','112'),('1987-10-23','AA','123'),('1987-10-23','AA','123'),('1987-10-23','AA','160'),('1987-10-23','AA','165'),('1987-10-23','AA','165'),('1987-10-23','AA','165'),('1987-10-23','AA','176'),('1987-10-23','AA','176'),('1987-10-23','AA','176'),('1987-10-23','AA','176'),('1987-10-23','AA','179'),('1987-10-23','AA','179'),('1987-10-23','AA','215'),('1987-10-23','AA','215'),('1987-10-23','AA','231'),('1987-10-23','AA','231'),('1987-10-23','AA','263'),('1987-10-23','AA','263'),('1987-10-23','AA','268'),('1987-10-23','AA','268'),('1987-10-23','AA','281'),('1987-10-23','AA','287'),('1987-10-23','AA','287'),('1987-10-23','AA','309'),('1987-10-23','AA','309'),('1987-10-23','AA','309'),('1987-10-23','AA','341'),('1987-10-23','AA','344'),('1987-10-23','AA','344'),('1987-10-23','AA','347'),('1987-10-23','AA','368'),('1987-10-23','AA','381'),('1987-10-23','AA','381'),('1987-10-23','AA','381'),('1987-10-23','AA','396'),('1987-10-23','AA','396'),('1987-10-23','AA','397'),('1987-10-23','AA','397'),('1987-10-23','AA','417'),('1987-10-23','AA','417'),('1987-10-23','AA','446'),('1987-10-23','AA','451'),('1987-10-23','AA','451'),('1987-10-23','AA','460'),('1987-10-23','AA','491'),('1987-10-23','AA','504'),('1987-10-23','AA','504'),('1987-10-23','AA','519'),('1987-10-23','AA','519'),('1987-10-23','AA','523'),('1987-10-23','AA','523'),('1987-10-23','AA','525'),('1987-10-23','AA','533'),('1987-10-23','AA','533'),('1987-10-23','AA','533'),('1987-10-23','AA','546'),('1987-10-23','AA','546'),('1987-10-23','AA','546'),('1987-10-23','AA','546'),('1987-10-23','AA','556'),('1987-10-23','AA','556'),('1987-10-23','AA','556'),('1987-10-23','AA','597'),('1987-10-23','AA','597'),('1987-10-23','AA','601'),('1987-10-23','AA','601'),('1987-10-23','AA','627'),('1987-10-23','AA','629'),('1987-10-23','AA','629'),('1987-10-23','AA','673'),('1987-10-23','AA','680'),('1987-10-23','AA','680'),('1987-10-23','AA','817'),('1987-10-23','AA','817'),('1987-10-23','AA','824'),('1987-10-23','AA','824'),('1987-10-23','AA','824'),('1987-10-23','AA','824'),('1987-10-23','AA','832'),('1987-10-23','AA','832'),('1987-10-23','AA','852'),('1987-10-23','AA','866'),('1987-10-23','AA','866'),('1987-10-23','AA','871'),('1987-10-23','AA','871'),('1987-10-23','AA','880'),('1987-10-23','AA','880'),('1987-10-23','AA','880'),('1987-10-23','AA','880'),('1987-10-23','AA','883'),('1987-10-23','AA','883'),('1987-10-23','AA','885'),('1987-10-23','AA','885'),('1987-10-23','AA','885'),('1987-10-23','AA','890'),('1987-10-23','AA','890'),('1987-10-23','AA','893'),('1987-10-23','AA','893'),('1987-10-23','AA','905'),('1987-10-23','AA','905'),('1987-10-23','AA','929'),('1987-10-23','AA','929'),('1987-10-23','AA','936'),('1987-10-23','AA','936'),('1987-10-23','AA','937'),('1987-10-23','AA','937'),('1987-10-23','AA','955'),('1987-10-23','AA','955'),('1987-10-23','AA','966'),('1987-10-23','AA','1002'),('1987-10-23','AA','1002'),('1987-10-23','AA','1004'),('1987-10-23','AA','1004'),('1987-10-23','AA','1015'),('1987-10-23','AA','1015'),('1987-10-23','AA','1021'),('1987-10-23','AA','1021'),('1987-10-23','AA','1041'),('1987-10-23','AA','1041'),('1987-10-23','AA','1046'),('1987-10-23','AA','1048'),('1987-10-23','AA','1048'),('1987-10-23','AA','1061'),('1987-10-23','AA','1061'),('1987-10-23','AA','1088'),('1987-10-23','AA','1088'),('1987-10-23','AA','2033'),('1987-10-23','AA','2033'),('1987-10-23','AA','2050'),('1987-10-23','AA','2058'),('1987-10-23','AA','2071'),('1987-10-23','AA','2071'),('1987-10-23','AA','2086'),('1987-10-23','AA','2105'),('1987-10-23','AA','2111'),('1987-10-23','AA','2123'),('1987-10-23','AA','2123'),('1987-10-23','AA','2147'),('1987-10-23','AA','2147'),('1987-10-23','AA','2199'),('1987-10-23','AA','2199'),('1987-10-23','AA','2199'),('1987-10-23','AA','2207'),('1987-10-23','AA','2207'),('1987-10-23','AA','2245'),('1987-10-23','AA','2251'),('1987-10-23','AA','2275'),('1987-10-23','AA','2278'),('1987-10-23','AA','2351'),('1987-10-23','AA','2357'),('1987-10-23','AA','2361'),('1987-10-23','AA','2490'),('1987-10-23','AA','2528'),('1987-10-23','AA','2528'),('1987-10-23','AA','2735'),('1987-10-23','AA','2735'),('1987-10-23','AA','2751'),('1987-10-23','AL','2'),('1987-10-23','AL','2'),('1987-10-23','AL','7'),('1987-10-23','AL','7'),('1987-10-23','AL','26'),('1987-10-23','AL','26'),('1987-10-23','AL','34'),('1987-10-23','AL','34'),('1987-10-23','AL','36'),('1987-10-23','AL','36'),('1987-10-23','AL','45'),('1987-10-23','AL','45'),('1987-10-23','AL','45'),('1987-10-23','AL','91'),('1987-10-23','AL','91'),('1987-10-23','AL','104'),('1987-10-23','AL','104'),('1987-10-23','AL','104'),('1987-10-23','AL','109'),('1987-10-23','AL','112'),('1987-10-23','AL','112'),('1987-10-23','AL','123'),('1987-10-23','AL','149'),('1987-10-23','AL','160'),('1987-10-23','AL','160'),('1987-10-23','AL','165'),('1987-10-23','AL','171'),('1987-10-23','AL','176'),('1987-10-23','AL','176'),('1987-10-23','AL','179'),('1987-10-23','AL','215'),('1987-10-23','AL','231'),('1987-10-23','AL','263'),('1987-10-23','AL','263'),('1987-10-23','AL','268'),('1987-10-23','AL','268'),('1987-10-23','AL','268'),('1987-10-23','AL','281'),('1987-10-23','AL','281'),('1987-10-23','AL','287'),('1987-10-23','AL','287'),('1987-10-23','AL','309'),('1987-10-23','AL','309'),('1987-10-23','AL','341'),('1987-10-23','AL','344'),('1987-10-23','AL','344'),('1987-10-23','AL','357'),('1987-10-23','AL','357'),('1987-10-23','AL','368'),('1987-10-23','AL','381'),('1987-10-23','AL','396'),('1987-10-23','AL','397'),('1987-10-23','AL','397'),('1987-10-23','AL','416'),('1987-10-23','AL','416'),('1987-10-23','AL','417'),('1987-10-23','AL','438'),('1987-10-23','AL','438'),('1987-10-23','AL','446'),('1987-10-23','AL','451'),('1987-10-23','AL','451'),('1987-10-23','AL','491'),('1987-10-23','AL','491'),('1987-10-23','AL','523'),('1987-10-23','AL','523'),('1987-10-23','AL','523'),('1987-10-23','AL','525'),('1987-10-23','AL','525'),('1987-10-23','AL','533'),('1987-10-23','AL','533'),('1987-10-23','AL','546'),('1987-10-23','AL','546'),('1987-10-23','AL','556'),('1987-10-23','AL','556'),('1987-10-23','AL','601'),('1987-10-23','AL','601'),('1987-10-23','AL','627'),('1987-10-23','AL','629'),('1987-10-23','AL','670'),('1987-10-23','AL','670'),('1987-10-23','AL','670'),('1987-10-23','AL','673'),('1987-10-23','AL','680'),('1987-10-24','AA','2'),('1987-10-24','AA','2'),('1987-10-24','AA','7'),('1987-10-24','AA','7'),('1987-10-24','AA','26'),('1987-10-24','AA','34'),('1987-10-24','AA','36'),('1987-10-24','AA','91'),('1987-10-24','AA','101'),('1987-10-24','AA','101'),('1987-10-24','AA','109'),('1987-10-24','AA','109'),('1987-10-24','AA','112'),('1987-10-24','AA','123'),('1987-10-24','AA','123'),('1987-10-24','AA','160'),('1987-10-24','AA','165'),('1987-10-24','AA','165'),('1987-10-24','AA','165'),('1987-10-24','AA','176'),('1987-10-24','AA','176'),('1987-10-24','AA','176'),('1987-10-24','AA','179'),('1987-10-24','AA','179'),('1987-10-24','AA','215'),('1987-10-24','AA','215'),('1987-10-24','AA','231'),('1987-10-24','AA','263'),('1987-10-24','AA','263'),('1987-10-24','AA','268'),('1987-10-24','AA','268'),('1987-10-24','AA','281'),('1987-10-24','AA','287'),('1987-10-24','AA','287'),('1987-10-24','AA','309'),('1987-10-24','AA','309'),('1987-10-24','AA','309'),('1987-10-24','AA','344'),('1987-10-24','AA','344'),('1987-10-24','AA','347'),('1987-10-24','AA','347'),('1987-10-24','AA','368'),('1987-10-24','AA','381'),('1987-10-24','AA','381'),('1987-10-24','AA','381'),('1987-10-24','AA','396'),('1987-10-24','AA','396'),('1987-10-24','AA','397'),('1987-10-24','AA','397'),('1987-10-24','AA','417'),('1987-10-24','AA','417'),('1987-10-24','AA','446'),('1987-10-24','AA','451'),('1987-10-24','AA','451'),('1987-10-24','AA','460'),('1987-10-24','AA','460'),('1987-10-24','AA','491'),('1987-10-24','AA','491'),('1987-10-24','AA','504'),('1987-10-24','AA','504'),('1987-10-24','AA','519'),('1987-10-24','AA','519'),('1987-10-24','AA','523'),('1987-10-24','AA','523'),('1987-10-24','AA','525'),('1987-10-24','AA','525'),('1987-10-24','AA','525'),('1987-10-24','AA','533'),('1987-10-24','AA','533'),('1987-10-24','AA','546'),('1987-10-24','AA','546'),('1987-10-24','AA','546'),('1987-10-24','AA','556'),('1987-10-24','AA','556'),('1987-10-24','AA','556'),('1987-10-24','AA','597'),('1987-10-24','AA','597'),('1987-10-24','AA','597'),('1987-10-24','AA','601'),('1987-10-24','AA','601'),('1987-10-24','AA','627'),('1987-10-24','AA','629'),('1987-10-24','AA','673'),('1987-10-24','AA','673'),('1987-10-24','AA','680'),('1987-10-24','AA','680'),('1987-10-24','AA','817'),('1987-10-24','AA','817'),('1987-10-24','AA','824'),('1987-10-24','AA','824'),('1987-10-24','AA','824'),('1987-10-24','AA','832'),('1987-10-24','AA','832'),('1987-10-24','AA','852'),('1987-10-24','AA','852'),('1987-10-24','AA','866'),('1987-10-24','AA','866'),('1987-10-24','AA','871'),('1987-10-24','AA','871'),('1987-10-24','AA','880'),('1987-10-24','AA','880'),('1987-10-24','AA','880'),('1987-10-24','AA','880'),('1987-10-24','AA','883'),('1987-10-24','AA','883'),('1987-10-24','AA','885'),('1987-10-24','AA','885'),('1987-10-24','AA','885'),('1987-10-24','AA','890'),('1987-10-24','AA','890'),('1987-10-24','AA','893'),('1987-10-24','AA','893'),('1987-10-24','AA','905'),('1987-10-24','AA','905'),('1987-10-24','AA','915'),('1987-10-24','AA','929'),('1987-10-24','AA','929'),('1987-10-24','AA','936'),('1987-10-24','AA','936'),('1987-10-24','AA','937'),('1987-10-24','AA','937'),('1987-10-24','AA','955'),('1987-10-24','AA','955'),('1987-10-24','AA','966'),('1987-10-24','AA','1002'),('1987-10-24','AA','1002'),('1987-10-24','AA','1004'),('1987-10-24','AA','1004'),('1987-10-24','AA','1015'),('1987-10-24','AA','1021'),('1987-10-24','AA','1021'),('1987-10-24','AA','1041'),('1987-10-24','AA','1041'),('1987-10-24','AA','1046'),('1987-10-24','AA','1046'),('1987-10-24','AA','1048'),('1987-10-24','AA','1048'),('1987-10-24','AA','1061'),('1987-10-24','AA','1061'),('1987-10-24','AA','1088'),('1987-10-24','AA','1088'),('1987-10-24','AA','2033'),('1987-10-24','AA','2033'),('1987-10-24','AA','2050'),('1987-10-24','AA','2058'),('1987-10-24','AA','2071'),('1987-10-24','AA','2071'),('1987-10-24','AA','2086'),('1987-10-24','AA','2105'),('1987-10-24','AA','2111'),('1987-10-24','AA','2123'),('1987-10-24','AA','2147'),('1987-10-24','AA','2199'),('1987-10-24','AA','2199'),('1987-10-24','AA','2207'),('1987-10-24','AA','2217'),('1987-10-24','AA','2230'),('1987-10-24','AA','2245'),('1987-10-24','AA','2251'),('1987-10-24','AA','2251'),('1987-10-24','AA','2275'),('1987-10-24','AA','2278'),('1987-10-24','AA','2351'),('1987-10-24','AA','2357'),('1987-10-24','AA','2361'),('1987-10-24','AA','2490'),('1987-10-24','AA','2528'),('1987-10-24','AA','2528'),('1987-10-24','AA','2735'),('1987-10-24','AA','2735'),('1987-10-24','AL','2'),('1987-10-24','AL','2'),('1987-10-24','AL','7'),('1987-10-24','AL','7'),('1987-10-24','AL','26'),('1987-10-24','AL','26'),('1987-10-24','AL','34'),('1987-10-24','AL','34'),('1987-10-24','AL','36'),('1987-10-24','AL','36'),('1987-10-24','AL','45'),('1987-10-24','AL','91'),('1987-10-24','AL','91'),('1987-10-24','AL','104'),('1987-10-24','AL','104'),('1987-10-24','AL','109'),('1987-10-24','AL','112'),('1987-10-24','AL','112'),('1987-10-24','AL','149'),('1987-10-24','AL','160'),('1987-10-24','AL','160'),('1987-10-24','AL','165'),('1987-10-24','AL','171'),('1987-10-24','AL','171'),('1987-10-24','AL','176'),('1987-10-24','AL','176'),('1987-10-24','AL','179'),('1987-10-24','AL','215'),('1987-10-24','AL','231'),('1987-10-24','AL','263'),('1987-10-24','AL','268'),('1987-10-24','AL','268'),('1987-10-24','AL','268'),('1987-10-24','AL','287'),('1987-10-24','AL','287'),('1987-10-24','AL','309'),('1987-10-24','AL','309'),('1987-10-24','AL','344'),('1987-10-24','AL','344'),('1987-10-24','AL','357'),('1987-10-24','AL','357'),('1987-10-24','AL','381'),('1987-10-24','AL','396'),('1987-10-24','AL','397'),('1987-10-24','AL','397'),('1987-10-24','AL','397'),('1987-10-24','AL','416'),('1987-10-24','AL','417'),('1987-10-24','AL','438'),('1987-10-24','AL','438'),('1987-10-24','AL','451'),('1987-10-24','AL','451'),('1987-10-24','AL','491'),('1987-10-24','AL','491'),('1987-10-24','AL','523'),('1987-10-24','AL','523'),('1987-10-24','AL','525'),('1987-10-24','AL','525'),('1987-10-24','AL','533'),('1987-10-24','AL','546'),('1987-10-24','AL','546'),('1987-10-24','AL','556'),('1987-10-24','AL','556'),('1987-10-24','AL','601'),('1987-10-24','AL','601'),('1987-10-24','AL','627'),('1987-10-24','AL','670'),('1987-10-24','AL','673'),('1987-10-24','AL','680'),('1987-10-24','AL','905'),('1987-10-24','AL','936'),('1987-10-24','AL','966'),('1987-10-24','AL','982'),('1987-10-25','AA','2'),('1987-10-25','AA','2'),('1987-10-25','AA','2'),('1987-10-25','AA','7'),('1987-10-25','AA','7'),('1987-10-25','AA','26'),('1987-10-25','AA','34'),('1987-10-25','AA','36'),('1987-10-25','AA','91'),('1987-10-25','AA','101'),('1987-10-25','AA','109'),('1987-10-25','AA','109'),('1987-10-25','AA','123'),('1987-10-25','AA','123'),('1987-10-25','AA','160'),('1987-10-25','AA','165'),('1987-10-25','AA','165'),('1987-10-25','AA','165'),('1987-10-25','AA','176'),('1987-10-25','AA','176'),('1987-10-25','AA','176'),('1987-10-25','AA','176'),('1987-10-25','AA','179'),('1987-10-25','AA','179'),('1987-10-25','AA','215'),('1987-10-25','AA','215'),('1987-10-25','AA','231'),('1987-10-25','AA','231'),('1987-10-25','AA','263'),('1987-10-25','AA','263'),('1987-10-25','AA','268'),('1987-10-25','AA','268'),('1987-10-25','AA','281'),('1987-10-25','AA','287'),('1987-10-25','AA','287'),('1987-10-25','AA','309'),('1987-10-25','AA','309'),('1987-10-25','AA','309'),('1987-10-25','AA','341'),('1987-10-25','AA','344'),('1987-10-25','AA','344'),('1987-10-25','AA','347'),('1987-10-25','AA','347'),('1987-10-25','AA','368'),('1987-10-25','AA','381'),('1987-10-25','AA','381'),('1987-10-25','AA','396'),('1987-10-25','AA','397'),('1987-10-25','AA','397'),('1987-10-25','AA','417'),('1987-10-25','AA','417'),('1987-10-25','AA','446'),('1987-10-25','AA','451'),('1987-10-25','AA','460'),('1987-10-25','AA','460'),('1987-10-25','AA','491'),('1987-10-25','AA','491'),('1987-10-25','AA','504'),('1987-10-25','AA','504'),('1987-10-25','AA','519'),('1987-10-25','AA','519'),('1987-10-25','AA','523'),('1987-10-25','AA','523'),('1987-10-25','AA','525'),('1987-10-25','AA','525'),('1987-10-25','AA','525'),('1987-10-25','AA','533'),('1987-10-25','AA','533'),('1987-10-25','AA','533'),('1987-10-25','AA','546'),('1987-10-25','AA','546'),('1987-10-25','AA','546'),('1987-10-25','AA','546'),('1987-10-25','AA','556'),('1987-10-25','AA','556'),('1987-10-25','AA','556'),('1987-10-25','AA','597'),('1987-10-25','AA','597'),('1987-10-25','AA','597'),('1987-10-25','AA','601'),('1987-10-25','AA','627'),('1987-10-25','AA','629'),('1987-10-25','AA','629'),('1987-10-25','AA','670'),('1987-10-25','AA','673'),('1987-10-25','AA','673'),('1987-10-25','AA','680'),('1987-10-25','AA','680'),('1987-10-25','AA','817'),('1987-10-25','AA','817'),('1987-10-25','AA','824'),('1987-10-25','AA','824'),('1987-10-25','AA','824'),('1987-10-25','AA','824'),('1987-10-25','AA','832'),('1987-10-25','AA','832'),('1987-10-25','AA','852'),('1987-10-25','AA','852'),('1987-10-25','AA','866'),('1987-10-25','AA','866'),('1987-10-25','AA','871'),('1987-10-25','AA','871'),('1987-10-25','AA','880'),('1987-10-25','AA','880'),('1987-10-25','AA','880'),('1987-10-25','AA','880'),('1987-10-25','AA','883'),('1987-10-25','AA','883'),('1987-10-25','AA','885'),('1987-10-25','AA','885'),('1987-10-25','AA','885'),('1987-10-25','AA','890'),('1987-10-25','AA','893'),('1987-10-25','AA','893'),('1987-10-25','AA','905'),('1987-10-25','AA','905'),('1987-10-25','AA','915'),('1987-10-25','AA','929'),('1987-10-25','AA','929'),('1987-10-25','AA','936'),('1987-10-25','AA','936'),('1987-10-25','AA','937'),('1987-10-25','AA','937'),('1987-10-25','AA','955'),('1987-10-25','AA','955'),('1987-10-25','AA','1002'),('1987-10-25','AA','1002'),('1987-10-25','AA','1004'),('1987-10-25','AA','1004'),('1987-10-25','AA','1015'),('1987-10-25','AA','1015'),('1987-10-25','AA','1021'),('1987-10-25','AA','1021'),('1987-10-25','AA','1041'),('1987-10-25','AA','1041'),('1987-10-25','AA','1046'),('1987-10-25','AA','1046'),('1987-10-25','AA','1048'),('1987-10-25','AA','1048'),('1987-10-25','AA','1061'),('1987-10-25','AA','1061'),('1987-10-25','AA','1088'),('1987-10-25','AA','1088'),('1987-10-25','AA','2033'),('1987-10-25','AA','2033'),('1987-10-25','AA','2050'),('1987-10-25','AA','2058'),('1987-10-25','AA','2071'),('1987-10-25','AA','2071'),('1987-10-25','AA','2086'),('1987-10-25','AA','2111'),('1987-10-25','AA','2123'),('1987-10-25','AA','2123'),('1987-10-25','AA','2147'),('1987-10-25','AA','2199'),('1987-10-25','AA','2199'),('1987-10-25','AA','2207'),('1987-10-25','AA','2207'),('1987-10-25','AA','2230'),('1987-10-25','AA','2245'),('1987-10-25','AA','2251'),('1987-10-25','AA','2251'),('1987-10-25','AA','2275'),('1987-10-25','AA','2278'),('1987-10-25','AA','2357'),('1987-10-25','AA','2361'),('1987-10-25','AA','2490'),('1987-10-25','AA','2528'),('1987-10-25','AA','2528'),('1987-10-25','AA','2735'),('1987-10-25','AA','2735'),('1987-10-25','AA','2751'),('1987-10-25','AL','2'),('1987-10-25','AL','2'),('1987-10-25','AL','7'),('1987-10-25','AL','7'),('1987-10-25','AL','26'),('1987-10-25','AL','26'),('1987-10-25','AL','34'),('1987-10-25','AL','34'),('1987-10-25','AL','36'),('1987-10-25','AL','36'),('1987-10-25','AL','45'),('1987-10-25','AL','45'),('1987-10-25','AL','45'),('1987-10-25','AL','91'),('1987-10-25','AL','91'),('1987-10-25','AL','104'),('1987-10-25','AL','104'),('1987-10-25','AL','104'),('1987-10-25','AL','112'),('1987-10-25','AL','123'),('1987-10-25','AL','149'),('1987-10-25','AL','160'),('1987-10-25','AL','160'),('1987-10-25','AL','165'),('1987-10-25','AL','171'),('1987-10-25','AL','171'),('1987-10-25','AL','176'),('1987-10-25','AL','176'),('1987-10-25','AL','179'),('1987-10-25','AL','215'),('1987-10-25','AL','231'),('1987-10-25','AL','263'),('1987-10-25','AL','263'),('1987-10-25','AL','281'),('1987-10-25','AL','281'),('1987-10-25','AL','309'),('1987-10-25','AL','309'),('1987-10-25','AL','341'),('1987-10-25','AL','344'),('1987-10-25','AL','344'),('1987-10-25','AL','357'),('1987-10-25','AL','357'),('1987-10-25','AL','368'),('1987-10-25','AL','396'),('1987-10-25','AL','416'),('1987-10-25','AL','416'),('1987-10-25','AL','417'),('1987-10-25','AL','438'),('1987-10-25','AL','438'),('1987-10-25','AL','446'),('1987-10-25','AL','451'),('1987-10-25','AL','491'),('1987-10-25','AL','523'),('1987-10-25','AL','523'),('1987-10-25','AL','523'),('1987-10-25','AL','525'),('1987-10-25','AL','525'),('1987-10-25','AL','533'),('1987-10-25','AL','533'),('1987-10-25','AL','546'),('1987-10-25','AL','546'),('1987-10-25','AL','556'),('1987-10-25','AL','556'),('1987-10-25','AL','601'),('1987-10-25','AL','601'),('1987-10-25','AL','627'),('1987-10-25','AL','629'),('1987-10-25','AL','670'),('1987-10-25','AL','670'),('1987-10-25','AL','670'),('1987-10-25','AL','673'),('1987-10-25','AL','680'),('1987-10-25','AL','937'),('1987-10-25','AL','937'),('1987-10-25','AL','955'),('1987-10-26','AA','2'),('1987-10-26','AA','2'),('1987-10-26','AA','2'),('1987-10-26','AA','7'),('1987-10-26','AA','7'),('1987-10-26','AA','26'),('1987-10-26','AA','34'),('1987-10-26','AA','36'),('1987-10-26','AA','91'),('1987-10-26','AA','101'),('1987-10-26','AA','101'),('1987-10-26','AA','109'),('1987-10-26','AA','109'),('1987-10-26','AA','112'),('1987-10-26','AA','123'),('1987-10-26','AA','123'),('1987-10-26','AA','160'),('1987-10-26','AA','165'),('1987-10-26','AA','165'),('1987-10-26','AA','165'),('1987-10-26','AA','176'),('1987-10-26','AA','176'),('1987-10-26','AA','176'),('1987-10-26','AA','176'),('1987-10-26','AA','179'),('1987-10-26','AA','179'),('1987-10-26','AA','215'),('1987-10-26','AA','215'),('1987-10-26','AA','231'),('1987-10-26','AA','231'),('1987-10-26','AA','263'),('1987-10-26','AA','263'),('1987-10-26','AA','268'),('1987-10-26','AA','268'),('1987-10-26','AA','281'),('1987-10-26','AA','287'),('1987-10-26','AA','287'),('1987-10-26','AA','309'),('1987-10-26','AA','309'),('1987-10-26','AA','309'),('1987-10-26','AA','341'),('1987-10-26','AA','344'),('1987-10-26','AA','344'),('1987-10-26','AA','347'),('1987-10-26','AA','347'),('1987-10-26','AA','368'),('1987-10-26','AA','381'),('1987-10-26','AA','381'),('1987-10-26','AA','381'),('1987-10-26','AA','396'),('1987-10-26','AA','396'),('1987-10-26','AA','397'),('1987-10-26','AA','397'),('1987-10-26','AA','417'),('1987-10-26','AA','417'),('1987-10-26','AA','446'),('1987-10-26','AA','451'),('1987-10-26','AA','451'),('1987-10-26','AA','491'),('1987-10-26','AA','504'),('1987-10-26','AA','504'),('1987-10-26','AA','519'),('1987-10-26','AA','523'),('1987-10-26','AA','523'),('1987-10-26','AA','525'),('1987-10-26','AA','525'),('1987-10-26','AA','525'),('1987-10-26','AA','533'),('1987-10-26','AA','533'),('1987-10-26','AA','533'),('1987-10-26','AA','546'),('1987-10-26','AA','546'),('1987-10-26','AA','546'),('1987-10-26','AA','546'),('1987-10-26','AA','556'),('1987-10-26','AA','556'),('1987-10-26','AA','556'),('1987-10-26','AA','597'),('1987-10-26','AA','597'),('1987-10-26','AA','597'),('1987-10-26','AA','601'),('1987-10-26','AA','601'),('1987-10-26','AA','627'),('1987-10-26','AA','629'),('1987-10-26','AA','629'),('1987-10-26','AA','670'),('1987-10-26','AA','673'),('1987-10-26','AA','673'),('1987-10-26','AA','680'),('1987-10-26','AA','680'),('1987-10-26','AA','817'),('1987-10-26','AA','817'),('1987-10-26','AA','824'),('1987-10-26','AA','824'),('1987-10-26','AA','832'),('1987-10-26','AA','832'),('1987-10-26','AA','852'),('1987-10-26','AA','852'),('1987-10-26','AA','866'),('1987-10-26','AA','866'),('1987-10-26','AA','871'),('1987-10-26','AA','871'),('1987-10-26','AA','880'),('1987-10-26','AA','880'),('1987-10-26','AA','880'),('1987-10-26','AA','880'),('1987-10-26','AA','883'),('1987-10-26','AA','883'),('1987-10-26','AA','885'),('1987-10-26','AA','885'),('1987-10-26','AA','885'),('1987-10-26','AA','890'),('1987-10-26','AA','890'),('1987-10-26','AA','893'),('1987-10-26','AA','893'),('1987-10-26','AA','905'),('1987-10-26','AA','905'),('1987-10-26','AA','915'),('1987-10-26','AA','929'),('1987-10-26','AA','929'),('1987-10-26','AA','936'),('1987-10-26','AA','936'),('1987-10-26','AA','937'),('1987-10-26','AA','937'),('1987-10-26','AA','955'),('1987-10-26','AA','955'),('1987-10-26','AA','966'),('1987-10-26','AA','1002'),('1987-10-26','AA','1002'),('1987-10-26','AA','1004'),('1987-10-26','AA','1004'),('1987-10-26','AA','1015'),('1987-10-26','AA','1015'),('1987-10-26','AA','1021'),('1987-10-26','AA','1021'),('1987-10-26','AA','1046'),('1987-10-26','AA','1046'),('1987-10-26','AA','1048'),('1987-10-26','AA','1048'),('1987-10-26','AA','1061'),('1987-10-26','AA','1061'),('1987-10-26','AA','1088'),('1987-10-26','AA','1088'),('1987-10-26','AA','2033'),('1987-10-26','AA','2033'),('1987-10-26','AA','2050'),('1987-10-26','AA','2058'),('1987-10-26','AA','2071'),('1987-10-26','AA','2071'),('1987-10-26','AA','2086'),('1987-10-26','AA','2105'),('1987-10-26','AA','2111'),('1987-10-26','AA','2123'),('1987-10-26','AA','2123'),('1987-10-26','AA','2147'),('1987-10-26','AA','2147'),('1987-10-26','AA','2199'),('1987-10-26','AA','2199'),('1987-10-26','AA','2207'),('1987-10-26','AA','2207'),('1987-10-26','AA','2230'),('1987-10-26','AA','2245'),('1987-10-26','AA','2251'),('1987-10-26','AA','2251'),('1987-10-26','AA','2275'),('1987-10-26','AA','2278'),('1987-10-26','AA','2351'),('1987-10-26','AA','2357'),('1987-10-26','AA','2361'),('1987-10-26','AA','2490'),('1987-10-26','AA','2528'),('1987-10-26','AA','2528'),('1987-10-26','AA','2735'),('1987-10-26','AA','2735'),('1987-10-26','AA','2751'),('1987-10-26','AL','2'),('1987-10-26','AL','2'),('1987-10-26','AL','7'),('1987-10-26','AL','7'),('1987-10-26','AL','26'),('1987-10-26','AL','26'),('1987-10-26','AL','34'),('1987-10-26','AL','34'),('1987-10-26','AL','36'),('1987-10-26','AL','36'),('1987-10-26','AL','45'),('1987-10-26','AL','45'),('1987-10-26','AL','45'),('1987-10-26','AL','91'),('1987-10-26','AL','91'),('1987-10-26','AL','104'),('1987-10-26','AL','104'),('1987-10-26','AL','104'),('1987-10-26','AL','109'),('1987-10-26','AL','112'),('1987-10-26','AL','112'),('1987-10-26','AL','123'),('1987-10-26','AL','149'),('1987-10-26','AL','160'),('1987-10-26','AL','160'),('1987-10-26','AL','165'),('1987-10-26','AL','171'),('1987-10-26','AL','171'),('1987-10-26','AL','176'),('1987-10-26','AL','176'),('1987-10-26','AL','179'),('1987-10-26','AL','215'),('1987-10-26','AL','231'),('1987-10-26','AL','263'),('1987-10-26','AL','263'),('1987-10-26','AL','268'),('1987-10-26','AL','268'),('1987-10-26','AL','268'),('1987-10-26','AL','281'),('1987-10-26','AL','281'),('1987-10-26','AL','287'),('1987-10-26','AL','287'),('1987-10-26','AL','309'),('1987-10-26','AL','309'),('1987-10-26','AL','341'),('1987-10-26','AL','344'),('1987-10-26','AL','357'),('1987-10-26','AL','357'),('1987-10-26','AL','368'),('1987-10-26','AL','381'),('1987-10-26','AL','396'),('1987-10-26','AL','397'),('1987-10-26','AL','397'),('1987-10-26','AL','416'),('1987-10-26','AL','416'),('1987-10-26','AL','417'),('1987-10-26','AL','438'),('1987-10-26','AL','438'),('1987-10-26','AL','446'),('1987-10-26','AL','451'),('1987-10-26','AL','451'),('1987-10-26','AL','491'),('1987-10-26','AL','491'),('1987-10-26','AL','523'),('1987-10-26','AL','523'),('1987-10-26','AL','523'),('1987-10-26','AL','525'),('1987-10-26','AL','533'),('1987-10-26','AL','533'),('1987-10-26','AL','546'),('1987-10-26','AL','546'),('1987-10-26','AL','556'),('1987-10-26','AL','556'),('1987-10-26','AL','601'),('1987-10-26','AL','601'),('1987-10-26','AL','627'),('1987-10-26','AL','629'),('1987-10-26','AL','670'),('1987-10-26','AL','670'),('1987-10-26','AL','670'),('1987-10-26','AL','673'),('1987-10-26','AL','680'),('1987-10-27','AA','2'),('1987-10-27','AA','2'),('1987-10-27','AA','2'),('1987-10-27','AA','7'),('1987-10-27','AA','26'),('1987-10-27','AA','34'),('1987-10-27','AA','36'),('1987-10-27','AA','91'),('1987-10-27','AA','101'),('1987-10-27','AA','101'),('1987-10-27','AA','109'),('1987-10-27','AA','109'),('1987-10-27','AA','112'),('1987-10-27','AA','123'),('1987-10-27','AA','123'),('1987-10-27','AA','160'),('1987-10-27','AA','165'),('1987-10-27','AA','165'),('1987-10-27','AA','165'),('1987-10-27','AA','176'),('1987-10-27','AA','176'),('1987-10-27','AA','176'),('1987-10-27','AA','176'),('1987-10-27','AA','179'),('1987-10-27','AA','179'),('1987-10-27','AA','215'),('1987-10-27','AA','215'),('1987-10-27','AA','231'),('1987-10-27','AA','263'),('1987-10-27','AA','263'),('1987-10-27','AA','268'),('1987-10-27','AA','268'),('1987-10-27','AA','281'),('1987-10-27','AA','287'),('1987-10-27','AA','287'),('1987-10-27','AA','309'),('1987-10-27','AA','309'),('1987-10-27','AA','309'),('1987-10-27','AA','341'),('1987-10-27','AA','344'),('1987-10-27','AA','344'),('1987-10-27','AA','347'),('1987-10-27','AA','347'),('1987-10-27','AA','368'),('1987-10-27','AA','381'),('1987-10-27','AA','381'),('1987-10-27','AA','381'),('1987-10-27','AA','396'),('1987-10-27','AA','396'),('1987-10-27','AA','397'),('1987-10-27','AA','397'),('1987-10-27','AA','417'),('1987-10-27','AA','417'),('1987-10-27','AA','446'),('1987-10-27','AA','451'),('1987-10-27','AA','451'),('1987-10-27','AA','460'),('1987-10-27','AA','460'),('1987-10-27','AA','491'),('1987-10-27','AA','504'),('1987-10-27','AA','504'),('1987-10-27','AA','519'),('1987-10-27','AA','519'),('1987-10-27','AA','523'),('1987-10-27','AA','523'),('1987-10-27','AA','525'),('1987-10-27','AA','525'),('1987-10-27','AA','525'),('1987-10-27','AA','533'),('1987-10-27','AA','533'),('1987-10-27','AA','533'),('1987-10-27','AA','546'),('1987-10-27','AA','546'),('1987-10-27','AA','546'),('1987-10-27','AA','546'),('1987-10-27','AA','556'),('1987-10-27','AA','556'),('1987-10-27','AA','556'),('1987-10-27','AA','597'),('1987-10-27','AA','597'),('1987-10-27','AA','597'),('1987-10-27','AA','601'),('1987-10-27','AA','601'),('1987-10-27','AA','627'),('1987-10-27','AA','629'),('1987-10-27','AA','629'),('1987-10-27','AA','670'),('1987-10-27','AA','673'),('1987-10-27','AA','673'),('1987-10-27','AA','680'),('1987-10-27','AA','680'),('1987-10-27','AA','817'),('1987-10-27','AA','817'),('1987-10-27','AA','824'),('1987-10-27','AA','824'),('1987-10-27','AA','824'),('1987-10-27','AA','824'),('1987-10-27','AA','832'),('1987-10-27','AA','832'),('1987-10-27','AA','852'),('1987-10-27','AA','852'),('1987-10-27','AA','866'),('1987-10-27','AA','866'),('1987-10-27','AA','871'),('1987-10-27','AA','871'),('1987-10-27','AA','880'),('1987-10-27','AA','880'),('1987-10-27','AA','880'),('1987-10-27','AA','880'),('1987-10-27','AA','883'),('1987-10-27','AA','883'),('1987-10-27','AA','885'),('1987-10-27','AA','885'),('1987-10-27','AA','885'),('1987-10-27','AA','890'),('1987-10-27','AA','890'),('1987-10-27','AA','893'),('1987-10-27','AA','893'),('1987-10-27','AA','905'),('1987-10-27','AA','905'),('1987-10-27','AA','915'),('1987-10-27','AA','929'),('1987-10-27','AA','929'),('1987-10-27','AA','936'),('1987-10-27','AA','936'),('1987-10-27','AA','937'),('1987-10-27','AA','937'),('1987-10-27','AA','955'),('1987-10-27','AA','955'),('1987-10-27','AA','966'),('1987-10-27','AA','1002'),('1987-10-27','AA','1002'),('1987-10-27','AA','1004'),('1987-10-27','AA','1004'),('1987-10-27','AA','1015'),('1987-10-27','AA','1015'),('1987-10-27','AA','1021'),('1987-10-27','AA','1021'),('1987-10-27','AA','1041'),('1987-10-27','AA','1041'),('1987-10-27','AA','1046'),('1987-10-27','AA','1046'),('1987-10-27','AA','1048'),('1987-10-27','AA','1061'),('1987-10-27','AA','1061'),('1987-10-27','AA','1088'),('1987-10-27','AA','1088'),('1987-10-27','AA','2033'),('1987-10-27','AA','2033'),('1987-10-27','AA','2050'),('1987-10-27','AA','2058'),('1987-10-27','AA','2071'),('1987-10-27','AA','2071'),('1987-10-27','AA','2086'),('1987-10-27','AA','2105'),('1987-10-27','AA','2111'),('1987-10-27','AA','2123'),('1987-10-27','AA','2123'),('1987-10-27','AA','2147'),('1987-10-27','AA','2147'),('1987-10-27','AA','2199'),('1987-10-27','AA','2199'),('1987-10-27','AA','2207'),('1987-10-27','AA','2207'),('1987-10-27','AA','2217'),('1987-10-27','AA','2230'),('1987-10-27','AA','2245'),('1987-10-27','AA','2251'),('1987-10-27','AA','2251'),('1987-10-27','AA','2275'),('1987-10-27','AA','2278'),('1987-10-27','AA','2357'),('1987-10-27','AA','2490'),('1987-10-27','AA','2528'),('1987-10-27','AA','2528'),('1987-10-27','AA','2735'),('1987-10-27','AA','2735'),('1987-10-27','AL','2'),('1987-10-27','AL','2'),('1987-10-27','AL','7'),('1987-10-27','AL','7'),('1987-10-27','AL','26'),('1987-10-27','AL','26'),('1987-10-27','AL','34'),('1987-10-27','AL','34'),('1987-10-27','AL','36'),('1987-10-27','AL','36'),('1987-10-27','AL','45'),('1987-10-27','AL','45'),('1987-10-27','AL','45'),('1987-10-27','AL','91'),('1987-10-27','AL','91'),('1987-10-27','AL','104'),('1987-10-27','AL','104'),('1987-10-27','AL','104'),('1987-10-27','AL','109'),('1987-10-27','AL','112'),('1987-10-27','AL','112'),('1987-10-27','AL','123'),('1987-10-27','AL','149'),('1987-10-27','AL','160'),('1987-10-27','AL','160'),('1987-10-27','AL','165'),('1987-10-27','AL','171'),('1987-10-27','AL','171'),('1987-10-27','AL','176'),('1987-10-27','AL','176'),('1987-10-27','AL','179'),('1987-10-27','AL','215'),('1987-10-27','AL','231'),('1987-10-27','AL','263'),('1987-10-27','AL','263'),('1987-10-27','AL','268'),('1987-10-27','AL','268'),('1987-10-27','AL','268'),('1987-10-27','AL','281'),('1987-10-27','AL','281'),('1987-10-27','AL','287'),('1987-10-27','AL','287'),('1987-10-27','AL','309'),('1987-10-27','AL','309'),('1987-10-27','AL','341'),('1987-10-27','AL','344'),('1987-10-27','AL','344'),('1987-10-27','AL','357'),('1987-10-27','AL','357'),('1987-10-27','AL','368'),('1987-10-27','AL','381'),('1987-10-27','AL','396'),('1987-10-27','AL','397'),('1987-10-27','AL','397'),('1987-10-27','AL','416'),('1987-10-27','AL','416'),('1987-10-27','AL','417'),('1987-10-27','AL','438'),('1987-10-27','AL','438'),('1987-10-27','AL','446'),('1987-10-27','AL','451'),('1987-10-27','AL','451'),('1987-10-27','AL','491'),('1987-10-27','AL','491'),('1987-10-27','AL','523'),('1987-10-27','AL','523'),('1987-10-27','AL','523'),('1987-10-27','AL','525'),('1987-10-27','AL','525'),('1987-10-27','AL','533'),('1987-10-27','AL','533'),('1987-10-27','AL','546'),('1987-10-27','AL','546'),('1987-10-27','AL','556'),('1987-10-27','AL','556'),('1987-10-27','AL','601'),('1987-10-27','AL','601'),('1987-10-27','AL','627'),('1987-10-27','AL','629'),('1987-10-27','AL','670'),('1987-10-27','AL','670'),('1987-10-27','AL','670'),('1987-10-27','AL','673'),('1987-10-27','AL','680'),('1987-10-28','AA','2'),('1987-10-28','AA','2'),('1987-10-28','AA','2'),('1987-10-28','AA','7'),('1987-10-28','AA','7'),('1987-10-28','AA','26'),('1987-10-28','AA','34'),('1987-10-28','AA','36'),('1987-10-28','AA','91'),('1987-10-28','AA','101'),('1987-10-28','AA','101'),('1987-10-28','AA','109'),('1987-10-28','AA','109'),('1987-10-28','AA','112'),('1987-10-28','AA','123'),('1987-10-28','AA','123'),('1987-10-28','AA','165'),('1987-10-28','AA','165'),('1987-10-28','AA','165'),('1987-10-28','AA','176'),('1987-10-28','AA','176'),('1987-10-28','AA','176'),('1987-10-28','AA','176'),('1987-10-28','AA','179'),('1987-10-28','AA','179'),('1987-10-28','AA','215'),('1987-10-28','AA','215'),('1987-10-28','AA','231'),('1987-10-28','AA','231'),('1987-10-28','AA','263'),('1987-10-28','AA','268'),('1987-10-28','AA','268'),('1987-10-28','AA','281'),('1987-10-28','AA','287'),('1987-10-28','AA','287'),('1987-10-28','AA','309'),('1987-10-28','AA','309'),('1987-10-28','AA','309'),('1987-10-28','AA','341'),('1987-10-28','AA','344'),('1987-10-28','AA','344'),('1987-10-28','AA','347'),('1987-10-28','AA','347'),('1987-10-28','AA','368'),('1987-10-28','AA','381'),('1987-10-28','AA','381'),('1987-10-28','AA','381'),('1987-10-28','AA','396'),('1987-10-28','AA','396'),('1987-10-28','AA','397'),('1987-10-28','AA','397'),('1987-10-28','AA','417'),('1987-10-28','AA','417'),('1987-10-28','AA','446'),('1987-10-28','AA','451'),('1987-10-28','AA','451'),('1987-10-28','AA','460'),('1987-10-28','AA','460'),('1987-10-28','AA','491'),('1987-10-28','AA','504'),('1987-10-28','AA','504'),('1987-10-28','AA','519'),('1987-10-28','AA','519'),('1987-10-28','AA','523'),('1987-10-28','AA','523'),('1987-10-28','AA','525'),('1987-10-28','AA','525'),('1987-10-28','AA','525'),('1987-10-28','AA','533'),('1987-10-28','AA','533'),('1987-10-28','AA','533'),('1987-10-28','AA','546'),('1987-10-28','AA','546'),('1987-10-28','AA','546'),('1987-10-28','AA','546'),('1987-10-28','AA','556'),('1987-10-28','AA','556'),('1987-10-28','AA','556'),('1987-10-28','AA','597'),('1987-10-28','AA','597'),('1987-10-28','AA','597'),('1987-10-28','AA','601'),('1987-10-28','AA','601'),('1987-10-28','AA','627'),('1987-10-28','AA','629'),('1987-10-28','AA','629'),('1987-10-28','AA','670'),('1987-10-28','AA','673'),('1987-10-28','AA','673'),('1987-10-28','AA','680'),('1987-10-28','AA','680'),('1987-10-28','AA','817'),('1987-10-28','AA','817'),('1987-10-28','AA','824'),('1987-10-28','AA','824'),('1987-10-28','AA','824'),('1987-10-28','AA','832'),('1987-10-28','AA','832'),('1987-10-28','AA','852'),('1987-10-28','AA','852'),('1987-10-28','AA','866'),('1987-10-28','AA','866'),('1987-10-28','AA','871'),('1987-10-28','AA','871'),('1987-10-28','AA','880'),('1987-10-28','AA','880'),('1987-10-28','AA','880'),('1987-10-28','AA','880'),('1987-10-28','AA','883'),('1987-10-28','AA','883'),('1987-10-28','AA','885'),('1987-10-28','AA','885'),('1987-10-28','AA','890'),('1987-10-28','AA','890'),('1987-10-28','AA','893'),('1987-10-28','AA','893'),('1987-10-28','AA','905'),('1987-10-28','AA','905'),('1987-10-28','AA','915'),('1987-10-28','AA','929'),('1987-10-28','AA','929'),('1987-10-28','AA','936'),('1987-10-28','AA','936'),('1987-10-28','AA','937'),('1987-10-28','AA','937'),('1987-10-28','AA','955'),('1987-10-28','AA','955'),('1987-10-28','AA','966'),('1987-10-28','AA','1002'),('1987-10-28','AA','1002'),('1987-10-28','AA','1004'),('1987-10-28','AA','1004'),('1987-10-28','AA','1015'),('1987-10-28','AA','1021'),('1987-10-28','AA','1021'),('1987-10-28','AA','1041'),('1987-10-28','AA','1041'),('1987-10-28','AA','1046'),('1987-10-28','AA','1046'),('1987-10-28','AA','1048'),('1987-10-28','AA','1048'),('1987-10-28','AA','1061'),('1987-10-28','AA','1061'),('1987-10-28','AA','1088'),('1987-10-28','AA','1088'),('1987-10-28','AA','2033'),('1987-10-28','AA','2033'),('1987-10-28','AA','2050'),('1987-10-28','AA','2058'),('1987-10-28','AA','2071'),('1987-10-28','AA','2071'),('1987-10-28','AA','2086'),('1987-10-28','AA','2105'),('1987-10-28','AA','2111'),('1987-10-28','AA','2123'),('1987-10-28','AA','2123'),('1987-10-28','AA','2147'),('1987-10-28','AA','2199'),('1987-10-28','AA','2199'),('1987-10-28','AA','2207'),('1987-10-28','AA','2207'),('1987-10-28','AA','2217'),('1987-10-28','AA','2230'),('1987-10-28','AA','2245'),('1987-10-28','AA','2251'),('1987-10-28','AA','2251'),('1987-10-28','AA','2275'),('1987-10-28','AA','2278'),('1987-10-28','AA','2351'),('1987-10-28','AA','2361'),('1987-10-28','AA','2490'),('1987-10-28','AA','2528'),('1987-10-28','AA','2528'),('1987-10-28','AA','2751'),('1987-10-28','AL','2'),('1987-10-28','AL','2'),('1987-10-28','AL','7'),('1987-10-28','AL','7'),('1987-10-28','AL','26'),('1987-10-28','AL','34'),('1987-10-28','AL','34'),('1987-10-28','AL','45'),('1987-10-28','AL','91'),('1987-10-28','AL','91'),('1987-10-28','AL','104'),('1987-10-28','AL','104'),('1987-10-28','AL','104'),('1987-10-28','AL','109'),('1987-10-28','AL','112'),('1987-10-28','AL','112'),('1987-10-28','AL','123'),('1987-10-28','AL','149'),('1987-10-28','AL','160'),('1987-10-28','AL','160'),('1987-10-28','AL','165'),('1987-10-28','AL','171'),('1987-10-28','AL','171'),('1987-10-28','AL','176'),('1987-10-28','AL','176'),('1987-10-28','AL','179'),('1987-10-28','AL','215'),('1987-10-28','AL','231'),('1987-10-28','AL','263'),('1987-10-28','AL','263'),('1987-10-28','AL','268'),('1987-10-28','AL','268'),('1987-10-28','AL','268'),('1987-10-28','AL','281'),('1987-10-28','AL','281'),('1987-10-28','AL','287'),('1987-10-28','AL','287'),('1987-10-28','AL','309'),('1987-10-28','AL','309'),('1987-10-28','AL','341'),('1987-10-28','AL','344'),('1987-10-28','AL','344'),('1987-10-28','AL','357'),('1987-10-28','AL','357'),('1987-10-28','AL','368'),('1987-10-28','AL','381'),('1987-10-28','AL','396'),('1987-10-28','AL','397'),('1987-10-28','AL','397'),('1987-10-28','AL','416'),('1987-10-28','AL','416'),('1987-10-28','AL','417'),('1987-10-28','AL','438'),('1987-10-28','AL','438'),('1987-10-28','AL','446'),('1987-10-28','AL','451'),('1987-10-28','AL','451'),('1987-10-28','AL','491'),('1987-10-28','AL','491'),('1987-10-28','AL','523'),('1987-10-28','AL','523'),('1987-10-28','AL','523'),('1987-10-28','AL','525'),('1987-10-28','AL','525'),('1987-10-28','AL','533'),('1987-10-28','AL','533'),('1987-10-28','AL','546'),('1987-10-28','AL','546'),('1987-10-28','AL','556'),('1987-10-28','AL','556'),('1987-10-28','AL','601'),('1987-10-28','AL','601'),('1987-10-28','AL','627'),('1987-10-28','AL','629'),('1987-10-28','AL','670'),('1987-10-28','AL','670'),('1987-10-28','AL','670'),('1987-10-28','AL','673'),('1987-10-28','AL','680'),('1987-10-29','AA','2'),('1987-10-29','AA','2'),('1987-10-29','AA','2'),('1987-10-29','AA','7'),('1987-10-29','AA','7'),('1987-10-29','AA','26'),('1987-10-29','AA','34'),('1987-10-29','AA','36'),('1987-10-29','AA','91'),('1987-10-29','AA','101'),('1987-10-29','AA','101'),('1987-10-29','AA','109'),('1987-10-29','AA','109'),('1987-10-29','AA','112'),('1987-10-29','AA','123'),('1987-10-29','AA','123'),('1987-10-29','AA','160'),('1987-10-29','AA','165'),('1987-10-29','AA','165'),('1987-10-29','AA','165'),('1987-10-29','AA','176'),('1987-10-29','AA','176'),('1987-10-29','AA','176'),('1987-10-29','AA','176'),('1987-10-29','AA','179'),('1987-10-29','AA','179'),('1987-10-29','AA','215'),('1987-10-29','AA','215'),('1987-10-29','AA','231'),('1987-10-29','AA','231'),('1987-10-29','AA','263'),('1987-10-29','AA','263'),('1987-10-29','AA','268'),('1987-10-29','AA','268'),('1987-10-29','AA','281'),('1987-10-29','AA','287'),('1987-10-29','AA','287'),('1987-10-29','AA','309'),('1987-10-29','AA','309'),('1987-10-29','AA','309'),('1987-10-29','AA','341'),('1987-10-29','AA','344'),('1987-10-29','AA','344'),('1987-10-29','AA','347'),('1987-10-29','AA','347'),('1987-10-29','AA','368'),('1987-10-29','AA','381'),('1987-10-29','AA','381'),('1987-10-29','AA','381'),('1987-10-29','AA','396'),('1987-10-29','AA','396'),('1987-10-29','AA','397'),('1987-10-29','AA','397'),('1987-10-29','AA','417'),('1987-10-29','AA','417'),('1987-10-29','AA','451'),('1987-10-29','AA','451'),('1987-10-29','AA','460'),('1987-10-29','AA','460'),('1987-10-29','AA','491'),('1987-10-29','AA','504'),('1987-10-29','AA','504'),('1987-10-29','AA','519'),('1987-10-29','AA','519'),('1987-10-29','AA','523'),('1987-10-29','AA','523'),('1987-10-29','AA','525'),('1987-10-29','AA','525'),('1987-10-29','AA','525'),('1987-10-29','AA','533'),('1987-10-29','AA','533'),('1987-10-29','AA','533'),('1987-10-29','AA','546'),('1987-10-29','AA','546'),('1987-10-29','AA','546'),('1987-10-29','AA','546'),('1987-10-29','AA','556'),('1987-10-29','AA','556'),('1987-10-29','AA','556'),('1987-10-29','AA','597'),('1987-10-29','AA','597'),('1987-10-29','AA','597'),('1987-10-29','AA','601'),('1987-10-29','AA','601'),('1987-10-29','AA','627'),('1987-10-29','AA','629'),('1987-10-29','AA','670'),('1987-10-29','AA','673'),('1987-10-29','AA','680'),('1987-10-29','AA','680'),('1987-10-29','AA','817'),('1987-10-29','AA','817'),('1987-10-29','AA','824'),('1987-10-29','AA','824'),('1987-10-29','AA','824'),('1987-10-29','AA','824'),('1987-10-29','AA','832'),('1987-10-29','AA','832'),('1987-10-29','AA','852'),('1987-10-29','AA','852'),('1987-10-29','AA','866'),('1987-10-29','AA','866'),('1987-10-29','AA','871'),('1987-10-29','AA','871'),('1987-10-29','AA','880'),('1987-10-29','AA','880'),('1987-10-29','AA','880'),('1987-10-29','AA','880'),('1987-10-29','AA','883'),('1987-10-29','AA','883'),('1987-10-29','AA','885'),('1987-10-29','AA','885'),('1987-10-29','AA','885'),('1987-10-29','AA','890'),('1987-10-29','AA','890'),('1987-10-29','AA','893'),('1987-10-29','AA','893'),('1987-10-29','AA','905'),('1987-10-29','AA','915'),('1987-10-29','AA','929'),('1987-10-29','AA','929'),('1987-10-29','AA','936'),('1987-10-29','AA','936'),('1987-10-29','AA','937'),('1987-10-29','AA','937'),('1987-10-29','AA','955'),('1987-10-29','AA','955'),('1987-10-29','AA','966'),('1987-10-29','AA','1002'),('1987-10-29','AA','1002'),('1987-10-29','AA','1004'),('1987-10-29','AA','1004'),('1987-10-29','AA','1015'),('1987-10-29','AA','1015'),('1987-10-29','AA','1021'),('1987-10-29','AA','1021'),('1987-10-29','AA','1041'),('1987-10-29','AA','1041'),('1987-10-29','AA','1046'),('1987-10-29','AA','1048'),('1987-10-29','AA','1048'),('1987-10-29','AA','1061'),('1987-10-29','AA','1061'),('1987-10-29','AA','1088'),('1987-10-29','AA','1088'),('1987-10-29','AA','2033'),('1987-10-29','AA','2033'),('1987-10-29','AA','2050'),('1987-10-29','AA','2058'),('1987-10-29','AA','2071'),('1987-10-29','AA','2071'),('1987-10-29','AA','2086'),('1987-10-29','AA','2105'),('1987-10-29','AA','2111'),('1987-10-29','AA','2123'),('1987-10-29','AA','2123'),('1987-10-29','AA','2147'),('1987-10-29','AA','2147'),('1987-10-29','AA','2199'),('1987-10-29','AA','2199'),('1987-10-29','AA','2207'),('1987-10-29','AA','2207'),('1987-10-29','AA','2217'),('1987-10-29','AA','2230'),('1987-10-29','AA','2251'),('1987-10-29','AA','2251'),('1987-10-29','AA','2275'),('1987-10-29','AA','2278'),('1987-10-29','AA','2351'),('1987-10-29','AA','2357'),('1987-10-29','AA','2361'),('1987-10-29','AA','2490'),('1987-10-29','AA','2528'),('1987-10-29','AA','2735'),('1987-10-29','AA','2735'),('1987-10-29','AA','2751'),('1987-10-29','AL','2'),('1987-10-29','AL','2'),('1987-10-29','AL','7'),('1987-10-29','AL','7'),('1987-10-29','AL','26'),('1987-10-29','AL','26'),('1987-10-29','AL','34'),('1987-10-29','AL','34'),('1987-10-29','AL','36'),('1987-10-29','AL','36'),('1987-10-29','AL','45'),('1987-10-29','AL','45'),('1987-10-29','AL','45'),('1987-10-29','AL','91'),('1987-10-29','AL','91'),('1987-10-29','AL','104'),('1987-10-29','AL','109'),('1987-10-29','AL','112'),('1987-10-29','AL','112'),('1987-10-29','AL','123'),('1987-10-29','AL','149'),('1987-10-29','AL','160'),('1987-10-29','AL','160'),('1987-10-29','AL','165'),('1987-10-29','AL','171'),('1987-10-29','AL','171'),('1987-10-29','AL','176'),('1987-10-29','AL','176'),('1987-10-29','AL','179'),('1987-10-29','AL','215'),('1987-10-29','AL','231'),('1987-10-29','AL','263'),('1987-10-29','AL','263'),('1987-10-29','AL','268'),('1987-10-29','AL','268'),('1987-10-29','AL','268'),('1987-10-29','AL','281'),('1987-10-29','AL','281'),('1987-10-29','AL','287'),('1987-10-29','AL','287'),('1987-10-29','AL','309'),('1987-10-29','AL','309'),('1987-10-29','AL','341'),('1987-10-29','AL','344'),('1987-10-29','AL','344'),('1987-10-29','AL','357'),('1987-10-29','AL','357'),('1987-10-29','AL','368'),('1987-10-29','AL','381'),('1987-10-29','AL','396'),('1987-10-29','AL','397'),('1987-10-29','AL','397'),('1987-10-29','AL','416'),('1987-10-29','AL','416'),('1987-10-29','AL','417'),('1987-10-29','AL','438'),('1987-10-29','AL','438'),('1987-10-29','AL','446'),('1987-10-29','AL','451'),('1987-10-29','AL','451'),('1987-10-29','AL','491'),('1987-10-29','AL','491'),('1987-10-29','AL','523'),('1987-10-29','AL','523'),('1987-10-29','AL','523'),('1987-10-29','AL','525'),('1987-10-29','AL','525'),('1987-10-29','AL','533'),('1987-10-29','AL','533'),('1987-10-29','AL','546'),('1987-10-29','AL','546'),('1987-10-29','AL','556'),('1987-10-29','AL','556'),('1987-10-29','AL','601'),('1987-10-29','AL','601'),('1987-10-29','AL','627'),('1987-10-29','AL','629'),('1987-10-29','AL','670'),('1987-10-29','AL','670'),('1987-10-29','AL','670'),('1987-10-29','AL','673'),('1987-10-29','AL','680'),('1987-10-30','AA','2'),('1987-10-30','AA','2'),('1987-10-30','AA','2'),('1987-10-30','AA','7'),('1987-10-30','AA','7'),('1987-10-30','AA','26'),('1987-10-30','AA','34'),('1987-10-30','AA','91'),('1987-10-30','AA','101'),('1987-10-30','AA','101'),('1987-10-30','AA','109'),('1987-10-30','AA','109'),('1987-10-30','AA','109'),('1987-10-30','AA','112'),('1987-10-30','AA','123'),('1987-10-30','AA','165'),('1987-10-30','AA','165'),('1987-10-30','AA','165'),('1987-10-30','AA','176'),('1987-10-30','AA','176'),('1987-10-30','AA','176'),('1987-10-30','AA','176'),('1987-10-30','AA','179'),('1987-10-30','AA','179'),('1987-10-30','AA','215'),('1987-10-30','AA','215'),('1987-10-30','AA','231'),('1987-10-30','AA','231'),('1987-10-30','AA','263'),('1987-10-30','AA','268'),('1987-10-30','AA','268'),('1987-10-30','AA','281'),('1987-10-30','AA','287'),('1987-10-30','AA','287'),('1987-10-30','AA','309'),('1987-10-30','AA','309'),('1987-10-30','AA','309'),('1987-10-30','AA','344'),('1987-10-30','AA','344'),('1987-10-30','AA','347'),('1987-10-30','AA','347'),('1987-10-30','AA','368'),('1987-10-30','AA','381'),('1987-10-30','AA','381'),('1987-10-30','AA','381'),('1987-10-30','AA','396'),('1987-10-30','AA','396'),('1987-10-30','AA','397'),('1987-10-30','AA','397'),('1987-10-30','AA','417'),('1987-10-30','AA','417'),('1987-10-30','AA','446'),('1987-10-30','AA','451'),('1987-10-30','AA','451'),('1987-10-30','AA','460'),('1987-10-30','AA','460'),('1987-10-30','AA','491'),('1987-10-30','AA','504'),('1987-10-30','AA','504'),('1987-10-30','AA','519'),('1987-10-30','AA','519'),('1987-10-30','AA','523'),('1987-10-30','AA','523'),('1987-10-30','AA','525'),('1987-10-30','AA','525'),('1987-10-30','AA','525'),('1987-10-30','AA','533'),('1987-10-30','AA','533'),('1987-10-30','AA','533'),('1987-10-30','AA','546'),('1987-10-30','AA','546'),('1987-10-30','AA','546'),('1987-10-30','AA','546'),('1987-10-30','AA','556'),('1987-10-30','AA','556'),('1987-10-30','AA','556'),('1987-10-30','AA','597'),('1987-10-30','AA','597'),('1987-10-30','AA','597'),('1987-10-30','AA','601'),('1987-10-30','AA','601'),('1987-10-30','AA','627'),('1987-10-30','AA','629'),('1987-10-30','AA','629'),('1987-10-30','AA','670'),('1987-10-30','AA','673'),('1987-10-30','AA','673'),('1987-10-30','AA','680'),('1987-10-30','AA','817'),('1987-10-30','AA','817'),('1987-10-30','AA','824'),('1987-10-30','AA','824'),('1987-10-30','AA','824'),('1987-10-30','AA','824'),('1987-10-30','AA','832'),('1987-10-30','AA','832'),('1987-10-30','AA','852'),('1987-10-30','AA','866'),('1987-10-30','AA','866'),('1987-10-30','AA','871'),('1987-10-30','AA','871'),('1987-10-30','AA','880'),('1987-10-30','AA','880'),('1987-10-30','AA','880'),('1987-10-30','AA','880'),('1987-10-30','AA','883'),('1987-10-30','AA','883'),('1987-10-30','AA','885'),('1987-10-30','AA','885'),('1987-10-30','AA','885'),('1987-10-30','AA','890'),('1987-10-30','AA','890'),('1987-10-30','AA','893'),('1987-10-30','AA','893'),('1987-10-30','AA','905'),('1987-10-30','AA','905'),('1987-10-30','AA','915'),('1987-10-30','AA','929'),('1987-10-30','AA','929'),('1987-10-30','AA','936'),('1987-10-30','AA','936'),('1987-10-30','AA','937'),('1987-10-30','AA','937'),('1987-10-30','AA','955'),('1987-10-30','AA','955'),('1987-10-30','AA','966'),('1987-10-30','AA','1002'),('1987-10-30','AA','1002'),('1987-10-30','AA','1004'),('1987-10-30','AA','1004'),('1987-10-30','AA','1015'),('1987-10-30','AA','1015'),('1987-10-30','AA','1021'),('1987-10-30','AA','1021'),('1987-10-30','AA','1041'),('1987-10-30','AA','1041'),('1987-10-30','AA','1046'),('1987-10-30','AA','1046'),('1987-10-30','AA','1048'),('1987-10-30','AA','1048'),('1987-10-30','AA','1061'),('1987-10-30','AA','1061'),('1987-10-30','AA','1088'),('1987-10-30','AA','1088'),('1987-10-30','AA','2033'),('1987-10-30','AA','2033'),('1987-10-30','AA','2050'),('1987-10-30','AA','2058'),('1987-10-30','AA','2071'),('1987-10-30','AA','2071'),('1987-10-30','AA','2086'),('1987-10-30','AA','2105'),('1987-10-30','AA','2111'),('1987-10-30','AA','2123'),('1987-10-30','AA','2123'),('1987-10-30','AA','2147'),('1987-10-30','AA','2147'),('1987-10-30','AA','2199'),('1987-10-30','AA','2199'),('1987-10-30','AA','2207'),('1987-10-30','AA','2207'),('1987-10-30','AA','2217'),('1987-10-30','AA','2230'),('1987-10-30','AA','2245'),('1987-10-30','AA','2251'),('1987-10-30','AA','2275'),('1987-10-30','AA','2278'),('1987-10-30','AA','2351'),('1987-10-30','AA','2357'),('1987-10-30','AA','2361'),('1987-10-30','AA','2490'),('1987-10-30','AA','2528'),('1987-10-30','AA','2528'),('1987-10-30','AA','2735'),('1987-10-30','AA','2735'),('1987-10-30','AA','2751'),('1987-10-30','AL','2'),('1987-10-30','AL','2'),('1987-10-30','AL','7'),('1987-10-30','AL','7'),('1987-10-30','AL','26'),('1987-10-30','AL','26'),('1987-10-30','AL','34'),('1987-10-30','AL','34'),('1987-10-30','AL','36'),('1987-10-30','AL','36'),('1987-10-30','AL','45'),('1987-10-30','AL','45'),('1987-10-30','AL','45'),('1987-10-30','AL','91'),('1987-10-30','AL','91'),('1987-10-30','AL','104'),('1987-10-30','AL','104'),('1987-10-30','AL','104'),('1987-10-30','AL','109'),('1987-10-30','AL','112'),('1987-10-30','AL','112'),('1987-10-30','AL','123'),('1987-10-30','AL','149'),('1987-10-30','AL','160'),('1987-10-30','AL','160'),('1987-10-30','AL','165'),('1987-10-30','AL','171'),('1987-10-30','AL','171'),('1987-10-30','AL','176'),('1987-10-30','AL','176'),('1987-10-30','AL','179'),('1987-10-30','AL','215'),('1987-10-30','AL','231'),('1987-10-30','AL','263'),('1987-10-30','AL','263'),('1987-10-30','AL','268'),('1987-10-30','AL','268'),('1987-10-30','AL','268'),('1987-10-30','AL','281'),('1987-10-30','AL','281'),('1987-10-30','AL','287'),('1987-10-30','AL','287'),('1987-10-30','AL','309'),('1987-10-30','AL','309'),('1987-10-30','AL','341'),('1987-10-30','AL','344'),('1987-10-30','AL','344'),('1987-10-30','AL','357'),('1987-10-30','AL','357'),('1987-10-30','AL','368'),('1987-10-30','AL','381'),('1987-10-30','AL','396'),('1987-10-30','AL','397'),('1987-10-30','AL','397'),('1987-10-30','AL','416'),('1987-10-30','AL','416'),('1987-10-30','AL','417'),('1987-10-30','AL','438'),('1987-10-30','AL','438'),('1987-10-30','AL','446'),('1987-10-30','AL','451'),('1987-10-30','AL','451'),('1987-10-30','AL','491'),('1987-10-30','AL','491'),('1987-10-30','AL','523'),('1987-10-30','AL','523'),('1987-10-30','AL','523'),('1987-10-30','AL','525'),('1987-10-30','AL','525'),('1987-10-30','AL','533'),('1987-10-30','AL','533'),('1987-10-30','AL','546'),('1987-10-30','AL','546'),('1987-10-30','AL','556'),('1987-10-30','AL','556'),('1987-10-30','AL','601'),('1987-10-30','AL','601'),('1987-10-30','AL','627'),('1987-10-30','AL','629'),('1987-10-30','AL','670'),('1987-10-30','AL','670'),('1987-10-30','AL','670'),('1987-10-30','AL','673'),('1987-10-30','AL','680'),('1987-10-31','AA','2'),('1987-10-31','AA','2'),('1987-10-31','AA','2'),('1987-10-31','AA','7'),('1987-10-31','AA','7'),('1987-10-31','AA','26'),('1987-10-31','AA','34'),('1987-10-31','AA','36'),('1987-10-31','AA','91'),('1987-10-31','AA','101'),('1987-10-31','AA','101'),('1987-10-31','AA','109'),('1987-10-31','AA','109'),('1987-10-31','AA','112'),('1987-10-31','AA','123'),('1987-10-31','AA','123'),('1987-10-31','AA','160'),('1987-10-31','AA','165'),('1987-10-31','AA','165'),('1987-10-31','AA','165'),('1987-10-31','AA','176'),('1987-10-31','AA','176'),('1987-10-31','AA','176'),('1987-10-31','AA','176'),('1987-10-31','AA','179'),('1987-10-31','AA','179'),('1987-10-31','AA','215'),('1987-10-31','AA','215'),('1987-10-31','AA','231'),('1987-10-31','AA','263'),('1987-10-31','AA','268'),('1987-10-31','AA','268'),('1987-10-31','AA','281'),('1987-10-31','AA','287'),('1987-10-31','AA','287'),('1987-10-31','AA','309'),('1987-10-31','AA','309'),('1987-10-31','AA','309'),('1987-10-31','AA','341'),('1987-10-31','AA','344'),('1987-10-31','AA','344'),('1987-10-31','AA','347'),('1987-10-31','AA','347'),('1987-10-31','AA','368'),('1987-10-31','AA','381'),('1987-10-31','AA','381'),('1987-10-31','AA','381'),('1987-10-31','AA','396'),('1987-10-31','AA','396'),('1987-10-31','AA','397'),('1987-10-31','AA','417'),('1987-10-31','AA','417'),('1987-10-31','AA','446'),('1987-10-31','AA','451'),('1987-10-31','AA','451'),('1987-10-31','AA','491'),('1987-10-31','AA','491'),('1987-10-31','AA','504'),('1987-10-31','AA','504'),('1987-10-31','AA','519'),('1987-10-31','AA','519'),('1987-10-31','AA','523'),('1987-10-31','AA','523'),('1987-10-31','AA','525'),('1987-10-31','AA','525'),('1987-10-31','AA','533'),('1987-10-31','AA','533'),('1987-10-31','AA','546'),('1987-10-31','AA','546'),('1987-10-31','AA','546'),('1987-10-31','AA','546'),('1987-10-31','AA','556'),('1987-10-31','AA','556'),('1987-10-31','AA','556'),('1987-10-31','AA','597'),('1987-10-31','AA','597'),('1987-10-31','AA','597'),('1987-10-31','AA','601'),('1987-10-31','AA','601'),('1987-10-31','AA','627'),('1987-10-31','AA','629'),('1987-10-31','AA','670'),('1987-10-31','AA','673'),('1987-10-31','AA','673'),('1987-10-31','AA','680'),('1987-10-31','AA','680'),('1987-10-31','AA','817'),('1987-10-31','AA','817'),('1987-10-31','AA','824'),('1987-10-31','AA','824'),('1987-10-31','AA','824'),('1987-10-31','AA','832'),('1987-10-31','AA','832'),('1987-10-31','AA','852'),('1987-10-31','AA','852'),('1987-10-31','AA','866'),('1987-10-31','AA','871'),('1987-10-31','AA','871'),('1987-10-31','AA','880'),('1987-10-31','AA','880'),('1987-10-31','AA','880'),('1987-10-31','AA','883'),('1987-10-31','AA','885'),('1987-10-31','AA','885'),('1987-10-31','AA','885'),('1987-10-31','AA','890'),('1987-10-31','AA','890'),('1987-10-31','AA','893'),('1987-10-31','AA','893'),('1987-10-31','AA','905'),('1987-10-31','AA','905'),('1987-10-31','AA','915'),('1987-10-31','AA','929'),('1987-10-31','AA','929'),('1987-10-31','AA','936'),('1987-10-31','AA','936'),('1987-10-31','AA','937'),('1987-10-31','AA','937'),('1987-10-31','AA','955'),('1987-10-31','AA','955'),('1987-10-31','AA','1002'),('1987-10-31','AA','1002'),('1987-10-31','AA','1004'),('1987-10-31','AA','1004'),('1987-10-31','AA','1015'),('1987-10-31','AA','1015'),('1987-10-31','AA','1021'),('1987-10-31','AA','1021'),('1987-10-31','AA','1041'),('1987-10-31','AA','1041'),('1987-10-31','AA','1046'),('1987-10-31','AA','1046'),('1987-10-31','AA','1048'),('1987-10-31','AA','1048'),('1987-10-31','AA','1061'),('1987-10-31','AA','1061'),('1987-10-31','AA','1088'),('1987-10-31','AA','1088'),('1987-10-31','AA','2033'),('1987-10-31','AA','2058'),('1987-10-31','AA','2086'),('1987-10-31','AA','2105'),('1987-10-31','AA','2123'),('1987-10-31','AA','2123'),('1987-10-31','AA','2147'),('1987-10-31','AA','2147'),('1987-10-31','AA','2199'),('1987-10-31','AA','2199'),('1987-10-31','AA','2207'),('1987-10-31','AA','2207'),('1987-10-31','AA','2217'),('1987-10-31','AA','2230'),('1987-10-31','AA','2251'),('1987-10-31','AA','2251'),('1987-10-31','AA','2275'),('1987-10-31','AA','2278'),('1987-10-31','AA','2351'),('1987-10-31','AA','2357'),('1987-10-31','AA','2361'),('1987-10-31','AA','2528'),('1987-10-31','AA','2528'),('1987-10-31','AA','2735'),('1987-10-31','AA','2735'),('1987-10-31','AL','2'),('1987-10-31','AL','2'),('1987-10-31','AL','7'),('1987-10-31','AL','7'),('1987-10-31','AL','26'),('1987-10-31','AL','26'),('1987-10-31','AL','34'),('1987-10-31','AL','34'),('1987-10-31','AL','36'),('1987-10-31','AL','36'),('1987-10-31','AL','91'),('1987-10-31','AL','91'),('1987-10-31','AL','104'),('1987-10-31','AL','104'),('1987-10-31','AL','109'),('1987-10-31','AL','112'),('1987-10-31','AL','112'),('1987-10-31','AL','149'),('1987-10-31','AL','160'),('1987-10-31','AL','160'),('1987-10-31','AL','165'),('1987-10-31','AL','171'),('1987-10-31','AL','171'),('1987-10-31','AL','176'),('1987-10-31','AL','176'),('1987-10-31','AL','179'),('1987-10-31','AL','215'),('1987-10-31','AL','231'),('1987-10-31','AL','263'),('1987-10-31','AL','268'),('1987-10-31','AL','268'),('1987-10-31','AL','268'),('1987-10-31','AL','287'),('1987-10-31','AL','287'),('1987-10-31','AL','309'),('1987-10-31','AL','309'),('1987-10-31','AL','344'),('1987-10-31','AL','344'),('1987-10-31','AL','357'),('1987-10-31','AL','357'),('1987-10-31','AL','381'),('1987-10-31','AL','396'),('1987-10-31','AL','397'),('1987-10-31','AL','397'),('1987-10-31','AL','397'),('1987-10-31','AL','416'),('1987-10-31','AL','417'),('1987-10-31','AL','438'),('1987-10-31','AL','438'),('1987-10-31','AL','451'),('1987-10-31','AL','451'),('1987-10-31','AL','491'),('1987-10-31','AL','491'),('1987-10-31','AL','523'),('1987-10-31','AL','523'),('1987-10-31','AL','525'),('1987-10-31','AL','525'),('1987-10-31','AL','533'),('1987-10-31','AL','546'),('1987-10-31','AL','546'),('1987-10-31','AL','556'),('1987-10-31','AL','556'),('1987-10-31','AL','601'),('1987-10-31','AL','601'),('1987-10-31','AL','627'),('1987-10-31','AL','670'),('1987-10-31','AL','673'),('1987-10-31','AL','680'),('1987-10-31','AL','745'),('1987-10-31','AL','797'),('1987-10-31','AL','905'),('1987-10-31','AL','936'),('1987-10-31','AL','966'),('1987-10-31','AL','982');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6407', () => {
    const query = `INSERT INTO replace VALUES ('2016-06-02', 1, 'version 1', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6408', () => {
    const query = `INSERT INTO replace VALUES ('2016-06-02', 2, 'version 1', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6409', () => {
    const query = `INSERT INTO replace VALUES ('2016-06-02', 1, 'version 0', 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6410', () => {
    const query = `INSERT INTO summing_composite_key VALUES ('2000-01-01', 1, [1,2], ['3','4'], [10,11], [0,1,2], [3,4,5], [-1,-2,-3], [1,10,100]), ('2000-01-01', 1, [2,1], ['4','3'], [20,22], [2,2,1], [5,5,0], [-3,-3,-33], [10,100,1000]), ('2000-01-01', 2, [1,2], ['3','4'], [10,11], [0,1,2], [3,4,5], [-1,-2,-3], [1,10,100]), ('2000-01-01', 2, [2,1,1], ['4','3','3'], [20,22,33], [2,2], [5,5], [-3,-3], [10,100]), ('2000-01-01', 2, [1,2], ['3','4'], [10,11], [0,1,2], [3,4,5], [-1,-2,-3], [1,10,100]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6411', () => {
    const query = `INSERT INTO multi_if_check(col1, col2, col3, col4) VALUES(1, 'A', 'AB', 'ABC');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6412', () => {
    const query = `INSERT INTO multi_if_check(col1, col2, col3, col4) VALUES(2, 'B', 'BC', 'BCD');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6413', () => {
    const query = `INSERT INTO multi_if_check(col1, col2, col3, col4) VALUES(3, 'C', 'CD', 'CDE');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6414', () => {
    const query = `INSERT INTO multi_if_check(col1, col2, col3, col4) VALUES(4, 'D', 'DE', 'DEF');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6415', () => {
    const query = `INSERT INTO multi_if_check(col1, col2, col3, col4) VALUES(5, 'E', 'EF', 'EFG');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6416', () => {
    const query = `INSERT INTO multi_if_check(col1, col2, col3, col4) VALUES(6, 'F', 'FG', 'FGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6417', () => {
    const query = `INSERT INTO multi_if_check(col1, col2, col3, col4) VALUES(7, 'G', 'GH', 'GHI');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6418', () => {
    const query = `INSERT INTO multi_if_check(col1, col2, col3, col4) VALUES(8, 'H', 'HI', 'HIJ');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6419', () => {
    const query = `INSERT INTO multi_if_check(col1, col2, col3, col4) VALUES(9, 'I', 'IJ', 'IJK');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6420', () => {
    const query = `INSERT INTO multi_if_check(col1, col2, col3, col4) VALUES(10, 'J', 'JK', 'JKL');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6421', () => {
    const query = `INSERT INTO multi_if_check(col1, col2, col3, col4, col5, col6, col7) VALUES(1, 'A', 'AB', 'ABC', 'ABCD', 'ABCDE', 'ABCDEF');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6422', () => {
    const query = `INSERT INTO multi_if_check(col1, col2, col3, col4, col5, col6, col7) VALUES(2, 'B', 'BC', 'BCD', 'BCDE', 'BCDEF', 'BCDEFG');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6423', () => {
    const query = `INSERT INTO multi_if_check(col1, col2, col3, col4, col5, col6, col7) VALUES(3, 'C', 'CD', 'CDE', 'CDEF', 'CDEFG', 'CDEFGH');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6424', () => {
    const query = `INSERT INTO multi_if_check(col1, col2, col3, col4, col5, col6, col7) VALUES(4, 'D', 'DE', 'DEF', 'DEFG', 'DEFGH', 'DEFGHI');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6425', () => {
    const query = `INSERT INTO multi_if_check(col1, col2, col3, col4, col5, col6, col7) VALUES(5, 'E', 'EF', 'EFG', 'EFGH', 'EFGHI', 'EFGHIJ');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6426', () => {
    const query = `INSERT INTO multi_if_check(col1, col2, col3, col4, col5, col6, col7) VALUES(6, 'F', 'FG', 'FGH', 'FGHI', 'FGHIJ', 'FGHIJK');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6427', () => {
    const query = `INSERT INTO multi_if_check(col1, col2, col3, col4, col5, col6, col7) VALUES(7, 'G', 'GH', 'GHI', 'GHIJ', 'GHIJK', 'GHIJKL');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6428', () => {
    const query = `INSERT INTO multi_if_check(col1, col2, col3, col4, col5, col6, col7) VALUES(8, 'H', 'HI', 'HIJ', 'HIJK', 'HIJKL', 'HIJKLM');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6429', () => {
    const query = `INSERT INTO multi_if_check(col1, col2, col3, col4, col5, col6, col7) VALUES(9, 'I', 'IJ', 'IJK', 'IJKL', 'IJKLM', 'IJKLMN');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6430', () => {
    const query = `INSERT INTO multi_if_check(col1, col2, col3, col4, col5, col6, col7) VALUES(10, 'J', 'JK', 'JKL', 'JKLM', 'JKLMN', 'JKLMNO');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6431', () => {
    const query = `INSERT INTO multi_if_check(col1) VALUES (11225),(20273),(213),(240),(12),(187),(29252);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6432', () => {
    const query = `INSERT INTO multi_if_check(col1) VALUES (1),(65),(208),(9),(154),(20),(191),(2),(66),(970),(56),(144),(49),(10317),(145),(21623),(225);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6433', () => {
    const query = `INSERT INTO multi_if_check(col1) VALUES (10658),(11182),(11036),(194),(16),(54),(23),(172),(10748),(52),(63),(11282),(237),(55),(190);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6434', () => {
    const query = `INSERT INTO multi_if_check(col1) VALUES (11162),(197),(4),(64),(17),(59),(51),(1091),(14),(13),(10645),(73),(157),(169),(43),(47),(11111);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6435', () => {
    const query = `INSERT INTO multi_if_check(col1) VALUES (11002),(99),(42),(142),(40),(20259),(15),(976),(11220),(193),(21),(3),(973),(35),(148),(10277),(10253);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6436', () => {
    const query = `INSERT INTO multi_if_check(col1) VALUES (155),(972),(159),(959),(39),(50),(236),(969),(114678),(143),(37),(20167),(20086),(10536),(28948),(10355);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6437', () => {
    const query = `INSERT INTO multi_if_check(col1) VALUES (7),(192),(11119),(67),(6),(8),(10841),(141),(10951),(222),(10752),(10363),(10842),(24881),(11287),(198);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6438', () => {
    const query = `INSERT INTO multi_if_check(col1) VALUES (11453),(26),(147),(44),(19),(76),(29349),(10987),(28896),(75),(11168),(11084),(62),(46),(10747),(24);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6439', () => {
    const query = `INSERT INTO multi_if_check(col1) VALUES (10664),(966),(11256),(53),(10945),(10871),(158),(20544),(20540),(163),(10262),(11080),(0),(11159),(239);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6440', () => {
    const query = `INSERT INTO multi_if_check(col1) VALUES (10995),(11),(11143),(11212),(24893),(10318),(68),(21949),(28),(971),(153),(10689),(38),(11474),(11029);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6441', () => {
    const query = `INSERT INTO multi_if_check(col1) VALUES (11067),(21636),(965),(10761),(10324),(164),(977),(45),(10),(10944),(964),(20224),(20536),(102880),(33);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6442', () => {
    const query = `INSERT INTO multi_if_check(col1) VALUES (11232),(10315),(78),(11217),(10373),(11514),(10343),(48),(22),(20197),(10367),(36),(11116),(195),(10274);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6443', () => {
    const query = `INSERT INTO multi_if_check(col1) VALUES (115),(11069),(30),(11266),(10891),(11235),(112529),(206),(10393),(10712),(10649),(11164),(10511),(10295);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6444', () => {
    const query = `INSERT INTO multi_if_check(col1) VALUES (11139),(10347),(146),(11079),(961),(11231),(10358),(10653),(11358),(165),(11115),(1095),(960),(10992),(20221);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6445', () => {
    const query = `INSERT INTO multi_if_check(col1) VALUES (5),(10716),(102),(974),(10691),(102444),(11391),(10897),(10306),(10298),(10896),(21609),(118),(11148),(11451);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6446', () => {
    const query = `INSERT INTO multi_if_check(col1) VALUES (10398),(221),(975),(80),(162),(28051),(10838),(10765),(1058),(11464),(74),(21134),(21422),(10313),(28401),(20539);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6447', () => {
    const query = `INSERT INTO multi_if_check(col1) VALUES (10418),(235),(25),(179),(26030),(28381),(11091),(27398),(11108),(968),(10300),(11469),(35393),(10733),(11283),(11202);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6448', () => {
    const query = `INSERT INTO multi_if_check VALUES ('1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6449', () => {
    const query = `INSERT INTO pk_set (n, host, code) VALUES (1, 'market', 100), (11, 'news', 100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6450', () => {
    const query = `INSERT INTO index_for_like (s) VALUES ('Hello'), ('Hello, World'), ('Hello, World 1'), ('Hello 1'), ('Goodbye'), ('Goodbye, World'), ('Goodbye 1'), ('Goodbye, World 1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6451', () => {
    const query = `INSERT INTO pk (x, y, z) VALUES (1, 11, 1235), (1, 11, 4395), (1, 22, 3545), (1, 22, 6984), (1, 33, 4596), (2, 11, 4563), (2, 11, 4578), (2, 11, 3572), (2, 22, 5786), (2, 22, 5786), (2, 22, 2791), (2, 22, 2791), (3, 33, 2791), (3, 33, 2791), (3, 33, 1235), (3, 44, 4935), (3, 44, 4578), (3, 55, 5786), (3, 55, 2791), (3, 55, 1235);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6452', () => {
    const query = `INSERT INTO sample_00314_1 (x) SELECT number AS x FROM system.numbers LIMIT 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6453', () => {
    const query = `INSERT INTO sample_00314_2 (x) SELECT number AS x FROM system.numbers LIMIT 2000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6454', () => {
    const query = `INSERT INTO array_pk VALUES ([1, 2, 3], 'Hello, world!', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6455', () => {
    const query = `INSERT INTO array_pk VALUES ([1, 2], 'Hello', 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6456', () => {
    const query = `INSERT INTO array_pk VALUES ([2], 'Goodbye', 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6457', () => {
    const query = `INSERT INTO array_pk VALUES ([], 'abc', 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6458', () => {
    const query = `INSERT INTO array_pk VALUES ([2, 3, 4], 'def', 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6459', () => {
    const query = `INSERT INTO array_pk VALUES ([5, 6], 'ghi', 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6460', () => {
    const query = `INSERT INTO FUNCTION file('data_00309_formats_case_insensitive', 'Csv') SELECT number, 'Hello & world' FROM numbers(3) SETTINGS engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6461', () => {
    const query = `INSERT INTO FUNCTION file('data_00309_formats_case_insensitive.cSv') SELECT number, 'Hello & world' FROM numbers(3) SETTINGS engine_file_truncate_on_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6462', () => {
    const query = `INSERT INTO test_00309_formats_case_insensitive SELECT number, 'Hello & world' FROM numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6463', () => {
    const query = `INSERT INTO insert VALUES (1, 'Hello', 'ab41bdd6-5cd4-11e7-907b-a6006ad3dba0', '2016-01-01', '2016-01-02 03:04:05', [1, 2, 3]), (1 + 1, concat('Hello', ', world'), toUUID('00000000-0000-0000-0000-000000000000'), toDate('2016-01-01') + 1, toStartOfMinute(toDateTime('2016-01-02 03:04:05')), [[0,1],[2]][1]), (round(pi()), concat('hello', ', world!'), toUUID(toString('ab41bdd6-5cd4-11e7-907b-a6006ad3dba0')), toDate(toDateTime('2016-01-03 03:04:05')), toStartOfHour(toDateTime('2016-01-02 03:04:05')), []), (4, 'World', 'ab41bdd6-5cd4-11e7-907b-a6006ad3dba0', '2016-01-04', '2016-12-11 10:09:08', [3,2,1]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6464', () => {
    const query = `insert into t_306 values (1); select 11111;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6465', () => {
    const query = `INSERT INTO log VALUES (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6466', () => {
    const query = `INSERT INTO log VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6467', () => {
    const query = `INSERT INTO log VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6468', () => {
    const query = `INSERT INTO enum (y) VALUES (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6469', () => {
    const query = `INSERT INTO enum (x) VALUES ('\\\\');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6470', () => {
    const query = `INSERT INTO enum (x) VALUES ('\\t\\\\t');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6471', () => {
    const query = `insert into enums (k) values (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6472', () => {
    const query = `insert into enums (e, sign, letter) values ('!', 'plus', 'b');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6473', () => {
    const query = `insert into enums (letter, e) values ('c', 'world');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6474', () => {
    const query = `insert into enums values ('d'), ('b'), ('a'), ('c'), ('a'), ('d');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6475', () => {
    const query = `INSERT INTO stripelog VALUES (1), (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6476', () => {
    const query = `INSERT INTO t_00284_str SELECT toString(number) FROM numbers_mt(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6477', () => {
    const query = `INSERT INTO t_00284_lc_str SELECT toString(number) FROM numbers_mt(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6478', () => {
    const query = `INSERT INTO merge (x) VALUES (1), (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6479', () => {
    const query = `INSERT INTO merge (x) VALUES (4), (5), (6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6480', () => {
    const query = `INSERT INTO merge (x) SELECT number      AS x FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6481', () => {
    const query = `INSERT INTO merge (x) SELECT number + 10 AS x FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6482', () => {
    const query = `INSERT INTO merge (x) SELECT number + 5 AS x FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6483', () => {
    const query = `INSERT INTO merge (x) SELECT number     AS x FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6484', () => {
    const query = `INSERT INTO merge (x) SELECT number + 9 AS x FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6485', () => {
    const query = `INSERT INTO merge (x) SELECT number + 5  AS x FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6486', () => {
    const query = `INSERT INTO merge (x) SELECT number + 100  AS x FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6487', () => {
    const query = `INSERT INTO merge (x) SELECT number AS x FROM (SELECT * FROM system.numbers LIMIT 8200) ORDER BY rand();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6488', () => {
    const query = `INSERT INTO merge (x) SELECT number AS x FROM (SELECT number FROM system.numbers LIMIT 10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6489', () => {
    const query = `INSERT INTO merge (x) SELECT number AS x FROM (SELECT number + 5000 AS number FROM system.numbers LIMIT 10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6490', () => {
    const query = `INSERT INTO sorted (x) SELECT intDiv(number, 100000) AS x FROM system.numbers LIMIT 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6491', () => {
    const query = `INSERT INTO sorted (x) SELECT (intHash64(number) % 1000 = 0 ? 999 : intDiv(number, 100000)) AS x FROM system.numbers LIMIT 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6492', () => {
    const query = `INSERT INTO sample_00276 (x) SELECT toUInt8(number) AS x FROM system.numbers LIMIT 256;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6493', () => {
    const query = `INSERT INTO sample_00276 (x) SELECT toUInt16(number) AS x FROM system.numbers LIMIT 65536;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6494', () => {
    const query = `INSERT INTO numbers_1001 SELECT number FROM system.numbers LIMIT 1001;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6495', () => {
    const query = `insert into aliases_test (id) values (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6496', () => {
    const query = `insert into numbers_10 select number from system.numbers limit 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6497', () => {
    const query = `INSERT INTO defaults (a) VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6498', () => {
    const query = `INSERT INTO elog_cut (uts, pr, ya_uid, adf_uid, owner_id) VALUES ('2015-01-01 01:02:03', 111, 123, 456, 789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6499', () => {
    const query = `INSERT INTO storage(UserID) values (6460432721393873721)(6460432721393873721)(6460432721393873721)(6460432721393873721)(6460432721393873721)(6460432721393873721)(6460432721393873721)(402895971392036118)(402895971392036118)(402895971392036118);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6500', () => {
    const query = `INSERT INTO attach_r1 VALUES ('2014-01-01'), ('2014-02-01'), ('2014-03-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6501', () => {
    const query = `INSERT INTO foo_00234(id) VALUES (0),(4),(1),(1),(3),(1),(1),(2),(2),(2),(1),(2),(3),(2),(1),(1),(2),(1),(1),(1),(3),(1),(2),(2),(1),(1),(3),(1),(2),(1),(1),(3),(2),(1),(1),(4),(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6502', () => {
    const query = `insert into prewhere_column_missing (x) values (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6503', () => {
    const query = `INSERT INTO deduplication (x) VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6504', () => {
    const query = `insert into sequence_test values (0,0),(1,0),(2,0),(3,0),(4,1),(5,2),(6,0),(7,0),(8,0),(9,0),(10,1),(11,1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6505', () => {
    const query = `INSERT INTO primary_key (x) VALUES (1), (2), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6506', () => {
    const query = `INSERT INTO primary_key (x) VALUES (1), (3), (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6507', () => {
    const query = `INSERT INTO primary_key (x) VALUES (2), (1), (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6508', () => {
    const query = `INSERT INTO primary_key (x) VALUES (2), (3), (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6509', () => {
    const query = `INSERT INTO primary_key (x) VALUES (3), (1), (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6510', () => {
    const query = `INSERT INTO primary_key (x) VALUES (3), (2), (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6511', () => {
    const query = `INSERT INTO test_00209 SELECT 1 AS x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6512', () => {
    const query = `INSERT INTO test_00209 SELECT 1 AS x SETTINGS extremes = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6513', () => {
    const query = `INSERT INTO test_00209 SELECT 1 AS x GROUP BY 1 WITH TOTALS;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6514', () => {
    const query = `INSERT INTO test_00209 SELECT 1 AS x GROUP BY 1 WITH TOTALS SETTINGS extremes = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6515', () => {
    const query = `INSERT INTO t1_00203 VALUES (1, 2, 3, 'aaa'), (2, 3, 4, 'bbb');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6516', () => {
    const query = `INSERT INTO t2_00203 VALUES ('ccc', 4, 3, 2), ('ddd', 7, 6, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6517', () => {
    const query = `INSERT INTO numbers_memory SELECT number FROM system.numbers LIMIT 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6518', () => {
    const query = `INSERT INTO parallel_replicas (x, u, s) VALUES (1, 2, 'A'),(3, 4, 'B'),(5, 6, 'C'),(7, 8, 'D'),(9,10,'E');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6519', () => {
    const query = `INSERT INTO parallel_replicas (x, u, s) VALUES (11, 12, 'F'),(13, 14, 'G'),(15, 16, 'H'),(17, 18, 'I'),(19,20,'J');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6520', () => {
    const query = `INSERT INTO parallel_replicas (x, u, s) VALUES (21, 22, 'K'),(23, 24, 'L'),(25, 26, 'M'),(27, 28, 'N'),(29,30,'O');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6521', () => {
    const query = `INSERT INTO parallel_replicas (x, u, s) VALUES (31, 32, 'P'),(33, 34, 'Q'),(35, 36, 'R'),(37, 38, 'S'),(39,40,'T');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6522', () => {
    const query = `INSERT INTO parallel_replicas (x, u, s) VALUES (41, 42, 'U'),(43, 44, 'V'),(45, 46, 'W'),(47, 48, 'X'),(49,50,'Y');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6523', () => {
    const query = `INSERT INTO parallel_replicas (x, u, s) VALUES (51, 52, 'Z');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6524', () => {
    const query = `INSERT INTO parallel_replicas_backup(d, x, u, s) SELECT d, x, u, s FROM parallel_replicas;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6525', () => {
    const query = `INSERT INTO aggregating_00191 (k, u) SELECT intDiv(number, 100) AS k, uniqState(toUInt64(number % 100)) AS u FROM (SELECT * FROM system.numbers LIMIT 1000) GROUP BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6526', () => {
    const query = `INSERT INTO aggregating_00191 (k, u) SELECT intDiv(number, 100) AS k, uniqState(toUInt64(number % 100) + 50) AS u FROM (SELECT * FROM system.numbers LIMIT 500, 1000) GROUP BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6527', () => {
    const query = `INSERT INTO series(i, x_value, y_value) VALUES (1, 5.6,-4.4),(2, -9.6,3),(3, -1.3,-4),(4, 5.3,9.7),(5, 4.4,0.037),(6, -8.6,-7.8),(7, 5.1,9.3),(8, 7.9,-3.6),(9, -8.2,0.62),(10, -3,7.3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6528', () => {
    const query = `INSERT INTO datetime64_index_tbl(ts) VALUES(toDateTime64('2023-05-27 00:00:00', 3, 'UTC'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6529', () => {
    const query = `INSERT INTO partition_by_ignore SELECT toDateTime('2022-08-03 00:00:00') + toIntervalDay(number), toDateTime('2022-08-04 00:00:00') + toIntervalDay(number) FROM numbers(60);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6530', () => {
    const query = `INSERT INTO mt_00168 (EventDate, UTCEventTime) VALUES ('2015-06-09', '2015-06-09 01:02:03');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6531', () => {
    const query = `INSERT INTO mt_00168_buffer (EventDate, UTCEventTime) VALUES ('2015-06-09', '2015-06-09 01:02:03');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6532', () => {
    const query = `INSERT INTO mt_00160 (x) SELECT number AS x FROM system.numbers LIMIT 100000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6533', () => {
    const query = `INSERT INTO mt_00160 (x, y, z) SELECT number AS x, number + 10 AS y, number / 2 AS z FROM system.numbers LIMIT 100000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6534', () => {
    const query = `INSERT INTO memory VALUES (1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6535', () => {
    const query = `INSERT INTO memory (x) VALUES (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6536', () => {
    const query = `INSERT INTO memory ( x) VALUES (3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6537', () => {
    const query = `INSERT INTO memory (x ) VALUES (4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6538', () => {
    const query = `INSERT INTO memory ( x ) VALUES (5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6539', () => {
    const query = `INSERT INTO memory(x)VALUES(6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6540', () => {
    const query = `INSERT INTO {CLICKHOUSE_DATABASE:Identifier}.mt_buffer_00158 (x) SELECT number AS x FROM system.numbers LIMIT 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6541', () => {
    const query = `insert into nested_map_multiple_values values (0,[1],[100],[1.0]),(1,[1],[100],[1.0]),(2,[1],[100],[1.0]),(3,[1,2],[100,150],[1.0,1.5]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6542', () => {
    const query = `insert into nested_map_multiple_values values (0,[2],[150],[-2.5]),(1,[1],[150],[-1.0]),(2,[1,2],[150,150],[2.5,3.5]),(3,[1],[-100],[-1]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6543', () => {
    const query = `insert into nested_not_a_map values (0,[1],[1],['2015-04-09'],[1],[100]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6544', () => {
    const query = `insert into nested_not_a_map values (0,[1],[1],['2015-04-08'],[1],[200]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6545', () => {
    const query = `insert into summing_merge_tree_aggregate_function select today() as d,
number as k,
uniqState(toUInt64(number % 500))
from numbers(5000)
group by d, k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6546', () => {
    const query = `insert into summing_merge_tree_aggregate_function select today() as d,
number + 5000 as k,
uniqState(toUInt64(number % 500))
from numbers(5000)
group by d, k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6547', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, 1, uniqState(1), uniqExactState(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6548', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, 1, uniqState(2), uniqExactState(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6549', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, 1, uniqState(3), uniqExactState(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6550', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, 1, uniqState(3), uniqExactState(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6551', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, 1, topKState(2)(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6552', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, 1, topKState(2)(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6553', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, 1, topKState(2)(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6554', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, 1, topKWeightedState(2)(1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6555', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, 1, topKWeightedState(2)(2, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6556', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, 1, topKWeightedState(2)(3, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6557', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, avgState(0.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6558', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, avgState(0.125);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6559', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, avgState(0.25);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6560', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, avgState(0.375);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6561', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, avgState(0.4375);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6562', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, avgState(0.5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6563', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, avgState(0.5625);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6564', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, avgState(0.625);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6565', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, avgState(0.75);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6566', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, avgState(0.875);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6567', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, avgState(1.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6568', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, quantileState(0.1)(0.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6569', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, quantileState(0.1)(0.1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6570', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, quantileState(0.1)(0.2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6571', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, quantileState(0.1)(0.3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6572', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, quantileState(0.1)(0.4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6573', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, quantileState(0.1)(0.5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6574', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, quantileState(0.1)(0.6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6575', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, quantileState(0.1)(0.7);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6576', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, quantileState(0.1)(0.8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6577', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, quantileState(0.1)(0.9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6578', () => {
    const query = `insert into summing_merge_tree_aggregate_function select 1, quantileState(0.1)(1.0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6579', () => {
    const query = `INSERT INTO alter_00147 (\`n.x\`) VALUES (['Hello', 'World']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6580', () => {
    const query = `INSERT INTO alter_00147 (\`n.x\`) VALUES (['Hello2', 'World2']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6581', () => {
    const query = `insert into nested_map (k, \`SomeMap.ID\`, \`SomeMap.Num\`) values (0,[1],[100]),(1,[1],[100]),(2,[1],[100]),(3,[1,2],[100,150]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6582', () => {
    const query = `insert into nested_map (k, \`SomeMap.ID\`, \`SomeMap.Num\`) values (0,[2],[150]),(1,[1],[150]),(2,[1,2],[150,150]),(3,[1],[-100]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6583', () => {
    const query = `insert into nested_map (k, \`SomeMap.ID\`, \`SomeMap.Num\`) values (0,['1'],[100]),(1,['1'],[100]),(2,['1'],[100]),(3,['1','2'],[100,150]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6584', () => {
    const query = `insert into nested_map (k, \`SomeMap.ID\`, \`SomeMap.Num\`) values (0,['2'],[150]),(1,['1'],[150]),(2,['1','2'],[150,150]),(3,['1'],[-100]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6585', () => {
    const query = `insert into nested_map_explicit (k, \`SomeIntExcluded\`, \`SomeMap.ID\`, \`SomeMap.Num\`) values (0, 20, [1],[100]),(1, 20, [1],[100]),(2, 20, [1],[100]),(3, 20, [1,2],[100,150]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6586', () => {
    const query = `insert into nested_map_explicit (k, \`SomeIntExcluded\`, \`SomeMap.ID\`, \`SomeMap.Num\`) values (0, 20, [2],[150]),(1, 20, [1],[150]),(2, 20, [1,2],[150,150]),(3, 20, [1],[-100]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6587', () => {
    const query = `INSERT INTO default (t) VALUES ('1234567890');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6588', () => {
    const query = `INSERT INTO prewhere VALUES ('2015-01-01', 'hello', 'world');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6589', () => {
    const query = `INSERT INTO prewhere VALUES ('2015-01-01', 'hello1', 'xxx', 'world1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6590', () => {
    const query = `INSERT INTO buffer_00126 VALUES (1, '2', [3]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6591', () => {
    const query = `INSERT INTO buffer_00126 (c, b, a) VALUES ([7], '8', 9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6592', () => {
    const query = `INSERT INTO buffer_00126 (a, c) VALUES (11, [33]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6593', () => {
    const query = `INSERT INTO report(id,event_date,priority,description) VALUES (1, '2015-01-01', 1, 'foo')(2, '2015-02-01', 2, 'bar')(3, '2015-03-01', 3, 'foo')(4, '2015-04-01', 4, 'bar')(5, '2015-05-01', 5, 'foo');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6594', () => {
    const query = `INSERT INTO alter_00121 VALUES ('2014-01-01', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6595', () => {
    const query = `INSERT INTO alter_00121 VALUES ('2014-01-01');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6596', () => {
    const query = `INSERT INTO alter_00121 VALUES ('2014-02-01', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6597', () => {
    const query = `INSERT INTO t2 VALUES ('abc', [0], 1), ('def', [1, 2], 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6598', () => {
    const query = `INSERT INTO t2 (k, s) VALUES (3, 'ghi');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6599', () => {
    const query = `INSERT INTO t2 (x, k) VALUES ([3, 4, 5], 4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6600', () => {
    const query = `INSERT INTO t2 VALUES (1, 'abc'), (2, 'def');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6601', () => {
    const query = `INSERT INTO t2 VALUES (6, 'ghi');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6602', () => {
    const query = `INSERT INTO null_00117 (a) VALUES ([1,2]), ([3, 4]), ([ 5 ,6]), ([	7  ,   8  	  ]), ([]), ([   ]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6603', () => {
    const query = `INSERT INTO null_00117 (b) VALUES ([ 'Hello' , 'World' ]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6604', () => {
    const query = `INSERT INTO null_00117 (c) VALUES ([	]), ([ [ ] ]), ([[],[]]), ([['2015-01-01', '2015-01-02'], ['2015-01-03', '2015-01-04']]);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6605', () => {
    const query = `INSERT INTO set VALUES ('Hello'), ('World');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6606', () => {
    const query = `INSERT INTO set2 VALUES ('Hello'), ('World');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6607', () => {
    const query = `INSERT INTO set2 VALUES ('abc'), ('World');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6608', () => {
    const query = `INSERT INTO numbers_mt SELECT * FROM system.numbers LIMIT 1, 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6609', () => {
    const query = `INSERT INTO numbers_mt SELECT * FROM system.numbers LIMIT 1, 1048575;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6610', () => {
    const query = `INSERT INTO report1(id,event_date,priority,description) VALUES (1, '2015-01-01', 1, 'foo')(2, '2015-02-01', 2, 'bar')(3, '2015-03-01', 3, 'foo')(4, '2015-04-01', 4, 'bar')(5, '2015-05-01', 5, 'foo');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6611', () => {
    const query = `INSERT INTO report2(id,event_date,priority,description) VALUES (1, '2016-01-01', 6, 'bar')(2, '2016-02-01', 7, 'foo')(3, '2016-03-01', 8, 'bar')(4, '2016-04-01', 9, 'foo')(5, '2016-05-01', 10, 'bar');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6612', () => {
    const query = `INSERT INTO data2013(name,value) VALUES('Alice', 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6613', () => {
    const query = `INSERT INTO data2013(name,value) VALUES('Bob', 2000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6614', () => {
    const query = `INSERT INTO data2013(name,value) VALUES('Carol', 5000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6615', () => {
    const query = `INSERT INTO data2015(data_name, data_value) VALUES('Foo', 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6616', () => {
    const query = `INSERT INTO data2015(data_name, data_value) VALUES('Bar', 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6617', () => {
    const query = `INSERT INTO data2014(name,value) VALUES('Alice', 2000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6618', () => {
    const query = `INSERT INTO data2014(name,value) VALUES('Bob', 2000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6619', () => {
    const query = `INSERT INTO data2014(name,value) VALUES('Dennis', 35000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6620', () => {
    const query = `INSERT INTO min_if SELECT emptyArrayUInt8() AS arr, '' AS str, toInt32(0) AS int FROM system.numbers LIMIT 100000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6621', () => {
    const query = `INSERT INTO min_if SELECT [1] AS arr, '2' AS str, toInt32(3) AS int;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6622', () => {
    const query = `INSERT INTO summing_merge_tree VALUES ('2000-01-01', 'Hello', 1, 2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6623', () => {
    const query = `INSERT INTO summing_merge_tree VALUES ('2000-01-01', 'Hello', 4, 5, 6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6624', () => {
    const query = `INSERT INTO summing_merge_tree VALUES ('2000-01-01', 'Goodbye', 1, 2, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6625', () => {
    const query = `INSERT INTO summing (k, s) VALUES (0, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6626', () => {
    const query = `INSERT INTO summing (k, s) VALUES (0, 1), (666, 1), (666, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6627', () => {
    const query = `INSERT INTO merge_tree VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6628', () => {
    const query = `INSERT INTO collapsing_merge_tree VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6629', () => {
    const query = `INSERT INTO versioned_collapsing_merge_tree VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6630', () => {
    const query = `INSERT INTO summing_merge_tree VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6631', () => {
    const query = `INSERT INTO summing_merge_tree_with_list_of_columns_to_sum VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6632', () => {
    const query = `INSERT INTO aggregating_merge_tree VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6633', () => {
    const query = `INSERT INTO merge_tree_with_sampling VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6634', () => {
    const query = `INSERT INTO collapsing_merge_tree_with_sampling VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6635', () => {
    const query = `INSERT INTO versioned_collapsing_merge_tree_with_sampling VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6636', () => {
    const query = `INSERT INTO summing_merge_tree_with_sampling VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6637', () => {
    const query = `INSERT INTO summing_merge_tree_with_sampling_with_list_of_columns_to_sum VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6638', () => {
    const query = `INSERT INTO aggregating_merge_tree_with_sampling VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6639', () => {
    const query = `INSERT INTO replicated_merge_tree VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6640', () => {
    const query = `INSERT INTO replicated_collapsing_merge_tree VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6641', () => {
    const query = `INSERT INTO replicated_versioned_collapsing_merge_tree VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6642', () => {
    const query = `INSERT INTO replicated_summing_merge_tree VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6643', () => {
    const query = `INSERT INTO replicated_summing_merge_tree_with_list_of_columns_to_sum VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6644', () => {
    const query = `INSERT INTO replicated_aggregating_merge_tree VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6645', () => {
    const query = `INSERT INTO replicated_merge_tree_with_sampling VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6646', () => {
    const query = `INSERT INTO replicated_collapsing_merge_tree_with_sampling VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6647', () => {
    const query = `INSERT INTO replicated_versioned_collapsing_merge_tree_with_sampling VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6648', () => {
    const query = `INSERT INTO replicated_summing_merge_tree_with_sampling VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6649', () => {
    const query = `INSERT INTO replicated_summing_merge_tree_with_sampling_with_list_of_columns_to_sum VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6650', () => {
    const query = `INSERT INTO replicated_aggregating_merge_tree_with_sampling VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6651', () => {
    const query = `insert into defaulted (col1) values (10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6652', () => {
    const query = `insert into defaulted (payload) values ('hello clickhouse');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6653', () => {
    const query = `insert into defaulted (payload) values ('some string');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6654', () => {
    const query = `INSERT INTO addresses(addr) VALUES ('00000000000000000000FFFFC1FC110A'), ('00000000000000000000FFFF4D583737'), ('00000000000000000000FFFF7F000001');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6655', () => {
    const query = `INSERT INTO insert_fewer_columns (a) VALUES (1), (2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6656', () => {
    const query = `INSERT INTO insert_fewer_columns_2 SELECT * FROM insert_fewer_columns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6657', () => {
    const query = `INSERT INTO check_query_tiny_log VALUES (1, 'A'), (2, 'B'), (3, 'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6658', () => {
    const query = `INSERT INTO check_query_log VALUES (1, 'A'), (2, 'B'), (3, 'C');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6659', () => {
    const query = `INSERT INTO replicated_alter1 VALUES ('2015-01-01', 10, 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6660', () => {
    const query = `INSERT INTO replicated_alter1 VALUES ('2015-01-01', 9, 41, '1992-01-01 08:00:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6661', () => {
    const query = `INSERT INTO replicated_alter1 VALUES ('2015-01-01', 8, 40, '2012-12-12 12:12:12', [1,2,3], ['12','13','14']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6662', () => {
    const query = `INSERT INTO replicated_alter1 VALUES ('2015-01-01', 7, 39, '2014-07-14 13:26:50', [10,20,30], ['120','130','140'],['2000-01-01','2000-01-01','2000-01-03']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6663', () => {
    const query = `INSERT INTO replicated_alter1 VALUES ('2015-01-01', 6,38,'2014-07-15 13:26:50',[10,20,30],['asd','qwe','qwe'],['2000-01-01','2000-01-01','2000-01-03'],'100500');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6664', () => {
    const query = `INSERT INTO alter_00061 VALUES ('2015-01-01', 10, 42);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6665', () => {
    const query = `INSERT INTO alter_00061 VALUES ('2015-01-01', 8, 40, [1,2,3], ['12','13','14']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6666', () => {
    const query = `INSERT INTO alter_00061 VALUES ('2015-01-01', 7, 39, [10,20,30], ['120','130','140'],['2000-01-01','2000-01-01','2000-01-03']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6667', () => {
    const query = `INSERT INTO alter_00061 VALUES ('2015-01-01', 6,38,[10,20,30],['asd','qwe','qwe'],['2000-01-01','2000-01-01','2000-01-03'],'100500');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6668', () => {
    const query = `INSERT INTO stored_aggregates SELECT
	toDate(toUInt16(toDate('2014-06-01')) + intDiv(number, 100)) AS d,
	uniqState(intDiv(number, 10)) AS Uniq
FROM
(
	SELECT * FROM system.numbers LIMIT 1000
)
GROUP BY d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6669', () => {
    const query = `INSERT INTO stored_aggregates SELECT
	toDate(toUInt16(toDate('2014-06-01')) + intDiv(number, 100)) AS d,
	uniqState(intDiv(number + 50, 10)) AS Uniq
FROM
(
	SELECT * FROM system.numbers LIMIT 500, 1000
)
GROUP BY d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6670', () => {
    const query = `INSERT INTO stored_aggregates SELECT
toDate(toUInt16(toDate('2014-06-01')) + intDiv(number, 100)) AS d,
uniqState(intDiv(number, 10)) AS Uniq
FROM
(
SELECT * FROM system.numbers LIMIT 1000
)
GROUP BY d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6671', () => {
    const query = `INSERT INTO stored_aggregates SELECT
toDate(toUInt16(toDate('2014-06-01')) + intDiv(number, 100)) AS d,
uniqState(intDiv(number + 50, 10)) AS Uniq
FROM
(
SELECT * FROM system.numbers LIMIT 500, 1000
)
GROUP BY d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6672', () => {
    const query = `INSERT INTO stored_aggregates SELECT
	toDate('2014-06-01') AS d,
	intDiv(number, 100) AS k1,
	toString(intDiv(number, 10)) AS k2,
	sumState(number) AS Sum,
	avgState(number) AS Avg,
	uniqState(toUInt64(number % 7)) AS Uniq,
	anyState(toString(number)) AS Any,
	anyIfState(toString(number), number % 7 = 0) AS AnyIf,
	quantilesState(0.5, 0.9)(number) AS Quantiles,
	groupArrayState(toString(number)) AS GroupArray
FROM
(
	SELECT * FROM system.numbers LIMIT 1000
)
GROUP BY d, k1, k2
ORDER BY d, k1, k2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6673', () => {
    const query = `INSERT INTO stored_aggregates SELECT
toDate('2014-06-01') AS d,
uniqState(number) AS Uniq
FROM
(
SELECT * FROM system.numbers LIMIT 1000
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6674', () => {
    const query = `INSERT INTO empty_summing VALUES ('2015-01-01', 1, 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6675', () => {
    const query = `INSERT INTO empty_summing VALUES ('2015-01-01', 1, -10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6676', () => {
    const query = `INSERT INTO empty_summing VALUES ('2015-01-01', 1, 4),('2015-01-01', 2, -9),('2015-01-01', 3, -14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6677', () => {
    const query = `INSERT INTO empty_summing VALUES ('2015-01-01', 1, -2),('2015-01-01', 1, -2),('2015-01-01', 3, 14);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6678', () => {
    const query = `INSERT INTO empty_summing VALUES ('2015-01-01', 1, 0),('2015-01-01', 3, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6679', () => {
    const query = `INSERT INTO big_array SELECT groupArray(number % 255) AS x FROM (SELECT * FROM system.numbers LIMIT 1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6680', () => {
    const query = `insert into array_element_test VALUES ([11,12,13], 2), ([11,12], 3), ([11,12,13], -1), ([11,12], -2), ([11,12], -3), ([11], 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6681', () => {
    const query = `insert into array_element_test VALUES ([11,12,13], 2), ([11,12], 3), ([11,12,13], 1), ([11,12], 4), ([11], 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6682', () => {
    const query = `insert into array_element_test VALUES (['Abc','Df','Q'], 2), (['Abc','DEFQ'], 3), (['ABC','Q','ERT'], -1), (['Ab','ber'], -2), (['AB','asd'], -3), (['A'], 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6683', () => {
    const query = `insert into array_element_test VALUES (['Abc','Df','Q'], 2), (['Abc','DEFQ'], 3), (['ABC','Q','ERT'], 1), (['Ab','ber'], 4), (['A'], 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6684', () => {
    const query = `insert into array_element_test VALUES (2), (1), (4), (3), (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[INSERT] should pass without errors: 6685', () => {
    const query = `insert into array_element_test VALUES (-2), (1), (-4), (3), (2), (-1), (4), (-3), (0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});
